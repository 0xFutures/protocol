{
  "contractName": "ContractForDifferenceRegistry",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "cfds",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "cfd",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "LogCFDRegistryNew",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "cfd",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "party",
          "type": "address"
        }
      ],
      "name": "LogCFDRegistryParty",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "cfd",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "sellingParty",
          "type": "address"
        }
      ],
      "name": "LogCFDRegistrySale",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_factory",
          "type": "address"
        }
      ],
      "name": "setFactory",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "fromCfd",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_cfd",
          "type": "address"
        },
        {
          "name": "_creator",
          "type": "address"
        }
      ],
      "name": "registerNew",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_party",
          "type": "address"
        }
      ],
      "name": "registerParty",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_sellingParty",
          "type": "address"
        }
      ],
      "name": "registerSale",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.6+commit.b259423e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"_cfd\",\"type\":\"address\"},{\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"registerNew\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fromCfd\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"cfds\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"setFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sellingParty\",\"type\":\"address\"}],\"name\":\"registerSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_party\",\"type\":\"address\"}],\"name\":\"registerParty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"cfd\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"LogCFDRegistryNew\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"cfd\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"party\",\"type\":\"address\"}],\"name\":\"LogCFDRegistryParty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"cfd\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"sellingParty\",\"type\":\"address\"}],\"name\":\"LogCFDRegistrySale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"isOwner()\":{\"return\":\"true if `msg.sender` is the owner of the contract.\"},\"owner()\":{\"return\":\"the address of the owner.\"},\"renounceOwnership()\":{\"details\":\"Allows the current owner to relinquish control of the contract.\"},\"transferOwnership(address)\":{\"details\":\"Allows the current owner to transfer control of the contract to a newOwner.\",\"params\":{\"newOwner\":\"The address to transfer ownership to.\"}}}},\"userdoc\":{\"methods\":{\"registerNew(address,address)\":{\"notice\":\"Register a new CFD contract and the creator of the contract.\\r The main purpose of this call is to Log an event that can be queried for\\r all existing CFDs.\\r\"},\"registerParty(address)\":{\"notice\":\"Register a new party being added to the contract. This would be from\\r either:\\r - a deposit() counterparty call at initiation times\\r - a transferPosition() transferring ownership to a new party.\\r - a buy() call where one side is sold to a new party.\\r      * The main purpose of this call is to Log an event that can be queried.\\r This is how we can get a list of all contracts a given address is\\r involved with.\\r\"},\"registerSale(address)\":{\"notice\":\"Register contract for sale.\\r\"},\"renounceOwnership()\":{\"notice\":\"Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore.\"}},\"notice\":\"Event logs for all CFD creations and every time a party joins a contract.\\r Kept in a single contract seperate from the CFDs here so that we have a way\\r to query all CFDs ever created. (event logs are queried per contract address)\\r\"}},\"settings\":{\"compilationTarget\":{\"/D/Users/Julien/Desktop/Work/0xFutures/protocol/contracts/cfd/ContractForDifferenceRegistry.sol\":\"ContractForDifferenceRegistry\"},\"evmVersion\":\"constantinople\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/D/Users/Julien/Desktop/Work/0xFutures/protocol/contracts/DBC.sol\":{\"keccak256\":\"0x3fcf0d97ad97399402274b04b62f704f714bd84e0cf8d173337cdc983f1e8608\",\"urls\":[\"bzzr://30f2233a4e3d87dc3a395f921d8aed6139f911bbfb1677fa696a39639bcd005b\"]},\"/D/Users/Julien/Desktop/Work/0xFutures/protocol/contracts/cfd/ContractForDifferenceRegistry.sol\":{\"keccak256\":\"0x46bb873f6ff66de667d60c5edeeb1b6f54dfb52ed7ca1d93370e175137c7f133\",\"urls\":[\"bzzr://8c29992e570faeeb71a303de73b0c309832f7cbf6ee5ef078fc5dfc5079ff432\"]},\"openzeppelin-solidity/contracts/ownership/Ownable.sol\":{\"keccak256\":\"0x980de387a1a020a498f53d00f89fecebb12c949a17e8f160093c0303ede2b786\",\"urls\":[\"bzzr://08894efa2a557982070beda6a81a032407e70532d24bdafe80d39660c74904d9\"]}},\"version\":1}",
  "bytecode": "0x60806040819052600080546001600160a01b03191633178082556001600160a01b0316917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3610671806100576000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063715018a611610071578063715018a61461016c57806381e8dfa2146101745780638da5cb5b1461019a5780638f32d59b146101be578063c45a0155146101c6578063f2fde38b146101ce576100a9565b80630596030d146100ae5780630d9f5aed146100de578063571a22dd146100fa5780635bb478081461012057806362c5970414610146575b600080fd5b6100dc600480360360408110156100c457600080fd5b506001600160a01b03813581169160200135166101f4565b005b6100e6610325565b604080519115158252519081900360200190f35b6100e66004803603602081101561011057600080fd5b50356001600160a01b0316610340565b6100dc6004803603602081101561013657600080fd5b50356001600160a01b0316610355565b6100dc6004803603602081101561015c57600080fd5b50356001600160a01b0316610388565b6100dc610450565b6100dc6004803603602081101561018a57600080fd5b50356001600160a01b03166104ab565b6101a2610547565b604080516001600160a01b039092168252519081900360200190f35b6100e6610556565b6101a2610567565b6100dc600480360360208110156101e457600080fd5b50356001600160a01b0316610576565b60015460408051808201909152601e81527f43616c6c6572206d757374206265207468652043464420466163746f7279000060208201526001600160a01b0390911633149080826102c657604051600160e51b62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561028b578181015183820152602001610273565b50505050905090810190601f1680156102b85780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506001600160a01b03808516600081815260026020526040808220805460ff1916600117905551928616927fd58bd0566ead9ed32659fb925d8d03f4bc085d137fafff69ba9d390275a6eaaf9190a361031f8484610593565b50505050565b3360009081526002602052604090205460ff16151560011490565b60026020526000908152604090205460ff1681565b61035d610556565b61036657600080fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b610390610325565b60408051808201909152601d81527f43616c6c6572206d75737420626520612043464420696e7374616e63650000006020820152808261041457604051600160e51b62461bcd02815260206004820181815283516024840152835190928392604490910191908501908083836000831561028b578181015183820152602001610273565b506040516001600160a01b0384169033907f15d100e262556a93dd6558ac262964e8c338b642a9a6530ee29521879cfb9f1a90600090a3505050565b610458610556565b61046157600080fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6104b3610325565b60408051808201909152601d81527f43616c6c6572206d75737420626520612043464420696e7374616e63650000006020820152808261053757604051600160e51b62461bcd02815260206004820181815283516024840152835190928392604490910191908501908083836000831561028b578181015183820152602001610273565b506105423384610593565b505050565b6000546001600160a01b031690565b6000546001600160a01b0316331490565b6001546001600160a01b031681565b61057e610556565b61058757600080fd5b610590816105d7565b50565b806001600160a01b0316826001600160a01b03167f5180589a8efb07c77a3318d1c34775bb649df9d3e93ac2a75a8e9747e3aaccd460405160405180910390a35050565b6001600160a01b0381166105ea57600080fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b039290921691909117905556fea165627a7a723058208f90c1920c40be1b08b324f1fb2c1937a4b8dd9925b06cca776f3362119a90900029",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c8063715018a611610071578063715018a61461016c57806381e8dfa2146101745780638da5cb5b1461019a5780638f32d59b146101be578063c45a0155146101c6578063f2fde38b146101ce576100a9565b80630596030d146100ae5780630d9f5aed146100de578063571a22dd146100fa5780635bb478081461012057806362c5970414610146575b600080fd5b6100dc600480360360408110156100c457600080fd5b506001600160a01b03813581169160200135166101f4565b005b6100e6610325565b604080519115158252519081900360200190f35b6100e66004803603602081101561011057600080fd5b50356001600160a01b0316610340565b6100dc6004803603602081101561013657600080fd5b50356001600160a01b0316610355565b6100dc6004803603602081101561015c57600080fd5b50356001600160a01b0316610388565b6100dc610450565b6100dc6004803603602081101561018a57600080fd5b50356001600160a01b03166104ab565b6101a2610547565b604080516001600160a01b039092168252519081900360200190f35b6100e6610556565b6101a2610567565b6100dc600480360360208110156101e457600080fd5b50356001600160a01b0316610576565b60015460408051808201909152601e81527f43616c6c6572206d757374206265207468652043464420466163746f7279000060208201526001600160a01b0390911633149080826102c657604051600160e51b62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561028b578181015183820152602001610273565b50505050905090810190601f1680156102b85780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506001600160a01b03808516600081815260026020526040808220805460ff1916600117905551928616927fd58bd0566ead9ed32659fb925d8d03f4bc085d137fafff69ba9d390275a6eaaf9190a361031f8484610593565b50505050565b3360009081526002602052604090205460ff16151560011490565b60026020526000908152604090205460ff1681565b61035d610556565b61036657600080fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b610390610325565b60408051808201909152601d81527f43616c6c6572206d75737420626520612043464420696e7374616e63650000006020820152808261041457604051600160e51b62461bcd02815260206004820181815283516024840152835190928392604490910191908501908083836000831561028b578181015183820152602001610273565b506040516001600160a01b0384169033907f15d100e262556a93dd6558ac262964e8c338b642a9a6530ee29521879cfb9f1a90600090a3505050565b610458610556565b61046157600080fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6104b3610325565b60408051808201909152601d81527f43616c6c6572206d75737420626520612043464420696e7374616e63650000006020820152808261053757604051600160e51b62461bcd02815260206004820181815283516024840152835190928392604490910191908501908083836000831561028b578181015183820152602001610273565b506105423384610593565b505050565b6000546001600160a01b031690565b6000546001600160a01b0316331490565b6001546001600160a01b031681565b61057e610556565b61058757600080fd5b610590816105d7565b50565b806001600160a01b0316826001600160a01b03167f5180589a8efb07c77a3318d1c34775bb649df9d3e93ac2a75a8e9747e3aaccd460405160405180910390a35050565b6001600160a01b0381166105ea57600080fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b039290921691909117905556fea165627a7a723058208f90c1920c40be1b08b324f1fb2c1937a4b8dd9925b06cca776f3362119a90900029",
  "sourceMap": "366:2391:8:-;;;;;515:6:17;:19;;-1:-1:-1;;;;;;515:19:17;524:10;515:19;;;;-1:-1:-1;;;;;582:6:17;;549:40;;515:6;;549:40;366:2391:8;;;;;;",
  "deployedSourceMap": "366:2391:8:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;366:2391:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1316:308;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;1316:308:8;;;;;;;;;;:::i;:::-;;1017:96;;;:::i;:::-;;;;;;;;;;;;;;;;;;872:36;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;872:36:8;-1:-1:-1;;;;;872:36:8;;:::i;917:92::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;917:92:8;-1:-1:-1;;;;;917:92:8;;:::i;2545:207::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2545:207:8;-1:-1:-1;;;;;2545:207:8;;:::i;1347:137:17:-;;;:::i;2118:192:8:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2118:192:8;-1:-1:-1;;;;;2118:192:8;;:::i;659:77:17:-;;;:::i;:::-;;;;-1:-1:-1;;;;;659:77:17;;;;;;;;;;;;;;979:90;;;:::i;841:22:8:-;;;:::i;1655:107:17:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1655:107:17;-1:-1:-1;;;;;1655:107:17;;:::i;1316:308:8:-;1442:7;;1451:33;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1442:7:8;;;1428:10;:21;;1451:33;1428:21;295:26:0;;;;-1:-1:-1;;;;;295:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;295:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;1502:10:8;;;;;;;:4;:10;;;;;;:17;;-1:-1:-1;;1502:17:8;1515:4;1502:17;;;1535:33;;;;;;;1502:10;1535:33;1579:37;1601:4;1607:8;1579:21;:37::i;:::-;1316:308;;;;:::o;1017:96::-;1086:10;1057:4;1081:16;;;:4;:16;;;;;;;;:24;;:16;:24;1017:96;:::o;872:36::-;;;;;;;;;;;;;;;:::o;917:92::-;863:9:17;:7;:9::i;:::-;855:18;;;;;;983:7:8;:18;;-1:-1:-1;;;;;;983:18:8;-1:-1:-1;;;;;983:18:8;;;;;;;;;;917:92::o;2545:207::-;2640:9;:7;:9::i;:::-;2651:25;;;;;;;;;;;;;;;;;;303:9:0;295:26;;;;-1:-1:-1;;;;;295:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;295:26:0;-1:-1:-1;2699:45:8;;-1:-1:-1;;;;;2699:45:8;;;2718:10;;2699:45;;;;;2545:207;;;:::o;1347:137:17:-;863:9;:7;:9::i;:::-;855:18;;;;;;1445:1;1429:6;;1408:40;;-1:-1:-1;;;;;1429:6:17;;;;1408:40;;1445:1;;1408:40;1475:1;1458:19;;-1:-1:-1;;;;;;1458:19:17;;;1347:137::o;2118:192:8:-;2207:9;:7;:9::i;:::-;2218:25;;;;;;;;;;;;;;;;;;303:9:0;295:26;;;;-1:-1:-1;;;;;295:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;295:26:0;;2261:41:8;2283:10;2295:6;2261:21;:41::i;:::-;2118:192;;;:::o;659:77:17:-;697:7;723:6;-1:-1:-1;;;;;723:6:17;659:77;:::o;979:90::-;1019:4;1056:6;-1:-1:-1;;;;;1056:6:17;1042:10;:20;;979:90::o;841:22:8:-;;;-1:-1:-1;;;;;841:22:8;;:::o;1655:107:17:-;863:9;:7;:9::i;:::-;855:18;;;;;;1727:28;1746:8;1727:18;:28::i;:::-;1655:107;:::o;2318:165:8:-;2468:6;-1:-1:-1;;;;;2442:33:8;2462:4;-1:-1:-1;;;;;2442:33:8;;;;;;;;;;;2318:165;;:::o;1906:183:17:-;-1:-1:-1;;;;;1979:22:17;;1971:31;;;;;;2038:6;;;2017:38;;-1:-1:-1;;;;;2017:38:17;;;;2038:6;;;2017:38;;;2065:6;:17;;-1:-1:-1;;;;;;2065:17:17;-1:-1:-1;;;;;2065:17:17;;;;;;;;;;1906:183::o",
  "source": "pragma solidity ^0.5.0;\r\n\r\nimport \"openzeppelin-solidity/contracts/ownership/Ownable.sol\";\r\nimport \"../DBC.sol\";\r\n\r\n/**\r\n * Event logs for all CFD creations and every time a party joins a contract.\r\n * Kept in a single contract seperate from the CFDs here so that we have a way\r\n * to query all CFDs ever created. (event logs are queried per contract address)\r\n */\r\ncontract ContractForDifferenceRegistry is DBC, Ownable {\r\n\r\n    event LogCFDRegistryNew(address indexed cfd, address indexed creator);\r\n    event LogCFDRegistryParty(address indexed cfd, address indexed party);\r\n    event LogCFDRegistrySale(address indexed cfd, address indexed sellingParty);\r\n\r\n    string constant REASON_CALLER_MUST_BE_CFD = \"Caller must be a CFD instance\";\r\n    string constant REASON_CALLER_MUST_BE_CFD_FACTORY = \"Caller must be the CFD Factory\";\r\n\r\n    address public factory;\r\n\r\n    mapping(address => bool) public cfds;\r\n\r\n    function setFactory(address _factory) public onlyOwner {\r\n        factory = _factory;\r\n    }\r\n\r\n    function fromCfd() public view returns (bool) {\r\n        return cfds[msg.sender] == true;\r\n    }\r\n\r\n    /**\r\n     * Register a new CFD contract and the creator of the contract.\r\n     * The main purpose of this call is to Log an event that can be queried for\r\n     * all existing CFDs.\r\n     */\r\n    function registerNew(\r\n        address _cfd,\r\n        address _creator\r\n    )\r\n        public\r\n        pre_cond(msg.sender == factory, REASON_CALLER_MUST_BE_CFD_FACTORY)\r\n    {\r\n        cfds[_cfd] = true;\r\n        emit LogCFDRegistryNew(_cfd, _creator);\r\n        registerPartyInternal(_cfd, _creator);\r\n    }\r\n\r\n    /**\r\n     * Register a new party being added to the contract. This would be from\r\n     * either:\r\n     * - a deposit() counterparty call at initiation times\r\n     * - a transferPosition() transferring ownership to a new party.\r\n     * - a buy() call where one side is sold to a new party.\r\n     *\r\n     * The main purpose of this call is to Log an event that can be queried.\r\n     * This is how we can get a list of all contracts a given address is\r\n     * involved with.\r\n     */\r\n    function registerParty(\r\n        address _party\r\n    )\r\n        public\r\n        pre_cond(fromCfd(), REASON_CALLER_MUST_BE_CFD)\r\n    {\r\n        registerPartyInternal(msg.sender, _party);\r\n    }\r\n\r\n    function registerPartyInternal(\r\n        address _cfd,\r\n        address _party\r\n    )\r\n        private\r\n    {\r\n        emit LogCFDRegistryParty(_cfd, _party);\r\n    }\r\n\r\n    /**\r\n     * Register contract for sale.\r\n     */\r\n    function registerSale(\r\n        address _sellingParty\r\n    )\r\n        public\r\n        pre_cond(fromCfd(), REASON_CALLER_MUST_BE_CFD)\r\n    {\r\n        emit LogCFDRegistrySale(msg.sender, _sellingParty);\r\n    }\r\n\r\n}\r\n",
  "sourcePath": "D:\\Users\\Julien\\Desktop\\Work\\0xFutures\\protocol\\contracts\\cfd\\ContractForDifferenceRegistry.sol",
  "compiler": {
    "name": "solc",
    "version": "0.5.6+commit.b259423e.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.8",
  "updatedAt": "2020-01-04T15:21:55.721Z",
  "devdoc": {
    "methods": {
      "isOwner()": {
        "return": "true if `msg.sender` is the owner of the contract."
      },
      "owner()": {
        "return": "the address of the owner."
      },
      "renounceOwnership()": {
        "details": "Allows the current owner to relinquish control of the contract."
      },
      "transferOwnership(address)": {
        "details": "Allows the current owner to transfer control of the contract to a newOwner.",
        "params": {
          "newOwner": "The address to transfer ownership to."
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "registerNew(address,address)": {
        "notice": "Register a new CFD contract and the creator of the contract.\r The main purpose of this call is to Log an event that can be queried for\r all existing CFDs.\r"
      },
      "registerParty(address)": {
        "notice": "Register a new party being added to the contract. This would be from\r either:\r - a deposit() counterparty call at initiation times\r - a transferPosition() transferring ownership to a new party.\r - a buy() call where one side is sold to a new party.\r      * The main purpose of this call is to Log an event that can be queried.\r This is how we can get a list of all contracts a given address is\r involved with.\r"
      },
      "registerSale(address)": {
        "notice": "Register contract for sale.\r"
      },
      "renounceOwnership()": {
        "notice": "Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore."
      }
    },
    "notice": "Event logs for all CFD creations and every time a party joins a contract.\r Kept in a single contract seperate from the CFDs here so that we have a way\r to query all CFDs ever created. (event logs are queried per contract address)\r"
  }
}