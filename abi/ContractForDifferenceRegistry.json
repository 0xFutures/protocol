{
  "contractName": "ContractForDifferenceRegistry",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "cfds",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "cfd",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "LogCFDRegistryNew",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "cfd",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "party",
          "type": "address"
        }
      ],
      "name": "LogCFDRegistryParty",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "cfd",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "sellingParty",
          "type": "address"
        }
      ],
      "name": "LogCFDRegistrySale",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_factory",
          "type": "address"
        }
      ],
      "name": "setFactory",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "fromCfd",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_cfd",
          "type": "address"
        },
        {
          "name": "_creator",
          "type": "address"
        }
      ],
      "name": "registerNew",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_party",
          "type": "address"
        }
      ],
      "name": "registerParty",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_sellingParty",
          "type": "address"
        }
      ],
      "name": "registerSale",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.6+commit.b259423e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"_cfd\",\"type\":\"address\"},{\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"registerNew\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fromCfd\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"cfds\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"setFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sellingParty\",\"type\":\"address\"}],\"name\":\"registerSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_party\",\"type\":\"address\"}],\"name\":\"registerParty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"cfd\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"LogCFDRegistryNew\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"cfd\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"party\",\"type\":\"address\"}],\"name\":\"LogCFDRegistryParty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"cfd\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"sellingParty\",\"type\":\"address\"}],\"name\":\"LogCFDRegistrySale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"isOwner()\":{\"return\":\"true if `msg.sender` is the owner of the contract.\"},\"owner()\":{\"return\":\"the address of the owner.\"},\"renounceOwnership()\":{\"details\":\"Allows the current owner to relinquish control of the contract.\"},\"transferOwnership(address)\":{\"details\":\"Allows the current owner to transfer control of the contract to a newOwner.\",\"params\":{\"newOwner\":\"The address to transfer ownership to.\"}}}},\"userdoc\":{\"methods\":{\"registerNew(address,address)\":{\"notice\":\"Register a new CFD contract and the creator of the contract. The main purpose of this call is to Log an event that can be queried for all existing CFDs.\"},\"registerParty(address)\":{\"notice\":\"Register a new party being added to the contract. This would be from either: - a deposit() counterparty call at initiation times - a transferPosition() transferring ownership to a new party. - a buy() call where one side is sold to a new party.     * The main purpose of this call is to Log an event that can be queried. This is how we can get a list of all contracts a given address is involved with.\"},\"registerSale(address)\":{\"notice\":\"Register contract for sale.\"},\"renounceOwnership()\":{\"notice\":\"Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore.\"}},\"notice\":\"Event logs for all CFD creations and every time a party joins a contract. Kept in a single contract seperate from the CFDs here so that we have a way to query all CFDs ever created. (event logs are queried per contract address)\"}},\"settings\":{\"compilationTarget\":{\"/home/julien/0xFutures/protocol-master/contracts/cfd/ContractForDifferenceRegistry.sol\":\"ContractForDifferenceRegistry\"},\"evmVersion\":\"constantinople\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/home/julien/0xFutures/protocol-master/contracts/DBC.sol\":{\"keccak256\":\"0xc9c8bf071e0f5bff796bfde919237f33136d8c18a89dec61a52a0391fc76c256\",\"urls\":[\"bzzr://b44dfa0ecd91495eb61d07322588ebc1ea50fadd8bc22464e94c3d070a6b6ea1\"]},\"/home/julien/0xFutures/protocol-master/contracts/cfd/ContractForDifferenceRegistry.sol\":{\"keccak256\":\"0x95e4f89bfe51d9891bacc827672920154e2ed3987907acc99e9b42b75267063f\",\"urls\":[\"bzzr://af86789feedb2e75d3cc5620db2f00b19d255b00b5586f3a9fb6ca0cff1219f6\"]},\"openzeppelin-solidity/contracts/ownership/Ownable.sol\":{\"keccak256\":\"0x980de387a1a020a498f53d00f89fecebb12c949a17e8f160093c0303ede2b786\",\"urls\":[\"bzzr://08894efa2a557982070beda6a81a032407e70532d24bdafe80d39660c74904d9\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600080546001600160a01b03191633178082556040516001600160a01b039190911691907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3610671806100696000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063715018a611610071578063715018a61461016c57806381e8dfa2146101745780638da5cb5b1461019a5780638f32d59b146101be578063c45a0155146101c6578063f2fde38b146101ce576100a9565b80630596030d146100ae5780630d9f5aed146100de578063571a22dd146100fa5780635bb478081461012057806362c5970414610146575b600080fd5b6100dc600480360360408110156100c457600080fd5b506001600160a01b03813581169160200135166101f4565b005b6100e6610325565b604080519115158252519081900360200190f35b6100e66004803603602081101561011057600080fd5b50356001600160a01b0316610340565b6100dc6004803603602081101561013657600080fd5b50356001600160a01b0316610355565b6100dc6004803603602081101561015c57600080fd5b50356001600160a01b0316610388565b6100dc610450565b6100dc6004803603602081101561018a57600080fd5b50356001600160a01b03166104ab565b6101a2610547565b604080516001600160a01b039092168252519081900360200190f35b6100e6610556565b6101a2610567565b6100dc600480360360208110156101e457600080fd5b50356001600160a01b0316610576565b60015460408051808201909152601e81527f43616c6c6572206d757374206265207468652043464420466163746f7279000060208201526001600160a01b0390911633149080826102c657604051600160e51b62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561028b578181015183820152602001610273565b50505050905090810190601f1680156102b85780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506001600160a01b03808516600081815260026020526040808220805460ff1916600117905551928616927fd58bd0566ead9ed32659fb925d8d03f4bc085d137fafff69ba9d390275a6eaaf9190a361031f8484610593565b50505050565b3360009081526002602052604090205460ff16151560011490565b60026020526000908152604090205460ff1681565b61035d610556565b61036657600080fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b610390610325565b60408051808201909152601d81527f43616c6c6572206d75737420626520612043464420696e7374616e63650000006020820152808261041457604051600160e51b62461bcd02815260206004820181815283516024840152835190928392604490910191908501908083836000831561028b578181015183820152602001610273565b506040516001600160a01b0384169033907f15d100e262556a93dd6558ac262964e8c338b642a9a6530ee29521879cfb9f1a90600090a3505050565b610458610556565b61046157600080fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6104b3610325565b60408051808201909152601d81527f43616c6c6572206d75737420626520612043464420696e7374616e63650000006020820152808261053757604051600160e51b62461bcd02815260206004820181815283516024840152835190928392604490910191908501908083836000831561028b578181015183820152602001610273565b506105423384610593565b505050565b6000546001600160a01b031690565b6000546001600160a01b0316331490565b6001546001600160a01b031681565b61057e610556565b61058757600080fd5b610590816105d7565b50565b806001600160a01b0316826001600160a01b03167f5180589a8efb07c77a3318d1c34775bb649df9d3e93ac2a75a8e9747e3aaccd460405160405180910390a35050565b6001600160a01b0381166105ea57600080fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b039290921691909117905556fea165627a7a723058204390f41fe7501df738f22eee571817599f2037621e425299507f8836f375f3f90029",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c8063715018a611610071578063715018a61461016c57806381e8dfa2146101745780638da5cb5b1461019a5780638f32d59b146101be578063c45a0155146101c6578063f2fde38b146101ce576100a9565b80630596030d146100ae5780630d9f5aed146100de578063571a22dd146100fa5780635bb478081461012057806362c5970414610146575b600080fd5b6100dc600480360360408110156100c457600080fd5b506001600160a01b03813581169160200135166101f4565b005b6100e6610325565b604080519115158252519081900360200190f35b6100e66004803603602081101561011057600080fd5b50356001600160a01b0316610340565b6100dc6004803603602081101561013657600080fd5b50356001600160a01b0316610355565b6100dc6004803603602081101561015c57600080fd5b50356001600160a01b0316610388565b6100dc610450565b6100dc6004803603602081101561018a57600080fd5b50356001600160a01b03166104ab565b6101a2610547565b604080516001600160a01b039092168252519081900360200190f35b6100e6610556565b6101a2610567565b6100dc600480360360208110156101e457600080fd5b50356001600160a01b0316610576565b60015460408051808201909152601e81527f43616c6c6572206d757374206265207468652043464420466163746f7279000060208201526001600160a01b0390911633149080826102c657604051600160e51b62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561028b578181015183820152602001610273565b50505050905090810190601f1680156102b85780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506001600160a01b03808516600081815260026020526040808220805460ff1916600117905551928616927fd58bd0566ead9ed32659fb925d8d03f4bc085d137fafff69ba9d390275a6eaaf9190a361031f8484610593565b50505050565b3360009081526002602052604090205460ff16151560011490565b60026020526000908152604090205460ff1681565b61035d610556565b61036657600080fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b610390610325565b60408051808201909152601d81527f43616c6c6572206d75737420626520612043464420696e7374616e63650000006020820152808261041457604051600160e51b62461bcd02815260206004820181815283516024840152835190928392604490910191908501908083836000831561028b578181015183820152602001610273565b506040516001600160a01b0384169033907f15d100e262556a93dd6558ac262964e8c338b642a9a6530ee29521879cfb9f1a90600090a3505050565b610458610556565b61046157600080fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6104b3610325565b60408051808201909152601d81527f43616c6c6572206d75737420626520612043464420696e7374616e63650000006020820152808261053757604051600160e51b62461bcd02815260206004820181815283516024840152835190928392604490910191908501908083836000831561028b578181015183820152602001610273565b506105423384610593565b505050565b6000546001600160a01b031690565b6000546001600160a01b0316331490565b6001546001600160a01b031681565b61057e610556565b61058757600080fd5b610590816105d7565b50565b806001600160a01b0316826001600160a01b03167f5180589a8efb07c77a3318d1c34775bb649df9d3e93ac2a75a8e9747e3aaccd460405160405180910390a35050565b6001600160a01b0381166105ea57600080fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b039290921691909117905556fea165627a7a723058204390f41fe7501df738f22eee571817599f2037621e425299507f8836f375f3f90029",
  "sourceMap": "356:2346:8:-;;;894:28;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;515:6:19;:19;;-1:-1:-1;;;;;;515:19:19;524:10;515:19;;;;549:40;;-1:-1:-1;;;;;582:6:19;;;;;515;549:40;;515:6;;549:40;356:2346:8;;;;;;",
  "deployedSourceMap": "356:2346:8:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;356:2346:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1314:298;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;1314:298:8;;;;;;;;;;:::i;:::-;;1024:94;;;:::i;:::-;;;;;;;;;;;;;;;;;;851:36;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;851:36:8;-1:-1:-1;;;;;851:36:8;;:::i;928:90::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;928:90:8;-1:-1:-1;;;;;928:90:8;;:::i;2499:200::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2499:200:8;-1:-1:-1;;;;;2499:200:8;;:::i;1347:137:19:-;;;:::i;2093:185:8:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2093:185:8;-1:-1:-1;;;;;2093:185:8;;:::i;659:77:19:-;;;:::i;:::-;;;;-1:-1:-1;;;;;659:77:19;;;;;;;;;;;;;;979:90;;;:::i;822:22:8:-;;;:::i;1655:107:19:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1655:107:19;-1:-1:-1;;;;;1655:107:19;;:::i;1314:298:8:-;1435:7;;1444:33;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1435:7:8;;;1421:10;:21;;1444:33;1421:21;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;1493:10:8;;;;;;;:4;:10;;;;;;:17;;-1:-1:-1;;1493:17:8;1506:4;1493:17;;;1525:33;;;;;;;1493:10;1525:33;1568:37;1590:4;1596:8;1568:21;:37::i;:::-;1314:298;;;;:::o;1024:94::-;1092:10;1064:4;1087:16;;;:4;:16;;;;;;;;:24;;:16;:24;1024:94;:::o;851:36::-;;;;;;;;;;;;;;;:::o;928:90::-;863:9:19;:7;:9::i;:::-;855:18;;;;;;993:7:8;:18;;-1:-1:-1;;;;;;993:18:8;-1:-1:-1;;;;;993:18:8;;;;;;;;;;928:90::o;2499:200::-;2590:9;:7;:9::i;:::-;2601:25;;;;;;;;;;;;;;;;;;293:9:0;285:26;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;2647:45:8;;-1:-1:-1;;;;;2647:45:8;;;2666:10;;2647:45;;;;;2499:200;;;:::o;1347:137:19:-;863:9;:7;:9::i;:::-;855:18;;;;;;1445:1;1429:6;;1408:40;;-1:-1:-1;;;;;1429:6:19;;;;1408:40;;1445:1;;1408:40;1475:1;1458:19;;-1:-1:-1;;;;;;1458:19:19;;;1347:137::o;2093:185:8:-;2178:9;:7;:9::i;:::-;2189:25;;;;;;;;;;;;;;;;;;293:9:0;285:26;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;2230:41:8;2252:10;2264:6;2230:21;:41::i;:::-;2093:185;;;:::o;659:77:19:-;697:7;723:6;-1:-1:-1;;;;;723:6:19;659:77;:::o;979:90::-;1019:4;1056:6;-1:-1:-1;;;;;1056:6:19;1042:10;:20;;979:90::o;822:22:8:-;;;-1:-1:-1;;;;;822:22:8;;:::o;1655:107:19:-;863:9;:7;:9::i;:::-;855:18;;;;;;1727:28;1746:8;1727:18;:28::i;:::-;1655:107;:::o;2284:158:8:-;2428:6;-1:-1:-1;;;;;2402:33:8;2422:4;-1:-1:-1;;;;;2402:33:8;;;;;;;;;;;2284:158;;:::o;1906:183:19:-;-1:-1:-1;;;;;1979:22:19;;1971:31;;;;;;2038:6;;;2017:38;;-1:-1:-1;;;;;2017:38:19;;;;2038:6;;;2017:38;;;2065:6;:17;;-1:-1:-1;;;;;;2065:17:19;-1:-1:-1;;;;;2065:17:19;;;;;;;;;;1906:183::o",
  "source": "pragma solidity ^0.5.0;\n\nimport \"openzeppelin-solidity/contracts/ownership/Ownable.sol\";\nimport \"../DBC.sol\";\n\n/**\n * Event logs for all CFD creations and every time a party joins a contract.\n * Kept in a single contract seperate from the CFDs here so that we have a way\n * to query all CFDs ever created. (event logs are queried per contract address)\n */\ncontract ContractForDifferenceRegistry is DBC, Ownable {\n\n    event LogCFDRegistryNew(address indexed cfd, address indexed creator);\n    event LogCFDRegistryParty(address indexed cfd, address indexed party);\n    event LogCFDRegistrySale(address indexed cfd, address indexed sellingParty);\n\n    string constant REASON_CALLER_MUST_BE_CFD = \"Caller must be a CFD instance\";\n    string constant REASON_CALLER_MUST_BE_CFD_FACTORY = \"Caller must be the CFD Factory\";\n\n    address public factory;\n\n    mapping(address => bool) public cfds;\n\n    constructor() public {\n    }\n\n    function setFactory(address _factory) public onlyOwner {\n        factory = _factory;\n    }\n\n    function fromCfd() public view returns (bool) {\n        return cfds[msg.sender] == true;\n    }\n\n    /**\n     * Register a new CFD contract and the creator of the contract.\n     * The main purpose of this call is to Log an event that can be queried for\n     * all existing CFDs.\n     */\n    function registerNew(\n        address _cfd,\n        address _creator\n    )\n        public\n        pre_cond(msg.sender == factory, REASON_CALLER_MUST_BE_CFD_FACTORY)\n    {\n        cfds[_cfd] = true;\n        emit LogCFDRegistryNew(_cfd, _creator);\n        registerPartyInternal(_cfd, _creator);\n    }\n\n    /**\n     * Register a new party being added to the contract. This would be from\n     * either:\n     * - a deposit() counterparty call at initiation times\n     * - a transferPosition() transferring ownership to a new party.\n     * - a buy() call where one side is sold to a new party.\n     *\n     * The main purpose of this call is to Log an event that can be queried.\n     * This is how we can get a list of all contracts a given address is\n     * involved with.\n     */\n    function registerParty(\n        address _party\n    )\n        public\n        pre_cond(fromCfd(), REASON_CALLER_MUST_BE_CFD)\n    {\n        registerPartyInternal(msg.sender, _party);\n    }\n\n    function registerPartyInternal(\n        address _cfd,\n        address _party\n    )\n        private\n    {\n        emit LogCFDRegistryParty(_cfd, _party);\n    }\n\n    /**\n     * Register contract for sale.\n     */\n    function registerSale(\n        address _sellingParty\n    )\n        public\n        pre_cond(fromCfd(), REASON_CALLER_MUST_BE_CFD)\n    {\n        emit LogCFDRegistrySale(msg.sender, _sellingParty);\n    }\n\n}\n",
  "sourcePath": "/home/julien/0xFutures/protocol-master/contracts/cfd/ContractForDifferenceRegistry.sol",
  "compiler": {
    "name": "solc",
    "version": "0.5.6+commit.b259423e.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.8",
  "updatedAt": "2019-05-16T22:34:48.310Z",
  "devdoc": {
    "methods": {
      "isOwner()": {
        "return": "true if `msg.sender` is the owner of the contract."
      },
      "owner()": {
        "return": "the address of the owner."
      },
      "renounceOwnership()": {
        "details": "Allows the current owner to relinquish control of the contract."
      },
      "transferOwnership(address)": {
        "details": "Allows the current owner to transfer control of the contract to a newOwner.",
        "params": {
          "newOwner": "The address to transfer ownership to."
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "registerNew(address,address)": {
        "notice": "Register a new CFD contract and the creator of the contract. The main purpose of this call is to Log an event that can be queried for all existing CFDs."
      },
      "registerParty(address)": {
        "notice": "Register a new party being added to the contract. This would be from either: - a deposit() counterparty call at initiation times - a transferPosition() transferring ownership to a new party. - a buy() call where one side is sold to a new party.     * The main purpose of this call is to Log an event that can be queried. This is how we can get a list of all contracts a given address is involved with."
      },
      "registerSale(address)": {
        "notice": "Register contract for sale."
      },
      "renounceOwnership()": {
        "notice": "Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore."
      }
    },
    "notice": "Event logs for all CFD creations and every time a party joins a contract. Kept in a single contract seperate from the CFDs here so that we have a way to query all CFDs ever created. (event logs are queried per contract address)"
  }
}