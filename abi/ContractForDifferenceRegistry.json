{
  "contractName": "ContractForDifferenceRegistry",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "cfds",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "cfd",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "LogCFDRegistryNew",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "cfd",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "party",
          "type": "address"
        }
      ],
      "name": "LogCFDRegistryParty",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "cfd",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "sellingParty",
          "type": "address"
        }
      ],
      "name": "LogCFDRegistrySale",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "previousOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipRenounced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_factory",
          "type": "address"
        }
      ],
      "name": "setFactory",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "fromCfd",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_cfd",
          "type": "address"
        },
        {
          "name": "_creator",
          "type": "address"
        }
      ],
      "name": "registerNew",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_party",
          "type": "address"
        }
      ],
      "name": "registerParty",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_sellingParty",
          "type": "address"
        }
      ],
      "name": "registerSale",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "0x608060405234801561001057600080fd5b5060008054600160a060020a031916331790556106ea806100326000396000f3006080604052600436106100a35763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630596030d81146100a85780630d9f5aed146100d1578063571a22dd146100fa5780635bb478081461011b57806362c597041461013c578063715018a61461015d57806381e8dfa2146101725780638da5cb5b14610193578063c45a0155146101c4578063f2fde38b146101d9575b600080fd5b3480156100b457600080fd5b506100cf600160a060020a03600435811690602435166101fa565b005b3480156100dd57600080fd5b506100e6610342565b604080519115158252519081900360200190f35b34801561010657600080fd5b506100e6600160a060020a036004351661035d565b34801561012757600080fd5b506100cf600160a060020a0360043516610372565b34801561014857600080fd5b506100cf600160a060020a03600435166103b8565b34801561016957600080fd5b506100cf61049a565b34801561017e57600080fd5b506100cf600160a060020a0360043516610506565b34801561019f57600080fd5b506101a86105bc565b60408051600160a060020a039092168252519081900360200190f35b3480156101d057600080fd5b506101a86105cb565b3480156101e557600080fd5b506100cf600160a060020a03600435166105da565b60015460408051808201909152601e81527f43616c6c6572206d757374206265207468652043464420466163746f727900006020820152600160a060020a0390911633149080826102e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156102a8578181015183820152602001610290565b50505050905090810190601f1680156102d55780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600160a060020a03808516600081815260026020526040808220805460ff1916600117905551928616927fd58bd0566ead9ed32659fb925d8d03f4bc085d137fafff69ba9d390275a6eaaf9190a361033c84846105fd565b50505050565b3360009081526002602052604090205460ff16151560011490565b60026020526000908152604090205460ff1681565b600054600160a060020a0316331461038957600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6103c0610342565b60408051808201909152601d81527f43616c6c6572206d75737420626520612043464420696e7374616e636500000060208201528082151561045e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102a8578181015183820152602001610290565b50604051600160a060020a0384169033907f15d100e262556a93dd6558ac262964e8c338b642a9a6530ee29521879cfb9f1a90600090a3505050565b600054600160a060020a031633146104b157600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b61050e610342565b60408051808201909152601d81527f43616c6c6572206d75737420626520612043464420696e7374616e63650000006020820152808215156105ac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102a8578181015183820152602001610290565b506105b733846105fd565b505050565b600054600160a060020a031681565b600154600160a060020a031681565b600054600160a060020a031633146105f157600080fd5b6105fa81610641565b50565b80600160a060020a031682600160a060020a03167f5180589a8efb07c77a3318d1c34775bb649df9d3e93ac2a75a8e9747e3aaccd460405160405180910390a35050565b600160a060020a038116151561065657600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a72305820f7883c31d9c26bb1aa1a279af71620b0e5fa74077b6e3f2b3c453b8c60e5e1420029",
  "deployedBytecode": "0x6080604052600436106100a35763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630596030d81146100a85780630d9f5aed146100d1578063571a22dd146100fa5780635bb478081461011b57806362c597041461013c578063715018a61461015d57806381e8dfa2146101725780638da5cb5b14610193578063c45a0155146101c4578063f2fde38b146101d9575b600080fd5b3480156100b457600080fd5b506100cf600160a060020a03600435811690602435166101fa565b005b3480156100dd57600080fd5b506100e6610342565b604080519115158252519081900360200190f35b34801561010657600080fd5b506100e6600160a060020a036004351661035d565b34801561012757600080fd5b506100cf600160a060020a0360043516610372565b34801561014857600080fd5b506100cf600160a060020a03600435166103b8565b34801561016957600080fd5b506100cf61049a565b34801561017e57600080fd5b506100cf600160a060020a0360043516610506565b34801561019f57600080fd5b506101a86105bc565b60408051600160a060020a039092168252519081900360200190f35b3480156101d057600080fd5b506101a86105cb565b3480156101e557600080fd5b506100cf600160a060020a03600435166105da565b60015460408051808201909152601e81527f43616c6c6572206d757374206265207468652043464420466163746f727900006020820152600160a060020a0390911633149080826102e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156102a8578181015183820152602001610290565b50505050905090810190601f1680156102d55780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600160a060020a03808516600081815260026020526040808220805460ff1916600117905551928616927fd58bd0566ead9ed32659fb925d8d03f4bc085d137fafff69ba9d390275a6eaaf9190a361033c84846105fd565b50505050565b3360009081526002602052604090205460ff16151560011490565b60026020526000908152604090205460ff1681565b600054600160a060020a0316331461038957600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6103c0610342565b60408051808201909152601d81527f43616c6c6572206d75737420626520612043464420696e7374616e636500000060208201528082151561045e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102a8578181015183820152602001610290565b50604051600160a060020a0384169033907f15d100e262556a93dd6558ac262964e8c338b642a9a6530ee29521879cfb9f1a90600090a3505050565b600054600160a060020a031633146104b157600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b61050e610342565b60408051808201909152601d81527f43616c6c6572206d75737420626520612043464420696e7374616e63650000006020820152808215156105ac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102a8578181015183820152602001610290565b506105b733846105fd565b505050565b600054600160a060020a031681565b600154600160a060020a031681565b600054600160a060020a031633146105f157600080fd5b6105fa81610641565b50565b80600160a060020a031682600160a060020a03167f5180589a8efb07c77a3318d1c34775bb649df9d3e93ac2a75a8e9747e3aaccd460405160405180910390a35050565b600160a060020a038116151561065657600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a72305820f7883c31d9c26bb1aa1a279af71620b0e5fa74077b6e3f2b3c453b8c60e5e1420029",
  "sourceMap": "398:2428:8:-;;;949:29;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;567:5:11;:18;;-1:-1:-1;;;;;;567:18:11;575:10;567:18;;;398:2428:8;;;;;;",
  "deployedSourceMap": "398:2428:8:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1385:308;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1385:308:8;-1:-1:-1;;;;;1385:308:8;;;;;;;;;;;;1086:96;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1086:96:8;;;;;;;;;;;;;;;;;;;;;;904:36;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;904:36:8;-1:-1:-1;;;;;904:36:8;;;;;986:92;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;986:92:8;-1:-1:-1;;;;;986:92:8;;;;;2614:207;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2614:207:8;-1:-1:-1;;;;;2614:207:8;;;;;1001:111:11;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1001:111:11;;;;2187:192:8;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2187:192:8;-1:-1:-1;;;;;2187:192:8;;;;;238:20:11;;8:9:-1;5:2;;;30:1;27;20:12;5:2;238:20:11;;;;;;;;-1:-1:-1;;;;;238:20:11;;;;;;;;;;;;;;873:22:8;;8:9:-1;5:2;;;30:1;27;20:12;5:2;873:22:8;;;;1274:103:11;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1274:103:11;-1:-1:-1;;;;;1274:103:11;;;;;1385:308:8;1511:7;;1520:33;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1511:7:8;;;1497:10;:21;;1520:33;1497:21;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;1571:10:8;;;;;;;:4;:10;;;;;;:17;;-1:-1:-1;;1571:17:8;1584:4;1571:17;;;1604:33;;;;;;;1571:10;1604:33;1648:37;1670:4;1676:8;1648:21;:37::i;:::-;1385:308;;;;:::o;1086:96::-;1155:10;1126:4;1150:16;;;:4;:16;;;;;;;;:24;;:16;:24;1086:96;:::o;904:36::-;;;;;;;;;;;;;;;:::o;986:92::-;719:5:11;;-1:-1:-1;;;;;719:5:11;705:10;:19;697:28;;;;;;1052:7:8;:18;;-1:-1:-1;;1052:18:8;-1:-1:-1;;;;;1052:18:8;;;;;;;;;;986:92::o;2614:207::-;2709:9;:7;:9::i;:::-;2720:25;;;;;;;;;;;;;;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;-1:-1:-1;2768:45:8;;-1:-1:-1;;;;;2768:45:8;;;2787:10;;2768:45;;;;;2614:207;;;:::o;1001:111:11:-;719:5;;-1:-1:-1;;;;;719:5:11;705:10;:19;697:28;;;;;;1077:5;;;1058:25;;-1:-1:-1;;;;;1077:5:11;;;;1058:25;;;1105:1;1089:18;;-1:-1:-1;;1089:18:11;;;1001:111::o;2187:192:8:-;2276:9;:7;:9::i;:::-;2287:25;;;;;;;;;;;;;;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;;2330:41:8;2352:10;2364:6;2330:21;:41::i;:::-;2187:192;;;:::o;238:20:11:-;;;-1:-1:-1;;;;;238:20:11;;:::o;873:22:8:-;;;-1:-1:-1;;;;;873:22:8;;:::o;1274:103:11:-;719:5;;-1:-1:-1;;;;;719:5:11;705:10;:19;697:28;;;;;;1343:29;1362:9;1343:18;:29::i;:::-;1274:103;:::o;2387:165:8:-;2537:6;-1:-1:-1;;;;;2511:33:8;2531:4;-1:-1:-1;;;;;2511:33:8;;;;;;;;;;;2387:165;;:::o;1512:171:11:-;-1:-1:-1;;;;;1582:23:11;;;;1574:32;;;;;;1638:5;;;1617:38;;-1:-1:-1;;;;;1617:38:11;;;;1638:5;;;1617:38;;;1661:5;:17;;-1:-1:-1;;1661:17:11;-1:-1:-1;;;;;1661:17:11;;;;;;;;;;1512:171::o",
  "source": "pragma solidity ^0.4.23;\r\npragma experimental \"v0.5.0\";\r\n\r\nimport \"openzeppelin-solidity/contracts/ownership/Ownable.sol\";\r\nimport \"../DBC.sol\";\r\n\r\n/**\r\n * Event logs for all CFD creations and every time a party joins a contract.\r\n * Kept in a single contract seperate from the CFDs here so that we have a way\r\n * to query all CFDs ever created. (event logs are queried per contract address)\r\n */\r\ncontract ContractForDifferenceRegistry is DBC, Ownable {\r\n\r\n    event LogCFDRegistryNew(address indexed cfd, address indexed creator);\r\n    event LogCFDRegistryParty(address indexed cfd, address indexed party);\r\n    event LogCFDRegistrySale(address indexed cfd, address indexed sellingParty);\r\n\r\n    string constant REASON_CALLER_MUST_BE_CFD = \"Caller must be a CFD instance\";\r\n    string constant REASON_CALLER_MUST_BE_CFD_FACTORY = \"Caller must be the CFD Factory\";\r\n\r\n    address public factory;\r\n\r\n    mapping(address => bool) public cfds;\r\n\r\n    constructor() public {\r\n    }\r\n\r\n    function setFactory(address _factory) public onlyOwner {\r\n        factory = _factory;\r\n    }\r\n\r\n    function fromCfd() public view returns (bool) {\r\n        return cfds[msg.sender] == true;\r\n    }\r\n\r\n    /**\r\n     * Register a new CFD contract and the creator of the contract.\r\n     * The main purpose of this call is to Log an event that can be queried for\r\n     * all existing CFDs.\r\n     */\r\n    function registerNew(\r\n        address _cfd,\r\n        address _creator\r\n    )\r\n        public\r\n        pre_cond(msg.sender == factory, REASON_CALLER_MUST_BE_CFD_FACTORY)\r\n    {\r\n        cfds[_cfd] = true;\r\n        emit LogCFDRegistryNew(_cfd, _creator);\r\n        registerPartyInternal(_cfd, _creator);\r\n    }\r\n\r\n    /**\r\n     * Register a new party being added to the contract. This would be from\r\n     * either:\r\n     * - a deposit() counterparty call at initiation times\r\n     * - a transferPosition() transferring ownership to a new party.\r\n     * - a buy() call where one side is sold to a new party.\r\n     *\r\n     * The main purpose of this call is to Log an event that can be queried.\r\n     * This is how we can get a list of all contracts a given address is\r\n     * involved with.\r\n     */\r\n    function registerParty(\r\n        address _party\r\n    )\r\n        public\r\n        pre_cond(fromCfd(), REASON_CALLER_MUST_BE_CFD)\r\n    {\r\n        registerPartyInternal(msg.sender, _party);\r\n    }\r\n\r\n    function registerPartyInternal(\r\n        address _cfd,\r\n        address _party\r\n    )\r\n        private\r\n    {\r\n        emit LogCFDRegistryParty(_cfd, _party);\r\n    }\r\n\r\n    /**\r\n     * Register contract for sale.\r\n     */\r\n    function registerSale(\r\n        address _sellingParty\r\n    )\r\n        public\r\n        pre_cond(fromCfd(), REASON_CALLER_MUST_BE_CFD)\r\n    {\r\n        emit LogCFDRegistrySale(msg.sender, _sellingParty);\r\n    }\r\n\r\n}\r\n",
  "sourcePath": "D:\\Users\\Julien\\Desktop\\Work\\0xFutures\\protocol\\contracts\\cfd\\ContractForDifferenceRegistry.sol",
  "compiler": {
    "name": "solc",
    "version": "0.4.25+commit.59dbf8f1.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "2.0.2",
  "updatedAt": "2019-02-16T16:52:04.991Z"
}