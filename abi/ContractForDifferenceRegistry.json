{
  "contractName": "ContractForDifferenceRegistry",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "cfds",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "cfd",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "LogCFDRegistryNew",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "cfd",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "party",
          "type": "address"
        }
      ],
      "name": "LogCFDRegistryParty",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "cfd",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "sellingParty",
          "type": "address"
        }
      ],
      "name": "LogCFDRegistrySale",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "previousOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipRenounced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_factory",
          "type": "address"
        }
      ],
      "name": "setFactory",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "fromCfd",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_cfd",
          "type": "address"
        },
        {
          "name": "_creator",
          "type": "address"
        }
      ],
      "name": "registerNew",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_party",
          "type": "address"
        }
      ],
      "name": "registerParty",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_sellingParty",
          "type": "address"
        }
      ],
      "name": "registerSale",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "0x608060405234801561001057600080fd5b5060008054600160a060020a031916331790556106ea806100326000396000f3006080604052600436106100a35763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630596030d81146100a85780630d9f5aed146100d1578063571a22dd146100fa5780635bb478081461011b57806362c597041461013c578063715018a61461015d57806381e8dfa2146101725780638da5cb5b14610193578063c45a0155146101c4578063f2fde38b146101d9575b600080fd5b3480156100b457600080fd5b506100cf600160a060020a03600435811690602435166101fa565b005b3480156100dd57600080fd5b506100e6610342565b604080519115158252519081900360200190f35b34801561010657600080fd5b506100e6600160a060020a036004351661035d565b34801561012757600080fd5b506100cf600160a060020a0360043516610372565b34801561014857600080fd5b506100cf600160a060020a03600435166103b8565b34801561016957600080fd5b506100cf61049a565b34801561017e57600080fd5b506100cf600160a060020a0360043516610506565b34801561019f57600080fd5b506101a86105bc565b60408051600160a060020a039092168252519081900360200190f35b3480156101d057600080fd5b506101a86105cb565b3480156101e557600080fd5b506100cf600160a060020a03600435166105da565b60015460408051808201909152601e81527f43616c6c6572206d757374206265207468652043464420466163746f727900006020820152600160a060020a0390911633149080826102e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156102a8578181015183820152602001610290565b50505050905090810190601f1680156102d55780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600160a060020a03808516600081815260026020526040808220805460ff1916600117905551928616927fd58bd0566ead9ed32659fb925d8d03f4bc085d137fafff69ba9d390275a6eaaf9190a361033c84846105fd565b50505050565b3360009081526002602052604090205460ff16151560011490565b60026020526000908152604090205460ff1681565b600054600160a060020a0316331461038957600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6103c0610342565b60408051808201909152601d81527f43616c6c6572206d75737420626520612043464420696e7374616e636500000060208201528082151561045e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102a8578181015183820152602001610290565b50604051600160a060020a0384169033907f15d100e262556a93dd6558ac262964e8c338b642a9a6530ee29521879cfb9f1a90600090a3505050565b600054600160a060020a031633146104b157600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b61050e610342565b60408051808201909152601d81527f43616c6c6572206d75737420626520612043464420696e7374616e63650000006020820152808215156105ac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102a8578181015183820152602001610290565b506105b733846105fd565b505050565b600054600160a060020a031681565b600154600160a060020a031681565b600054600160a060020a031633146105f157600080fd5b6105fa81610641565b50565b80600160a060020a031682600160a060020a03167f5180589a8efb07c77a3318d1c34775bb649df9d3e93ac2a75a8e9747e3aaccd460405160405180910390a35050565b600160a060020a038116151561065657600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a723058206817e0187c11e78a5d1ee59e6dc2ab2f480c6d257c2445fb50481d455c85e8610029",
  "deployedBytecode": "0x6080604052600436106100a35763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630596030d81146100a85780630d9f5aed146100d1578063571a22dd146100fa5780635bb478081461011b57806362c597041461013c578063715018a61461015d57806381e8dfa2146101725780638da5cb5b14610193578063c45a0155146101c4578063f2fde38b146101d9575b600080fd5b3480156100b457600080fd5b506100cf600160a060020a03600435811690602435166101fa565b005b3480156100dd57600080fd5b506100e6610342565b604080519115158252519081900360200190f35b34801561010657600080fd5b506100e6600160a060020a036004351661035d565b34801561012757600080fd5b506100cf600160a060020a0360043516610372565b34801561014857600080fd5b506100cf600160a060020a03600435166103b8565b34801561016957600080fd5b506100cf61049a565b34801561017e57600080fd5b506100cf600160a060020a0360043516610506565b34801561019f57600080fd5b506101a86105bc565b60408051600160a060020a039092168252519081900360200190f35b3480156101d057600080fd5b506101a86105cb565b3480156101e557600080fd5b506100cf600160a060020a03600435166105da565b60015460408051808201909152601e81527f43616c6c6572206d757374206265207468652043464420466163746f727900006020820152600160a060020a0390911633149080826102e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156102a8578181015183820152602001610290565b50505050905090810190601f1680156102d55780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600160a060020a03808516600081815260026020526040808220805460ff1916600117905551928616927fd58bd0566ead9ed32659fb925d8d03f4bc085d137fafff69ba9d390275a6eaaf9190a361033c84846105fd565b50505050565b3360009081526002602052604090205460ff16151560011490565b60026020526000908152604090205460ff1681565b600054600160a060020a0316331461038957600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6103c0610342565b60408051808201909152601d81527f43616c6c6572206d75737420626520612043464420696e7374616e636500000060208201528082151561045e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102a8578181015183820152602001610290565b50604051600160a060020a0384169033907f15d100e262556a93dd6558ac262964e8c338b642a9a6530ee29521879cfb9f1a90600090a3505050565b600054600160a060020a031633146104b157600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b61050e610342565b60408051808201909152601d81527f43616c6c6572206d75737420626520612043464420696e7374616e63650000006020820152808215156105ac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382528381815181526020019150805190602001908083836000838110156102a8578181015183820152602001610290565b506105b733846105fd565b505050565b600054600160a060020a031681565b600154600160a060020a031681565b600054600160a060020a031633146105f157600080fd5b6105fa81610641565b50565b80600160a060020a031682600160a060020a03167f5180589a8efb07c77a3318d1c34775bb649df9d3e93ac2a75a8e9747e3aaccd460405160405180910390a35050565b600160a060020a038116151561065657600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a723058206817e0187c11e78a5d1ee59e6dc2ab2f480c6d257c2445fb50481d455c85e8610029",
  "sourceMap": "387:2346:8:-;;;925:28;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;567:5:11;:18;;-1:-1:-1;;;;;;567:18:11;575:10;567:18;;;387:2346:8;;;;;;",
  "deployedSourceMap": "387:2346:8:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1345:298;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1345:298:8;-1:-1:-1;;;;;1345:298:8;;;;;;;;;;;;1055:94;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1055:94:8;;;;;;;;;;;;;;;;;;;;;;882:36;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;882:36:8;-1:-1:-1;;;;;882:36:8;;;;;959:90;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;959:90:8;-1:-1:-1;;;;;959:90:8;;;;;2530:200;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2530:200:8;-1:-1:-1;;;;;2530:200:8;;;;;1001:111:11;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1001:111:11;;;;2124:185:8;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2124:185:8;-1:-1:-1;;;;;2124:185:8;;;;;238:20:11;;8:9:-1;5:2;;;30:1;27;20:12;5:2;238:20:11;;;;;;;;-1:-1:-1;;;;;238:20:11;;;;;;;;;;;;;;853:22:8;;8:9:-1;5:2;;;30:1;27;20:12;5:2;853:22:8;;;;1274:103:11;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1274:103:11;-1:-1:-1;;;;;1274:103:11;;;;;1345:298:8;1466:7;;1475:33;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1466:7:8;;;1452:10;:21;;1475:33;1452:21;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;1524:10:8;;;;;;;:4;:10;;;;;;:17;;-1:-1:-1;;1524:17:8;1537:4;1524:17;;;1556:33;;;;;;;1524:10;1556:33;1599:37;1621:4;1627:8;1599:21;:37::i;:::-;1345:298;;;;:::o;1055:94::-;1123:10;1095:4;1118:16;;;:4;:16;;;;;;;;:24;;:16;:24;1055:94;:::o;882:36::-;;;;;;;;;;;;;;;:::o;959:90::-;719:5:11;;-1:-1:-1;;;;;719:5:11;705:10;:19;697:28;;;;;;1024:7:8;:18;;-1:-1:-1;;1024:18:8;-1:-1:-1;;;;;1024:18:8;;;;;;;;;;959:90::o;2530:200::-;2621:9;:7;:9::i;:::-;2632:25;;;;;;;;;;;;;;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;-1:-1:-1;2678:45:8;;-1:-1:-1;;;;;2678:45:8;;;2697:10;;2678:45;;;;;2530:200;;;:::o;1001:111:11:-;719:5;;-1:-1:-1;;;;;719:5:11;705:10;:19;697:28;;;;;;1077:5;;;1058:25;;-1:-1:-1;;;;;1077:5:11;;;;1058:25;;;1105:1;1089:18;;-1:-1:-1;;1089:18:11;;;1001:111::o;2124:185:8:-;2209:9;:7;:9::i;:::-;2220:25;;;;;;;;;;;;;;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;;2261:41:8;2283:10;2295:6;2261:21;:41::i;:::-;2124:185;;;:::o;238:20:11:-;;;-1:-1:-1;;;;;238:20:11;;:::o;853:22:8:-;;;-1:-1:-1;;;;;853:22:8;;:::o;1274:103:11:-;719:5;;-1:-1:-1;;;;;719:5:11;705:10;:19;697:28;;;;;;1343:29;1362:9;1343:18;:29::i;:::-;1274:103;:::o;2315:158:8:-;2459:6;-1:-1:-1;;;;;2433:33:8;2453:4;-1:-1:-1;;;;;2433:33:8;;;;;;;;;;;2315:158;;:::o;1512:171:11:-;-1:-1:-1;;;;;1582:23:11;;;;1574:32;;;;;;1638:5;;;1617:38;;-1:-1:-1;;;;;1617:38:11;;;;1638:5;;;1617:38;;;1661:5;:17;;-1:-1:-1;;1661:17:11;-1:-1:-1;;;;;1661:17:11;;;;;;;;;;1512:171::o",
  "source": "pragma solidity ^0.4.23;\npragma experimental \"v0.5.0\";\n\nimport \"openzeppelin-solidity/contracts/ownership/Ownable.sol\";\nimport \"../DBC.sol\";\n\n/**\n * Event logs for all CFD creations and every time a party joins a contract.\n * Kept in a single contract seperate from the CFDs here so that we have a way\n * to query all CFDs ever created. (event logs are queried per contract address)\n */\ncontract ContractForDifferenceRegistry is DBC, Ownable {\n\n    event LogCFDRegistryNew(address indexed cfd, address indexed creator);\n    event LogCFDRegistryParty(address indexed cfd, address indexed party);\n    event LogCFDRegistrySale(address indexed cfd, address indexed sellingParty);\n\n    string constant REASON_CALLER_MUST_BE_CFD = \"Caller must be a CFD instance\";\n    string constant REASON_CALLER_MUST_BE_CFD_FACTORY = \"Caller must be the CFD Factory\";\n\n    address public factory;\n\n    mapping(address => bool) public cfds;\n\n    constructor() public {\n    }\n\n    function setFactory(address _factory) public onlyOwner {\n        factory = _factory;\n    }\n\n    function fromCfd() public view returns (bool) {\n        return cfds[msg.sender] == true;\n    }\n\n    /**\n     * Register a new CFD contract and the creator of the contract.\n     * The main purpose of this call is to Log an event that can be queried for\n     * all existing CFDs.\n     */\n    function registerNew(\n        address _cfd,\n        address _creator\n    )\n        public\n        pre_cond(msg.sender == factory, REASON_CALLER_MUST_BE_CFD_FACTORY)\n    {\n        cfds[_cfd] = true;\n        emit LogCFDRegistryNew(_cfd, _creator);\n        registerPartyInternal(_cfd, _creator);\n    }\n\n    /**\n     * Register a new party being added to the contract. This would be from\n     * either:\n     * - a deposit() counterparty call at initiation times\n     * - a transferPosition() transferring ownership to a new party.\n     * - a buy() call where one side is sold to a new party.\n     *\n     * The main purpose of this call is to Log an event that can be queried.\n     * This is how we can get a list of all contracts a given address is\n     * involved with.\n     */\n    function registerParty(\n        address _party\n    )\n        public\n        pre_cond(fromCfd(), REASON_CALLER_MUST_BE_CFD)\n    {\n        registerPartyInternal(msg.sender, _party);\n    }\n\n    function registerPartyInternal(\n        address _cfd,\n        address _party\n    )\n        private\n    {\n        emit LogCFDRegistryParty(_cfd, _party);\n    }\n\n    /**\n     * Register contract for sale.\n     */\n    function registerSale(\n        address _sellingParty\n    )\n        public\n        pre_cond(fromCfd(), REASON_CALLER_MUST_BE_CFD)\n    {\n        emit LogCFDRegistrySale(msg.sender, _sellingParty);\n    }\n\n}\n",
  "sourcePath": "/home/julien/0xFutures/protocol/contracts/cfd/ContractForDifferenceRegistry.sol",
  "compiler": {
    "name": "solc",
    "version": "0.4.25+commit.59dbf8f1.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "2.0.2",
  "updatedAt": "2019-02-11T03:26:59.379Z"
}