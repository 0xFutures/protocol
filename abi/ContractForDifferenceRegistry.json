{
  "contractName": "ContractForDifferenceRegistry",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "cfds",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "cfd",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "LogCFDRegistryNew",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "cfd",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "party",
          "type": "address"
        }
      ],
      "name": "LogCFDRegistryParty",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "cfd",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "sellingParty",
          "type": "address"
        }
      ],
      "name": "LogCFDRegistrySale",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_factory",
          "type": "address"
        }
      ],
      "name": "setFactory",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "fromCfd",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_cfd",
          "type": "address"
        },
        {
          "name": "_creator",
          "type": "address"
        }
      ],
      "name": "registerNew",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_party",
          "type": "address"
        }
      ],
      "name": "registerParty",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_sellingParty",
          "type": "address"
        }
      ],
      "name": "registerSale",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.6+commit.b259423e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"_cfd\",\"type\":\"address\"},{\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"registerNew\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fromCfd\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"cfds\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"setFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sellingParty\",\"type\":\"address\"}],\"name\":\"registerSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_party\",\"type\":\"address\"}],\"name\":\"registerParty\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"cfd\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"LogCFDRegistryNew\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"cfd\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"party\",\"type\":\"address\"}],\"name\":\"LogCFDRegistryParty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"cfd\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"sellingParty\",\"type\":\"address\"}],\"name\":\"LogCFDRegistrySale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}}},\"userdoc\":{\"methods\":{\"registerNew(address,address)\":{\"notice\":\"Register a new CFD contract and the creator of the contract. The main purpose of this call is to Log an event that can be queried for all existing CFDs.\"},\"registerParty(address)\":{\"notice\":\"Register a new party being added to the contract. This would be from either: - a deposit() counterparty call at initiation times - a transferPosition() transferring ownership to a new party. - a buy() call where one side is sold to a new party.     * The main purpose of this call is to Log an event that can be queried. This is how we can get a list of all contracts a given address is involved with.\"},\"registerSale(address)\":{\"notice\":\"Register contract for sale.\"}},\"notice\":\"Event logs for all CFD creations and every time a party joins a contract. Kept in a single contract seperate from the CFDs here so that we have a way to query all CFDs ever created. (event logs are queried per contract address)\"}},\"settings\":{\"compilationTarget\":{\"/Users/julien/Desktop/protocol/contracts/cfd/ContractForDifferenceRegistry.sol\":\"ContractForDifferenceRegistry\"},\"evmVersion\":\"constantinople\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/julien/Desktop/protocol/contracts/DBC.sol\":{\"keccak256\":\"0xc9c8bf071e0f5bff796bfde919237f33136d8c18a89dec61a52a0391fc76c256\",\"urls\":[\"bzzr://b44dfa0ecd91495eb61d07322588ebc1ea50fadd8bc22464e94c3d070a6b6ea1\"]},\"/Users/julien/Desktop/protocol/contracts/cfd/ContractForDifferenceRegistry.sol\":{\"keccak256\":\"0xdb72ba28920116724194b8ed9320a1bdf09837236d972ed8b975bf2a27c3ac5f\",\"urls\":[\"bzzr://ae02629dd3df0bbbe65a6f0ca63281111db7ae546ee4cc8dcbd7a276d31cc203\"]},\"openzeppelin-solidity/contracts/GSN/Context.sol\":{\"keccak256\":\"0x90a3995645af7562d84b9d69363ffa5ae7217714ab61e951bf7bc450f40e4061\",\"urls\":[\"bzzr://51482c01bddf23793bddee43b60ab9578a62948a4f2082def24ea792a553b055\"]},\"openzeppelin-solidity/contracts/ownership/Ownable.sol\":{\"keccak256\":\"0xecd8ab29d9a5771c3964d0cd1788c4a5098a0081b20fb275da850a22b1c59806\",\"urls\":[\"bzzr://4950def18270142a78d503ef6b7b13bdb053f2f050cee50c883cd7cab2bb02d7\"]}},\"version\":1}",
  "bytecode": "0x608060405261001261005f60201b60201c565b600080546001600160a01b0319166001600160a01b03928316178082556040519216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3610063565b3390565b6107c4806100726000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063715018a611610071578063715018a61461016c57806381e8dfa2146101745780638da5cb5b1461019a5780638f32d59b146101be578063c45a0155146101c6578063f2fde38b146101ce576100a9565b80630596030d146100ae5780630d9f5aed146100de578063571a22dd146100fa5780635bb478081461012057806362c5970414610146575b600080fd5b6100dc600480360360408110156100c457600080fd5b506001600160a01b03813581169160200135166101f4565b005b6100e6610325565b604080519115158252519081900360200190f35b6100e66004803603602081101561011057600080fd5b50356001600160a01b0316610340565b6100dc6004803603602081101561013657600080fd5b50356001600160a01b0316610355565b6100dc6004803603602081101561015c57600080fd5b50356001600160a01b03166103d3565b6100dc61049b565b6100dc6004803603602081101561018a57600080fd5b50356001600160a01b0316610541565b6101a26105dd565b604080516001600160a01b039092168252519081900360200190f35b6100e66105ec565b6101a2610610565b6100dc600480360360208110156101e457600080fd5b50356001600160a01b031661061f565b60015460408051808201909152601e81527f43616c6c6572206d757374206265207468652043464420466163746f7279000060208201526001600160a01b0390911633149080826102c657604051600160e51b62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561028b578181015183820152602001610273565b50505050905090810190601f1680156102b85780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506001600160a01b03808516600081815260026020526040808220805460ff1916600117905551928616927fd58bd0566ead9ed32659fb925d8d03f4bc085d137fafff69ba9d390275a6eaaf9190a361031f8484610687565b50505050565b3360009081526002602052604090205460ff16151560011490565b60026020526000908152604090205460ff1681565b61035d6105ec565b6103b15760408051600160e51b62461bcd02815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6103db610325565b60408051808201909152601d81527f43616c6c6572206d75737420626520612043464420696e7374616e63650000006020820152808261045f57604051600160e51b62461bcd02815260206004820181815283516024840152835190928392604490910191908501908083836000831561028b578181015183820152602001610273565b506040516001600160a01b0384169033907f15d100e262556a93dd6558ac262964e8c338b642a9a6530ee29521879cfb9f1a90600090a3505050565b6104a36105ec565b6104f75760408051600160e51b62461bcd02815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b610549610325565b60408051808201909152601d81527f43616c6c6572206d75737420626520612043464420696e7374616e6365000000602082015280826105cd57604051600160e51b62461bcd02815260206004820181815283516024840152835190928392604490910191908501908083836000831561028b578181015183820152602001610273565b506105d83384610687565b505050565b6000546001600160a01b031690565b600080546001600160a01b03166106016106cb565b6001600160a01b031614905090565b6001546001600160a01b031681565b6106276105ec565b61067b5760408051600160e51b62461bcd02815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b610684816106cf565b50565b806001600160a01b0316826001600160a01b03167f5180589a8efb07c77a3318d1c34775bb649df9d3e93ac2a75a8e9747e3aaccd460405160405180910390a35050565b3390565b6001600160a01b03811661071757604051600160e51b62461bcd0281526004018080602001828103825260268152602001806107736026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b039290921691909117905556fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373a165627a7a72305820229c153c993b0491698d1da7362ee674e5c0c7a0aaa1811f484a371f6fff36600029",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c8063715018a611610071578063715018a61461016c57806381e8dfa2146101745780638da5cb5b1461019a5780638f32d59b146101be578063c45a0155146101c6578063f2fde38b146101ce576100a9565b80630596030d146100ae5780630d9f5aed146100de578063571a22dd146100fa5780635bb478081461012057806362c5970414610146575b600080fd5b6100dc600480360360408110156100c457600080fd5b506001600160a01b03813581169160200135166101f4565b005b6100e6610325565b604080519115158252519081900360200190f35b6100e66004803603602081101561011057600080fd5b50356001600160a01b0316610340565b6100dc6004803603602081101561013657600080fd5b50356001600160a01b0316610355565b6100dc6004803603602081101561015c57600080fd5b50356001600160a01b03166103d3565b6100dc61049b565b6100dc6004803603602081101561018a57600080fd5b50356001600160a01b0316610541565b6101a26105dd565b604080516001600160a01b039092168252519081900360200190f35b6100e66105ec565b6101a2610610565b6100dc600480360360208110156101e457600080fd5b50356001600160a01b031661061f565b60015460408051808201909152601e81527f43616c6c6572206d757374206265207468652043464420466163746f7279000060208201526001600160a01b0390911633149080826102c657604051600160e51b62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561028b578181015183820152602001610273565b50505050905090810190601f1680156102b85780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506001600160a01b03808516600081815260026020526040808220805460ff1916600117905551928616927fd58bd0566ead9ed32659fb925d8d03f4bc085d137fafff69ba9d390275a6eaaf9190a361031f8484610687565b50505050565b3360009081526002602052604090205460ff16151560011490565b60026020526000908152604090205460ff1681565b61035d6105ec565b6103b15760408051600160e51b62461bcd02815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6103db610325565b60408051808201909152601d81527f43616c6c6572206d75737420626520612043464420696e7374616e63650000006020820152808261045f57604051600160e51b62461bcd02815260206004820181815283516024840152835190928392604490910191908501908083836000831561028b578181015183820152602001610273565b506040516001600160a01b0384169033907f15d100e262556a93dd6558ac262964e8c338b642a9a6530ee29521879cfb9f1a90600090a3505050565b6104a36105ec565b6104f75760408051600160e51b62461bcd02815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b610549610325565b60408051808201909152601d81527f43616c6c6572206d75737420626520612043464420696e7374616e6365000000602082015280826105cd57604051600160e51b62461bcd02815260206004820181815283516024840152835190928392604490910191908501908083836000831561028b578181015183820152602001610273565b506105d83384610687565b505050565b6000546001600160a01b031690565b600080546001600160a01b03166106016106cb565b6001600160a01b031614905090565b6001546001600160a01b031681565b6106276105ec565b61067b5760408051600160e51b62461bcd02815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b610684816106cf565b50565b806001600160a01b0316826001600160a01b03167f5180589a8efb07c77a3318d1c34775bb649df9d3e93ac2a75a8e9747e3aaccd460405160405180910390a35050565b3390565b6001600160a01b03811661071757604051600160e51b62461bcd0281526004018080602001828103825260268152602001806107736026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b039290921691909117905556fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373a165627a7a72305820229c153c993b0491698d1da7362ee674e5c0c7a0aaa1811f484a371f6fff36600029",
  "sourceMap": "356:2312:8:-;;;707:12:18;:10;;;:12;;:::i;:::-;698:6;:21;;-1:-1:-1;;;;;;698:21:18;-1:-1:-1;;;;;698:21:18;;;;;;;734:40;;767:6;;;734:40;;698:6;;734:40;356:2312:8;;788:96:16;867:10;788:96;:::o;356:2312:8:-;;;;;;;",
  "deployedSourceMap": "356:2312:8:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;356:2312:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1280:298;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;1280:298:8;;;;;;;;;;:::i;:::-;;990:94;;;:::i;:::-;;;;;;;;;;;;;;;;;;851:36;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;851:36:8;-1:-1:-1;;;;;851:36:8;;:::i;894:90::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;894:90:8;-1:-1:-1;;;;;894:90:8;;:::i;2465:200::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2465:200:8;-1:-1:-1;;;;;2465:200:8;;:::i;1642:137:18:-;;;:::i;2059:185:8:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2059:185:8;-1:-1:-1;;;;;2059:185:8;;:::i;857:77:18:-;;;:::i;:::-;;;;-1:-1:-1;;;;;857:77:18;;;;;;;;;;;;;;1208:92;;;:::i;822:22:8:-;;;:::i;1928:107:18:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1928:107:18;-1:-1:-1;;;;;1928:107:18;;:::i;1280:298:8:-;1401:7;;1410:33;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1401:7:8;;;1387:10;:21;;1410:33;1387:21;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;1459:10:8;;;;;;;:4;:10;;;;;;:17;;-1:-1:-1;;1459:17:8;1472:4;1459:17;;;1491:33;;;;;;;1459:10;1491:33;1534:37;1556:4;1562:8;1534:21;:37::i;:::-;1280:298;;;;:::o;990:94::-;1058:10;1030:4;1053:16;;;:4;:16;;;;;;;;:24;;:16;:24;990:94;:::o;851:36::-;;;;;;;;;;;;;;;:::o;894:90::-;1061:9:18;:7;:9::i;:::-;1053:54;;;;;-1:-1:-1;;;;;1053:54:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;959:7:8;:18;;-1:-1:-1;;;;;;959:18:8;-1:-1:-1;;;;;959:18:8;;;;;;;;;;894:90::o;2465:200::-;2556:9;:7;:9::i;:::-;2567:25;;;;;;;;;;;;;;;;;;293:9:0;285:26;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;2613:45:8;;-1:-1:-1;;;;;2613:45:8;;;2632:10;;2613:45;;;;;2465:200;;;:::o;1642:137:18:-;1061:9;:7;:9::i;:::-;1053:54;;;;;-1:-1:-1;;;;;1053:54:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1740:1;1724:6;;1703:40;;-1:-1:-1;;;;;1724:6:18;;;;1703:40;;1740:1;;1703:40;1770:1;1753:19;;-1:-1:-1;;;;;;1753:19:18;;;1642:137::o;2059:185:8:-;2144:9;:7;:9::i;:::-;2155:25;;;;;;;;;;;;;;;;;;293:9:0;285:26;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;2196:41:8;2218:10;2230:6;2196:21;:41::i;:::-;2059:185;;;:::o;857:77:18:-;895:7;921:6;-1:-1:-1;;;;;921:6:18;857:77;:::o;1208:92::-;1248:4;1287:6;;-1:-1:-1;;;;;1287:6:18;1271:12;:10;:12::i;:::-;-1:-1:-1;;;;;1271:22:18;;1264:29;;1208:92;:::o;822:22:8:-;;;-1:-1:-1;;;;;822:22:8;;:::o;1928:107:18:-;1061:9;:7;:9::i;:::-;1053:54;;;;;-1:-1:-1;;;;;1053:54:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2000:28;2019:8;2000:18;:28::i;:::-;1928:107;:::o;2250:158:8:-;2394:6;-1:-1:-1;;;;;2368:33:8;2388:4;-1:-1:-1;;;;;2368:33:8;;;;;;;;;;;2250:158;;:::o;788:96:16:-;867:10;788:96;:::o;2136:225:18:-;-1:-1:-1;;;;;2209:22:18;;2201:73;;;;-1:-1:-1;;;;;2201:73:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2310:6;;;2289:38;;-1:-1:-1;;;;;2289:38:18;;;;2310:6;;;2289:38;;;2337:6;:17;;-1:-1:-1;;;;;;2337:17:18;-1:-1:-1;;;;;2337:17:18;;;;;;;;;;2136:225::o",
  "source": "pragma solidity ^0.5.0;\n\nimport \"openzeppelin-solidity/contracts/ownership/Ownable.sol\";\nimport \"../DBC.sol\";\n\n/**\n * Event logs for all CFD creations and every time a party joins a contract.\n * Kept in a single contract seperate from the CFDs here so that we have a way\n * to query all CFDs ever created. (event logs are queried per contract address)\n */\ncontract ContractForDifferenceRegistry is DBC, Ownable {\n\n    event LogCFDRegistryNew(address indexed cfd, address indexed creator);\n    event LogCFDRegistryParty(address indexed cfd, address indexed party);\n    event LogCFDRegistrySale(address indexed cfd, address indexed sellingParty);\n\n    string constant REASON_CALLER_MUST_BE_CFD = \"Caller must be a CFD instance\";\n    string constant REASON_CALLER_MUST_BE_CFD_FACTORY = \"Caller must be the CFD Factory\";\n\n    address public factory;\n\n    mapping(address => bool) public cfds;\n\n    function setFactory(address _factory) public onlyOwner {\n        factory = _factory;\n    }\n\n    function fromCfd() public view returns (bool) {\n        return cfds[msg.sender] == true;\n    }\n\n    /**\n     * Register a new CFD contract and the creator of the contract.\n     * The main purpose of this call is to Log an event that can be queried for\n     * all existing CFDs.\n     */\n    function registerNew(\n        address _cfd,\n        address _creator\n    )\n        public\n        pre_cond(msg.sender == factory, REASON_CALLER_MUST_BE_CFD_FACTORY)\n    {\n        cfds[_cfd] = true;\n        emit LogCFDRegistryNew(_cfd, _creator);\n        registerPartyInternal(_cfd, _creator);\n    }\n\n    /**\n     * Register a new party being added to the contract. This would be from\n     * either:\n     * - a deposit() counterparty call at initiation times\n     * - a transferPosition() transferring ownership to a new party.\n     * - a buy() call where one side is sold to a new party.\n     *\n     * The main purpose of this call is to Log an event that can be queried.\n     * This is how we can get a list of all contracts a given address is\n     * involved with.\n     */\n    function registerParty(\n        address _party\n    )\n        public\n        pre_cond(fromCfd(), REASON_CALLER_MUST_BE_CFD)\n    {\n        registerPartyInternal(msg.sender, _party);\n    }\n\n    function registerPartyInternal(\n        address _cfd,\n        address _party\n    )\n        private\n    {\n        emit LogCFDRegistryParty(_cfd, _party);\n    }\n\n    /**\n     * Register contract for sale.\n     */\n    function registerSale(\n        address _sellingParty\n    )\n        public\n        pre_cond(fromCfd(), REASON_CALLER_MUST_BE_CFD)\n    {\n        emit LogCFDRegistrySale(msg.sender, _sellingParty);\n    }\n\n}\n",
  "sourcePath": "/Users/julien/Desktop/protocol/contracts/cfd/ContractForDifferenceRegistry.sol",
  "compiler": {
    "name": "solc",
    "version": "0.5.6+commit.b259423e.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.20",
  "updatedAt": "2020-01-17T22:17:34.155Z",
  "devdoc": {
    "methods": {
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    }
  },
  "userdoc": {
    "methods": {
      "registerNew(address,address)": {
        "notice": "Register a new CFD contract and the creator of the contract. The main purpose of this call is to Log an event that can be queried for all existing CFDs."
      },
      "registerParty(address)": {
        "notice": "Register a new party being added to the contract. This would be from either: - a deposit() counterparty call at initiation times - a transferPosition() transferring ownership to a new party. - a buy() call where one side is sold to a new party.     * The main purpose of this call is to Log an event that can be queried. This is how we can get a list of all contracts a given address is involved with."
      },
      "registerSale(address)": {
        "notice": "Register contract for sale."
      }
    },
    "notice": "Event logs for all CFD creations and every time a party joins a contract. Kept in a single contract seperate from the CFDs here so that we have a way to query all CFDs ever created. (event logs are queried per contract address)"
  }
}