{
  "contractName": "ContractForDifferenceRegistry",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "cfds",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "cfd",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "LogCFDRegistryNew",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "cfd",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "party",
          "type": "address"
        }
      ],
      "name": "LogCFDRegistryParty",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "cfd",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "sellingParty",
          "type": "address"
        }
      ],
      "name": "LogCFDRegistrySale",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_factory",
          "type": "address"
        }
      ],
      "name": "setFactory",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "fromCfd",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_cfd",
          "type": "address"
        },
        {
          "name": "_creator",
          "type": "address"
        }
      ],
      "name": "registerNew",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_party",
          "type": "address"
        }
      ],
      "name": "registerParty",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_sellingParty",
          "type": "address"
        }
      ],
      "name": "registerSale",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "0x608060405234801561001057600080fd5b5060008054600160a060020a0319163317808255604051600160a060020a039190911691907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a361077f806100696000396000f3fe6080604052600436106100ae5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630596030d81146100b35780630d9f5aed146100f0578063571a22dd146101195780635bb478081461014c57806362c597041461017f578063715018a6146101b257806381e8dfa2146101c75780638da5cb5b146101fa5780638f32d59b1461022b578063c45a015514610240578063f2fde38b14610255575b600080fd5b3480156100bf57600080fd5b506100ee600480360360408110156100d657600080fd5b50600160a060020a0381358116916020013516610288565b005b3480156100fc57600080fd5b506101056103d0565b604080519115158252519081900360200190f35b34801561012557600080fd5b506101056004803603602081101561013c57600080fd5b5035600160a060020a03166103eb565b34801561015857600080fd5b506100ee6004803603602081101561016f57600080fd5b5035600160a060020a0316610400565b34801561018b57600080fd5b506100ee600480360360208110156101a257600080fd5b5035600160a060020a0316610442565b3480156101be57600080fd5b506100ee610524565b3480156101d357600080fd5b506100ee600480360360208110156101ea57600080fd5b5035600160a060020a031661058e565b34801561020657600080fd5b5061020f610644565b60408051600160a060020a039092168252519081900360200190f35b34801561023757600080fd5b50610105610653565b34801561024c57600080fd5b5061020f610664565b34801561026157600080fd5b506100ee6004803603602081101561027857600080fd5b5035600160a060020a0316610673565b60015460408051808201909152601e81527f43616c6c6572206d757374206265207468652043464420466163746f727900006020820152600160a060020a039091163314908082610371576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561033657818101518382015260200161031e565b50505050905090810190601f1680156103635780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600160a060020a03808516600081815260026020526040808220805460ff1916600117905551928616927fd58bd0566ead9ed32659fb925d8d03f4bc085d137fafff69ba9d390275a6eaaf9190a36103ca8484610692565b50505050565b3360009081526002602052604090205460ff16151560011490565b60026020526000908152604090205460ff1681565b610408610653565b151561041357600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b61044a6103d0565b60408051808201909152601d81527f43616c6c6572206d75737420626520612043464420696e7374616e63650000006020820152808215156104e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561033657818101518382015260200161031e565b50604051600160a060020a0384169033907f15d100e262556a93dd6558ac262964e8c338b642a9a6530ee29521879cfb9f1a90600090a3505050565b61052c610653565b151561053757600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b6105966103d0565b60408051808201909152601d81527f43616c6c6572206d75737420626520612043464420696e7374616e6365000000602082015280821515610634576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561033657818101518382015260200161031e565b5061063f3384610692565b505050565b600054600160a060020a031690565b600054600160a060020a0316331490565b600154600160a060020a031681565b61067b610653565b151561068657600080fd5b61068f816106d6565b50565b80600160a060020a031682600160a060020a03167f5180589a8efb07c77a3318d1c34775bb649df9d3e93ac2a75a8e9747e3aaccd460405160405180910390a35050565b600160a060020a03811615156106eb57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905556fea165627a7a723058206ae72d9231962c39bd6dd976ffcc7aeb85b74457273c1833b065c7f83d8959480029",
  "deployedBytecode": "0x6080604052600436106100ae5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630596030d81146100b35780630d9f5aed146100f0578063571a22dd146101195780635bb478081461014c57806362c597041461017f578063715018a6146101b257806381e8dfa2146101c75780638da5cb5b146101fa5780638f32d59b1461022b578063c45a015514610240578063f2fde38b14610255575b600080fd5b3480156100bf57600080fd5b506100ee600480360360408110156100d657600080fd5b50600160a060020a0381358116916020013516610288565b005b3480156100fc57600080fd5b506101056103d0565b604080519115158252519081900360200190f35b34801561012557600080fd5b506101056004803603602081101561013c57600080fd5b5035600160a060020a03166103eb565b34801561015857600080fd5b506100ee6004803603602081101561016f57600080fd5b5035600160a060020a0316610400565b34801561018b57600080fd5b506100ee600480360360208110156101a257600080fd5b5035600160a060020a0316610442565b3480156101be57600080fd5b506100ee610524565b3480156101d357600080fd5b506100ee600480360360208110156101ea57600080fd5b5035600160a060020a031661058e565b34801561020657600080fd5b5061020f610644565b60408051600160a060020a039092168252519081900360200190f35b34801561023757600080fd5b50610105610653565b34801561024c57600080fd5b5061020f610664565b34801561026157600080fd5b506100ee6004803603602081101561027857600080fd5b5035600160a060020a0316610673565b60015460408051808201909152601e81527f43616c6c6572206d757374206265207468652043464420466163746f727900006020820152600160a060020a039091163314908082610371576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561033657818101518382015260200161031e565b50505050905090810190601f1680156103635780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600160a060020a03808516600081815260026020526040808220805460ff1916600117905551928616927fd58bd0566ead9ed32659fb925d8d03f4bc085d137fafff69ba9d390275a6eaaf9190a36103ca8484610692565b50505050565b3360009081526002602052604090205460ff16151560011490565b60026020526000908152604090205460ff1681565b610408610653565b151561041357600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b61044a6103d0565b60408051808201909152601d81527f43616c6c6572206d75737420626520612043464420696e7374616e63650000006020820152808215156104e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561033657818101518382015260200161031e565b50604051600160a060020a0384169033907f15d100e262556a93dd6558ac262964e8c338b642a9a6530ee29521879cfb9f1a90600090a3505050565b61052c610653565b151561053757600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b6105966103d0565b60408051808201909152601d81527f43616c6c6572206d75737420626520612043464420696e7374616e6365000000602082015280821515610634576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360008381101561033657818101518382015260200161031e565b5061063f3384610692565b505050565b600054600160a060020a031690565b600054600160a060020a0316331490565b600154600160a060020a031681565b61067b610653565b151561068657600080fd5b61068f816106d6565b50565b80600160a060020a031682600160a060020a03167f5180589a8efb07c77a3318d1c34775bb649df9d3e93ac2a75a8e9747e3aaccd460405160405180910390a35050565b600160a060020a03811615156106eb57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905556fea165627a7a723058206ae72d9231962c39bd6dd976ffcc7aeb85b74457273c1833b065c7f83d8959480029",
  "sourceMap": "356:2346:8:-;;;894:28;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;515:6:11;:19;;-1:-1:-1;;;;;;515:19:11;524:10;515:19;;;;549:40;;-1:-1:-1;;;;;582:6:11;;;;;515;549:40;;515:6;;549:40;356:2346:8;;;;;;",
  "deployedSourceMap": "356:2346:8:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1314:298;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1314:298:8;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;1314:298:8;;;;;;;;;;;;;1024:94;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1024:94:8;;;;;;;;;;;;;;;;;;;;;;851:36;;8:9:-1;5:2;;;30:1;27;20:12;5:2;851:36:8;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;851:36:8;-1:-1:-1;;;;;851:36:8;;;928:90;;8:9:-1;5:2;;;30:1;27;20:12;5:2;928:90:8;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;928:90:8;-1:-1:-1;;;;;928:90:8;;;2499:200;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2499:200:8;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2499:200:8;-1:-1:-1;;;;;2499:200:8;;;1347:137:11;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1347:137:11;;;;2093:185:8;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2093:185:8;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2093:185:8;-1:-1:-1;;;;;2093:185:8;;;659:77:11;;8:9:-1;5:2;;;30:1;27;20:12;5:2;659:77:11;;;;;;;;-1:-1:-1;;;;;659:77:11;;;;;;;;;;;;;;979:90;;8:9:-1;5:2;;;30:1;27;20:12;5:2;979:90:11;;;;822:22:8;;8:9:-1;5:2;;;30:1;27;20:12;5:2;822:22:8;;;;1655:107:11;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1655:107:11;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1655:107:11;-1:-1:-1;;;;;1655:107:11;;;1314:298:8;1435:7;;1444:33;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1435:7:8;;;1421:10;:21;;1444:33;1421:21;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;1493:10:8;;;;;;;:4;:10;;;;;;:17;;-1:-1:-1;;1493:17:8;1506:4;1493:17;;;1525:33;;;;;;;1493:10;1525:33;1568:37;1590:4;1596:8;1568:21;:37::i;:::-;1314:298;;;;:::o;1024:94::-;1092:10;1064:4;1087:16;;;:4;:16;;;;;;;;:24;;:16;:24;1024:94;:::o;851:36::-;;;;;;;;;;;;;;;:::o;928:90::-;863:9:11;:7;:9::i;:::-;855:18;;;;;;;;993:7:8;:18;;-1:-1:-1;;993:18:8;-1:-1:-1;;;;;993:18:8;;;;;;;;;;928:90::o;2499:200::-;2590:9;:7;:9::i;:::-;2601:25;;;;;;;;;;;;;;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;2647:45:8;;-1:-1:-1;;;;;2647:45:8;;;2666:10;;2647:45;;;;;2499:200;;;:::o;1347:137:11:-;863:9;:7;:9::i;:::-;855:18;;;;;;;;1445:1;1429:6;;1408:40;;-1:-1:-1;;;;;1429:6:11;;;;1408:40;;1445:1;;1408:40;1475:1;1458:19;;-1:-1:-1;;1458:19:11;;;1347:137::o;2093:185:8:-;2178:9;:7;:9::i;:::-;2189:25;;;;;;;;;;;;;;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;2230:41:8;2252:10;2264:6;2230:21;:41::i;:::-;2093:185;;;:::o;659:77:11:-;697:7;723:6;-1:-1:-1;;;;;723:6:11;659:77;:::o;979:90::-;1019:4;1056:6;-1:-1:-1;;;;;1056:6:11;1042:10;:20;;979:90::o;822:22:8:-;;;-1:-1:-1;;;;;822:22:8;;:::o;1655:107:11:-;863:9;:7;:9::i;:::-;855:18;;;;;;;;1727:28;1746:8;1727:18;:28::i;:::-;1655:107;:::o;2284:158:8:-;2428:6;-1:-1:-1;;;;;2402:33:8;2422:4;-1:-1:-1;;;;;2402:33:8;;;;;;;;;;;2284:158;;:::o;1906:183:11:-;-1:-1:-1;;;;;1979:22:11;;;;1971:31;;;;;;2038:6;;;2017:38;;-1:-1:-1;;;;;2017:38:11;;;;2038:6;;;2017:38;;;2065:6;:17;;-1:-1:-1;;2065:17:11;-1:-1:-1;;;;;2065:17:11;;;;;;;;;;1906:183::o",
  "source": "pragma solidity ^0.5.0;\n\nimport \"openzeppelin-solidity/contracts/ownership/Ownable.sol\";\nimport \"../DBC.sol\";\n\n/**\n * Event logs for all CFD creations and every time a party joins a contract.\n * Kept in a single contract seperate from the CFDs here so that we have a way\n * to query all CFDs ever created. (event logs are queried per contract address)\n */\ncontract ContractForDifferenceRegistry is DBC, Ownable {\n\n    event LogCFDRegistryNew(address indexed cfd, address indexed creator);\n    event LogCFDRegistryParty(address indexed cfd, address indexed party);\n    event LogCFDRegistrySale(address indexed cfd, address indexed sellingParty);\n\n    string constant REASON_CALLER_MUST_BE_CFD = \"Caller must be a CFD instance\";\n    string constant REASON_CALLER_MUST_BE_CFD_FACTORY = \"Caller must be the CFD Factory\";\n\n    address public factory;\n\n    mapping(address => bool) public cfds;\n\n    constructor() public {\n    }\n\n    function setFactory(address _factory) public onlyOwner {\n        factory = _factory;\n    }\n\n    function fromCfd() public view returns (bool) {\n        return cfds[msg.sender] == true;\n    }\n\n    /**\n     * Register a new CFD contract and the creator of the contract.\n     * The main purpose of this call is to Log an event that can be queried for\n     * all existing CFDs.\n     */\n    function registerNew(\n        address _cfd,\n        address _creator\n    )\n        public\n        pre_cond(msg.sender == factory, REASON_CALLER_MUST_BE_CFD_FACTORY)\n    {\n        cfds[_cfd] = true;\n        emit LogCFDRegistryNew(_cfd, _creator);\n        registerPartyInternal(_cfd, _creator);\n    }\n\n    /**\n     * Register a new party being added to the contract. This would be from\n     * either:\n     * - a deposit() counterparty call at initiation times\n     * - a transferPosition() transferring ownership to a new party.\n     * - a buy() call where one side is sold to a new party.\n     *\n     * The main purpose of this call is to Log an event that can be queried.\n     * This is how we can get a list of all contracts a given address is\n     * involved with.\n     */\n    function registerParty(\n        address _party\n    )\n        public\n        pre_cond(fromCfd(), REASON_CALLER_MUST_BE_CFD)\n    {\n        registerPartyInternal(msg.sender, _party);\n    }\n\n    function registerPartyInternal(\n        address _cfd,\n        address _party\n    )\n        private\n    {\n        emit LogCFDRegistryParty(_cfd, _party);\n    }\n\n    /**\n     * Register contract for sale.\n     */\n    function registerSale(\n        address _sellingParty\n    )\n        public\n        pre_cond(fromCfd(), REASON_CALLER_MUST_BE_CFD)\n    {\n        emit LogCFDRegistrySale(msg.sender, _sellingParty);\n    }\n\n}\n",
  "sourcePath": "/home/julien/0xFutures/protocol-infura/contracts/cfd/ContractForDifferenceRegistry.sol",
  "compiler": {
    "name": "solc",
    "version": "0.5.0+commit.1d4f565a.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.2",
  "updatedAt": "2019-03-19T23:12:39.411Z",
  "devdoc": {
    "methods": {
      "isOwner()": {
        "return": "true if `msg.sender` is the owner of the contract."
      },
      "owner()": {
        "return": "the address of the owner."
      },
      "renounceOwnership()": {
        "details": "Allows the current owner to relinquish control of the contract."
      },
      "transferOwnership(address)": {
        "details": "Allows the current owner to transfer control of the contract to a newOwner.",
        "params": {
          "newOwner": "The address to transfer ownership to."
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "registerNew(address,address)": {
        "notice": "Register a new CFD contract and the creator of the contract. The main purpose of this call is to Log an event that can be queried for all existing CFDs."
      },
      "registerParty(address)": {
        "notice": "Register a new party being added to the contract. This would be from either: - a deposit() counterparty call at initiation times - a transferPosition() transferring ownership to a new party. - a buy() call where one side is sold to a new party.     * The main purpose of this call is to Log an event that can be queried. This is how we can get a list of all contracts a given address is involved with."
      },
      "registerSale(address)": {
        "notice": "Register contract for sale."
      },
      "renounceOwnership()": {
        "notice": "Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore."
      }
    },
    "notice": "Event logs for all CFD creations and every time a party joins a contract. Kept in a single contract seperate from the CFDs here so that we have a way to query all CFDs ever created. (event logs are queried per contract address)"
  }
}