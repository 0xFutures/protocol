{
  "contractName": "PriceFeedsKyber",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "BITMASK_EXCLUDE_PERMISSIONLESS",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "marketNames",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "_registry",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "bytesId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "strId",
          "type": "string"
        }
      ],
      "name": "LogPriceFeedsKyberMarketAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "marketId",
          "type": "bytes32"
        }
      ],
      "name": "LogPriceFeedsKyberMarketRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_registry",
          "type": "address"
        }
      ],
      "name": "setRegistry",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_marketId",
          "type": "bytes32"
        }
      ],
      "name": "isMarketActive",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_marketStrId",
          "type": "string"
        },
        {
          "name": "_tokenContract",
          "type": "address"
        }
      ],
      "name": "addMarket",
      "outputs": [
        {
          "name": "marketId",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_marketId",
          "type": "bytes32"
        }
      ],
      "name": "removeMarket",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_marketId",
          "type": "bytes32"
        }
      ],
      "name": "getMarket",
      "outputs": [
        {
          "name": "tokenContract",
          "type": "address"
        },
        {
          "name": "encodedCall",
          "type": "bytes"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_marketId",
          "type": "bytes32"
        }
      ],
      "name": "read",
      "outputs": [
        {
          "name": "priceValue",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.6+commit.b259423e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"BITMASK_EXCLUDE_PERMISSIONLESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"marketNames\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_marketId\",\"type\":\"bytes32\"}],\"name\":\"removeMarket\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_marketId\",\"type\":\"bytes32\"}],\"name\":\"read\",\"outputs\":[{\"name\":\"priceValue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_marketStrId\",\"type\":\"string\"},{\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"addMarket\",\"outputs\":[{\"name\":\"marketId\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_marketId\",\"type\":\"bytes32\"}],\"name\":\"getMarket\",\"outputs\":[{\"name\":\"tokenContract\",\"type\":\"address\"},{\"name\":\"encodedCall\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_marketId\",\"type\":\"bytes32\"}],\"name\":\"isMarketActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"bytesId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"strId\",\"type\":\"string\"}],\"name\":\"LogPriceFeedsKyberMarketAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"marketId\",\"type\":\"bytes32\"}],\"name\":\"LogPriceFeedsKyberMarketRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"addMarket(string,address)\":{\"params\":{\"_marketStrId\":\"String id of market. eg. \\\"Kyber_ETH_DAI\\\"\",\"_tokenContract\":\"Address of ERC20 Token on Kyber market.\"},\"return\":\"marketId bytes32 keccak256 of the _marketStrId\"},\"isOwner()\":{\"return\":\"true if `msg.sender` is the owner of the contract.\"},\"owner()\":{\"return\":\"the address of the owner.\"},\"renounceOwnership()\":{\"details\":\"Allows the current owner to relinquish control of the contract.\"},\"transferOwnership(address)\":{\"details\":\"Allows the current owner to transfer control of the contract to a newOwner.\",\"params\":{\"newOwner\":\"The address to transfer ownership to.\"}}}},\"userdoc\":{\"methods\":{\"addMarket(string,address)\":{\"notice\":\"Add a new Kyber market\"},\"renounceOwnership()\":{\"notice\":\"Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore.\"}},\"notice\":\"Market prices from the Kyber Network: https://developer.kyber.network/docs/API_ABI-KyberNetworkProxy/\"}},\"settings\":{\"compilationTarget\":{\"/home/julien/0xFutures/protocol/contracts/feeds/PriceFeedsKyber.sol\":\"PriceFeedsKyber\"},\"evmVersion\":\"constantinople\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/home/julien/0xFutures/protocol/contracts/DBC.sol\":{\"keccak256\":\"0xc9c8bf071e0f5bff796bfde919237f33136d8c18a89dec61a52a0391fc76c256\",\"urls\":[\"bzzr://b44dfa0ecd91495eb61d07322588ebc1ea50fadd8bc22464e94c3d070a6b6ea1\"]},\"/home/julien/0xFutures/protocol/contracts/Registry.sol\":{\"keccak256\":\"0x2703d1c87ddd66da66c110570d5e896848f21d3fea0a860ab3ac7cac007a1755\",\"urls\":[\"bzzr://df2ab637255c3194b717f3c9a857bc8d55ba4dddd4605621b48f75e9bb4fcd94\"]},\"/home/julien/0xFutures/protocol/contracts/feeds/PriceFeedsKyber.sol\":{\"keccak256\":\"0x4750060cd8551fe66c2778a477138fe32bd2882a6a0df95ebc87345cf5c67947\",\"urls\":[\"bzzr://80864cd9216f1a1f569ee047a204e6072da5c224e3d02c42a32640b1611c84c9\"]},\"/home/julien/0xFutures/protocol/contracts/kyber/KyberNetworkProxyInterface.sol\":{\"keccak256\":\"0x0e3fe90852ca500af9457df99c1aec660ae2bdddb170c444881b1f6f796ce91c\",\"urls\":[\"bzzr://8c7ac792da4b76214844068529a0fcdb6bc821e866e0711786958e4ba7a69374\"]},\"openzeppelin-solidity/contracts/math/SafeMath.sol\":{\"keccak256\":\"0x965012d27b4262d7a41f5028cbb30c51ebd9ecd4be8fb30380aaa7a3c64fbc8b\",\"urls\":[\"bzzr://41ca38f6b0fa4b77b0feec43e422cfbec48b7eb38a41edf0b85c77e8d9a296b1\"]},\"openzeppelin-solidity/contracts/ownership/Ownable.sol\":{\"keccak256\":\"0x980de387a1a020a498f53d00f89fecebb12c949a17e8f160093c0303ede2b786\",\"urls\":[\"bzzr://08894efa2a557982070beda6a81a032407e70532d24bdafe80d39660c74904d9\"]},\"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xba431353cb4fe70777ac026231eb5468e41aa1e81240a2b8136917acc5fff4dc\",\"urls\":[\"bzzr://80cd02a56e6e33504318124d0d645c82e615cc8a4b5829cc9d82d17635c644c8\"]},\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x079c4e23ee448f529e43bfa3c4e8fb4be52cd0318ee923a276835bedf45b93d8\",\"urls\":[\"bzzr://48248e86f64407a95f241d6c5c8cfea6b4d4ebf4ebb467e5c98c8af3868fafe4\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051602080610e028339810180604052602081101561003057600080fd5b5051600080546001600160a01b03191633178082556040516001600160a01b039190911691907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a361008a8161009060201b60201c565b506100da565b61009e6100c960201b60201c565b6100a757600080fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331490565b610d19806100e96000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638da5cb5b1161008c578063a91ee0dc11610066578063a91ee0dc14610285578063c3c95c7b146102ab578063f2fde38b14610359578063f4463db51461037f576100cf565b80638da5cb5b146101e85780638f32d59b146101f05780639e485ffc1461020c576100cf565b80630c441d4f146100d457806341955214146100ee5780635c5212dd1461018057806361da14391461019f578063715018a6146101bc5780637b103999146101c4575b600080fd5b6100dc61039c565b60408051918252519081900360200190f35b61010b6004803603602081101561010457600080fd5b50356103a4565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561014557818101518382015260200161012d565b50505050905090810190601f1680156101725780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61019d6004803603602081101561019657600080fd5b503561043d565b005b6100dc600480360360208110156101b557600080fd5b503561059f565b61019d610788565b6101cc6107e3565b604080516001600160a01b039092168252519081900360200190f35b6101cc6107f2565b6101f8610802565b604080519115158252519081900360200190f35b6100dc6004803603604081101561022257600080fd5b81019060208101813564010000000081111561023d57600080fd5b82018360208201111561024f57600080fd5b8035906020019184600183028401116401000000008311171561027157600080fd5b9193509150356001600160a01b0316610813565b61019d6004803603602081101561029b57600080fd5b50356001600160a01b03166109c8565b6102c8600480360360208110156102c157600080fd5b50356109fb565b60405180836001600160a01b03166001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561031d578181015183820152602001610305565b50505050905090810190601f16801561034a5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b61019d6004803603602081101561036f57600080fd5b50356001600160a01b0316610ada565b6101f86004803603602081101561039557600080fd5b5035610af7565b600160ff1b81565b600260208181526000928352604092839020805484516001821615610100026000190190911693909304601f81018390048302840183019094528383529192908301828280156104355780601f1061040a57610100808354040283529160200191610435565b820191906000526020600020905b81548152906001019060200180831161041857829003601f168201915b505050505081565b610445610802565b61044e57600080fd5b61045781610af7565b604051806060016040528060258152602001610cc96025913980826104fd57604051600160e51b62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b838110156104c25781810151838201526020016104aa565b50505050905090810190601f1680156104ef5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506040805180820182526000808252825160208082018390528451808303820181529185018552808401918252878352600180825294909220835181546001600160a01b0319166001600160a01b03909116178155905180519394919361056c93928501929190910190610b82565b50506040518491507fb54c2b8928a495bb6488be8bfd8a852a5815f53d28e2c454b49f5635e5d1d6a890600090a2505050565b60008181526001602090815260408083206003548251600160e41b63046756190281529251919385936060936001600160a01b0390931692634675619092600480840193919291829003018186803b1580156105fa57600080fd5b505afa15801561060e573d6000803e3d6000fd5b505050506040513d602081101561062457600080fd5b81019080805190602001909291905050506001600160a01b031683600101604051808280546001816001161561010002031660029004801561069d5780601f1061067b57610100808354040283529182019161069d565b820191906000526020600020905b815481529060010190602001808311610689575b5050915050600060405180830381855afa9150503d80600081146106dd576040519150601f19603f3d011682016040523d82523d6000602084013e6106e2565b606091505b5090925090508161076857604080518082018252601781527f4b796265722070726963652063616c6c206661696c656400000000000000000060208083019182529251600160e51b62461bcd02815260048101938452825160248201528251929392839260449092019190808383600083156104c25781810151838201526020016104aa565b80806020019051604081101561077d57600080fd5b505195945050505050565b610790610802565b61079957600080fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6003546001600160a01b031681565b6000546001600160a01b03165b90565b6000546001600160a01b0316331490565b600061081d610802565b61082657600080fd5b83836040516020018083838082843780830192505050925050506040516020818303038152906040528051906020012090506040518060400160405280836001600160a01b031681526020016040518080610ca1602891396040805191829003602801822073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee60248401526001600160a01b038089166044850152670de0b6b3a7640000600160ff1b016064808601919091528351808603909101815260849094018352602084810180516001600160e01b03166001600160e01b03199094169390931790925292909452600086815260018086529190208551815493166001600160a01b03199093169290921782558484015180519294610943945091850192910190610b82565b505050600081815260026020526040902061095f908585610c00565b50807fa5a61bd6a6ada80224b49aa7fae9b176c38f70934cfc65e1c34495527cd91e23858560405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a29392505050565b6109d0610802565b6109d957600080fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b60006060610a07610c6e565b6000848152600160208181526040928390208351808501855281546001600160a01b0316815281840180548651600261010097831615979097026000190190911695909504601f81018590048502860185019096528585529094919385840193909290830182828015610abb5780601f10610a9057610100808354040283529160200191610abb565b820191906000526020600020905b815481529060010190602001808311610a9e57829003601f168201915b5050505050815250509050806000015192508060200151915050915091565b610ae2610802565b610aeb57600080fd5b610af481610b14565b50565b6000908152600160205260409020546001600160a01b0316151590565b6001600160a01b038116610b2757600080fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610bc357805160ff1916838001178555610bf0565b82800160010185558215610bf0579182015b82811115610bf0578251825591602001919060010190610bd5565b50610bfc929150610c86565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610c415782800160ff19823516178555610bf0565b82800160010185558215610bf0579182015b82811115610bf0578235825591602001919060010190610c53565b60408051808201909152600081526060602082015290565b6107ff91905b80821115610bfc5760008155600101610c8c56fe67657445787065637465645261746528616464726573732c616464726573732c75696e74323536294d61726b6574206d7573742062652061637469766520746f207075736820612076616c7565a165627a7a7230582068781c901210b78c3ec766799a3bdc4ae73c2b03bcafc332d65b7bd9284070d10029",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638da5cb5b1161008c578063a91ee0dc11610066578063a91ee0dc14610285578063c3c95c7b146102ab578063f2fde38b14610359578063f4463db51461037f576100cf565b80638da5cb5b146101e85780638f32d59b146101f05780639e485ffc1461020c576100cf565b80630c441d4f146100d457806341955214146100ee5780635c5212dd1461018057806361da14391461019f578063715018a6146101bc5780637b103999146101c4575b600080fd5b6100dc61039c565b60408051918252519081900360200190f35b61010b6004803603602081101561010457600080fd5b50356103a4565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561014557818101518382015260200161012d565b50505050905090810190601f1680156101725780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61019d6004803603602081101561019657600080fd5b503561043d565b005b6100dc600480360360208110156101b557600080fd5b503561059f565b61019d610788565b6101cc6107e3565b604080516001600160a01b039092168252519081900360200190f35b6101cc6107f2565b6101f8610802565b604080519115158252519081900360200190f35b6100dc6004803603604081101561022257600080fd5b81019060208101813564010000000081111561023d57600080fd5b82018360208201111561024f57600080fd5b8035906020019184600183028401116401000000008311171561027157600080fd5b9193509150356001600160a01b0316610813565b61019d6004803603602081101561029b57600080fd5b50356001600160a01b03166109c8565b6102c8600480360360208110156102c157600080fd5b50356109fb565b60405180836001600160a01b03166001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561031d578181015183820152602001610305565b50505050905090810190601f16801561034a5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b61019d6004803603602081101561036f57600080fd5b50356001600160a01b0316610ada565b6101f86004803603602081101561039557600080fd5b5035610af7565b600160ff1b81565b600260208181526000928352604092839020805484516001821615610100026000190190911693909304601f81018390048302840183019094528383529192908301828280156104355780601f1061040a57610100808354040283529160200191610435565b820191906000526020600020905b81548152906001019060200180831161041857829003601f168201915b505050505081565b610445610802565b61044e57600080fd5b61045781610af7565b604051806060016040528060258152602001610cc96025913980826104fd57604051600160e51b62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b838110156104c25781810151838201526020016104aa565b50505050905090810190601f1680156104ef5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506040805180820182526000808252825160208082018390528451808303820181529185018552808401918252878352600180825294909220835181546001600160a01b0319166001600160a01b03909116178155905180519394919361056c93928501929190910190610b82565b50506040518491507fb54c2b8928a495bb6488be8bfd8a852a5815f53d28e2c454b49f5635e5d1d6a890600090a2505050565b60008181526001602090815260408083206003548251600160e41b63046756190281529251919385936060936001600160a01b0390931692634675619092600480840193919291829003018186803b1580156105fa57600080fd5b505afa15801561060e573d6000803e3d6000fd5b505050506040513d602081101561062457600080fd5b81019080805190602001909291905050506001600160a01b031683600101604051808280546001816001161561010002031660029004801561069d5780601f1061067b57610100808354040283529182019161069d565b820191906000526020600020905b815481529060010190602001808311610689575b5050915050600060405180830381855afa9150503d80600081146106dd576040519150601f19603f3d011682016040523d82523d6000602084013e6106e2565b606091505b5090925090508161076857604080518082018252601781527f4b796265722070726963652063616c6c206661696c656400000000000000000060208083019182529251600160e51b62461bcd02815260048101938452825160248201528251929392839260449092019190808383600083156104c25781810151838201526020016104aa565b80806020019051604081101561077d57600080fd5b505195945050505050565b610790610802565b61079957600080fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6003546001600160a01b031681565b6000546001600160a01b03165b90565b6000546001600160a01b0316331490565b600061081d610802565b61082657600080fd5b83836040516020018083838082843780830192505050925050506040516020818303038152906040528051906020012090506040518060400160405280836001600160a01b031681526020016040518080610ca1602891396040805191829003602801822073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee60248401526001600160a01b038089166044850152670de0b6b3a7640000600160ff1b016064808601919091528351808603909101815260849094018352602084810180516001600160e01b03166001600160e01b03199094169390931790925292909452600086815260018086529190208551815493166001600160a01b03199093169290921782558484015180519294610943945091850192910190610b82565b505050600081815260026020526040902061095f908585610c00565b50807fa5a61bd6a6ada80224b49aa7fae9b176c38f70934cfc65e1c34495527cd91e23858560405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a29392505050565b6109d0610802565b6109d957600080fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b60006060610a07610c6e565b6000848152600160208181526040928390208351808501855281546001600160a01b0316815281840180548651600261010097831615979097026000190190911695909504601f81018590048502860185019096528585529094919385840193909290830182828015610abb5780601f10610a9057610100808354040283529160200191610abb565b820191906000526020600020905b815481529060010190602001808311610a9e57829003601f168201915b5050505050815250509050806000015192508060200151915050915091565b610ae2610802565b610aeb57600080fd5b610af481610b14565b50565b6000908152600160205260409020546001600160a01b0316151590565b6001600160a01b038116610b2757600080fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610bc357805160ff1916838001178555610bf0565b82800160010185558215610bf0579182015b82811115610bf0578251825591602001919060010190610bd5565b50610bfc929150610c86565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610c415782800160ff19823516178555610bf0565b82800160010185558215610bf0579182015b82811115610bf0578235825591602001919060010190610c53565b60408051808201909152600081526060602082015290565b6107ff91905b80821115610bfc5760008155600101610c8c56fe67657445787065637465645261746528616464726573732c616464726573732c75696e74323536294d61726b6574206d7573742062652061637469766520746f207075736820612076616c7565a165627a7a7230582068781c901210b78c3ec766799a3bdc4ae73c2b03bcafc332d65b7bd9284070d10029",
  "sourceMap": "254:3472:11:-;;;1353:77;8:9:-1;5:2;;;30:1;27;20:12;5:2;1353:77:11;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1353:77:11;515:6:17;:19;;-1:-1:-1;;;;;;515:19:17;524:10;515:19;;;;549:40;;-1:-1:-1;;;;;582:6:17;;;;;515;549:40;;515:6;;549:40;1401:22:11;1413:9;1401:11;;;:22;;:::i;:::-;1353:77;254:3472;;1436:104;863:9:17;:7;;;:9;;:::i;:::-;855:18;;;;;;1503:8:11;:30;;-1:-1:-1;;;;;;1503:30:11;-1:-1:-1;;;;;1503:30:11;;;;;;;;;;1436:104::o;979:90:17:-;1019:4;1056:6;-1:-1:-1;;;;;1056:6:17;1042:10;:20;;979:90::o;254:3472:11:-;;;;;;;",
  "deployedSourceMap": "254:3472:11:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;254:3472:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;725:62;;;:::i;:::-;;;;;;;;;;;;;;;;1270:45;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1270:45:11;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;1270:45:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2689:286;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2689:286:11;;:::i;:::-;;3269:455;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3269:455:11;;:::i;1347:137:17:-;;;:::i;1322:24:11:-;;;:::i;:::-;;;;-1:-1:-1;;;;;1322:24:11;;;;;;;;;;;;;;659:77:17;;;:::i;979:90::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;1937:746:11;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1937:746:11;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;1937:746:11;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;1937:746:11;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;1937:746:11;;-1:-1:-1;1937:746:11;-1:-1:-1;1937:746:11;-1:-1:-1;;;;;1937:746:11;;:::i;1436:104::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1436:104:11;-1:-1:-1;;;;;1436:104:11;;:::i;2981:282::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2981:282:11;;:::i;:::-;;;;;-1:-1:-1;;;;;2981:282:11;-1:-1:-1;;;;;2981:282:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;2981:282:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1655:107:17;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1655:107:17;-1:-1:-1;;;;;1655:107:17;;:::i;1546:140:11:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1546:140:11;;:::i;725:62::-;-1:-1:-1;;;725:62:11;:::o;1270:45::-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1270:45:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;2689:286::-;863:9:17;:7;:9::i;:::-;855:18;;;;;;2782:25:11;2797:9;2782:14;:25::i;:::-;2809:28;;;;;;;;;;;;;;;;;304:6:0;293:9;285:26;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2874:37:11;;;;;;;;-1:-1:-1;2874:37:11;;;2895:15;;2874:37;2895:15;;;;;;;;26:21:-1;;;22:32;;6:49;;2895:15:11;;;;;2874:37;;;;;;2853:18;;;:7;:18;;;;;;;:58;;;;-1:-1:-1;;;;;;2853:58:11;-1:-1:-1;;;;;2853:58:11;;;;;;;;;;2874:37;;2853:18;;:58;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;2926:42:11;;2958:9;;-1:-1:-1;2926:42:11;;;;;883:1:17;;2689:286:11;:::o;3269:455::-;3323:15;3374:18;;;:7;:18;;;;;;;;3484:8;;:31;;-1:-1:-1;;;;;3484:31:11;;;;3374:18;;3323:15;;3425:20;;-1:-1:-1;;;;;3484:8:11;;;;:29;;:31;;;;;3374:18;;3484:31;;;;;;:8;:31;;;5:2:-1;;;;30:1;27;20:12;5:2;3484:31:11;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3484:31:11;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3484:31:11;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3476:51:11;3541:6;:18;;3476:93;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;3455:114:11;;-1:-1:-1;3455:114:11;-1:-1:-1;3455:114:11;3580:77;;3615:30;;;;;;;;;;;;;;;;;;;3608:38;;-1:-1:-1;;;;;3608:38:11;;;;;;;;;;;;;;;;3615:30;;3608:38;;;;;;;;3615:30;3608:38;;3615:30;-1:-1:-1;27:10;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;3580:77:11;3695:7;3684:33;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3684:33:11;;3269:455;-1:-1:-1;;;;;3269:455:11:o;1347:137:17:-;863:9;:7;:9::i;:::-;855:18;;;;;;1445:1;1429:6;;1408:40;;-1:-1:-1;;;;;1429:6:17;;;;1408:40;;1445:1;;1408:40;1475:1;1458:19;;-1:-1:-1;;;;;;1458:19:17;;;1347:137::o;1322:24:11:-;;;-1:-1:-1;;;;;1322:24:11;;:::o;659:77:17:-;697:7;723:6;-1:-1:-1;;;;;723:6:17;659:77;;:::o;979:90::-;1019:4;1056:6;-1:-1:-1;;;;;1056:6:17;1042:10;:20;;979:90::o;1937:746:11:-;2084:16;863:9:17;:7;:9::i;:::-;855:18;;;;;;2154:12:11;;2137:30;;;;;;;30:3:-1;22:6;14;1:33;57:3;49:6;45:16;35:26;;2137:30:11;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;2137:30:11;;;2127:41;;;;;;2116:52;;2199:362;;;;;;;;2219:14;-1:-1:-1;;;;;2199:362:11;;;;;1057:75;;;;;;;;;;;;;;;;;;;950:42;2349:202;;;;-1:-1:-1;;;;;2349:202:11;;;;;;;-1:-1:-1;;;;;2349:202:11;;;;;;;;;;26:21:-1;;;22:32;;;6:49;;2349:202:11;;;;;;;25:18:-1;;;61:17;;-1:-1;;;;;182:15;-1:-1;;;;;;2349:202:11;;;179:29:-1;;;;160:49;;;2199:362:11;;;;-1:-1:-1;2179:17:11;;;:7;:17;;;;;;:382;;;;;;-1:-1:-1;;;;;;2179:382:11;;;;;;;;;;;;;;;:17;;:382;;-1:-1:-1;2179:382:11;;;;;;;;:::i;:::-;-1:-1:-1;;;2571:21:11;;;;:11;:21;;;;;:36;;2595:12;;2571:36;:::i;:::-;;2653:8;2623:53;2663:12;;2623:53;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;;74:27;2623:53:11;;137:4:-1;117:14;;;-1:-1;;113:30;157:16;;;2623:53:11;;;;-1:-1:-1;2623:53:11;;-1:-1:-1;;;;2623:53:11;1937:746;;;;;:::o;1436:104::-;863:9:17;:7;:9::i;:::-;855:18;;;;;;1503:8:11;:30;;-1:-1:-1;;;;;;1503:30:11;-1:-1:-1;;;;;1503:30:11;;;;;;;;;;1436:104::o;2981:282::-;3064:21;3087:24;3127:20;;:::i;:::-;3150:18;;;;:7;:18;;;;;;;;;3127:41;;;;;;;;;-1:-1:-1;;;;;3127:41:11;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3127:41:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;3150:18;;3127:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3194:6;:20;;;3178:36;;3238:6;:18;;;3224:32;;2981:282;;;;:::o;1655:107:17:-;863:9;:7;:9::i;:::-;855:18;;;;;;1727:28;1746:8;1727:18;:28::i;:::-;1655:107;:::o;1546:140:11:-;1610:4;1633:18;;;:7;:18;;;;;:32;-1:-1:-1;;;;;1633:32:11;:46;;;1546:140::o;1906:183:17:-;-1:-1:-1;;;;;1979:22:17;;1971:31;;;;;;2038:6;;;2017:38;;-1:-1:-1;;;;;2017:38:17;;;;2038:6;;;2017:38;;;2065:6;:17;;-1:-1:-1;;;;;;2065:17:17;-1:-1:-1;;;;;2065:17:17;;;;;;;;;;1906:183::o;254:3472:11:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;254:3472:11;;;-1:-1:-1;254:3472:11;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;254:3472:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;254:3472:11;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;",
  "source": "pragma solidity ^0.5.0;\n\nimport \"openzeppelin-solidity/contracts/ownership/Ownable.sol\";\nimport \"../DBC.sol\";\nimport \"../Registry.sol\";\n\n\n/**\n * Market prices from the Kyber Network:\n * https://developer.kyber.network/docs/API_ABI-KyberNetworkProxy/\n */\ncontract PriceFeedsKyber is DBC, Ownable {\n    event LogPriceFeedsKyberMarketAdded(bytes32 indexed bytesId, string strId);\n    event LogPriceFeedsKyberMarketRemoved(bytes32 indexed marketId);\n\n    string constant REASON_MUST_BE_ACTIVE_MARKET = \"Market must be active to push a value\";\n    string constant REASON_KYBER_PRICE_CALL_FAILED = \"Kyber price call failed\";\n\n    /* Adding this bit to the srcQty excludes permissionless reserves from\n       the price fetch */\n    uint public constant BITMASK_EXCLUDE_PERMISSIONLESS = 1 << 255;\n\n    /* When getting a price for ETH to some ERC20 then ETH is represented\n       by the following address: */\n    address constant kyberNativeEthAddr = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n\n    bytes4 constant getExpectedRateCallSig = bytes4(\n        keccak256(\n            \"getExpectedRate(address,address,uint256)\"\n        )\n    );\n\n    struct Market  {\n        address tokenContract;\n        bytes encodedCall;\n    }\n    mapping(bytes32 => Market) markets;\n    mapping(bytes32 => string) public marketNames;\n\n    Registry public registry;\n\n    constructor(address _registry) public {\n        setRegistry(_registry);\n    }\n\n    function setRegistry(address _registry) public onlyOwner {\n        registry = Registry(_registry);\n    }\n\n    function isMarketActive(bytes32 _marketId) public view returns (bool) {\n        return markets[_marketId].tokenContract != address(0);\n    }\n\n    /**\n     * Add a new Kyber market\n     * @param _marketStrId String id of market. eg. \"Kyber_ETH_DAI\"\n     * @param _tokenContract Address of ERC20 Token on Kyber market.\n     * @return marketId bytes32 keccak256 of the _marketStrId\n     */\n    function addMarket(\n        string calldata _marketStrId,\n        address _tokenContract\n    )\n        external\n        onlyOwner\n        returns (bytes32 marketId)\n    {\n        marketId = keccak256(abi.encodePacked(_marketStrId));\n\n        markets[marketId] = Market(\n            _tokenContract,\n            // store the call signature to the get market price for\n            // 1 ETH of the token\n            abi.encodeWithSelector(\n                getExpectedRateCallSig,\n                kyberNativeEthAddr,\n                _tokenContract,\n                1 ether | BITMASK_EXCLUDE_PERMISSIONLESS\n            )\n        );\n        marketNames[marketId] = _marketStrId;\n\n        emit LogPriceFeedsKyberMarketAdded(marketId, _marketStrId);\n    }\n\n    function removeMarket(bytes32 _marketId)\n        external\n        onlyOwner\n        pre_cond(isMarketActive(_marketId), REASON_MUST_BE_ACTIVE_MARKET)\n    {\n        markets[_marketId] = Market(address(0x0), abi.encode(0x0));\n        emit LogPriceFeedsKyberMarketRemoved(_marketId);\n    }\n\n    function getMarket(bytes32 _marketId)\n        public\n        view\n        returns (address tokenContract, bytes memory encodedCall)\n    {\n        Market memory market = markets[_marketId];\n        tokenContract = market.tokenContract;\n        encodedCall = market.encodedCall;\n    }\n\n    function read(bytes32 _marketId) public view returns (uint priceValue) {\n        Market storage market = markets[_marketId];\n\n        bool success;\n        bytes memory rspData;\n        (success, rspData) = address(registry.getKyberNetworkProxy()).staticcall(\n            market.encodedCall\n        );\n\n        if (!success) {\n            revert(REASON_KYBER_PRICE_CALL_FAILED);\n        }\n\n        (priceValue, ) = abi.decode(rspData, (uint, uint));\n    }\n}\n",
  "sourcePath": "/home/julien/0xFutures/protocol/contracts/feeds/PriceFeedsKyber.sol",
  "compiler": {
    "name": "solc",
    "version": "0.5.6+commit.b259423e.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.8",
  "updatedAt": "2019-07-24T21:36:16.346Z",
  "devdoc": {
    "methods": {
      "addMarket(string,address)": {
        "params": {
          "_marketStrId": "String id of market. eg. \"Kyber_ETH_DAI\"",
          "_tokenContract": "Address of ERC20 Token on Kyber market."
        },
        "return": "marketId bytes32 keccak256 of the _marketStrId"
      },
      "isOwner()": {
        "return": "true if `msg.sender` is the owner of the contract."
      },
      "owner()": {
        "return": "the address of the owner."
      },
      "renounceOwnership()": {
        "details": "Allows the current owner to relinquish control of the contract."
      },
      "transferOwnership(address)": {
        "details": "Allows the current owner to transfer control of the contract to a newOwner.",
        "params": {
          "newOwner": "The address to transfer ownership to."
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "addMarket(string,address)": {
        "notice": "Add a new Kyber market"
      },
      "renounceOwnership()": {
        "notice": "Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore."
      }
    },
    "notice": "Market prices from the Kyber Network: https://developer.kyber.network/docs/API_ABI-KyberNetworkProxy/"
  }
}