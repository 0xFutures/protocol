{
  "contractName": "DSProxy",
  "abi": [
    {
      "constant": false,
      "inputs": [
        {
          "name": "owner_",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "cache",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "authority_",
          "type": "address"
        }
      ],
      "name": "setAuthority",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "authority",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "_cacheAddr",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "LogParams",
      "type": "event"
    },
    {
      "anonymous": true,
      "inputs": [
        {
          "indexed": true,
          "name": "sig",
          "type": "bytes4"
        },
        {
          "indexed": true,
          "name": "guy",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "foo",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "name": "bar",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "wad",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "fax",
          "type": "bytes"
        }
      ],
      "name": "LogNote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "LogSetAuthority",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "LogSetOwner",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_target",
          "type": "address"
        },
        {
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "name": "response",
          "type": "bytes"
        }
      ],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_code",
          "type": "bytes"
        },
        {
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "name": "target",
          "type": "address"
        },
        {
          "name": "response",
          "type": "bytes"
        }
      ],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_cacheAddr",
          "type": "address"
        }
      ],
      "name": "setCache",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061008d5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166313af4035811461008f5780631cff79cd146100c25780631f6a1eb9146101ed57806360c7d295146103ab5780637a9e5e4b146103dc5780638da5cb5b1461040f578063948f507614610424578063bf7e214f1461046b575b005b34801561009b57600080fd5b5061008d600480360360208110156100b257600080fd5b5035600160a060020a0316610480565b610178600480360360408110156100d857600080fd5b600160a060020a03823516919081019060408101602082013564010000000081111561010357600080fd5b82018360208201111561011557600080fd5b8035906020019184600183028401116401000000008311171561013757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610537945050505050565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101b257818101518382015260200161019a565b50505050905090810190601f1680156101df5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61031a6004803603604081101561020357600080fd5b81019060208101813564010000000081111561021e57600080fd5b82018360208201111561023057600080fd5b8035906020019184600183028401116401000000008311171561025257600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092959493602081019350359150506401000000008111156102a557600080fd5b8201836020820111156102b757600080fd5b803590602001918460018302840111640100000000831117156102d957600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506106aa945050505050565b6040518083600160a060020a0316600160a060020a0316815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561036f578181015183820152602001610357565b50505050905090810190601f16801561039c5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b3480156103b757600080fd5b506103c06108b9565b60408051600160a060020a039092168252519081900360200190f35b3480156103e857600080fd5b5061008d600480360360208110156103ff57600080fd5b5035600160a060020a03166108c8565b34801561041b57600080fd5b506103c061097b565b34801561043057600080fd5b506104576004803603602081101561044757600080fd5b5035600160a060020a031661098a565b604080519115158252519081900360200190f35b34801561047757600080fd5b506103c0610ae0565b61049633600035600160e060020a031916610aef565b15156104da576040805160e560020a62461bcd0281526020600482015260146024820152600080516020610bf4833981519152604482015290519081900360640190fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383811691909117918290556040519116907fce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed9490600090a250565b606061054f33600035600160e060020a031916610aef565b1515610593576040805160e560020a62461bcd0281526020600482015260146024820152600080516020610bf4833981519152604482015290519081900360640190fd5b60408051348082526020820183815236938301849052600435936024359384928692339260008035600160e060020a03191693889391929060608201848480828437600083820152604051601f909101601f1916909201829003965090945050505050a4600160a060020a0386161515610657576040805160e560020a62461bcd02815260206004820181905260248201527f64732d70726f78792d7461726765742d616464726573732d7265717569726564604482015290519081900360640190fd5b600080865160208801896113885a03f43d6040519550601f19601f6020830101168601604052808652806000602088013e8115600181146106975761069e565b8160208801fd5b50505050505092915050565b6002546040517f8bf4515c000000000000000000000000000000000000000000000000000000008152602060048201818152855160248401528551600094606094600160a060020a0390911693638bf4515c93899390928392604490910191908501908083838c5b8381101561072a578181015183820152602001610712565b50505050905090810190601f1680156107575780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b15801561077457600080fd5b505afa158015610788573d6000803e3d6000fd5b505050506040513d602081101561079e57600080fd5b50519150600160a060020a03821615156108a6576002546040517f7ed0c3b2000000000000000000000000000000000000000000000000000000008152602060048201818152875160248401528751600160a060020a0390941693637ed0c3b293899383926044909201919085019080838360005b8381101561082b578181015183820152602001610813565b50505050905090810190601f1680156108585780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15801561087757600080fd5b505af115801561088b573d6000803e3d6000fd5b505050506040513d60208110156108a157600080fd5b505191505b6108b08284610537565b90509250929050565b600254600160a060020a031681565b6108de33600035600160e060020a031916610aef565b1515610922576040805160e560020a62461bcd0281526020600482015260146024820152600080516020610bf4833981519152604482015290519081900360640190fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03838116919091178083556040519116917f1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada491a250565b600154600160a060020a031681565b60006109a233600035600160e060020a031916610aef565b15156109e6576040805160e560020a62461bcd0281526020600482015260146024820152600080516020610bf4833981519152604482015290519081900360640190fd5b60408051348082526020820183815236938301849052600435936024359384928692339260008035600160e060020a03191693889391929060608201848480828437600083820152604051601f909101601f1916909201829003965090945050505050a4600160a060020a0385161515610aaa576040805160e560020a62461bcd02815260206004820152601f60248201527f64732d70726f78792d63616368652d616464726573732d726571756972656400604482015290519081900360640190fd5b60028054600160a060020a03871673ffffffffffffffffffffffffffffffffffffffff1990911617905560019350505050919050565b600054600160a060020a031681565b6000600160a060020a038316301415610b0a57506001610bed565b600154600160a060020a0384811691161415610b2857506001610bed565b600054600160a060020a03161515610b4257506000610bed565b600054604080517fb7009613000000000000000000000000000000000000000000000000000000008152600160a060020a038681166004830152306024830152600160e060020a0319861660448301529151919092169163b7009613916064808301926020929190829003018186803b158015610bbe57600080fd5b505afa158015610bd2573d6000803e3d6000fd5b505050506040513d6020811015610be857600080fd5b505190505b9291505056fe64732d617574682d756e617574686f72697a6564000000000000000000000000a165627a7a72305820757e2991c2f6c0fec634b6b81f5aab0e7361b0356161efda6a0d005be0a435840029",
  "sourceMap": "1068:1972:11:-;;;1222:76;8:9:-1;5:2;;;30:1;27;20:12;5:2;1222:76:11;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1222:76:11;1063:5:9;:18;;-1:-1:-1;;;;;;1063:18:9;1071:10;1063:18;;;;;;1096:23;;;;1063:5;;1096:23;1271:20:11;1280:10;1271:8;;;;:20;:::i;:::-;;1222:76;1068:1972;;2764:274;2860:4;1473:33:9;1486:10;1498:7;;;;1473:12;;;;:33;:::i;:::-;1465:66;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1260:53:10;;;1226:9;1260:53;;;;;;;;;1304:8;1260:53;;;;;;1168:1;1155:15;;1203:2;1190:16;;;;1155:15;;1277:10;;-1:-1:-1;1268:7:10;;;;;1226:9;;-1:-1:-1;;1260:53:10;;;;-1:-1:-1;1304:8:10;;-1:-1:-1;1260:53:10;1:33:-1;99:1;81:16;;;74:27;1260:53:10;;137:4:-1;117:14;;;-1:-1;;113:30;157:16;;;1260:53:10;;;;-1:-1:-1;1260:53:10;;-1:-1:-1;;;;;1260:53:10;-1:-1:-1;;;;;2888:24:11;;;;2880:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2958:5;:32;;-1:-1:-1;;;;;2958:32:11;;-1:-1:-1;;;;;;2958:32:11;;;;;;;;-1:-1:-1;1541:1:9;;;2764:274:11;;;:::o;1555:370:9:-;1625:4;-1:-1:-1;;;;;1645:20:9;;1660:4;1645:20;1641:278;;;-1:-1:-1;1688:4:9;1681:11;;1641:278;1720:5;;-1:-1:-1;;;;;1713:12:9;;;1720:5;;1713:12;1709:210;;;-1:-1:-1;1748:4:9;1741:11;;1709:210;1798:1;1773:9;-1:-1:-1;;;;;1773:9:9;:27;1769:150;;;-1:-1:-1;1823:5:9;1816:12;;1769:150;1866:9;;:42;;;;;;-1:-1:-1;;;;;1866:42:9;;;;;;;1897:4;1866:42;;;;;;;;;;;;;:9;;;;;:17;;:42;;;;;;;;;;;;;;:9;:42;;;5:2:-1;;;;30:1;27;20:12;5:2;1866:42:9;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1866:42:9;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1866:42:9;;-1:-1:-1;1769:150:9;1555:370;;;;:::o;1068:1972:11:-;;;;;;;",
  "deployedSourceMap": "1068:1972:11:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1132:130:9;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1132:130:9;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1132:130:9;-1:-1:-1;;;;;1132:130:9;;;1798:940:11;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1798:940:11;;-1:-1:-1;;;;;1798:940:11;;;;;;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;1798:940:11;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;1798:940:11;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;1798:940:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;1798:940:11;;-1:-1:-1;1798:940:11;;-1:-1:-1;;;;;1798:940:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;1798:940:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1410:382;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1410:382:11;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;1410:382:11;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;1410:382:11;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;1410:382:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;1410:382:11;;;;;;;;-1:-1:-1;1410:382:11;;-1:-1:-1;;21:11;5:28;;2:2;;;46:1;43;36:12;2:2;1410:382:11;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;1410:382:11;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;1410:382:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;1410:382:11;;-1:-1:-1;1410:382:11;;-1:-1:-1;;;;;1410:382:11;;;;;-1:-1:-1;;;;;1410:382:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;1410:382:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1159:25;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1159:25:11;;;;;;;;-1:-1:-1;;;;;1159:25:11;;;;;;;;;;;;;;1268:167:9;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1268:167:9;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1268:167:9;-1:-1:-1;;;;;1268:167:9;;;999:26;;8:9:-1;5:2;;;30:1;27;20:12;5:2;999:26:9;;;;2764:274:11;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2764:274:11;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2764:274:11;-1:-1:-1;;;;;2764:274:11;;;;;;;;;;;;;;;;;;;;;963:30:9;;8:9:-1;5:2;;;30:1;27;20:12;5:2;963:30:9;;;;1132:130;1473:33;1486:10;-1:-1:-1;;;;;;1498:7:9;;;1473:12;:33::i;:::-;1465:66;;;;;;;-1:-1:-1;;;;;1465:66:9;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;;1465:66:9;;;;;;;;;;;;;;;1208:5;:14;;-1:-1:-1;;1208:14:9;-1:-1:-1;;;;;1208:14:9;;;;;;;;;;;1237:18;;1249:5;;;1237:18;;-1:-1:-1;;1237:18:9;1132:130;:::o;1798:940:11:-;1926:21;1473:33:9;1486:10;-1:-1:-1;;;;;;1498:7:9;;;1473:12;:33::i;:::-;1465:66;;;;;;;-1:-1:-1;;;;;1465:66:9;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;;1465:66:9;;;;;;;;;;;;;;;1260:53:10;;;1226:9;1260:53;;;;;;;;;1304:8;1260:53;;;;;;1168:1;1155:15;;1203:2;1190:16;;;;1155:15;;1277:10;;-1:-1:-1;1268:7:10;;-1:-1:-1;;;;;;1268:7:10;;1226:9;;-1:-1:-1;;1260:53:10;;;;-1:-1:-1;1304:8:10;;-1:-1:-1;1260:53:10;1:33:-1;99:1;81:16;;;74:27;1260:53:10;;137:4:-1;117:14;;;-1:-1;;113:30;157:16;;;1260:53:10;;;;-1:-1:-1;1260:53:10;;-1:-1:-1;;;;;1260:53:10;-1:-1:-1;;;;;2014:21:11;;;;2006:66;;;;;-1:-1:-1;;;;;2006:66:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2297:1;2294;2286:5;2280:12;2273:4;2266:5;2262:16;2253:7;2246:4;2241:3;2237:14;2224:75;2324:14;2370:4;2364:11;2352:23;;2451:4;2447:9;2440:4;2433;2427;2423:15;2419:26;2415:42;2405:8;2401:57;2395:4;2388:71;2489:4;2479:8;2472:22;2546:4;2543:1;2536:4;2526:8;2522:19;2507:44;2579:9;2572:17;2607:1;2602:120;;;;2565:157;;2602:120;2703:4;2696;2686:8;2682:19;2675:33;2565:157;;2193:539;;1541:1:9;;;1798:940:11;;;;:::o;1410:382::-;1577:5;;:17;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1531:21:11;;-1:-1:-1;;;;;1577:5:11;;;;:10;;:17;;;;;;;;;;;;;;;;;;-1:-1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;1577:17:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1577:17:11;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1577:17:11;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1577:17:11;;-1:-1:-1;;;;;;1608:20:11;;;1604:138;;;1713:5;;:18;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1713:5:11;;;;:11;;:18;;;;;;;;;;;;;;;;-1:-1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;1713:18:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1713:18:11;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1713:18:11;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1713:18:11;;-1:-1:-1;1604:138:11;1763:22;1771:6;1779:5;1763:7;:22::i;:::-;1752:33;;1410:382;;;;;:::o;1159:25::-;;;-1:-1:-1;;;;;1159:25:11;;:::o;1268:167:9:-;1473:33;1486:10;-1:-1:-1;;;;;;1498:7:9;;;1473:12;:33::i;:::-;1465:66;;;;;;;-1:-1:-1;;;;;1465:66:9;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;;1465:66:9;;;;;;;;;;;;;;;1356:9;:22;;-1:-1:-1;;1356:22:9;-1:-1:-1;;;;;1356:22:9;;;;;;;;;;1393:35;;1417:9;;;1393:35;;;1268:167;:::o;999:26::-;;;-1:-1:-1;;;;;999:26:9;;:::o;2764:274:11:-;2860:4;1473:33:9;1486:10;-1:-1:-1;;;;;;1498:7:9;;;1473:12;:33::i;:::-;1465:66;;;;;;;-1:-1:-1;;;;;1465:66:9;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;;1465:66:9;;;;;;;;;;;;;;;1260:53:10;;;1226:9;1260:53;;;;;;;;;1304:8;1260:53;;;;;;1168:1;1155:15;;1203:2;1190:16;;;;1155:15;;1277:10;;-1:-1:-1;1268:7:10;;-1:-1:-1;;;;;;1268:7:10;;1226:9;;-1:-1:-1;;1260:53:10;;;;-1:-1:-1;1304:8:10;;-1:-1:-1;1260:53:10;1:33:-1;99:1;81:16;;;74:27;1260:53:10;;137:4:-1;117:14;;;-1:-1;;113:30;157:16;;;1260:53:10;;;;-1:-1:-1;1260:53:10;;-1:-1:-1;;;;;1260:53:10;-1:-1:-1;;;;;2888:24:11;;;;2880:68;;;;;-1:-1:-1;;;;;2880:68:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2958:5:11;:32;;-1:-1:-1;;2958:32:11;-1:-1:-1;;;;;2958:32:11;;;;;;;;;;;-1:-1:-1;;;2764:274:11;-1:-1:-1;2764:274:11:o;963:30:9:-;;;-1:-1:-1;;;;;963:30:9;;:::o;1555:370::-;1625:4;1660;-1:-1:-1;;;;;1645:20:9;;;1641:278;;;-1:-1:-1;1688:4:9;1681:11;;1641:278;1720:5;;-1:-1:-1;;;;;1713:12:9;;;1720:5;;1713:12;1709:210;;;-1:-1:-1;1748:4:9;1741:11;;1709:210;1798:1;1773:9;-1:-1:-1;;;;;1773:9:9;:27;1769:150;;;-1:-1:-1;1823:5:9;1816:12;;1769:150;1866:9;;:42;;;;;;-1:-1:-1;;;;;1866:42:9;;;;;;;1897:4;1866:42;;;;-1:-1:-1;;;;;;1866:42:9;;;;;;;;:9;;;;;:17;;:42;;;;;;;;;;;;;;:9;:42;;;5:2:-1;;;;30:1;27;20:12;5:2;1866:42:9;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1866:42:9;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1866:42:9;;-1:-1:-1;1769:150:9;1555:370;;;;:::o",
  "source": "// proxy.sol - execute actions atomically through the proxy's identity\n\n// Copyright (C) 2017  DappHub, LLC\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity >=0.5.0 <0.6.0;\n\nimport \"./auth.sol\";\nimport \"./note.sol\";\n\n// DSProxy\n// Allows code execution using a persistant identity This can be very\n// useful to execute a sequence of atomic actions. Since the owner of\n// the proxy can be changed, this allows for dynamic ownership models\n// i.e. a multisig\ncontract DSProxy is DSAuth, DSNote {\n    event LogParams(address target, bytes data);\n\n    DSProxyCache public cache;  // global cache for contracts\n\n    constructor(address _cacheAddr) public {\n        setCache(_cacheAddr);\n    }\n\n    function() external payable {\n    }\n\n    // use the proxy to execute calldata _data on contract _code\n    function execute(bytes memory _code, bytes memory _data)\n        public\n        payable\n        returns (address target, bytes memory response)\n    {\n        target = cache.read(_code);\n        if (target == address(0)) {\n            // deploy contract & store its address in cache\n            target = cache.write(_code);\n        }\n\n        response = execute(target, _data);\n    }\n\n    function execute(address _target, bytes memory _data)\n        public\n        auth\n        note\n        payable\n        returns (bytes memory response)\n    {\n        // emit LogParams(_target, _data);\n        require(_target != address(0), \"ds-proxy-target-address-required\");\n\n        // call contract in current context\n        /* solium-disable security/no-inline-assembly */\n        assembly {\n            let succeeded := delegatecall(sub(gas, 5000), _target, add(_data, 0x20), mload(_data), 0, 0)\n            let size := returndatasize\n\n            response := mload(0x40)\n            mstore(0x40, add(response, and(add(add(size, 0x20), 0x1f), not(0x1f))))\n            mstore(response, size)\n            returndatacopy(add(response, 0x20), 0, size)\n\n            switch iszero(succeeded)\n            case 1 {\n                // throw if delegatecall failed\n                revert(add(response, 0x20), size)\n            }\n        }\n    }\n\n    //set new cache\n    function setCache(address _cacheAddr)\n        public\n        auth\n        note\n        returns (bool)\n    {\n        require(_cacheAddr != address(0), \"ds-proxy-cache-address-required\");\n        cache = DSProxyCache(_cacheAddr);  // overwrite cache\n        return true;\n    }\n}\n\n// DSProxyFactory\n// This factory deploys new proxy instances through build()\n// Deployed proxy addresses are logged\ncontract DSProxyFactory {\n    event Created(address indexed sender, address indexed owner, address proxy, address cache);\n    mapping(address=>bool) public isProxy;\n    DSProxyCache public cache;\n\n    constructor() public {\n        cache = new DSProxyCache();\n    }\n\n    // deploys a new proxy instance\n    // sets owner of proxy to caller\n    function build() public returns (address payable proxy) {\n        proxy = build(msg.sender);\n    }\n\n    // deploys a new proxy instance\n    // sets custom owner of proxy\n    function build(address owner) public returns (address payable proxy) {\n        proxy = address(new DSProxy(address(cache)));\n        emit Created(msg.sender, owner, address(proxy), address(cache));\n        DSProxy(proxy).setOwner(owner);\n        isProxy[proxy] = true;\n    }\n}\n\n// DSProxyCache\n// This global cache stores addresses of contracts previously deployed\n// by a proxy. This saves gas from repeat deployment of the same\n// contracts and eliminates blockchain bloat.\n\n// By default, all proxies deployed from the same factory store\n// contracts in the same cache. The cache a proxy instance uses can be\n// changed.  The cache uses the sha3 hash of a contract's bytecode to\n// lookup the address\ncontract DSProxyCache {\n    mapping(bytes32 => address) cache;\n\n    function read(bytes memory _code) public view returns (address) {\n        bytes32 hash = keccak256(_code);\n        return cache[hash];\n    }\n\n    function write(bytes memory _code) public returns (address target) {\n        /* solium-disable security/no-inline-assembly */\n        assembly {\n            target := create(0, add(_code, 0x20), mload(_code))\n            switch iszero(extcodesize(target))\n            case 1 {\n                // throw if contract failed to deploy\n                revert(0, 0)\n            }\n        }\n        bytes32 hash = keccak256(_code);\n        cache[hash] = target;\n    }\n}\n",
  "sourcePath": "/home/hatch/projects/0xfutures/protocol/contracts/dappsys/proxy.sol",
  "compiler": {
    "name": "solc",
    "version": "0.5.0+commit.1d4f565a.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.2",
  "updatedAt": "2019-04-22T01:42:08.697Z",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  }
}