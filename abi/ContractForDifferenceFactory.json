{
  "contractName": "ContractForDifferenceFactory",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "forwardFactory",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "cfdRegistry",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "cfdModel",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "feeds",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "kyberFacade",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "_registry",
          "type": "address"
        },
        {
          "name": "_cfdModel",
          "type": "address"
        },
        {
          "name": "_forwardFactory",
          "type": "address"
        },
        {
          "name": "_feeds",
          "type": "address"
        },
        {
          "name": "_kyberFacade",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "marketId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "newCFDAddr",
          "type": "address"
        }
      ],
      "name": "LogCFDFactoryNew",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "newCFDAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "oldCFDAddr",
          "type": "address"
        }
      ],
      "name": "LogCFDFactoryNewByUpgrade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_registry",
          "type": "address"
        }
      ],
      "name": "setRegistry",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_cfdModel",
          "type": "address"
        }
      ],
      "name": "setCFDModel",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_cfdRegistry",
          "type": "address"
        }
      ],
      "name": "setCFDRegistry",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_forwardFactory",
          "type": "address"
        }
      ],
      "name": "setForwardFactory",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_feeds",
          "type": "address"
        }
      ],
      "name": "setFeeds",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_kyberFacade",
          "type": "address"
        }
      ],
      "name": "setKyberFacade",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_marketId",
          "type": "bytes32"
        },
        {
          "name": "_strikePrice",
          "type": "uint256"
        },
        {
          "name": "_notionalAmountDai",
          "type": "uint256"
        },
        {
          "name": "_isBuyer",
          "type": "bool"
        },
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "createContract",
      "outputs": [
        {
          "name": "cfd",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_marketId",
          "type": "bytes32"
        },
        {
          "name": "_strikePrice",
          "type": "uint256"
        },
        {
          "name": "_notionalAmountDai",
          "type": "uint256"
        },
        {
          "name": "_isBuyer",
          "type": "bool"
        }
      ],
      "name": "createContractWithETH",
      "outputs": [
        {
          "name": "cfd",
          "type": "address"
        }
      ],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "createByUpgrade",
      "outputs": [
        {
          "name": "newCfd",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.6+commit.b259423e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[],\"name\":\"createByUpgrade\",\"outputs\":[{\"name\":\"newCfd\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kyberFacade\",\"type\":\"address\"}],\"name\":\"setKyberFacade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"forwardFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_marketId\",\"type\":\"bytes32\"},{\"name\":\"_strikePrice\",\"type\":\"uint256\"},{\"name\":\"_notionalAmountDai\",\"type\":\"uint256\"},{\"name\":\"_isBuyer\",\"type\":\"bool\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"createContract\",\"outputs\":[{\"name\":\"cfd\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cfdRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cfdModel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_marketId\",\"type\":\"bytes32\"},{\"name\":\"_strikePrice\",\"type\":\"uint256\"},{\"name\":\"_notionalAmountDai\",\"type\":\"uint256\"},{\"name\":\"_isBuyer\",\"type\":\"bool\"}],\"name\":\"createContractWithETH\",\"outputs\":[{\"name\":\"cfd\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feeds\",\"type\":\"address\"}],\"name\":\"setFeeds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cfdRegistry\",\"type\":\"address\"}],\"name\":\"setCFDRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cfdModel\",\"type\":\"address\"}],\"name\":\"setCFDModel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_forwardFactory\",\"type\":\"address\"}],\"name\":\"setForwardFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeds\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kyberFacade\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"},{\"name\":\"_cfdModel\",\"type\":\"address\"},{\"name\":\"_forwardFactory\",\"type\":\"address\"},{\"name\":\"_feeds\",\"type\":\"address\"},{\"name\":\"_kyberFacade\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"marketId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newCFDAddr\",\"type\":\"address\"}],\"name\":\"LogCFDFactoryNew\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newCFDAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldCFDAddr\",\"type\":\"address\"}],\"name\":\"LogCFDFactoryNewByUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"createByUpgrade()\":{\"return\":\"address of new contract\"},\"createContract(bytes32,uint256,uint256,bool,uint256)\":{\"params\":{\"_isBuyer\":\"If the caller is to be the buyer, else they will be the seller\",\"_marketId\":\"Contract for this market (see PriceFeeds.sol markets)\",\"_notionalAmountDai\":\"Contract notional amount in DAI\",\"_strikePrice\":\"Contract strike price\",\"_value\":\"Amount of DAI to deposit\"},\"return\":\"address of new contract\"},\"createContractWithETH(bytes32,uint256,uint256,bool)\":{\"params\":{\"_isBuyer\":\"If the caller is to be the buyer, else they will be the seller\",\"_marketId\":\"Contract for this market (see Feeds.sol markets)\",\"_notionalAmountDai\":\"Contract notional amount\",\"_strikePrice\":\"Contact strike price\"},\"return\":\"address of new contract\"},\"isOwner()\":{\"return\":\"true if `msg.sender` is the owner of the contract.\"},\"owner()\":{\"return\":\"the address of the owner.\"},\"renounceOwnership()\":{\"details\":\"Allows the current owner to relinquish control of the contract.\"},\"transferOwnership(address)\":{\"details\":\"Allows the current owner to transfer control of the contract to a newOwner.\",\"params\":{\"newOwner\":\"The address to transfer ownership to.\"}}}},\"userdoc\":{\"methods\":{\"createByUpgrade()\":{\"notice\":\"Upgrade a CFD at a different set of contracts to this set of contracts. The old CFD itself will invoke this function to do the upgrade.\"},\"createContract(bytes32,uint256,uint256,bool,uint256)\":{\"notice\":\"Create a new ContractForDifference instance given DAI.\"},\"createContractWithETH(bytes32,uint256,uint256,bool)\":{\"notice\":\"Create a new ContractForDifference instance given ETH.     * Sent ETH is traded for DAI on the fly and the resulting amount of DAI is the contract collateral. So callers should calculate how much DAI collateral they want ahead of time and send the appropriate amount of ETH to match.\"},\"renounceOwnership()\":{\"notice\":\"Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore.\"}}}},\"settings\":{\"compilationTarget\":{\"/home/julien/0xFutures/protocol/contracts/cfd/ContractForDifferenceFactory.sol\":\"ContractForDifferenceFactory\"},\"evmVersion\":\"constantinople\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/home/julien/0xFutures/protocol/contracts/DBC.sol\":{\"keccak256\":\"0xc9c8bf071e0f5bff796bfde919237f33136d8c18a89dec61a52a0391fc76c256\",\"urls\":[\"bzzr://b44dfa0ecd91495eb61d07322588ebc1ea50fadd8bc22464e94c3d070a6b6ea1\"]},\"/home/julien/0xFutures/protocol/contracts/ForwardFactory.sol\":{\"keccak256\":\"0x658664b425aa52f40007ac2f1be1a1da9ec2239c4a42c3864b5cac108f002e0c\",\"urls\":[\"bzzr://6514d98ab20cd063f94b0d29810df5d212dd80dd09471f24de909f4fb07c6f36\"]},\"/home/julien/0xFutures/protocol/contracts/Registry.sol\":{\"keccak256\":\"0x2703d1c87ddd66da66c110570d5e896848f21d3fea0a860ab3ac7cac007a1755\",\"urls\":[\"bzzr://df2ab637255c3194b717f3c9a857bc8d55ba4dddd4605621b48f75e9bb4fcd94\"]},\"/home/julien/0xFutures/protocol/contracts/cfd/ContractForDifference.sol\":{\"keccak256\":\"0x01fc182b9d58b07a3c2749f617c3d4f6f11f155f489eebe317a26a1d8fd36b0c\",\"urls\":[\"bzzr://e69f6c7a6224585903f2389f7136baf54e1bd613348f0188658aa0d0659d6296\"]},\"/home/julien/0xFutures/protocol/contracts/cfd/ContractForDifferenceFactory.sol\":{\"keccak256\":\"0x8fc6d2010a612362e6999696c08621fd76245edc7dc2affc0e449513038baf15\",\"urls\":[\"bzzr://481bcf05025c32c9f6b887d34ab85af5cc1f1b475f347df9bb9ca80e4f8e2496\"]},\"/home/julien/0xFutures/protocol/contracts/cfd/ContractForDifferenceLibrary.sol\":{\"keccak256\":\"0x7d8b4fae4675864c273b85f2b8a7ed8bc8f504b49f2955b0f69b694c30ec2771\",\"urls\":[\"bzzr://47e963e227389af89263baa271e1ec5c54c192883ec2697801807c3827110952\"]},\"/home/julien/0xFutures/protocol/contracts/cfd/ContractForDifferenceRegistry.sol\":{\"keccak256\":\"0xdb72ba28920116724194b8ed9320a1bdf09837236d972ed8b975bf2a27c3ac5f\",\"urls\":[\"bzzr://ae02629dd3df0bbbe65a6f0ca63281111db7ae546ee4cc8dcbd7a276d31cc203\"]},\"/home/julien/0xFutures/protocol/contracts/dappsys/proxy.sol\":{\"keccak256\":\"0xe002251a6b856a3a65e81102bb10ad1ad2e62a270a07a021630afc6093096079\",\"urls\":[\"bzzr://fea23195db1c273eafecfb23d929ddaa3f499880c4d7b1b31ae10163300e23f0\"]},\"/home/julien/0xFutures/protocol/contracts/feeds/PriceFeeds.sol\":{\"keccak256\":\"0x8ba1b12440e881c7e80fdd4b7b25cbbaac9bcf5713a8b035d4b1a5da5ca5e0e1\",\"urls\":[\"bzzr://ae43bcc863c1e9385d469f9a7f2da64c4b852cbf851dd41839865933e6b0cf13\"]},\"/home/julien/0xFutures/protocol/contracts/feeds/PriceFeedsKyber.sol\":{\"keccak256\":\"0x37deca70d59a055cd134e262a900ca8eb0b259156526f540e5fa94bf283b976e\",\"urls\":[\"bzzr://58b2f89362999ac5293840115b67a237f725554262da7ded1ce8b8518e0df7c0\"]},\"/home/julien/0xFutures/protocol/contracts/kyber/KyberFacade.sol\":{\"keccak256\":\"0x61224fefecee1d501cbe250e851678fca5c7cf33d284a89102194380856a2c86\",\"urls\":[\"bzzr://8f48e7321136871f5d7bb183a1a1d798b9fd0b688b885684608d90578d66a4b4\"]},\"/home/julien/0xFutures/protocol/contracts/kyber/KyberNetworkProxyInterface.sol\":{\"keccak256\":\"0x0e3fe90852ca500af9457df99c1aec660ae2bdddb170c444881b1f6f796ce91c\",\"urls\":[\"bzzr://8c7ac792da4b76214844068529a0fcdb6bc821e866e0711786958e4ba7a69374\"]},\"openzeppelin-solidity/contracts/math/SafeMath.sol\":{\"keccak256\":\"0x965012d27b4262d7a41f5028cbb30c51ebd9ecd4be8fb30380aaa7a3c64fbc8b\",\"urls\":[\"bzzr://41ca38f6b0fa4b77b0feec43e422cfbec48b7eb38a41edf0b85c77e8d9a296b1\"]},\"openzeppelin-solidity/contracts/ownership/Ownable.sol\":{\"keccak256\":\"0x980de387a1a020a498f53d00f89fecebb12c949a17e8f160093c0303ede2b786\",\"urls\":[\"bzzr://08894efa2a557982070beda6a81a032407e70532d24bdafe80d39660c74904d9\"]},\"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xba431353cb4fe70777ac026231eb5468e41aa1e81240a2b8136917acc5fff4dc\",\"urls\":[\"bzzr://80cd02a56e6e33504318124d0d645c82e615cc8a4b5829cc9d82d17635c644c8\"]},\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x079c4e23ee448f529e43bfa3c4e8fb4be52cd0318ee923a276835bedf45b93d8\",\"urls\":[\"bzzr://48248e86f64407a95f241d6c5c8cfea6b4d4ebf4ebb467e5c98c8af3868fafe4\"]}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101145760003560e01c80637dc532c5116100a0578063abcca75e11610064578063abcca75e14610334578063c03cced314610367578063d63605b81461039a578063ef410289146103af578063f2fde38b146103c457610114565b80637dc532c51461025d5780638da5cb5b146102905780638f32d59b146102a55780639255e0d6146102ce578063a91ee0dc1461030157610114565b80635fd355eb116100e75780635fd355eb146101d8578063715018a6146101ed57806377b727ac146102025780637b103999146102175780637b9e2fc21461022c57610114565b8063165ae0fc14610119578063382c4c771461014a57806338874a1a1461017f57806344a1e61814610194575b600080fd5b34801561012557600080fd5b5061012e6103f7565b604080516001600160a01b039092168252519081900360200190f35b34801561015657600080fd5b5061017d6004803603602081101561016d57600080fd5b50356001600160a01b0316610ade565b005b34801561018b57600080fd5b5061012e610b11565b3480156101a057600080fd5b5061012e600480360360a08110156101b757600080fd5b50803590602081013590604081013590606081013515159060800135610b20565b3480156101e457600080fd5b5061012e610ca4565b3480156101f957600080fd5b5061017d610cb3565b34801561020e57600080fd5b5061012e610d0e565b34801561022357600080fd5b5061012e610d1d565b61012e6004803603608081101561024257600080fd5b50803590602081013590604081013590606001351515610d2c565b34801561026957600080fd5b5061017d6004803603602081101561028057600080fd5b50356001600160a01b0316610dc9565b34801561029c57600080fd5b5061012e610dfc565b3480156102b157600080fd5b506102ba610e0b565b604080519115158252519081900360200190f35b3480156102da57600080fd5b5061017d600480360360208110156102f157600080fd5b50356001600160a01b0316610e1c565b34801561030d57600080fd5b5061017d6004803603602081101561032457600080fd5b50356001600160a01b0316610e4f565b34801561034057600080fd5b5061017d6004803603602081101561035757600080fd5b50356001600160a01b0316610e82565b34801561037357600080fd5b5061017d6004803603602081101561038a57600080fd5b50356001600160a01b0316610eb5565b3480156103a657600080fd5b5061012e610ee8565b3480156103bb57600080fd5b5061012e610ef7565b3480156103d057600080fd5b5061017d600480360360208110156103e757600080fd5b50356001600160a01b0316610f06565b6000306001600160a01b0316600160009054906101000a90046001600160a01b03166001600160a01b03166323ec7f2a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561045157600080fd5b505afa158015610465573d6000803e3d6000fd5b505050506040513d602081101561047b57600080fd5b5051604080516060810190915260308082526001600160a01b039092169290921491906114c760208301399061053257604051600160e51b62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b838110156104f75781810151838201526020016104df565b50505050905090810190601f1680156105245780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060015460408051600160e31b63018b52bf0281523360048201819052915191926000926001600160a01b0390911691630c5a95f8916024808301926020929190829003018186803b15801561058757600080fd5b505afa15801561059b573d6000803e3d6000fd5b505050506040513d60208110156105b157600080fd5b505190506001600160a01b038116158015906105d657506001600160a01b0381163014155b6040518060400160405280601f81526020017f43616c6c6572206d7573742062652061207265676973746572656420434644008152509061065b57604051600160e51b62461bcd0281526020600482018181528351602484015283519092839260449091019190850190808383600083156104f75781810151838201526020016104df565b506000829050806001600160a01b03166341c20c8e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561069a57600080fd5b505afa1580156106ae573d6000803e3d6000fd5b505050506040513d60208110156106c457600080fd5b5051604080516060810190915260218082526114f760208301399061072d57604051600160e51b62461bcd0281526020600482018181528351602484015283519092839260449091019190850190808383600083156104f75781810151838201526020016104df565b506004805460025460408051600160e01b639193ba0b0281526001600160a01b039283169481019490945251911691639193ba0b9160248083019260209291908290030181600087803b15801561078357600080fd5b505af1158015610797573d6000803e3d6000fd5b505050506040513d60208110156107ad57600080fd5b505160035460408051600160e11b6338a86c5702815290519296506001600160a01b0391821692630596030d92889290861691637150d8ae91600480820192602092909190829003018186803b15801561080657600080fd5b505afa15801561081a573d6000803e3d6000fd5b505050506040513d602081101561083057600080fd5b50516040805163ffffffff851660e01b81526001600160a01b03938416600482015292909116602483015251604480830192600092919082900301818387803b15801561087c57600080fd5b505af1158015610890573d6000803e3d6000fd5b505060015460035460055460408051600160e01b632802759b0281526001600160a01b038a81166004830152948516602482015292841660448401529083166064830152519188169350632802759b925060848082019260009290919082900301818387803b15801561090257600080fd5b505af1158015610916573d6000803e3d6000fd5b505060015460408051600160e31b630eda01fb0281526001600160a01b03898116600483015291519190921693506376d00fd89250602480830192600092919082900301818387803b15801561096b57600080fd5b505af115801561097f573d6000803e3d6000fd5b50505050836001600160a01b0316637150d8ae6040518163ffffffff1660e01b815260040160206040518083038186803b1580156109bc57600080fd5b505afa1580156109d0573d6000803e3d6000fd5b505050506040513d60208110156109e657600080fd5b505160408051600160e01b6380f5560502815290516001600160a01b03928316928716916380f55605916004808301926020929190829003018186803b158015610a2f57600080fd5b505afa158015610a43573d6000803e3d6000fd5b505050506040513d6020811015610a5957600080fd5b5051604080516001600160a01b038816815290517f2d0c41699a808fef3dcfaa411d95703031d69229e73f5f3299fd6045deb4f9629181900360200190a3604080516001600160a01b0383811682529151918616917fe77178664194a5b1c28f6ee0f3fcb6d4404d796abfdf7edee18b68617768f48a9181900360200190a250505090565b610ae6610e0b565b610aef57600080fd5b600680546001600160a01b0319166001600160a01b0392909216919091179055565b6004546001600160a01b031681565b600081600160009054906101000a90046001600160a01b03166001600160a01b0316638ef855686040518163ffffffff1660e01b815260040160206040518083038186803b158015610b7157600080fd5b505afa158015610b85573d6000803e3d6000fd5b505050506040513d6020811015610b9b57600080fd5b505160408051600160e11b636eb1769f02815233600482015230602482015290516001600160a01b039092169163dd62ed3e91604480820192602092909190829003018186803b158015610bee57600080fd5b505afa158015610c02573d6000803e3d6000fd5b505050506040513d6020811015610c1857600080fd5b50516040805160608101909152602580825292909110159161154360208301398082610c8857604051600160e51b62461bcd0281526020600482018181528351602484015283519092839260449091019190850190808383600083156104f75781810151838201526020016104df565b50610c9888888888886001610f23565b98975050505050505050565b6003546001600160a01b031681565b610cbb610e0b565b610cc457600080fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6002546001600160a01b031681565b6001546001600160a01b031681565b60065460408051600160e31b6314ed3541028152306004820152905160009283926001600160a01b039091169163a769aa08913491602480830192602092919082900301818588803b158015610d8157600080fd5b505af1158015610d95573d6000803e3d6000fd5b50505050506040513d6020811015610dac57600080fd5b50519050610dbf86868686856000610f23565b9695505050505050565b610dd1610e0b565b610dda57600080fd5b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031690565b6000546001600160a01b0316331490565b610e24610e0b565b610e2d57600080fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b610e57610e0b565b610e6057600080fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b610e8a610e0b565b610e9357600080fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b610ebd610e0b565b610ec657600080fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b031681565b6006546001600160a01b031681565b610f0e610e0b565b610f1757600080fd5b610f2081611458565b50565b6004805460025460408051600160e01b639193ba0b0281526001600160a01b0392831694810194909452516000939190921691639193ba0b9160248082019260209290919082900301818787803b158015610f7d57600080fd5b505af1158015610f91573d6000803e3d6000fd5b505050506040513d6020811015610fa757600080fd5b505190506001821515141561112557600160009054906101000a90046001600160a01b03166001600160a01b0316638ef855686040518163ffffffff1660e01b815260040160206040518083038186803b15801561100457600080fd5b505afa158015611018573d6000803e3d6000fd5b505050506040513d602081101561102e57600080fd5b505160408051600160e01b6323b872dd0281523360048201526001600160a01b03848116602483015260448201879052915191909216916323b872dd9160648083019260209291908290030181600087803b15801561108c57600080fd5b505af11580156110a0573d6000803e3d6000fd5b505050506040513d60208110156110b657600080fd5b50516040805160608101909152602b80825261151860208301399061111f57604051600160e51b62461bcd0281526020600482018181528351602484015283519092839260449091019190850190808383600083156104f75781810151838201526020016104df565b5061128a565b600160009054906101000a90046001600160a01b03166001600160a01b0316638ef855686040518163ffffffff1660e01b815260040160206040518083038186803b15801561117357600080fd5b505afa158015611187573d6000803e3d6000fd5b505050506040513d602081101561119d57600080fd5b505160408051600160e01b63a9059cbb0281526001600160a01b038481166004830152602482018790529151919092169163a9059cbb9160448083019260209291908290030181600087803b1580156111f557600080fd5b505af1158015611209573d6000803e3d6000fd5b505050506040513d602081101561121f57600080fd5b50516040805160608101909152602b80825261151860208301399061128857604051600160e51b62461bcd0281526020600482018181528351602484015283519092839260449091019190850190808383600083156104f75781810151838201526020016104df565b505b60015460035460055460408051600160e31b631073769f0281526001600160a01b039485166004820152928416602484015290831660448301523360648301819052608483018b905260a483018a905260c4830189905287151560e48401529051909284169163839bb4f89161010480830192600092919082900301818387803b15801561131757600080fd5b505af115801561132b573d6000803e3d6000fd5b505060015460408051600160e31b630eda01fb0281526001600160a01b03878116600483015291519190921693506376d00fd89250602480830192600092919082900301818387803b15801561138057600080fd5b505af1158015611394573d6000803e3d6000fd5b5050604080516001600160a01b038681168252915191851693508b92507f2d0c41699a808fef3dcfaa411d95703031d69229e73f5f3299fd6045deb4f962919081900360200190a360035460408051600160e01b630596030d0281526001600160a01b038581166004830152848116602483015291519190921691630596030d91604480830192600092919082900301818387803b15801561143557600080fd5b505af1158015611449573d6000803e3d6000fd5b50505050509695505050505050565b6001600160a01b03811661146b57600080fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b039290921691909117905556fe43616e206f6e6c792075706772616465206f6e206120666163746f7279207468617420697320746865206c61746573747570677261646561626c65206973206e6f742073657420696e20746865204346444661696c757265207472616e73666572696e67206f776e657273686970206f662044414920746f6b656e7344414920616c6c6f77616e6365206973206c657373207468616e20746865205f76616c7565a165627a7a723058207f22dbd46cd80ac7cc318827461d0fe2e635ad90a9479cee33ef8de46f21091a0029",
  "sourceMap": "288:7997:5:-;;;1234:345;8:9:-1;5:2;;;30:1;27;20:12;5:2;1234:345:5;;;;;;;;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;1234:345:5;;;;;;;;;;;;;;;;;;;;515:6:17;:19;;-1:-1:-1;;;;;;515:19:17;524:10;515:19;;;;549:40;;1234:345:5;;;;;;;;;-1:-1:-1;;;;;582:6:17;;;;;549:40;;515:6;;549:40;1410:22:5;1422:9;1410:11;;;:22;;:::i;:::-;1442;1454:9;1442:11;;;:22;;:::i;:::-;1474:34;1492:15;1474:17;;;:34;;:::i;:::-;1518:16;1527:6;1518:8;;;:16;;:::i;:::-;1544:28;1559:12;1544:14;;;:28;;:::i;:::-;1234:345;;;;;288:7997;;1585:104;863:9:17;:7;;;:9;;:::i;:::-;855:18;;;;;;1652:8:5;:30;;-1:-1:-1;;;;;;1652:30:5;-1:-1:-1;;;;;1652:30:5;;;;;;;;;;1585:104::o;1695:94::-;863:9:17;:7;;;:9;;:::i;:::-;855:18;;;;;;1762:8:5;:20;;-1:-1:-1;;;;;;1762:20:5;-1:-1:-1;;;;;1762:20:5;;;;;;;;;;1695:94::o;1907:118::-;863:9:17;:7;;;:9;;:::i;:::-;855:18;;;;;;1986:14:5;:32;;-1:-1:-1;;;;;;1986:32:5;-1:-1:-1;;;;;1986:32:5;;;;;;;;;;1907:118::o;2031:82::-;863:9:17;:7;;;:9;;:::i;:::-;855:18;;;;;;2092:5:5;:14;;-1:-1:-1;;;;;;2092:14:5;-1:-1:-1;;;;;2092:14:5;;;;;;;;;;2031:82::o;2119:119::-;863:9:17;:7;;;:9;;:::i;:::-;855:18;;;;;;2192:11:5;:39;;-1:-1:-1;;;;;;2192:39:5;-1:-1:-1;;;;;2192:39:5;;;;;;;;;;2119:119::o;979:90:17:-;1019:4;1056:6;-1:-1:-1;;;;;1056:6:17;1042:10;:20;;979:90::o;288:7997:5:-;;;;;;;",
  "deployedSourceMap": "288:7997:5:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6691:1591;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6691:1591:5;;;:::i;:::-;;;;-1:-1:-1;;;;;6691:1591:5;;;;;;;;;;;;;;2119:119;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2119:119:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2119:119:5;-1:-1:-1;;;;;2119:119:5;;:::i;:::-;;1136:29;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1136:29:5;;;:::i;2699:595::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2699:595:5;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;2699:595:5;;;;;;;;;;;;;;;;;;;;;;;;:::i;1104:26::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1104:26:5;;;:::i;1347:137:17:-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1347:137:17;;;:::i;1075:23:5:-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1075:23:5;;;:::i;1045:24::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1045:24:5;;;:::i;3954:569::-;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;3954:569:5;;;;;;;;;;;;;;;;;;;:::i;2031:82::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2031:82:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2031:82:5;-1:-1:-1;;;;;2031:82:5;;:::i;659:77:17:-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;659:77:17;;;:::i;979:90::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;979:90:17;;;:::i;:::-;;;;;;;;;;;;;;;;;;1795:106:5;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1795:106:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1795:106:5;-1:-1:-1;;;;;1795:106:5;;:::i;1585:104::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1585:104:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1585:104:5;-1:-1:-1;;;;;1585:104:5;;:::i;1695:94::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1695:94:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1695:94:5;-1:-1:-1;;;;;1695:94:5;;:::i;1907:118::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1907:118:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1907:118:5;-1:-1:-1;;;;;1907:118:5;;:::i;1171:20::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1171:20:5;;;:::i;1197:30::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1197:30:5;;;:::i;1655:107:17:-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1655:107:17;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1655:107:17;-1:-1:-1;;;;;1655:107:17;;:::i;6691:1591:5:-;6752:28;6912:4;-1:-1:-1;;;;;6870:47:5;:8;;;;;;;;;-1:-1:-1;;;;;6870:8:5;-1:-1:-1;;;;;6870:28:5;;:30;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6870:30:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6870:30:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;6870:30:5;6919:21;;;;;;;;;;;;;-1:-1:-1;;;;;6870:47:5;;;;;;;;6919:21;;6870:30;6919:21;;;6862:79;;;;;-1:-1:-1;;;;;6862:79:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;6862:79:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7094:8:5;;:25;;;-1:-1:-1;;;;;7094:25:5;;6970:10;7094:25;;;;;;;;6970:10;;6952:15;;-1:-1:-1;;;;;7094:8:5;;;;:16;;:25;;;;;;;;;;;;;;:8;:25;;;5:2:-1;;;;30:1;27;20:12;5:2;7094:25:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7094:25:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;7094:25:5;;-1:-1:-1;;;;;;7150:27:5;;;;;;:61;;-1:-1:-1;;;;;;7181:30:5;;7206:4;7181:30;;7150:61;7225:26;;;;;;;;;;;;;;;;;7129:132;;;;;-1:-1:-1;;;;;7129:132:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;7129:132:5;;7272:33;7330:7;7272:66;;7356:11;-1:-1:-1;;;;;7356:23:5;;:25;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7356:25:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7356:25:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;7356:25:5;7383:31;;;;;;;;;;;;;;7356:25;7383:31;;;7348:67;;;;;-1:-1:-1;;;;;7348:67:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;7348:67:5;-1:-1:-1;7485:14:5;;;7517:8;;7470:56;;;-1:-1:-1;;;;;7470:56:5;;-1:-1:-1;;;;;7517:8:5;;;7470:56;;;;;;;;7485:14;;;7470:46;;:56;;;;;;;;;;;;;;7485:14;;7470:56;;;5:2:-1;;;;30:1;27;20:12;5:2;7470:56:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7470:56:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;7470:56:5;7712:11;;7779:19;;;-1:-1:-1;;;;;7779:19:5;;;;7470:56;;-1:-1:-1;;;;;;7712:11:5;;;;7682:54;;7470:56;;7779:17;;;;;;:19;;;;;7470:56;;7779:19;;;;;;;;:17;:19;;;5:2:-1;;;;30:1;27;20:12;5:2;7779:19:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7779:19:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;7779:19:5;7682:126;;;;;;;;;;-1:-1:-1;;;;;7682:126:5;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;7682:126:5;;;;;;;-1:-1:-1;7682:126:5;;;;5:2:-1;;;;30:1;27;20:12;5:2;7682:126:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;7884:8:5;;7907:11;;7932:5;;7819:128;;;-1:-1:-1;;;;;7819:128:5;;-1:-1:-1;;;;;7819:128:5;;;;;;;7884:8;;;7819:128;;;;7907:11;;;7819:128;;;;7932:5;;;7819:128;;;;;:22;;;;-1:-1:-1;7819:22:5;;-1:-1:-1;7819:128:5;;;;;7884:8;;7819:128;;;;;;;;7884:8;7819:22;:128;;;5:2:-1;;;;30:1;27;20:12;5:2;7819:128:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;8002:8:5;;:32;;;-1:-1:-1;;;;;8002:32:5;;-1:-1:-1;;;;;8002:32:5;;;;;;;;;:8;;;;;-1:-1:-1;8002:15:5;;-1:-1:-1;8002:32:5;;;;;:8;;:32;;;;;;;:8;;:32;;;5:2:-1;;;;30:1;27;20:12;5:2;8002:32:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8002:32:5;;;;8164:6;-1:-1:-1;;;;;8164:12:5;;:14;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8164:14:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8164:14:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;8164:14:5;8147:15;;;-1:-1:-1;;;;;8147:15:5;;;;-1:-1:-1;;;;;8130:66:5;;;;8147:13;;;;;:15;;;;;8164:14;;8147:15;;;;;;;:13;:15;;;5:2:-1;;;;30:1;27;20:12;5:2;8147:15:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8147:15:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;8147:15:5;8130:66;;;-1:-1:-1;;;;;8130:66:5;;;;;;;;;;;8147:15;8130:66;;;8211:64;;;-1:-1:-1;;;;;8211:64:5;;;;;;;;;;;;;;;;;;;;6691:1591;;;;:::o;2119:119::-;863:9:17;:7;:9::i;:::-;855:18;;;;;;2192:11:5;:39;;-1:-1:-1;;;;;;2192:39:5;-1:-1:-1;;;;;2192:39:5;;;;;;;;;;2119:119::o;1136:29::-;;;-1:-1:-1;;;;;1136:29:5;;:::o;2699:595::-;3041:25;2965:6;2907:8;;;;;;;;;-1:-1:-1;;;;;2907:8:5;-1:-1:-1;;;;;2907:15:5;;:17;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2907:17:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2907:17:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2907:17:5;:54;;;-1:-1:-1;;;;;2907:54:5;;2935:10;2907:54;;;;2955:4;2907:54;;;;;;-1:-1:-1;;;;;2907:27:5;;;;;;:54;;;;;:17;;:54;;;;;;;;:27;:54;;;5:2:-1;;;;30:1;27;20:12;5:2;2907:54:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2907:54:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2907:54:5;2985:28;;;;;;;;;;;;;2907:64;;;;;;2985:28;2907:54;2985:28;;;304:6:0;293:9;285:26;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;3088:199:5;3124:9;3147:12;3173:18;3205:8;3227:6;3247:4;3088:22;:199::i;:::-;3082:205;2699:595;-1:-1:-1;;;;;;;;2699:595:5:o;1104:26::-;;;-1:-1:-1;;;;;1104:26:5;;:::o;1347:137:17:-;863:9;:7;:9::i;:::-;855:18;;;;;;1445:1;1429:6;;1408:40;;-1:-1:-1;;;;;1429:6:17;;;;1408:40;;1445:1;;1408:40;1475:1;1458:19;;-1:-1:-1;;;;;;1458:19:17;;;1347:137::o;1075:23:5:-;;;-1:-1:-1;;;;;1075:23:5;;:::o;1045:24::-;;;-1:-1:-1;;;;;1045:24:5;;:::o;3954:569::-;4209:11;;:52;;;-1:-1:-1;;;;;4209:52:5;;4255:4;4209:52;;;;;;4151:25;;;;-1:-1:-1;;;;;4209:11:5;;;;:20;;4236:9;;4209:52;;;;;;;;;;;;;;4236:9;4209:11;:52;;;5:2:-1;;;;30:1;27;20:12;5:2;4209:52:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4209:52:5;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;4209:52:5;;-1:-1:-1;4277:239:5;4313:9;4336:12;4362:18;4394:8;4209:52;4439:5;4277:22;:239::i;:::-;4271:245;3954:569;-1:-1:-1;;;;;;3954:569:5:o;2031:82::-;863:9:17;:7;:9::i;:::-;855:18;;;;;;2092:5:5;:14;;-1:-1:-1;;;;;;2092:14:5;-1:-1:-1;;;;;2092:14:5;;;;;;;;;;2031:82::o;659:77:17:-;697:7;723:6;-1:-1:-1;;;;;723:6:17;659:77;:::o;979:90::-;1019:4;1056:6;-1:-1:-1;;;;;1056:6:17;1042:10;:20;;979:90::o;1795:106:5:-;863:9:17;:7;:9::i;:::-;855:18;;;;;;1868:11:5;:26;;-1:-1:-1;;;;;;1868:26:5;-1:-1:-1;;;;;1868:26:5;;;;;;;;;;1795:106::o;1585:104::-;863:9:17;:7;:9::i;:::-;855:18;;;;;;1652:8:5;:30;;-1:-1:-1;;;;;;1652:30:5;-1:-1:-1;;;;;1652:30:5;;;;;;;;;;1585:104::o;1695:94::-;863:9:17;:7;:9::i;:::-;855:18;;;;;;1762:8:5;:20;;-1:-1:-1;;;;;;1762:20:5;-1:-1:-1;;;;;1762:20:5;;;;;;;;;;1695:94::o;1907:118::-;863:9:17;:7;:9::i;:::-;855:18;;;;;;1986:14:5;:32;;-1:-1:-1;;;;;;1986:32:5;-1:-1:-1;;;;;1986:32:5;;;;;;;;;;1907:118::o;1171:20::-;;;-1:-1:-1;;;;;1171:20:5;;:::o;1197:30::-;;;-1:-1:-1;;;;;1197:30:5;;:::o;1655:107:17:-;863:9;:7;:9::i;:::-;855:18;;;;;;1727:28;1746:8;1727:18;:28::i;:::-;1655:107;:::o;5146:1333:5:-;5474:14;;;5506:8;;5459:56;;;-1:-1:-1;;;;;5459:56:5;;-1:-1:-1;;;;;5506:8:5;;;5459:56;;;;;;;;5377:25;;5474:14;;;;;5459:46;;:56;;;;;;;;;;;;;;;5377:25;5474:14;5459:56;;;5:2:-1;;;;30:1;27;20:12;5:2;5459:56:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5459:56:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;5459:56:5;;-1:-1:-1;5558:4:5;5540:22;;;;5536:440;;;5603:8;;;;;;;;;-1:-1:-1;;;;;5603:8:5;-1:-1:-1;;;;;5603:15:5;;:17;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5603:17:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5603:17:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;5603:17:5;:142;;;-1:-1:-1;;;;;5603:142:5;;5655:10;5603:142;;;;-1:-1:-1;;;;;5603:142:5;;;;;;;;;;;;;;;:30;;;;;;;:142;;;;;:17;;:142;;;;;;;-1:-1:-1;5603:30:5;:142;;;5:2:-1;;;;30:1;27;20:12;5:2;5603:142:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5603:142:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;5603:142:5;5763:26;;;;;;;;;;;;;;5603:142;5763:26;;;5578:225;;;;;-1:-1:-1;;;;;5578:225:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;5578:225:5;;5536:440;;;5859:8;;;;;;;;;-1:-1:-1;;;;;5859:8:5;-1:-1:-1;;;;;5859:15:5;;:17;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5859:17:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5859:17:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;5859:17:5;:48;;;-1:-1:-1;;;;;5859:48:5;;-1:-1:-1;;;;;5859:48:5;;;;;;;;;;;;;;;:26;;;;;;;:48;;;;;:17;;:48;;;;;;;-1:-1:-1;5859:26:5;:48;;;5:2:-1;;;;30:1;27;20:12;5:2;5859:48:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5859:48:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;5859:48:5;5925:26;;;;;;;;;;;;;;5859:48;5925:26;;;5834:131;;;;;-1:-1:-1;;;;;5834:131:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;5834:131:5;;5536:440;6059:8;;6082:11;;6107:5;;6024:222;;;-1:-1:-1;;;;;6024:222:5;;-1:-1:-1;;;;;6059:8:5;;;6024:222;;;;6082:11;;;6024:222;;;;6107:5;;;6024:222;;;;6004:10;6024:222;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6004:10;;6024:13;;;;;:222;;;;;5986:15;;6024:222;;;;;;;5986:15;6024:13;:222;;;5:2:-1;;;;30:1;27;20:12;5:2;6024:222:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;6257:8:5;;:29;;;-1:-1:-1;;;;;6257:29:5;;-1:-1:-1;;;;;6257:29:5;;;;;;;;;:8;;;;;-1:-1:-1;6257:15:5;;-1:-1:-1;6257:29:5;;;;;:8;;:29;;;;;;;:8;;:29;;;5:2:-1;;;;30:1;27;20:12;5:2;6257:29:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;6301:50:5;;;-1:-1:-1;;;;;6301:50:5;;;;;;;;;;;-1:-1:-1;6318:9:5;;-1:-1:-1;6301:50:5;;;;;;;;;;6391:11;;6361:111;;;-1:-1:-1;;;;;6361:111:5;;-1:-1:-1;;;;;6361:111:5;;;;;;;;;;;;;;;;6391:11;;;;;6361:54;;:111;;;;;6391:11;;6361:111;;;;;;;6391:11;;6361:111;;;5:2:-1;;;;30:1;27;20:12;5:2;6361:111:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6361:111:5;;;;5146:1333;;;;;;;;;:::o;1906:183:17:-;-1:-1:-1;;;;;1979:22:17;;1971:31;;;;;;2038:6;;;2017:38;;-1:-1:-1;;;;;2017:38:17;;;;2038:6;;;2017:38;;;2065:6;:17;;-1:-1:-1;;;;;;2065:17:17;-1:-1:-1;;;;;2065:17:17;;;;;;;;;;1906:183::o",
  "source": "pragma solidity ^0.5.0;\n\nimport \"openzeppelin-solidity/contracts/ownership/Ownable.sol\";\nimport \"../DBC.sol\";\nimport \"../Registry.sol\";\nimport \"../ForwardFactory.sol\";\nimport \"../kyber/KyberFacade.sol\";\nimport \"./ContractForDifference.sol\";\nimport \"./ContractForDifferenceRegistry.sol\";\n\ncontract ContractForDifferenceFactory is DBC, Ownable {\n    event LogCFDFactoryNew(\n        bytes32 indexed marketId,\n        address indexed creator,\n        address newCFDAddr\n    );\n    event LogCFDFactoryNewByUpgrade(\n        address indexed newCFDAddr,\n        address oldCFDAddr\n    );\n\n    string constant REASON_MUST_BE_LATEST = \"Can only upgrade on a factory that is the latest\";\n    string constant REASON_MUST_REGISTERED_CFD = \"Caller must be a registered CFD\";\n    string constant REASON_UPGRADEABLE_FLAG_NOT_SET = \"upgradeable is not set in the CFD\";\n    string constant REASON_DAI_TRANSFER_FAILED = \"Failure transfering ownership of DAI tokens\";\n    string constant REASON_DAI_ALLOWANCE_TOO_LOW = \"DAI allowance is less than the _value\";\n\n    Registry public registry;\n    address public cfdModel;\n    address public cfdRegistry;\n    address public forwardFactory;\n    address public feeds;\n    KyberFacade public kyberFacade;\n\n    constructor(\n        address _registry,\n        address _cfdModel,\n        address _forwardFactory,\n        address _feeds,\n        address _kyberFacade\n    ) public {\n        setRegistry(_registry);\n        setCFDModel(_cfdModel);\n        setForwardFactory(_forwardFactory);\n        setFeeds(_feeds);\n        setKyberFacade(_kyberFacade);\n    }\n\n    function setRegistry(address _registry) public onlyOwner {\n        registry = Registry(_registry);\n    }\n\n    function setCFDModel(address _cfdModel) public onlyOwner {\n        cfdModel = _cfdModel;\n    }\n\n    function setCFDRegistry(address _cfdRegistry) public onlyOwner {\n        cfdRegistry = _cfdRegistry;\n    }\n\n    function setForwardFactory(address _forwardFactory) public onlyOwner {\n        forwardFactory = _forwardFactory;\n    }\n\n    function setFeeds(address _feeds) public onlyOwner {\n        feeds = _feeds;\n    }\n\n    function setKyberFacade(address _kyberFacade) public onlyOwner {\n        kyberFacade = KyberFacade(_kyberFacade);\n    }\n\n    /**\n     * Create a new ContractForDifference instance given DAI.\n     *\n     * @param _marketId Contract for this market (see PriceFeeds.sol markets)\n     * @param _strikePrice Contract strike price\n     * @param _notionalAmountDai Contract notional amount in DAI\n     * @param _isBuyer If the caller is to be the buyer, else they will be the seller\n     * @param _value Amount of DAI to deposit\n     *\n     * @return address of new contract\n     */\n    function createContract(\n        bytes32 _marketId,\n        uint _strikePrice,\n        uint _notionalAmountDai,\n        bool _isBuyer,\n        uint _value\n    )\n        external\n        pre_cond(\n            registry.getDAI().allowance(msg.sender, address(this)) >= _value,\n            REASON_DAI_ALLOWANCE_TOO_LOW\n        )\n        returns (ContractForDifference cfd)\n    {\n        cfd = createContractInternal(\n            _marketId,\n            _strikePrice,\n            _notionalAmountDai,\n            _isBuyer,\n            _value,\n            true // DAI is with the caller\n        );\n    }\n\n    /**\n     * Create a new ContractForDifference instance given ETH.\n     *\n     * Sent ETH is traded for DAI on the fly and the resulting amount of DAI\n     * is the contract collateral. So callers should calculate how much\n     * DAI collateral they want ahead of time and send the appropriate amount\n     * of ETH to match.\n     *\n     * @param _marketId Contract for this market (see Feeds.sol markets)\n     * @param _strikePrice Contact strike price\n     * @param _notionalAmountDai Contract notional amount\n     * @param _isBuyer If the caller is to be the buyer, else they will be the seller\n     *\n     * @return address of new contract\n     */\n    function createContractWithETH(\n        bytes32 _marketId,\n        uint _strikePrice,\n        uint _notionalAmountDai,\n        bool _isBuyer\n    )\n        external\n        payable\n        returns (ContractForDifference cfd)\n    {\n        uint daiAmount = kyberFacade.ethToDai.value(msg.value)(address(this));\n        cfd = createContractInternal(\n            _marketId,\n            _strikePrice,\n            _notionalAmountDai,\n            _isBuyer,\n            daiAmount,\n            false // DAI not with caller - is with this contract from the trade\n        );\n    }\n\n    /**\n     * Create a new ContractForDifference instance.\n     *\n     * @param _marketId Contract for this market (see PriceFeeds.sol markets)\n     * @param _strikePrice Contract strike price\n     * @param _notionalAmountDai Contract notional amount in DAI\n     * @param _isBuyer If the caller is to be the buyer, else they will be the seller\n     * @param _value Amount of DAI to deposit\n     * @param _daiWithCaller DAI is either with the msg.sender or with this\n     *      contract from an eth2dai trade executed just before this function\n     *      call.\n     *\n     * @return address of new contract\n     */\n    function createContractInternal(\n        bytes32 _marketId,\n        uint _strikePrice,\n        uint _notionalAmountDai,\n        bool _isBuyer,\n        uint _value,\n        bool _daiWithCaller\n    )\n        private\n        returns (ContractForDifference cfd)\n    {\n        cfd = ContractForDifference(\n            ForwardFactory(forwardFactory).createForwarder(cfdModel)\n        );\n\n        if (_daiWithCaller == true) {\n            require(\n                registry.getDAI().transferFrom(\n                    msg.sender,\n                    address(cfd),\n                    _value\n                ),\n                REASON_DAI_TRANSFER_FAILED\n            );\n        } else {\n            require(\n                registry.getDAI().transfer(address(cfd), _value),\n                REASON_DAI_TRANSFER_FAILED\n            );\n        }\n\n        address creator = msg.sender;\n        cfd.createNew(\n            address(registry),\n            cfdRegistry,\n            feeds,\n            creator,\n            _marketId,\n            _strikePrice,\n            _notionalAmountDai,\n            _isBuyer\n        );\n\n        registry.addCFD(address(cfd));\n        emit LogCFDFactoryNew(_marketId, creator, address(cfd));\n        ContractForDifferenceRegistry(cfdRegistry).registerNew(\n            address(cfd),\n            creator\n        );\n    }\n\n    /**\n     * Upgrade a CFD at a different set of contracts to this set of contracts.\n     * The old CFD itself will invoke this function to do the upgrade.\n\n     * @return address of new contract\n     */\n    function createByUpgrade()\n        external\n        returns (ContractForDifference newCfd)\n    {\n        // can only upgrade this if factory is the latest version\n        require(registry.getCFDFactoryLatest() == address(this), REASON_MUST_BE_LATEST);\n\n        address cfdAddr = msg.sender;\n\n        // can only upgrade if cfd registered and not with this latest version\n        address registryEntry = registry.allCFDs(cfdAddr);\n        require(\n            registryEntry != address(0) && registryEntry != address(this),\n            REASON_MUST_REGISTERED_CFD\n        );\n\n        ContractForDifference existingCfd = ContractForDifference(cfdAddr);\n        require(existingCfd.upgradeable(), REASON_UPGRADEABLE_FLAG_NOT_SET);\n\n        newCfd = ContractForDifference(\n            ForwardFactory(forwardFactory).createForwarder(cfdModel)\n        );\n\n        // Register in the CFD registry before calling createByUpgrade as\n        // createByUpgrade requires this to registerParty().\n        ContractForDifferenceRegistry(cfdRegistry).registerNew(\n            address(newCfd),\n            existingCfd.buyer()\n        );\n\n        newCfd.createByUpgrade(\n            cfdAddr,\n            address(registry),\n            cfdRegistry,\n            feeds\n        );\n\n        // Put the CFD in the main Registry\n        registry.addCFD(address(newCfd));\n\n        // replicate logging for an ordinary create so queries will get this to\n        emit LogCFDFactoryNew(newCfd.market(), newCfd.buyer(), address(newCfd));\n        emit LogCFDFactoryNewByUpgrade(address(newCfd), address(existingCfd));\n    }\n\n}\n",
  "sourcePath": "/home/julien/0xFutures/protocol/contracts/cfd/ContractForDifferenceFactory.sol",
  "compiler": {
    "name": "solc",
    "version": "0.5.6+commit.b259423e.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.8",
  "updatedAt": "2019-08-05T19:05:40.104Z",
  "devdoc": {
    "methods": {
      "createByUpgrade()": {
        "return": "address of new contract"
      },
      "createContract(bytes32,uint256,uint256,bool,uint256)": {
        "params": {
          "_isBuyer": "If the caller is to be the buyer, else they will be the seller",
          "_marketId": "Contract for this market (see PriceFeeds.sol markets)",
          "_notionalAmountDai": "Contract notional amount in DAI",
          "_strikePrice": "Contract strike price",
          "_value": "Amount of DAI to deposit"
        },
        "return": "address of new contract"
      },
      "createContractWithETH(bytes32,uint256,uint256,bool)": {
        "params": {
          "_isBuyer": "If the caller is to be the buyer, else they will be the seller",
          "_marketId": "Contract for this market (see Feeds.sol markets)",
          "_notionalAmountDai": "Contract notional amount",
          "_strikePrice": "Contact strike price"
        },
        "return": "address of new contract"
      },
      "isOwner()": {
        "return": "true if `msg.sender` is the owner of the contract."
      },
      "owner()": {
        "return": "the address of the owner."
      },
      "renounceOwnership()": {
        "details": "Allows the current owner to relinquish control of the contract."
      },
      "transferOwnership(address)": {
        "details": "Allows the current owner to transfer control of the contract to a newOwner.",
        "params": {
          "newOwner": "The address to transfer ownership to."
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "createByUpgrade()": {
        "notice": "Upgrade a CFD at a different set of contracts to this set of contracts. The old CFD itself will invoke this function to do the upgrade."
      },
      "createContract(bytes32,uint256,uint256,bool,uint256)": {
        "notice": "Create a new ContractForDifference instance given DAI."
      },
      "createContractWithETH(bytes32,uint256,uint256,bool)": {
        "notice": "Create a new ContractForDifference instance given ETH.     * Sent ETH is traded for DAI on the fly and the resulting amount of DAI is the contract collateral. So callers should calculate how much DAI collateral they want ahead of time and send the appropriate amount of ETH to match."
      },
      "renounceOwnership()": {
        "notice": "Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore."
      }
    }
  }
}