{
  "contractName": "ContractForDifferenceFactory",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "forwardFactory",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "cfdRegistry",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "cfdModel",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "feeds",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "kyberFacade",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "_registry",
          "type": "address"
        },
        {
          "name": "_cfdModel",
          "type": "address"
        },
        {
          "name": "_forwardFactory",
          "type": "address"
        },
        {
          "name": "_feeds",
          "type": "address"
        },
        {
          "name": "_kyberFacade",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "marketId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "newCFDAddr",
          "type": "address"
        }
      ],
      "name": "LogCFDFactoryNew",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "newCFDAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "oldCFDAddr",
          "type": "address"
        }
      ],
      "name": "LogCFDFactoryNewByUpgrade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_registry",
          "type": "address"
        }
      ],
      "name": "setRegistry",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_cfdModel",
          "type": "address"
        }
      ],
      "name": "setCFDModel",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_cfdRegistry",
          "type": "address"
        }
      ],
      "name": "setCFDRegistry",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_forwardFactory",
          "type": "address"
        }
      ],
      "name": "setForwardFactory",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_feeds",
          "type": "address"
        }
      ],
      "name": "setFeeds",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_kyberFacade",
          "type": "address"
        }
      ],
      "name": "setKyberFacade",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_marketId",
          "type": "bytes32"
        },
        {
          "name": "_strikePrice",
          "type": "uint256"
        },
        {
          "name": "_notionalAmountDai",
          "type": "uint256"
        },
        {
          "name": "_isBuyer",
          "type": "bool"
        },
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "createContract",
      "outputs": [
        {
          "name": "cfd",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_marketId",
          "type": "bytes32"
        },
        {
          "name": "_strikePrice",
          "type": "uint256"
        },
        {
          "name": "_notionalAmountDai",
          "type": "uint256"
        },
        {
          "name": "_isBuyer",
          "type": "bool"
        }
      ],
      "name": "createContractWithETH",
      "outputs": [
        {
          "name": "cfd",
          "type": "address"
        }
      ],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "createByUpgrade",
      "outputs": [
        {
          "name": "newCfd",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.6+commit.b259423e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[],\"name\":\"createByUpgrade\",\"outputs\":[{\"name\":\"newCfd\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kyberFacade\",\"type\":\"address\"}],\"name\":\"setKyberFacade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"forwardFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_marketId\",\"type\":\"bytes32\"},{\"name\":\"_strikePrice\",\"type\":\"uint256\"},{\"name\":\"_notionalAmountDai\",\"type\":\"uint256\"},{\"name\":\"_isBuyer\",\"type\":\"bool\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"createContract\",\"outputs\":[{\"name\":\"cfd\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cfdRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cfdModel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_marketId\",\"type\":\"bytes32\"},{\"name\":\"_strikePrice\",\"type\":\"uint256\"},{\"name\":\"_notionalAmountDai\",\"type\":\"uint256\"},{\"name\":\"_isBuyer\",\"type\":\"bool\"}],\"name\":\"createContractWithETH\",\"outputs\":[{\"name\":\"cfd\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feeds\",\"type\":\"address\"}],\"name\":\"setFeeds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cfdRegistry\",\"type\":\"address\"}],\"name\":\"setCFDRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cfdModel\",\"type\":\"address\"}],\"name\":\"setCFDModel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_forwardFactory\",\"type\":\"address\"}],\"name\":\"setForwardFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeds\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kyberFacade\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"},{\"name\":\"_cfdModel\",\"type\":\"address\"},{\"name\":\"_forwardFactory\",\"type\":\"address\"},{\"name\":\"_feeds\",\"type\":\"address\"},{\"name\":\"_kyberFacade\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"marketId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newCFDAddr\",\"type\":\"address\"}],\"name\":\"LogCFDFactoryNew\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newCFDAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldCFDAddr\",\"type\":\"address\"}],\"name\":\"LogCFDFactoryNewByUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"createByUpgrade()\":{\"return\":\"address of new contract\\r\"},\"createContract(bytes32,uint256,uint256,bool,uint256)\":{\"params\":{\"_isBuyer\":\"If the caller is to be the buyer, else they will be the seller\\r\",\"_marketId\":\"Contract for this market (see PriceFeeds.sol markets)\\r\",\"_notionalAmountDai\":\"Contract notional amount in DAI\\r\",\"_strikePrice\":\"Contract strike price\\r\",\"_value\":\"Amount of DAI to deposit\\r \"},\"return\":\"address of new contract\\r\"},\"createContractWithETH(bytes32,uint256,uint256,bool)\":{\"params\":{\"_isBuyer\":\"If the caller is to be the buyer, else they will be the seller\\r \",\"_marketId\":\"Contract for this market (see Feeds.sol markets)\\r\",\"_notionalAmountDai\":\"Contract notional amount\\r\",\"_strikePrice\":\"Contact strike price\\r\"},\"return\":\"address of new contract\\r\"},\"isOwner()\":{\"return\":\"true if `msg.sender` is the owner of the contract.\"},\"owner()\":{\"return\":\"the address of the owner.\"},\"renounceOwnership()\":{\"details\":\"Allows the current owner to relinquish control of the contract.\"},\"transferOwnership(address)\":{\"details\":\"Allows the current owner to transfer control of the contract to a newOwner.\",\"params\":{\"newOwner\":\"The address to transfer ownership to.\"}}}},\"userdoc\":{\"methods\":{\"createByUpgrade()\":{\"notice\":\"Upgrade a CFD at a different set of contracts to this set of contracts.\\r The old CFD itself will invoke this function to do the upgrade.\\r\"},\"createContract(bytes32,uint256,uint256,bool,uint256)\":{\"notice\":\"Create a new ContractForDifference instance given DAI.\\r \"},\"createContractWithETH(bytes32,uint256,uint256,bool)\":{\"notice\":\"Create a new ContractForDifference instance given ETH.\\r      * Sent ETH is traded for DAI on the fly and the resulting amount of DAI\\r is the contract collateral. So callers should calculate how much\\r DAI collateral they want ahead of time and send the appropriate amount\\r of ETH to match.\\r \"},\"renounceOwnership()\":{\"notice\":\"Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore.\"}}}},\"settings\":{\"compilationTarget\":{\"/D/Users/Julien/Desktop/Work/0xFutures/protocol/contracts/cfd/ContractForDifferenceFactory.sol\":\"ContractForDifferenceFactory\"},\"evmVersion\":\"constantinople\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/D/Users/Julien/Desktop/Work/0xFutures/protocol/contracts/DBC.sol\":{\"keccak256\":\"0x3fcf0d97ad97399402274b04b62f704f714bd84e0cf8d173337cdc983f1e8608\",\"urls\":[\"bzzr://30f2233a4e3d87dc3a395f921d8aed6139f911bbfb1677fa696a39639bcd005b\"]},\"/D/Users/Julien/Desktop/Work/0xFutures/protocol/contracts/ForwardFactory.sol\":{\"keccak256\":\"0xb0c15f958b92ff2327342353a45d44fa7d67a9e5aeacfcf7cef27aa08aad8161\",\"urls\":[\"bzzr://443d355e483c722b1a4ea53f94359066d3f7900abc27e872fbdc76c69fc776f2\"]},\"/D/Users/Julien/Desktop/Work/0xFutures/protocol/contracts/Registry.sol\":{\"keccak256\":\"0x67d6edac57bd3f73f66d10124a85c3b31cbd2cc0cc70b8d64d0455aa9c661152\",\"urls\":[\"bzzr://728cc12165dd00b619a807f137cf605fcff6ca6884f4e60430725fcd5f573fb0\"]},\"/D/Users/Julien/Desktop/Work/0xFutures/protocol/contracts/cfd/ContractForDifference.sol\":{\"keccak256\":\"0x3f43ce29b4568010915a06cddcbb5531c9a20f0e289ce05907d0d1203498788d\",\"urls\":[\"bzzr://fe271e63055d9d7436383a9cae6a6097327b698b9ba0103c3ab3daf354f8f16e\"]},\"/D/Users/Julien/Desktop/Work/0xFutures/protocol/contracts/cfd/ContractForDifferenceFactory.sol\":{\"keccak256\":\"0xbc94655382c0da2c4d978445714a6380a5f85a669363cf422db935d9678f0654\",\"urls\":[\"bzzr://76c4dd43cedd2f02f3e84eb8a88f8b4d6f9a84511f983936eacb8390763652c8\"]},\"/D/Users/Julien/Desktop/Work/0xFutures/protocol/contracts/cfd/ContractForDifferenceLibrary.sol\":{\"keccak256\":\"0x983f2da5cd51498cc9830f083631e562ab15da8a305cdf41befacbbcd58bba7c\",\"urls\":[\"bzzr://055f5800590cc397349e86c012f20d8f0ed4a60170e80b1e0398b923650a5f75\"]},\"/D/Users/Julien/Desktop/Work/0xFutures/protocol/contracts/cfd/ContractForDifferenceRegistry.sol\":{\"keccak256\":\"0x46bb873f6ff66de667d60c5edeeb1b6f54dfb52ed7ca1d93370e175137c7f133\",\"urls\":[\"bzzr://8c29992e570faeeb71a303de73b0c309832f7cbf6ee5ef078fc5dfc5079ff432\"]},\"/D/Users/Julien/Desktop/Work/0xFutures/protocol/contracts/dappsys/proxy.sol\":{\"keccak256\":\"0x2b697f6d67b92929f3cd7fc53587e1e1c385e6f74e47333ff9e6fc3f29c03e52\",\"urls\":[\"bzzr://016671b899643065058f67a5b274b04f876065c081b30ffe364b59b6ffd52d74\"]},\"/D/Users/Julien/Desktop/Work/0xFutures/protocol/contracts/feeds/PriceFeeds.sol\":{\"keccak256\":\"0x5e0f5882f1f3e0a71e3fdcb41abae9b8bf7ed1b012fd74b9dd9c810922e130dd\",\"urls\":[\"bzzr://d0d6757ec7e4a9ee4d314c1c486e16d608ec3dc671e6294c3fd567ae18733ce8\"]},\"/D/Users/Julien/Desktop/Work/0xFutures/protocol/contracts/feeds/PriceFeedsKyber.sol\":{\"keccak256\":\"0xead7f48b3dd784cb31d4a3af7dd30c54ec3cb40d2f990acd4226142591cb1f45\",\"urls\":[\"bzzr://5d79bec8552c59968eeefe9aa18df94d59f6f5104c46ef76d0d353d32242e537\"]},\"/D/Users/Julien/Desktop/Work/0xFutures/protocol/contracts/kyber/KyberFacade.sol\":{\"keccak256\":\"0x8c4689200d61f6fe6a4c8f147751b67dc9693185921f72436f6e1cf76b700198\",\"urls\":[\"bzzr://c33c60ddab2181016fbd783e2a04c0e4aa72e94c1dc14eecb5d6d2ef76237df1\"]},\"/D/Users/Julien/Desktop/Work/0xFutures/protocol/contracts/kyber/KyberNetworkProxyInterface.sol\":{\"keccak256\":\"0x7406628e7eb5a77a8b1e0a6ef60e2940851361ad5728fff9d0cc2a92640f5284\",\"urls\":[\"bzzr://0b80b3d03b08c87f1d87e4b754d92c7b626cb56da63e64503aa75ec287888c98\"]},\"openzeppelin-solidity/contracts/math/SafeMath.sol\":{\"keccak256\":\"0x965012d27b4262d7a41f5028cbb30c51ebd9ecd4be8fb30380aaa7a3c64fbc8b\",\"urls\":[\"bzzr://41ca38f6b0fa4b77b0feec43e422cfbec48b7eb38a41edf0b85c77e8d9a296b1\"]},\"openzeppelin-solidity/contracts/ownership/Ownable.sol\":{\"keccak256\":\"0x980de387a1a020a498f53d00f89fecebb12c949a17e8f160093c0303ede2b786\",\"urls\":[\"bzzr://08894efa2a557982070beda6a81a032407e70532d24bdafe80d39660c74904d9\"]},\"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xba431353cb4fe70777ac026231eb5468e41aa1e81240a2b8136917acc5fff4dc\",\"urls\":[\"bzzr://80cd02a56e6e33504318124d0d645c82e615cc8a4b5829cc9d82d17635c644c8\"]},\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x079c4e23ee448f529e43bfa3c4e8fb4be52cd0318ee923a276835bedf45b93d8\",\"urls\":[\"bzzr://48248e86f64407a95f241d6c5c8cfea6b4d4ebf4ebb467e5c98c8af3868fafe4\"]}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101145760003560e01c80637dc532c5116100a0578063abcca75e11610064578063abcca75e14610334578063c03cced314610367578063d63605b81461039a578063ef410289146103af578063f2fde38b146103c457610114565b80637dc532c51461025d5780638da5cb5b146102905780638f32d59b146102a55780639255e0d6146102ce578063a91ee0dc1461030157610114565b80635fd355eb116100e75780635fd355eb146101d8578063715018a6146101ed57806377b727ac146102025780637b103999146102175780637b9e2fc21461022c57610114565b8063165ae0fc14610119578063382c4c771461014a57806338874a1a1461017f57806344a1e61814610194575b600080fd5b34801561012557600080fd5b5061012e6103f7565b604080516001600160a01b039092168252519081900360200190f35b34801561015657600080fd5b5061017d6004803603602081101561016d57600080fd5b50356001600160a01b0316610ade565b005b34801561018b57600080fd5b5061012e610b11565b3480156101a057600080fd5b5061012e600480360360a08110156101b757600080fd5b50803590602081013590604081013590606081013515159060800135610b20565b3480156101e457600080fd5b5061012e610ca4565b3480156101f957600080fd5b5061017d610cb3565b34801561020e57600080fd5b5061012e610d0e565b34801561022357600080fd5b5061012e610d1d565b61012e6004803603608081101561024257600080fd5b50803590602081013590604081013590606001351515610d2c565b34801561026957600080fd5b5061017d6004803603602081101561028057600080fd5b50356001600160a01b0316610dc9565b34801561029c57600080fd5b5061012e610dfc565b3480156102b157600080fd5b506102ba610e0b565b604080519115158252519081900360200190f35b3480156102da57600080fd5b5061017d600480360360208110156102f157600080fd5b50356001600160a01b0316610e1c565b34801561030d57600080fd5b5061017d6004803603602081101561032457600080fd5b50356001600160a01b0316610e4f565b34801561034057600080fd5b5061017d6004803603602081101561035757600080fd5b50356001600160a01b0316610e82565b34801561037357600080fd5b5061017d6004803603602081101561038a57600080fd5b50356001600160a01b0316610eb5565b3480156103a657600080fd5b5061012e610ee8565b3480156103bb57600080fd5b5061012e610ef7565b3480156103d057600080fd5b5061017d600480360360208110156103e757600080fd5b50356001600160a01b0316610f06565b6000306001600160a01b0316600160009054906101000a90046001600160a01b03166001600160a01b03166323ec7f2a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561045157600080fd5b505afa158015610465573d6000803e3d6000fd5b505050506040513d602081101561047b57600080fd5b5051604080516060810190915260308082526001600160a01b039092169290921491906114c760208301399061053257604051600160e51b62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b838110156104f75781810151838201526020016104df565b50505050905090810190601f1680156105245780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060015460408051600160e31b63018b52bf0281523360048201819052915191926000926001600160a01b0390911691630c5a95f8916024808301926020929190829003018186803b15801561058757600080fd5b505afa15801561059b573d6000803e3d6000fd5b505050506040513d60208110156105b157600080fd5b505190506001600160a01b038116158015906105d657506001600160a01b0381163014155b6040518060400160405280601f81526020017f43616c6c6572206d7573742062652061207265676973746572656420434644008152509061065b57604051600160e51b62461bcd0281526020600482018181528351602484015283519092839260449091019190850190808383600083156104f75781810151838201526020016104df565b506000829050806001600160a01b03166341c20c8e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561069a57600080fd5b505afa1580156106ae573d6000803e3d6000fd5b505050506040513d60208110156106c457600080fd5b5051604080516060810190915260218082526114f760208301399061072d57604051600160e51b62461bcd0281526020600482018181528351602484015283519092839260449091019190850190808383600083156104f75781810151838201526020016104df565b506004805460025460408051600160e01b639193ba0b0281526001600160a01b039283169481019490945251911691639193ba0b9160248083019260209291908290030181600087803b15801561078357600080fd5b505af1158015610797573d6000803e3d6000fd5b505050506040513d60208110156107ad57600080fd5b505160035460408051600160e11b6338a86c5702815290519296506001600160a01b0391821692630596030d92889290861691637150d8ae91600480820192602092909190829003018186803b15801561080657600080fd5b505afa15801561081a573d6000803e3d6000fd5b505050506040513d602081101561083057600080fd5b50516040805163ffffffff851660e01b81526001600160a01b03938416600482015292909116602483015251604480830192600092919082900301818387803b15801561087c57600080fd5b505af1158015610890573d6000803e3d6000fd5b505060015460035460055460408051600160e01b632802759b0281526001600160a01b038a81166004830152948516602482015292841660448401529083166064830152519188169350632802759b925060848082019260009290919082900301818387803b15801561090257600080fd5b505af1158015610916573d6000803e3d6000fd5b505060015460408051600160e31b630eda01fb0281526001600160a01b03898116600483015291519190921693506376d00fd89250602480830192600092919082900301818387803b15801561096b57600080fd5b505af115801561097f573d6000803e3d6000fd5b50505050836001600160a01b0316637150d8ae6040518163ffffffff1660e01b815260040160206040518083038186803b1580156109bc57600080fd5b505afa1580156109d0573d6000803e3d6000fd5b505050506040513d60208110156109e657600080fd5b505160408051600160e01b6380f5560502815290516001600160a01b03928316928716916380f55605916004808301926020929190829003018186803b158015610a2f57600080fd5b505afa158015610a43573d6000803e3d6000fd5b505050506040513d6020811015610a5957600080fd5b5051604080516001600160a01b038816815290517f2d0c41699a808fef3dcfaa411d95703031d69229e73f5f3299fd6045deb4f9629181900360200190a3604080516001600160a01b0383811682529151918616917fe77178664194a5b1c28f6ee0f3fcb6d4404d796abfdf7edee18b68617768f48a9181900360200190a250505090565b610ae6610e0b565b610aef57600080fd5b600680546001600160a01b0319166001600160a01b0392909216919091179055565b6004546001600160a01b031681565b600081600160009054906101000a90046001600160a01b03166001600160a01b0316638ef855686040518163ffffffff1660e01b815260040160206040518083038186803b158015610b7157600080fd5b505afa158015610b85573d6000803e3d6000fd5b505050506040513d6020811015610b9b57600080fd5b505160408051600160e11b636eb1769f02815233600482015230602482015290516001600160a01b039092169163dd62ed3e91604480820192602092909190829003018186803b158015610bee57600080fd5b505afa158015610c02573d6000803e3d6000fd5b505050506040513d6020811015610c1857600080fd5b50516040805160608101909152602580825292909110159161154360208301398082610c8857604051600160e51b62461bcd0281526020600482018181528351602484015283519092839260449091019190850190808383600083156104f75781810151838201526020016104df565b50610c9888888888886001610f23565b98975050505050505050565b6003546001600160a01b031681565b610cbb610e0b565b610cc457600080fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6002546001600160a01b031681565b6001546001600160a01b031681565b60065460408051600160e31b6314ed3541028152306004820152905160009283926001600160a01b039091169163a769aa08913491602480830192602092919082900301818588803b158015610d8157600080fd5b505af1158015610d95573d6000803e3d6000fd5b50505050506040513d6020811015610dac57600080fd5b50519050610dbf86868686856000610f23565b9695505050505050565b610dd1610e0b565b610dda57600080fd5b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031690565b6000546001600160a01b0316331490565b610e24610e0b565b610e2d57600080fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b610e57610e0b565b610e6057600080fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b610e8a610e0b565b610e9357600080fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b610ebd610e0b565b610ec657600080fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b031681565b6006546001600160a01b031681565b610f0e610e0b565b610f1757600080fd5b610f2081611458565b50565b6004805460025460408051600160e01b639193ba0b0281526001600160a01b0392831694810194909452516000939190921691639193ba0b9160248082019260209290919082900301818787803b158015610f7d57600080fd5b505af1158015610f91573d6000803e3d6000fd5b505050506040513d6020811015610fa757600080fd5b505190506001821515141561112557600160009054906101000a90046001600160a01b03166001600160a01b0316638ef855686040518163ffffffff1660e01b815260040160206040518083038186803b15801561100457600080fd5b505afa158015611018573d6000803e3d6000fd5b505050506040513d602081101561102e57600080fd5b505160408051600160e01b6323b872dd0281523360048201526001600160a01b03848116602483015260448201879052915191909216916323b872dd9160648083019260209291908290030181600087803b15801561108c57600080fd5b505af11580156110a0573d6000803e3d6000fd5b505050506040513d60208110156110b657600080fd5b50516040805160608101909152602b80825261151860208301399061111f57604051600160e51b62461bcd0281526020600482018181528351602484015283519092839260449091019190850190808383600083156104f75781810151838201526020016104df565b5061128a565b600160009054906101000a90046001600160a01b03166001600160a01b0316638ef855686040518163ffffffff1660e01b815260040160206040518083038186803b15801561117357600080fd5b505afa158015611187573d6000803e3d6000fd5b505050506040513d602081101561119d57600080fd5b505160408051600160e01b63a9059cbb0281526001600160a01b038481166004830152602482018790529151919092169163a9059cbb9160448083019260209291908290030181600087803b1580156111f557600080fd5b505af1158015611209573d6000803e3d6000fd5b505050506040513d602081101561121f57600080fd5b50516040805160608101909152602b80825261151860208301399061128857604051600160e51b62461bcd0281526020600482018181528351602484015283519092839260449091019190850190808383600083156104f75781810151838201526020016104df565b505b60015460035460055460408051600160e31b631073769f0281526001600160a01b039485166004820152928416602484015290831660448301523360648301819052608483018b905260a483018a905260c4830189905287151560e48401529051909284169163839bb4f89161010480830192600092919082900301818387803b15801561131757600080fd5b505af115801561132b573d6000803e3d6000fd5b505060015460408051600160e31b630eda01fb0281526001600160a01b03878116600483015291519190921693506376d00fd89250602480830192600092919082900301818387803b15801561138057600080fd5b505af1158015611394573d6000803e3d6000fd5b5050604080516001600160a01b038681168252915191851693508b92507f2d0c41699a808fef3dcfaa411d95703031d69229e73f5f3299fd6045deb4f962919081900360200190a360035460408051600160e01b630596030d0281526001600160a01b038581166004830152848116602483015291519190921691630596030d91604480830192600092919082900301818387803b15801561143557600080fd5b505af1158015611449573d6000803e3d6000fd5b50505050509695505050505050565b6001600160a01b03811661146b57600080fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b039290921691909117905556fe43616e206f6e6c792075706772616465206f6e206120666163746f7279207468617420697320746865206c61746573747570677261646561626c65206973206e6f742073657420696e20746865204346444661696c757265207472616e73666572696e67206f776e657273686970206f662044414920746f6b656e7344414920616c6c6f77616e6365206973206c657373207468616e20746865205f76616c7565a165627a7a723058201174582608705c8e9dd1b8352fd318c74fd3c76c43491698cec7a98b764ab9eb0029",
  "sourceMap": "298:8246:5:-;;;1268:357;8:9:-1;5:2;;;30:1;27;20:12;5:2;1268:357:5;;;;;;;;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;1268:357:5;;;;;;;;;;;;;;;;;;;;515:6:17;:19;;-1:-1:-1;;;;;;515:19:17;524:10;515:19;;;;549:40;;1268:357:5;;;;;;;;;-1:-1:-1;;;;;582:6:17;;;;;549:40;;515:6;;549:40;1451:22:5;1463:9;1451:11;;;:22;;:::i;:::-;1484;1496:9;1484:11;;;:22;;:::i;:::-;1517:34;1535:15;1517:17;;;:34;;:::i;:::-;1562:16;1571:6;1562:8;;;:16;;:::i;:::-;1589:28;1604:12;1589:14;;;:28;;:::i;:::-;1268:357;;;;;298:8246;;1633:106;863:9:17;:7;;;:9;;:::i;:::-;855:18;;;;;;1701:8:5;:30;;-1:-1:-1;;;;;;1701:30:5;-1:-1:-1;;;;;1701:30:5;;;;;;;;;;1633:106::o;1747:96::-;863:9:17;:7;;;:9;;:::i;:::-;855:18;;;;;;1815:8:5;:20;;-1:-1:-1;;;;;;1815:20:5;-1:-1:-1;;;;;1815:20:5;;;;;;;;;;1747:96::o;1967:120::-;863:9:17;:7;;;:9;;:::i;:::-;855:18;;;;;;2047:14:5;:32;;-1:-1:-1;;;;;;2047:32:5;-1:-1:-1;;;;;2047:32:5;;;;;;;;;;1967:120::o;2095:84::-;863:9:17;:7;;;:9;;:::i;:::-;855:18;;;;;;2157:5:5;:14;;-1:-1:-1;;;;;;2157:14:5;-1:-1:-1;;;;;2157:14:5;;;;;;;;;;2095:84::o;2187:121::-;863:9:17;:7;;;:9;;:::i;:::-;855:18;;;;;;2261:11:5;:39;;-1:-1:-1;;;;;;2261:39:5;-1:-1:-1;;;;;2261:39:5;;;;;;;;;;2187:121::o;979:90:17:-;1019:4;1056:6;-1:-1:-1;;;;;1056:6:17;1042:10;:20;;979:90::o;298:8246:5:-;;;;;;;",
  "deployedSourceMap": "298:8246:5:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6905:1634;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6905:1634:5;;;:::i;:::-;;;;-1:-1:-1;;;;;6905:1634:5;;;;;;;;;;;;;;2187:121;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2187:121:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2187:121:5;-1:-1:-1;;;;;2187:121:5;;:::i;:::-;;1166:29;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1166:29:5;;;:::i;2782:617::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2782:617:5;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;2782:617:5;;;;;;;;;;;;;;;;;;;;;;;;:::i;1133:26::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1133:26:5;;;:::i;1347:137:17:-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1347:137:17;;;:::i;1103:23:5:-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1103:23:5;;;:::i;1072:24::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1072:24:5;;;:::i;4076:588::-;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;4076:588:5;;;;;;;;;;;;;;;;;;;:::i;2095:84::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2095:84:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2095:84:5;-1:-1:-1;;;;;2095:84:5;;:::i;659:77:17:-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;659:77:17;;;:::i;979:90::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;979:90:17;;;:::i;:::-;;;;;;;;;;;;;;;;;;1851:108:5;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1851:108:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1851:108:5;-1:-1:-1;;;;;1851:108:5;;:::i;1633:106::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1633:106:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1633:106:5;-1:-1:-1;;;;;1633:106:5;;:::i;1747:96::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1747:96:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1747:96:5;-1:-1:-1;;;;;1747:96:5;;:::i;1967:120::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1967:120:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1967:120:5;-1:-1:-1;;;;;1967:120:5;;:::i;1202:20::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1202:20:5;;;:::i;1229:30::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1229:30:5;;;:::i;1655:107:17:-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1655:107:17;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1655:107:17;-1:-1:-1;;;;;1655:107:17;;:::i;6905:1634:5:-;6968:28;7131:4;-1:-1:-1;;;;;7089:47:5;:8;;;;;;;;;-1:-1:-1;;;;;7089:8:5;-1:-1:-1;;;;;7089:28:5;;:30;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7089:30:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7089:30:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;7089:30:5;7138:21;;;;;;;;;;;;;-1:-1:-1;;;;;7089:47:5;;;;;;;;7138:21;;7089:30;7138:21;;;7081:79;;;;;-1:-1:-1;;;;;7081:79:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;7081:79:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7318:8:5;;:25;;;-1:-1:-1;;;;;7318:25:5;;7191:10;7318:25;;;;;;;;7191:10;;7173:15;;-1:-1:-1;;;;;7318:8:5;;;;:16;;:25;;;;;;;;;;;;;;:8;:25;;;5:2:-1;;;;30:1;27;20:12;5:2;7318:25:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7318:25:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;7318:25:5;;-1:-1:-1;;;;;;7376:27:5;;;;;;:61;;-1:-1:-1;;;;;;7407:30:5;;7432:4;7407:30;;7376:61;7452:26;;;;;;;;;;;;;;;;;7354:135;;;;;-1:-1:-1;;;;;7354:135:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;7354:135:5;;7502:33;7560:7;7502:66;;7587:11;-1:-1:-1;;;;;7587:23:5;;:25;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7587:25:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7587:25:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;7587:25:5;7614:31;;;;;;;;;;;;;;7587:25;7614:31;;;7579:67;;;;;-1:-1:-1;;;;;7579:67:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;7579:67:5;-1:-1:-1;7719:14:5;;;7751:8;;7704:56;;;-1:-1:-1;;;;;7704:56:5;;-1:-1:-1;;;;;7751:8:5;;;7704:56;;;;;;;;7719:14;;;7704:46;;:56;;;;;;;;;;;;;;7719:14;;7704:56;;;5:2:-1;;;;30:1;27;20:12;5:2;7704:56:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7704:56:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;7704:56:5;7951:11;;8020:19;;;-1:-1:-1;;;;;8020:19:5;;;;7704:56;;-1:-1:-1;;;;;;7951:11:5;;;;7921:54;;7704:56;;8020:17;;;;;;:19;;;;;7704:56;;8020:19;;;;;;;;:17;:19;;;5:2:-1;;;;30:1;27;20:12;5:2;8020:19:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8020:19:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;8020:19:5;7921:129;;;;;;;;;;-1:-1:-1;;;;;7921:129:5;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;7921:129:5;;;;;;;-1:-1:-1;7921:129:5;;;;5:2:-1;;;;30:1;27;20:12;5:2;7921:129:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;8130:8:5;;8154:11;;8180:5;;8063:133;;;-1:-1:-1;;;;;8063:133:5;;-1:-1:-1;;;;;8063:133:5;;;;;;;8130:8;;;8063:133;;;;8154:11;;;8063:133;;;;8180:5;;;8063:133;;;;;:22;;;;-1:-1:-1;8063:22:5;;-1:-1:-1;8063:133:5;;;;;8130:8;;8063:133;;;;;;;;8130:8;8063:22;:133;;;5:2:-1;;;;30:1;27;20:12;5:2;8063:133:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;8254:8:5;;:32;;;-1:-1:-1;;;;;8254:32:5;;-1:-1:-1;;;;;8254:32:5;;;;;;;;;:8;;;;;-1:-1:-1;8254:15:5;;-1:-1:-1;8254:32:5;;;;;:8;;:32;;;;;;;:8;;:32;;;5:2:-1;;;;30:1;27;20:12;5:2;8254:32:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8254:32:5;;;;8419:6;-1:-1:-1;;;;;8419:12:5;;:14;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8419:14:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8419:14:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;8419:14:5;8402:15;;;-1:-1:-1;;;;;8402:15:5;;;;-1:-1:-1;;;;;8385:66:5;;;;8402:13;;;;;:15;;;;;8419:14;;8402:15;;;;;;;:13;:15;;;5:2:-1;;;;30:1;27;20:12;5:2;8402:15:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8402:15:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;8402:15:5;8385:66;;;-1:-1:-1;;;;;8385:66:5;;;;;;;;;;;8402:15;8385:66;;;8467:64;;;-1:-1:-1;;;;;8467:64:5;;;;;;;;;;;;;;;;;;;;6905:1634;;;;:::o;2187:121::-;863:9:17;:7;:9::i;:::-;855:18;;;;;;2261:11:5;:39;;-1:-1:-1;;;;;;2261:39:5;-1:-1:-1;;;;;2261:39:5;;;;;;;;;;2187:121::o;1166:29::-;;;-1:-1:-1;;;;;1166:29:5;;:::o;2782:617::-;3136:25;3057:6;2999:8;;;;;;;;;-1:-1:-1;;;;;2999:8:5;-1:-1:-1;;;;;2999:15:5;;:17;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2999:17:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2999:17:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2999:17:5;:54;;;-1:-1:-1;;;;;2999:54:5;;3027:10;2999:54;;;;3047:4;2999:54;;;;;;-1:-1:-1;;;;;2999:27:5;;;;;;:54;;;;;:17;;:54;;;;;;;;:27;:54;;;5:2:-1;;;;30:1;27;20:12;5:2;2999:54:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2999:54:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2999:54:5;3078:28;;;;;;;;;;;;;2999:64;;;;;;3078:28;2999:54;3078:28;;;314:6:0;303:9;295:26;;;;-1:-1:-1;;;;;295:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;295:26:0;;3185:206:5;3222:9;3246:12;3273:18;3306:8;3329:6;3350:4;3185:22;:206::i;:::-;3179:212;2782:617;-1:-1:-1;;;;;;;;2782:617:5:o;1133:26::-;;;-1:-1:-1;;;;;1133:26:5;;:::o;1347:137:17:-;863:9;:7;:9::i;:::-;855:18;;;;;;1445:1;1429:6;;1408:40;;-1:-1:-1;;;;;1429:6:17;;;;1408:40;;1445:1;;1408:40;1475:1;1458:19;;-1:-1:-1;;;;;;1458:19:17;;;1347:137::o;1103:23:5:-;;;-1:-1:-1;;;;;1103:23:5;;:::o;1072:24::-;;;-1:-1:-1;;;;;1072:24:5;;:::o;4076:588::-;4341:11;;:52;;;-1:-1:-1;;;;;4341:52:5;;4387:4;4341:52;;;;;;4281:25;;;;-1:-1:-1;;;;;4341:11:5;;;;:20;;4368:9;;4341:52;;;;;;;;;;;;;;4368:9;4341:11;:52;;;5:2:-1;;;;30:1;27;20:12;5:2;4341:52:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4341:52:5;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;4341:52:5;;-1:-1:-1;4410:246:5;4447:9;4471:12;4498:18;4531:8;4341:52;4578:5;4410:22;:246::i;:::-;4404:252;4076:588;-1:-1:-1;;;;;;4076:588:5:o;2095:84::-;863:9:17;:7;:9::i;:::-;855:18;;;;;;2157:5:5;:14;;-1:-1:-1;;;;;;2157:14:5;-1:-1:-1;;;;;2157:14:5;;;;;;;;;;2095:84::o;659:77:17:-;697:7;723:6;-1:-1:-1;;;;;723:6:17;659:77;:::o;979:90::-;1019:4;1056:6;-1:-1:-1;;;;;1056:6:17;1042:10;:20;;979:90::o;1851:108:5:-;863:9:17;:7;:9::i;:::-;855:18;;;;;;1925:11:5;:26;;-1:-1:-1;;;;;;1925:26:5;-1:-1:-1;;;;;1925:26:5;;;;;;;;;;1851:108::o;1633:106::-;863:9:17;:7;:9::i;:::-;855:18;;;;;;1701:8:5;:30;;-1:-1:-1;;;;;;1701:30:5;-1:-1:-1;;;;;1701:30:5;;;;;;;;;;1633:106::o;1747:96::-;863:9:17;:7;:9::i;:::-;855:18;;;;;;1815:8:5;:20;;-1:-1:-1;;;;;;1815:20:5;-1:-1:-1;;;;;1815:20:5;;;;;;;;;;1747:96::o;1967:120::-;863:9:17;:7;:9::i;:::-;855:18;;;;;;2047:14:5;:32;;-1:-1:-1;;;;;;2047:32:5;-1:-1:-1;;;;;2047:32:5;;;;;;;;;;1967:120::o;1202:20::-;;;-1:-1:-1;;;;;1202:20:5;;:::o;1229:30::-;;;-1:-1:-1;;;;;1229:30:5;;:::o;1655:107:17:-;863:9;:7;:9::i;:::-;855:18;;;;;;1727:28;1746:8;1727:18;:28::i;:::-;1655:107;:::o;5303:1382:5:-;5643:14;;;5675:8;;5628:56;;;-1:-1:-1;;;;;5628:56:5;;-1:-1:-1;;;;;5675:8:5;;;5628:56;;;;;;;;5543:25;;5643:14;;;;;5628:46;;:56;;;;;;;;;;;;;;;5543:25;5643:14;5628:56;;;5:2:-1;;;;30:1;27;20:12;5:2;5628:56:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5628:56:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;5628:56:5;;-1:-1:-1;5730:4:5;5712:22;;;;5708:454;;;5777:8;;;;;;;;;-1:-1:-1;;;;;5777:8:5;-1:-1:-1;;;;;5777:15:5;;:17;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5777:17:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5777:17:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;5777:17:5;:146;;;-1:-1:-1;;;;;5777:146:5;;5830:10;5777:146;;;;-1:-1:-1;;;;;5777:146:5;;;;;;;;;;;;;;;:30;;;;;;;:146;;;;;:17;;:146;;;;;;;-1:-1:-1;5777:30:5;:146;;;5:2:-1;;;;30:1;27;20:12;5:2;5777:146:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5777:146:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;5777:146:5;5942:26;;;;;;;;;;;;;;5777:146;5942:26;;;5751:232;;;;;-1:-1:-1;;;;;5751:232:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;5751:232:5;;5708:454;;;6042:8;;;;;;;;;-1:-1:-1;;;;;6042:8:5;-1:-1:-1;;;;;6042:15:5;;:17;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6042:17:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6042:17:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;6042:17:5;:48;;;-1:-1:-1;;;;;6042:48:5;;-1:-1:-1;;;;;6042:48:5;;;;;;;;;;;;;;;:26;;;;;;;:48;;;;;:17;;:48;;;;;;;-1:-1:-1;6042:26:5;:48;;;5:2:-1;;;;30:1;27;20:12;5:2;6042:48:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6042:48:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;6042:48:5;6109:26;;;;;;;;;;;;;;6042:48;6109:26;;;6016:134;;;;;-1:-1:-1;;;;;6016:134:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;6016:134:5;;5708:454;6249:8;;6273:11;;6299:5;;6213:231;;;-1:-1:-1;;;;;6213:231:5;;-1:-1:-1;;;;;6249:8:5;;;6213:231;;;;6273:11;;;6213:231;;;;6299:5;;;6213:231;;;;6192:10;6213:231;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6192:10;;6213:13;;;;;:231;;;;;6174:15;;6213:231;;;;;;;6174:15;6213:13;:231;;;5:2:-1;;;;30:1;27;20:12;5:2;6213:231:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;6457:8:5;;:29;;;-1:-1:-1;;;;;6457:29:5;;-1:-1:-1;;;;;6457:29:5;;;;;;;;;:8;;;;;-1:-1:-1;6457:15:5;;-1:-1:-1;6457:29:5;;;;;:8;;:29;;;;;;;:8;;:29;;;5:2:-1;;;;30:1;27;20:12;5:2;6457:29:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;6502:50:5;;;-1:-1:-1;;;;;6502:50:5;;;;;;;;;;;-1:-1:-1;6519:9:5;;-1:-1:-1;6502:50:5;;;;;;;;;;6593:11;;6563:114;;;-1:-1:-1;;;;;6563:114:5;;-1:-1:-1;;;;;6563:114:5;;;;;;;;;;;;;;;;6593:11;;;;;6563:54;;:114;;;;;6593:11;;6563:114;;;;;;;6593:11;;6563:114;;;5:2:-1;;;;30:1;27;20:12;5:2;6563:114:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6563:114:5;;;;5303:1382;;;;;;;;;:::o;1906:183:17:-;-1:-1:-1;;;;;1979:22:17;;1971:31;;;;;;2038:6;;;2017:38;;-1:-1:-1;;;;;2017:38:17;;;;2038:6;;;2017:38;;;2065:6;:17;;-1:-1:-1;;;;;;2065:17:17;-1:-1:-1;;;;;2065:17:17;;;;;;;;;;1906:183::o",
  "source": "pragma solidity ^0.5.0;\r\n\r\nimport \"openzeppelin-solidity/contracts/ownership/Ownable.sol\";\r\nimport \"../DBC.sol\";\r\nimport \"../Registry.sol\";\r\nimport \"../ForwardFactory.sol\";\r\nimport \"../kyber/KyberFacade.sol\";\r\nimport \"./ContractForDifference.sol\";\r\nimport \"./ContractForDifferenceRegistry.sol\";\r\n\r\ncontract ContractForDifferenceFactory is DBC, Ownable {\r\n    event LogCFDFactoryNew(\r\n        bytes32 indexed marketId,\r\n        address indexed creator,\r\n        address newCFDAddr\r\n    );\r\n    event LogCFDFactoryNewByUpgrade(\r\n        address indexed newCFDAddr,\r\n        address oldCFDAddr\r\n    );\r\n\r\n    string constant REASON_MUST_BE_LATEST = \"Can only upgrade on a factory that is the latest\";\r\n    string constant REASON_MUST_REGISTERED_CFD = \"Caller must be a registered CFD\";\r\n    string constant REASON_UPGRADEABLE_FLAG_NOT_SET = \"upgradeable is not set in the CFD\";\r\n    string constant REASON_DAI_TRANSFER_FAILED = \"Failure transfering ownership of DAI tokens\";\r\n    string constant REASON_DAI_ALLOWANCE_TOO_LOW = \"DAI allowance is less than the _value\";\r\n\r\n    Registry public registry;\r\n    address public cfdModel;\r\n    address public cfdRegistry;\r\n    address public forwardFactory;\r\n    address public feeds;\r\n    KyberFacade public kyberFacade;\r\n\r\n    constructor(\r\n        address _registry,\r\n        address _cfdModel,\r\n        address _forwardFactory,\r\n        address _feeds,\r\n        address _kyberFacade\r\n    ) public {\r\n        setRegistry(_registry);\r\n        setCFDModel(_cfdModel);\r\n        setForwardFactory(_forwardFactory);\r\n        setFeeds(_feeds);\r\n        setKyberFacade(_kyberFacade);\r\n    }\r\n\r\n    function setRegistry(address _registry) public onlyOwner {\r\n        registry = Registry(_registry);\r\n    }\r\n\r\n    function setCFDModel(address _cfdModel) public onlyOwner {\r\n        cfdModel = _cfdModel;\r\n    }\r\n\r\n    function setCFDRegistry(address _cfdRegistry) public onlyOwner {\r\n        cfdRegistry = _cfdRegistry;\r\n    }\r\n\r\n    function setForwardFactory(address _forwardFactory) public onlyOwner {\r\n        forwardFactory = _forwardFactory;\r\n    }\r\n\r\n    function setFeeds(address _feeds) public onlyOwner {\r\n        feeds = _feeds;\r\n    }\r\n\r\n    function setKyberFacade(address _kyberFacade) public onlyOwner {\r\n        kyberFacade = KyberFacade(_kyberFacade);\r\n    }\r\n\r\n    /**\r\n     * Create a new ContractForDifference instance given DAI.\r\n     *\r\n     * @param _marketId Contract for this market (see PriceFeeds.sol markets)\r\n     * @param _strikePrice Contract strike price\r\n     * @param _notionalAmountDai Contract notional amount in DAI\r\n     * @param _isBuyer If the caller is to be the buyer, else they will be the seller\r\n     * @param _value Amount of DAI to deposit\r\n     *\r\n     * @return address of new contract\r\n     */\r\n    function createContract(\r\n        bytes32 _marketId,\r\n        uint _strikePrice,\r\n        uint _notionalAmountDai,\r\n        bool _isBuyer,\r\n        uint _value\r\n    )\r\n        external\r\n        pre_cond(\r\n            registry.getDAI().allowance(msg.sender, address(this)) >= _value,\r\n            REASON_DAI_ALLOWANCE_TOO_LOW\r\n        )\r\n        returns (ContractForDifference cfd)\r\n    {\r\n        cfd = createContractInternal(\r\n            _marketId,\r\n            _strikePrice,\r\n            _notionalAmountDai,\r\n            _isBuyer,\r\n            _value,\r\n            true // DAI is with the caller\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Create a new ContractForDifference instance given ETH.\r\n     *\r\n     * Sent ETH is traded for DAI on the fly and the resulting amount of DAI\r\n     * is the contract collateral. So callers should calculate how much\r\n     * DAI collateral they want ahead of time and send the appropriate amount\r\n     * of ETH to match.\r\n     *\r\n     * @param _marketId Contract for this market (see Feeds.sol markets)\r\n     * @param _strikePrice Contact strike price\r\n     * @param _notionalAmountDai Contract notional amount\r\n     * @param _isBuyer If the caller is to be the buyer, else they will be the seller\r\n     *\r\n     * @return address of new contract\r\n     */\r\n    function createContractWithETH(\r\n        bytes32 _marketId,\r\n        uint _strikePrice,\r\n        uint _notionalAmountDai,\r\n        bool _isBuyer\r\n    )\r\n        external\r\n        payable\r\n        returns (ContractForDifference cfd)\r\n    {\r\n        uint daiAmount = kyberFacade.ethToDai.value(msg.value)(address(this));\r\n        cfd = createContractInternal(\r\n            _marketId,\r\n            _strikePrice,\r\n            _notionalAmountDai,\r\n            _isBuyer,\r\n            daiAmount,\r\n            false // DAI not with caller - is with this contract from the trade\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Create a new ContractForDifference instance.\r\n     *\r\n     * @param _marketId Contract for this market (see PriceFeeds.sol markets)\r\n     * @param _strikePrice Contract strike price\r\n     * @param _notionalAmountDai Contract notional amount in DAI\r\n     * @param _isBuyer If the caller is to be the buyer, else they will be the seller\r\n     * @param _value Amount of DAI to deposit\r\n     * @param _daiWithCaller DAI is either with the msg.sender or with this\r\n     *      contract from an eth2dai trade executed just before this function\r\n     *      call.\r\n     *\r\n     * @return address of new contract\r\n     */\r\n    function createContractInternal(\r\n        bytes32 _marketId,\r\n        uint _strikePrice,\r\n        uint _notionalAmountDai,\r\n        bool _isBuyer,\r\n        uint _value,\r\n        bool _daiWithCaller\r\n    )\r\n        private\r\n        returns (ContractForDifference cfd)\r\n    {\r\n        cfd = ContractForDifference(\r\n            ForwardFactory(forwardFactory).createForwarder(cfdModel)\r\n        );\r\n\r\n        if (_daiWithCaller == true) {\r\n            require(\r\n                registry.getDAI().transferFrom(\r\n                    msg.sender,\r\n                    address(cfd),\r\n                    _value\r\n                ),\r\n                REASON_DAI_TRANSFER_FAILED\r\n            );\r\n        } else {\r\n            require(\r\n                registry.getDAI().transfer(address(cfd), _value),\r\n                REASON_DAI_TRANSFER_FAILED\r\n            );\r\n        }\r\n\r\n        address creator = msg.sender;\r\n        cfd.createNew(\r\n            address(registry),\r\n            cfdRegistry,\r\n            feeds,\r\n            creator,\r\n            _marketId,\r\n            _strikePrice,\r\n            _notionalAmountDai,\r\n            _isBuyer\r\n        );\r\n\r\n        registry.addCFD(address(cfd));\r\n        emit LogCFDFactoryNew(_marketId, creator, address(cfd));\r\n        ContractForDifferenceRegistry(cfdRegistry).registerNew(\r\n            address(cfd),\r\n            creator\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Upgrade a CFD at a different set of contracts to this set of contracts.\r\n     * The old CFD itself will invoke this function to do the upgrade.\r\n\r\n     * @return address of new contract\r\n     */\r\n    function createByUpgrade()\r\n        external\r\n        returns (ContractForDifference newCfd)\r\n    {\r\n        // can only upgrade this if factory is the latest version\r\n        require(registry.getCFDFactoryLatest() == address(this), REASON_MUST_BE_LATEST);\r\n\r\n        address cfdAddr = msg.sender;\r\n\r\n        // can only upgrade if cfd registered and not with this latest version\r\n        address registryEntry = registry.allCFDs(cfdAddr);\r\n        require(\r\n            registryEntry != address(0) && registryEntry != address(this),\r\n            REASON_MUST_REGISTERED_CFD\r\n        );\r\n\r\n        ContractForDifference existingCfd = ContractForDifference(cfdAddr);\r\n        require(existingCfd.upgradeable(), REASON_UPGRADEABLE_FLAG_NOT_SET);\r\n\r\n        newCfd = ContractForDifference(\r\n            ForwardFactory(forwardFactory).createForwarder(cfdModel)\r\n        );\r\n\r\n        // Register in the CFD registry before calling createByUpgrade as\r\n        // createByUpgrade requires this to registerParty().\r\n        ContractForDifferenceRegistry(cfdRegistry).registerNew(\r\n            address(newCfd),\r\n            existingCfd.buyer()\r\n        );\r\n\r\n        newCfd.createByUpgrade(\r\n            cfdAddr,\r\n            address(registry),\r\n            cfdRegistry,\r\n            feeds\r\n        );\r\n\r\n        // Put the CFD in the main Registry\r\n        registry.addCFD(address(newCfd));\r\n\r\n        // replicate logging for an ordinary create so queries will get this to\r\n        emit LogCFDFactoryNew(newCfd.market(), newCfd.buyer(), address(newCfd));\r\n        emit LogCFDFactoryNewByUpgrade(address(newCfd), address(existingCfd));\r\n    }\r\n\r\n}\r\n",
  "sourcePath": "D:\\Users\\Julien\\Desktop\\Work\\0xFutures\\protocol\\contracts\\cfd\\ContractForDifferenceFactory.sol",
  "compiler": {
    "name": "solc",
    "version": "0.5.6+commit.b259423e.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.8",
  "updatedAt": "2019-12-29T13:29:19.610Z",
  "devdoc": {
    "methods": {
      "createByUpgrade()": {
        "return": "address of new contract\r"
      },
      "createContract(bytes32,uint256,uint256,bool,uint256)": {
        "params": {
          "_isBuyer": "If the caller is to be the buyer, else they will be the seller\r",
          "_marketId": "Contract for this market (see PriceFeeds.sol markets)\r",
          "_notionalAmountDai": "Contract notional amount in DAI\r",
          "_strikePrice": "Contract strike price\r",
          "_value": "Amount of DAI to deposit\r "
        },
        "return": "address of new contract\r"
      },
      "createContractWithETH(bytes32,uint256,uint256,bool)": {
        "params": {
          "_isBuyer": "If the caller is to be the buyer, else they will be the seller\r ",
          "_marketId": "Contract for this market (see Feeds.sol markets)\r",
          "_notionalAmountDai": "Contract notional amount\r",
          "_strikePrice": "Contact strike price\r"
        },
        "return": "address of new contract\r"
      },
      "isOwner()": {
        "return": "true if `msg.sender` is the owner of the contract."
      },
      "owner()": {
        "return": "the address of the owner."
      },
      "renounceOwnership()": {
        "details": "Allows the current owner to relinquish control of the contract."
      },
      "transferOwnership(address)": {
        "details": "Allows the current owner to transfer control of the contract to a newOwner.",
        "params": {
          "newOwner": "The address to transfer ownership to."
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "createByUpgrade()": {
        "notice": "Upgrade a CFD at a different set of contracts to this set of contracts.\r The old CFD itself will invoke this function to do the upgrade.\r"
      },
      "createContract(bytes32,uint256,uint256,bool,uint256)": {
        "notice": "Create a new ContractForDifference instance given DAI.\r "
      },
      "createContractWithETH(bytes32,uint256,uint256,bool)": {
        "notice": "Create a new ContractForDifference instance given ETH.\r      * Sent ETH is traded for DAI on the fly and the resulting amount of DAI\r is the contract collateral. So callers should calculate how much\r DAI collateral they want ahead of time and send the appropriate amount\r of ETH to match.\r "
      },
      "renounceOwnership()": {
        "notice": "Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore."
      }
    }
  }
}