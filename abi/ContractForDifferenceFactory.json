{
  "contractName": "ContractForDifferenceFactory",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "forwardFactory",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "cfdRegistry",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "cfdModel",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "feeds",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "_registry",
          "type": "address"
        },
        {
          "name": "_cfdModel",
          "type": "address"
        },
        {
          "name": "_forwardFactory",
          "type": "address"
        },
        {
          "name": "_feeds",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "marketId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "newCFDAddr",
          "type": "address"
        }
      ],
      "name": "LogCFDFactoryNew",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "newCFDAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "oldCFDAddr",
          "type": "address"
        }
      ],
      "name": "LogCFDFactoryNewByUpgrade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_registry",
          "type": "address"
        }
      ],
      "name": "setRegistry",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_cfdModel",
          "type": "address"
        }
      ],
      "name": "setCFDModel",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_cfdRegistry",
          "type": "address"
        }
      ],
      "name": "setCFDRegistry",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_forwardFactory",
          "type": "address"
        }
      ],
      "name": "setForwardFactory",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_feeds",
          "type": "address"
        }
      ],
      "name": "setFeeds",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_marketId",
          "type": "bytes32"
        },
        {
          "name": "_strikePrice",
          "type": "uint256"
        },
        {
          "name": "_notionalAmountDai",
          "type": "uint256"
        },
        {
          "name": "_isBuyer",
          "type": "bool"
        },
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "createContract",
      "outputs": [
        {
          "name": "cfd",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "createByUpgrade",
      "outputs": [
        {
          "name": "newCfd",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.6+commit.b259423e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[],\"name\":\"createByUpgrade\",\"outputs\":[{\"name\":\"newCfd\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"forwardFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_marketId\",\"type\":\"bytes32\"},{\"name\":\"_strikePrice\",\"type\":\"uint256\"},{\"name\":\"_notionalAmountDai\",\"type\":\"uint256\"},{\"name\":\"_isBuyer\",\"type\":\"bool\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"createContract\",\"outputs\":[{\"name\":\"cfd\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cfdRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cfdModel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feeds\",\"type\":\"address\"}],\"name\":\"setFeeds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cfdRegistry\",\"type\":\"address\"}],\"name\":\"setCFDRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cfdModel\",\"type\":\"address\"}],\"name\":\"setCFDModel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_forwardFactory\",\"type\":\"address\"}],\"name\":\"setForwardFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeds\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_registry\",\"type\":\"address\"},{\"name\":\"_cfdModel\",\"type\":\"address\"},{\"name\":\"_forwardFactory\",\"type\":\"address\"},{\"name\":\"_feeds\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"marketId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newCFDAddr\",\"type\":\"address\"}],\"name\":\"LogCFDFactoryNew\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newCFDAddr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"oldCFDAddr\",\"type\":\"address\"}],\"name\":\"LogCFDFactoryNewByUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"createByUpgrade()\":{\"return\":\"address of new contract\"},\"createContract(bytes32,uint256,uint256,bool,uint256)\":{\"params\":{\"_isBuyer\":\"If the caller is to be the buyer, else they will be the seller\",\"_marketId\":\"Contract for this market (see Feeds.sol markets)\",\"_notionalAmountDai\":\"Contract notional amount\",\"_strikePrice\":\"Contact strike price\",\"_value\":\"Amount of DAI to deposit\"},\"return\":\"address of new contract\"},\"isOwner()\":{\"return\":\"true if `msg.sender` is the owner of the contract.\"},\"owner()\":{\"return\":\"the address of the owner.\"},\"renounceOwnership()\":{\"details\":\"Allows the current owner to relinquish control of the contract.\"},\"transferOwnership(address)\":{\"details\":\"Allows the current owner to transfer control of the contract to a newOwner.\",\"params\":{\"newOwner\":\"The address to transfer ownership to.\"}}}},\"userdoc\":{\"methods\":{\"createByUpgrade()\":{\"notice\":\"Upgrade a CFD at a different set of contracts to this set of contracts. The old CFD itself will invoke this function to do the upgrade.\"},\"createContract(bytes32,uint256,uint256,bool,uint256)\":{\"notice\":\"Create a new ContractForDifference instance\"},\"renounceOwnership()\":{\"notice\":\"Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore.\"}}}},\"settings\":{\"compilationTarget\":{\"/home/julien/0xFutures/protocol-master/contracts/cfd/ContractForDifferenceFactory.sol\":\"ContractForDifferenceFactory\"},\"evmVersion\":\"constantinople\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/home/julien/0xFutures/protocol-master/contracts/DBC.sol\":{\"keccak256\":\"0xc9c8bf071e0f5bff796bfde919237f33136d8c18a89dec61a52a0391fc76c256\",\"urls\":[\"bzzr://b44dfa0ecd91495eb61d07322588ebc1ea50fadd8bc22464e94c3d070a6b6ea1\"]},\"/home/julien/0xFutures/protocol-master/contracts/ForwardFactory.sol\":{\"keccak256\":\"0x658664b425aa52f40007ac2f1be1a1da9ec2239c4a42c3864b5cac108f002e0c\",\"urls\":[\"bzzr://6514d98ab20cd063f94b0d29810df5d212dd80dd09471f24de909f4fb07c6f36\"]},\"/home/julien/0xFutures/protocol-master/contracts/Registry.sol\":{\"keccak256\":\"0x0986731682c3e9c4285e19fce2168034132597a8a426d70464b938faf3afb712\",\"urls\":[\"bzzr://cf6d6ba19a296b6852d2172a35acf18859d7e5d458d55fa9b3c2af91f93e734c\"]},\"/home/julien/0xFutures/protocol-master/contracts/cfd/ContractForDifference.sol\":{\"keccak256\":\"0xc041ca645e87dbca9ef6d53b9ea4658ad2df684bb063811b0f0581b03861f4b5\",\"urls\":[\"bzzr://27707404f5851509b53c014c4b701a515e5ad96afee09815e8739c1455bcd0b2\"]},\"/home/julien/0xFutures/protocol-master/contracts/cfd/ContractForDifferenceFactory.sol\":{\"keccak256\":\"0xb93056899dc37d3eb4c3ed027089824eacb68c92f58266c417ad6e43d3c64aa2\",\"urls\":[\"bzzr://534f9e827fd8c1f362381dafde341539e5bdf12dea9d1c60d67f04befd8eaf25\"]},\"/home/julien/0xFutures/protocol-master/contracts/cfd/ContractForDifferenceLibrary.sol\":{\"keccak256\":\"0x7d8b4fae4675864c273b85f2b8a7ed8bc8f504b49f2955b0f69b694c30ec2771\",\"urls\":[\"bzzr://47e963e227389af89263baa271e1ec5c54c192883ec2697801807c3827110952\"]},\"/home/julien/0xFutures/protocol-master/contracts/cfd/ContractForDifferenceRegistry.sol\":{\"keccak256\":\"0x95e4f89bfe51d9891bacc827672920154e2ed3987907acc99e9b42b75267063f\",\"urls\":[\"bzzr://af86789feedb2e75d3cc5620db2f00b19d255b00b5586f3a9fb6ca0cff1219f6\"]},\"/home/julien/0xFutures/protocol-master/contracts/dappsys/proxy.sol\":{\"keccak256\":\"0xefd635b916e651d7387fccc160bee8ccf5b762be676f085763cd5d6b0a2b1f43\",\"urls\":[\"bzzr://86c89f916c5d48d60e405a2a1031628e4ac700e40e092b4a4259258a08823323\"]},\"/home/julien/0xFutures/protocol-master/contracts/feeds/PriceFeeds.sol\":{\"keccak256\":\"0x5ad3a6c629e76f46ec7ddea114cfcf0e1c52634c781b649e9379e30e2a9a61e8\",\"urls\":[\"bzzr://c75cbead25acede9b84b8bfe2931123261330773d91a13be0c1aa72049c4d26a\"]},\"/home/julien/0xFutures/protocol-master/contracts/feeds/PriceFeedsExternal.sol\":{\"keccak256\":\"0x374448d9bd3cd9d4d6def94590d3d43fd5b8084422aadc78b46db3d4f21b6edd\",\"urls\":[\"bzzr://a199b155f1e17b792066dc195376ebc3c0a7a886997f751ba312a9e98d1feef9\"]},\"/home/julien/0xFutures/protocol-master/contracts/feeds/PriceFeedsInternal.sol\":{\"keccak256\":\"0x73a923b47d0ef1f81948e6e24b94ca6b27a5b704c5aa3bd79559697cc8c3e11e\",\"urls\":[\"bzzr://6772987070a1b03eafefba2b04ffa09acbbd7f144edb2aac5b75bc5785e9ecbe\"]},\"openzeppelin-solidity/contracts/math/SafeMath.sol\":{\"keccak256\":\"0x965012d27b4262d7a41f5028cbb30c51ebd9ecd4be8fb30380aaa7a3c64fbc8b\",\"urls\":[\"bzzr://41ca38f6b0fa4b77b0feec43e422cfbec48b7eb38a41edf0b85c77e8d9a296b1\"]},\"openzeppelin-solidity/contracts/ownership/Ownable.sol\":{\"keccak256\":\"0x980de387a1a020a498f53d00f89fecebb12c949a17e8f160093c0303ede2b786\",\"urls\":[\"bzzr://08894efa2a557982070beda6a81a032407e70532d24bdafe80d39660c74904d9\"]},\"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xba431353cb4fe70777ac026231eb5468e41aa1e81240a2b8136917acc5fff4dc\",\"urls\":[\"bzzr://80cd02a56e6e33504318124d0d645c82e615cc8a4b5829cc9d82d17635c644c8\"]},\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x079c4e23ee448f529e43bfa3c4e8fb4be52cd0318ee923a276835bedf45b93d8\",\"urls\":[\"bzzr://48248e86f64407a95f241d6c5c8cfea6b4d4ebf4ebb467e5c98c8af3868fafe4\"]}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051608080620013b4833981018060405260808110156200003357600080fd5b5080516020820151604080840151606090940151600080546001600160a01b031916331780825592519495939491926001600160a01b0316917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3620000a284620000df60201b60201c565b620000b3836200011b60201b60201c565b620000c4826200015760201b60201c565b620000d5816200019360201b60201c565b50505050620001e0565b620000ef620001cf60201b60201c565b620000f957600080fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6200012b620001cf60201b60201c565b6200013557600080fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b62000167620001cf60201b60201c565b6200017157600080fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b620001a3620001cf60201b60201c565b620001ad57600080fd5b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331490565b6111c480620001f06000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80638da5cb5b11610097578063abcca75e11610066578063abcca75e14610220578063c03cced314610246578063d63605b81461026c578063f2fde38b1461027457610100565b80638da5cb5b146101b05780638f32d59b146101b85780639255e0d6146101d4578063a91ee0dc146101fa57610100565b8063715018a6116100d3578063715018a61461017057806377b727ac1461017a5780637b103999146101825780637dc532c51461018a57610100565b8063165ae0fc1461010557806338874a1a1461012957806344a1e618146101315780635fd355eb14610168575b600080fd5b61010d61029a565b604080516001600160a01b039092168252519081900360200190f35b61010d610981565b61010d600480360360a081101561014757600080fd5b50803590602081013590604081013590606081013515159060800135610990565b61010d610eb6565b610178610ec5565b005b61010d610f20565b61010d610f2f565b610178600480360360208110156101a057600080fd5b50356001600160a01b0316610f3e565b61010d610f71565b6101c0610f80565b604080519115158252519081900360200190f35b610178600480360360208110156101ea57600080fd5b50356001600160a01b0316610f91565b6101786004803603602081101561021057600080fd5b50356001600160a01b0316610fc4565b6101786004803603602081101561023657600080fd5b50356001600160a01b0316610ff7565b6101786004803603602081101561025c57600080fd5b50356001600160a01b031661102a565b61010d61105d565b6101786004803603602081101561028a57600080fd5b50356001600160a01b031661106c565b6000306001600160a01b0316600160009054906101000a90046001600160a01b03166001600160a01b03166323ec7f2a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156102f457600080fd5b505afa158015610308573d6000803e3d6000fd5b505050506040513d602081101561031e57600080fd5b5051604080516060810190915260308082526001600160a01b039092169290921491906110f86020830139906103d557604051600160e51b62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561039a578181015183820152602001610382565b50505050905090810190601f1680156103c75780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060015460408051600160e31b63018b52bf0281523360048201819052915191926000926001600160a01b0390911691630c5a95f8916024808301926020929190829003018186803b15801561042a57600080fd5b505afa15801561043e573d6000803e3d6000fd5b505050506040513d602081101561045457600080fd5b505190506001600160a01b0381161580159061047957506001600160a01b0381163014155b6040518060400160405280601f81526020017f43616c6c6572206d757374206265206120726567697374657265642043464400815250906104fe57604051600160e51b62461bcd02815260206004820181815283516024840152835190928392604490910191908501908083836000831561039a578181015183820152602001610382565b506000829050806001600160a01b03166341c20c8e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561053d57600080fd5b505afa158015610551573d6000803e3d6000fd5b505050506040513d602081101561056757600080fd5b5051604080516060810190915260218082526111286020830139906105d057604051600160e51b62461bcd02815260206004820181815283516024840152835190928392604490910191908501908083836000831561039a578181015183820152602001610382565b506004805460025460408051600160e01b639193ba0b0281526001600160a01b039283169481019490945251911691639193ba0b9160248083019260209291908290030181600087803b15801561062657600080fd5b505af115801561063a573d6000803e3d6000fd5b505050506040513d602081101561065057600080fd5b505160035460408051600160e11b6338a86c5702815290519296506001600160a01b0391821692630596030d92889290861691637150d8ae91600480820192602092909190829003018186803b1580156106a957600080fd5b505afa1580156106bd573d6000803e3d6000fd5b505050506040513d60208110156106d357600080fd5b50516040805163ffffffff851660e01b81526001600160a01b03938416600482015292909116602483015251604480830192600092919082900301818387803b15801561071f57600080fd5b505af1158015610733573d6000803e3d6000fd5b505060015460035460055460408051600160e01b632802759b0281526001600160a01b038a81166004830152948516602482015292841660448401529083166064830152519188169350632802759b925060848082019260009290919082900301818387803b1580156107a557600080fd5b505af11580156107b9573d6000803e3d6000fd5b505060015460408051600160e31b630eda01fb0281526001600160a01b03898116600483015291519190921693506376d00fd89250602480830192600092919082900301818387803b15801561080e57600080fd5b505af1158015610822573d6000803e3d6000fd5b50505050836001600160a01b0316637150d8ae6040518163ffffffff1660e01b815260040160206040518083038186803b15801561085f57600080fd5b505afa158015610873573d6000803e3d6000fd5b505050506040513d602081101561088957600080fd5b505160408051600160e01b6380f5560502815290516001600160a01b03928316928716916380f55605916004808301926020929190829003018186803b1580156108d257600080fd5b505afa1580156108e6573d6000803e3d6000fd5b505050506040513d60208110156108fc57600080fd5b5051604080516001600160a01b038816815290517f2d0c41699a808fef3dcfaa411d95703031d69229e73f5f3299fd6045deb4f9629181900360200190a3604080516001600160a01b0383811682529151918616917fe77178664194a5b1c28f6ee0f3fcb6d4404d796abfdf7edee18b68617768f48a9181900360200190a250505090565b6004546001600160a01b031681565b600081600160009054906101000a90046001600160a01b03166001600160a01b0316638ef855686040518163ffffffff1660e01b815260040160206040518083038186803b1580156109e157600080fd5b505afa1580156109f5573d6000803e3d6000fd5b505050506040513d6020811015610a0b57600080fd5b505160408051600160e11b636eb1769f02815233600482015230602482015290516001600160a01b039092169163dd62ed3e91604480820192602092909190829003018186803b158015610a5e57600080fd5b505afa158015610a72573d6000803e3d6000fd5b505050506040513d6020811015610a8857600080fd5b50516040805160608101909152602580825292909110159161117460208301398082610af857604051600160e51b62461bcd02815260206004820181815283516024840152835190928392604490910191908501908083836000831561039a578181015183820152602001610382565b506004805460025460408051600160e01b639193ba0b0281526001600160a01b03928316948101949094525133939190921691639193ba0b916024808201926020929091908290030181600087803b158015610b5357600080fd5b505af1158015610b67573d6000803e3d6000fd5b505050506040513d6020811015610b7d57600080fd5b505160015460408051600160e31b6311df0aad02815290519296506001600160a01b0390911691638ef8556891600480820192602092909190829003018186803b158015610bca57600080fd5b505afa158015610bde573d6000803e3d6000fd5b505050506040513d6020811015610bf457600080fd5b505160408051600160e01b6323b872dd0281526001600160a01b038481166004830152878116602483015260448201899052915191909216916323b872dd9160648083019260209291908290030181600087803b158015610c5457600080fd5b505af1158015610c68573d6000803e3d6000fd5b505050506040513d6020811015610c7e57600080fd5b50516040805160608101909152602b808252611149602083013990610ce757604051600160e51b62461bcd02815260206004820181815283516024840152835190928392604490910191908501908083836000831561039a578181015183820152602001610382565b5060015460035460055460408051600160e31b631073769f0281526001600160a01b039485166004820152928416602484015290831660448301528383166064830152608482018c905260a482018b905260c482018a905288151560e4830152519186169163839bb4f8916101048082019260009290919082900301818387803b158015610d7457600080fd5b505af1158015610d88573d6000803e3d6000fd5b505060015460408051600160e31b630eda01fb0281526001600160a01b03898116600483015291519190921693506376d00fd89250602480830192600092919082900301818387803b158015610ddd57600080fd5b505af1158015610df1573d6000803e3d6000fd5b5050604080516001600160a01b038881168252915191851693508c92507f2d0c41699a808fef3dcfaa411d95703031d69229e73f5f3299fd6045deb4f962919081900360200190a360035460408051600160e01b630596030d0281526001600160a01b038781166004830152848116602483015291519190921691630596030d91604480830192600092919082900301818387803b158015610e9257600080fd5b505af1158015610ea6573d6000803e3d6000fd5b5050505050505095945050505050565b6003546001600160a01b031681565b610ecd610f80565b610ed657600080fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6002546001600160a01b031681565b6001546001600160a01b031681565b610f46610f80565b610f4f57600080fd5b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031690565b6000546001600160a01b0316331490565b610f99610f80565b610fa257600080fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b610fcc610f80565b610fd557600080fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b610fff610f80565b61100857600080fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b611032610f80565b61103b57600080fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b031681565b611074610f80565b61107d57600080fd5b61108681611089565b50565b6001600160a01b03811661109c57600080fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b039290921691909117905556fe43616e206f6e6c792075706772616465206f6e206120666163746f7279207468617420697320746865206c61746573747570677261646561626c65206973206e6f742073657420696e20746865204346444661696c757265207472616e73666572696e67206f776e657273686970206f662044414920746f6b656e7344414920616c6c6f77616e6365206973206c657373207468616e20746865205f76616c7565a165627a7a7230582001e0edfc0841a1d6c80f97687de36a9980e1e40cb2aac6a37c636aba0e79e8560029",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c80638da5cb5b11610097578063abcca75e11610066578063abcca75e14610220578063c03cced314610246578063d63605b81461026c578063f2fde38b1461027457610100565b80638da5cb5b146101b05780638f32d59b146101b85780639255e0d6146101d4578063a91ee0dc146101fa57610100565b8063715018a6116100d3578063715018a61461017057806377b727ac1461017a5780637b103999146101825780637dc532c51461018a57610100565b8063165ae0fc1461010557806338874a1a1461012957806344a1e618146101315780635fd355eb14610168575b600080fd5b61010d61029a565b604080516001600160a01b039092168252519081900360200190f35b61010d610981565b61010d600480360360a081101561014757600080fd5b50803590602081013590604081013590606081013515159060800135610990565b61010d610eb6565b610178610ec5565b005b61010d610f20565b61010d610f2f565b610178600480360360208110156101a057600080fd5b50356001600160a01b0316610f3e565b61010d610f71565b6101c0610f80565b604080519115158252519081900360200190f35b610178600480360360208110156101ea57600080fd5b50356001600160a01b0316610f91565b6101786004803603602081101561021057600080fd5b50356001600160a01b0316610fc4565b6101786004803603602081101561023657600080fd5b50356001600160a01b0316610ff7565b6101786004803603602081101561025c57600080fd5b50356001600160a01b031661102a565b61010d61105d565b6101786004803603602081101561028a57600080fd5b50356001600160a01b031661106c565b6000306001600160a01b0316600160009054906101000a90046001600160a01b03166001600160a01b03166323ec7f2a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156102f457600080fd5b505afa158015610308573d6000803e3d6000fd5b505050506040513d602081101561031e57600080fd5b5051604080516060810190915260308082526001600160a01b039092169290921491906110f86020830139906103d557604051600160e51b62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561039a578181015183820152602001610382565b50505050905090810190601f1680156103c75780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060015460408051600160e31b63018b52bf0281523360048201819052915191926000926001600160a01b0390911691630c5a95f8916024808301926020929190829003018186803b15801561042a57600080fd5b505afa15801561043e573d6000803e3d6000fd5b505050506040513d602081101561045457600080fd5b505190506001600160a01b0381161580159061047957506001600160a01b0381163014155b6040518060400160405280601f81526020017f43616c6c6572206d757374206265206120726567697374657265642043464400815250906104fe57604051600160e51b62461bcd02815260206004820181815283516024840152835190928392604490910191908501908083836000831561039a578181015183820152602001610382565b506000829050806001600160a01b03166341c20c8e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561053d57600080fd5b505afa158015610551573d6000803e3d6000fd5b505050506040513d602081101561056757600080fd5b5051604080516060810190915260218082526111286020830139906105d057604051600160e51b62461bcd02815260206004820181815283516024840152835190928392604490910191908501908083836000831561039a578181015183820152602001610382565b506004805460025460408051600160e01b639193ba0b0281526001600160a01b039283169481019490945251911691639193ba0b9160248083019260209291908290030181600087803b15801561062657600080fd5b505af115801561063a573d6000803e3d6000fd5b505050506040513d602081101561065057600080fd5b505160035460408051600160e11b6338a86c5702815290519296506001600160a01b0391821692630596030d92889290861691637150d8ae91600480820192602092909190829003018186803b1580156106a957600080fd5b505afa1580156106bd573d6000803e3d6000fd5b505050506040513d60208110156106d357600080fd5b50516040805163ffffffff851660e01b81526001600160a01b03938416600482015292909116602483015251604480830192600092919082900301818387803b15801561071f57600080fd5b505af1158015610733573d6000803e3d6000fd5b505060015460035460055460408051600160e01b632802759b0281526001600160a01b038a81166004830152948516602482015292841660448401529083166064830152519188169350632802759b925060848082019260009290919082900301818387803b1580156107a557600080fd5b505af11580156107b9573d6000803e3d6000fd5b505060015460408051600160e31b630eda01fb0281526001600160a01b03898116600483015291519190921693506376d00fd89250602480830192600092919082900301818387803b15801561080e57600080fd5b505af1158015610822573d6000803e3d6000fd5b50505050836001600160a01b0316637150d8ae6040518163ffffffff1660e01b815260040160206040518083038186803b15801561085f57600080fd5b505afa158015610873573d6000803e3d6000fd5b505050506040513d602081101561088957600080fd5b505160408051600160e01b6380f5560502815290516001600160a01b03928316928716916380f55605916004808301926020929190829003018186803b1580156108d257600080fd5b505afa1580156108e6573d6000803e3d6000fd5b505050506040513d60208110156108fc57600080fd5b5051604080516001600160a01b038816815290517f2d0c41699a808fef3dcfaa411d95703031d69229e73f5f3299fd6045deb4f9629181900360200190a3604080516001600160a01b0383811682529151918616917fe77178664194a5b1c28f6ee0f3fcb6d4404d796abfdf7edee18b68617768f48a9181900360200190a250505090565b6004546001600160a01b031681565b600081600160009054906101000a90046001600160a01b03166001600160a01b0316638ef855686040518163ffffffff1660e01b815260040160206040518083038186803b1580156109e157600080fd5b505afa1580156109f5573d6000803e3d6000fd5b505050506040513d6020811015610a0b57600080fd5b505160408051600160e11b636eb1769f02815233600482015230602482015290516001600160a01b039092169163dd62ed3e91604480820192602092909190829003018186803b158015610a5e57600080fd5b505afa158015610a72573d6000803e3d6000fd5b505050506040513d6020811015610a8857600080fd5b50516040805160608101909152602580825292909110159161117460208301398082610af857604051600160e51b62461bcd02815260206004820181815283516024840152835190928392604490910191908501908083836000831561039a578181015183820152602001610382565b506004805460025460408051600160e01b639193ba0b0281526001600160a01b03928316948101949094525133939190921691639193ba0b916024808201926020929091908290030181600087803b158015610b5357600080fd5b505af1158015610b67573d6000803e3d6000fd5b505050506040513d6020811015610b7d57600080fd5b505160015460408051600160e31b6311df0aad02815290519296506001600160a01b0390911691638ef8556891600480820192602092909190829003018186803b158015610bca57600080fd5b505afa158015610bde573d6000803e3d6000fd5b505050506040513d6020811015610bf457600080fd5b505160408051600160e01b6323b872dd0281526001600160a01b038481166004830152878116602483015260448201899052915191909216916323b872dd9160648083019260209291908290030181600087803b158015610c5457600080fd5b505af1158015610c68573d6000803e3d6000fd5b505050506040513d6020811015610c7e57600080fd5b50516040805160608101909152602b808252611149602083013990610ce757604051600160e51b62461bcd02815260206004820181815283516024840152835190928392604490910191908501908083836000831561039a578181015183820152602001610382565b5060015460035460055460408051600160e31b631073769f0281526001600160a01b039485166004820152928416602484015290831660448301528383166064830152608482018c905260a482018b905260c482018a905288151560e4830152519186169163839bb4f8916101048082019260009290919082900301818387803b158015610d7457600080fd5b505af1158015610d88573d6000803e3d6000fd5b505060015460408051600160e31b630eda01fb0281526001600160a01b03898116600483015291519190921693506376d00fd89250602480830192600092919082900301818387803b158015610ddd57600080fd5b505af1158015610df1573d6000803e3d6000fd5b5050604080516001600160a01b038881168252915191851693508c92507f2d0c41699a808fef3dcfaa411d95703031d69229e73f5f3299fd6045deb4f962919081900360200190a360035460408051600160e01b630596030d0281526001600160a01b038781166004830152848116602483015291519190921691630596030d91604480830192600092919082900301818387803b158015610e9257600080fd5b505af1158015610ea6573d6000803e3d6000fd5b5050505050505095945050505050565b6003546001600160a01b031681565b610ecd610f80565b610ed657600080fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6002546001600160a01b031681565b6001546001600160a01b031681565b610f46610f80565b610f4f57600080fd5b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031690565b6000546001600160a01b0316331490565b610f99610f80565b610fa257600080fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b610fcc610f80565b610fd557600080fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b610fff610f80565b61100857600080fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b611032610f80565b61103b57600080fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b031681565b611074610f80565b61107d57600080fd5b61108681611089565b50565b6001600160a01b03811661109c57600080fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b039290921691909117905556fe43616e206f6e6c792075706772616465206f6e206120666163746f7279207468617420697320746865206c61746573747570677261646561626c65206973206e6f742073657420696e20746865204346444661696c757265207472616e73666572696e67206f776e657273686970206f662044414920746f6b656e7344414920616c6c6f77616e6365206973206c657373207468616e20746865205f76616c7565a165627a7a7230582001e0edfc0841a1d6c80f97687de36a9980e1e40cb2aac6a37c636aba0e79e8560029",
  "sourceMap": "253:5068:5:-;;;1163:277;8:9:-1;5:2;;;30:1;27;20:12;5:2;1163:277:5;;;;;;;;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;1163:277:5;;;;;;;;;;;;;;;;515:6:17;:19;;-1:-1:-1;;;;;;515:19:17;524:10;515:19;;;;549:40;;1163:277:5;;;;;;-1:-1:-1;;;;;582:6:17;;549:40;;515:6;;549:40;1309:22:5;1321:9;1309:11;;;:22;;:::i;:::-;1341;1353:9;1341:11;;;:22;;:::i;:::-;1373:34;1391:15;1373:17;;;:34;;:::i;:::-;1417:16;1426:6;1417:8;;;:16;;:::i;:::-;1163:277;;;;253:5068;;1446:104;863:9:17;:7;;;:9;;:::i;:::-;855:18;;;;;;1513:8:5;:30;;-1:-1:-1;;;;;;1513:30:5;-1:-1:-1;;;;;1513:30:5;;;;;;;;;;1446:104::o;1556:94::-;863:9:17;:7;;;:9;;:::i;:::-;855:18;;;;;;1623:8:5;:20;;-1:-1:-1;;;;;;1623:20:5;-1:-1:-1;;;;;1623:20:5;;;;;;;;;;1556:94::o;1768:118::-;863:9:17;:7;;;:9;;:::i;:::-;855:18;;;;;;1847:14:5;:32;;-1:-1:-1;;;;;;1847:32:5;-1:-1:-1;;;;;1847:32:5;;;;;;;;;;1768:118::o;1892:82::-;863:9:17;:7;;;:9;;:::i;:::-;855:18;;;;;;1953:5:5;:14;;-1:-1:-1;;;;;;1953:14:5;-1:-1:-1;;;;;1953:14:5;;;;;;;;;;1892:82::o;979:90:17:-;1019:4;1056:6;-1:-1:-1;;;;;1056:6:17;1042:10;:20;;979:90::o;253:5068:5:-;;;;;;;",
  "deployedSourceMap": "253:5068:5:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;253:5068:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3726:1592;;;:::i;:::-;;;;-1:-1:-1;;;;;3726:1592:5;;;;;;;;;;;;;;1101:29;;;:::i;2411:1103::-;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;2411:1103:5;;;;;;;;;;;;;;;;;;;;;;;;:::i;1069:26::-;;;:::i;1347:137:17:-;;;:::i;:::-;;1040:23:5;;;:::i;1010:24::-;;;:::i;1892:82::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1892:82:5;-1:-1:-1;;;;;1892:82:5;;:::i;659:77:17:-;;;:::i;979:90::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;1656:106:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1656:106:5;-1:-1:-1;;;;;1656:106:5;;:::i;1446:104::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1446:104:5;-1:-1:-1;;;;;1446:104:5;;:::i;1556:94::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1556:94:5;-1:-1:-1;;;;;1556:94:5;;:::i;1768:118::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1768:118:5;-1:-1:-1;;;;;1768:118:5;;:::i;1136:20::-;;;:::i;1655:107:17:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1655:107:17;-1:-1:-1;;;;;1655:107:17;;:::i;3726:1592:5:-;3787:28;3947:4;-1:-1:-1;;;;;3905:47:5;:8;;;;;;;;;-1:-1:-1;;;;;3905:8:5;-1:-1:-1;;;;;3905:28:5;;:30;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3905:30:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3905:30:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3905:30:5;3954:21;;;;;;;;;;;;;-1:-1:-1;;;;;3905:47:5;;;;;;;;3954:21;;3905:30;3954:21;;;3897:79;;;;;-1:-1:-1;;;;;3897:79:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;3897:79:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4129:8:5;;:25;;;-1:-1:-1;;;;;4129:25:5;;4005:10;4129:25;;;;;;;;4005:10;;3987:15;;-1:-1:-1;;;;;4129:8:5;;;;:16;;:25;;;;;;;;;;;;;;:8;:25;;;5:2:-1;;;;30:1;27;20:12;5:2;4129:25:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4129:25:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;4129:25:5;;-1:-1:-1;;;;;;4185:27:5;;;;;;:61;;-1:-1:-1;;;;;;4216:30:5;;4241:4;4216:30;;4185:61;4261:26;;;;;;;;;;;;;;;;;4164:133;;;;;-1:-1:-1;;;;;4164:133:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;4164:133:5;;4308:33;4366:7;4308:66;;4392:11;-1:-1:-1;;;;;4392:23:5;;:25;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4392:25:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4392:25:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;4392:25:5;4419:31;;;;;;;;;;;;;;4392:25;4419:31;;;4384:67;;;;;-1:-1:-1;;;;;4384:67:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;4384:67:5;-1:-1:-1;4521:14:5;;;4553:8;;4506:56;;;-1:-1:-1;;;;;4506:56:5;;-1:-1:-1;;;;;4553:8:5;;;4506:56;;;;;;;;4521:14;;;4506:46;;:56;;;;;;;;;;;;;;4521:14;;4506:56;;;5:2:-1;;;;30:1;27;20:12;5:2;4506:56:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4506:56:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;4506:56:5;4748:11;;4815:19;;;-1:-1:-1;;;;;4815:19:5;;;;4506:56;;-1:-1:-1;;;;;;4748:11:5;;;;4718:54;;4506:56;;4815:17;;;;;;:19;;;;;4506:56;;4815:19;;;;;;;;:17;:19;;;5:2:-1;;;;30:1;27;20:12;5:2;4815:19:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4815:19:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;4815:19:5;4718:126;;;;;;;;;;-1:-1:-1;;;;;4718:126:5;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4718:126:5;;;;;;;-1:-1:-1;4718:126:5;;;;5:2:-1;;;;30:1;27;20:12;5:2;4718:126:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;4920:8:5;;4943:11;;4968:5;;4855:128;;;-1:-1:-1;;;;;4855:128:5;;-1:-1:-1;;;;;4855:128:5;;;;;;;4920:8;;;4855:128;;;;4943:11;;;4855:128;;;;4968:5;;;4855:128;;;;;:22;;;;-1:-1:-1;4855:22:5;;-1:-1:-1;4855:128:5;;;;;4920:8;;4855:128;;;;;;;;4920:8;4855:22;:128;;;5:2:-1;;;;30:1;27;20:12;5:2;4855:128:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;5038:8:5;;:32;;;-1:-1:-1;;;;;5038:32:5;;-1:-1:-1;;;;;5038:32:5;;;;;;;;;:8;;;;;-1:-1:-1;5038:15:5;;-1:-1:-1;5038:32:5;;;;;:8;;:32;;;;;;;:8;;:32;;;5:2:-1;;;;30:1;27;20:12;5:2;5038:32:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5038:32:5;;;;5200:6;-1:-1:-1;;;;;5200:12:5;;:14;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5200:14:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5200:14:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;5200:14:5;5183:15;;;-1:-1:-1;;;;;5183:15:5;;;;-1:-1:-1;;;;;5166:66:5;;;;5183:13;;;;;:15;;;;;5200:14;;5183:15;;;;;;;:13;:15;;;5:2:-1;;;;30:1;27;20:12;5:2;5183:15:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5183:15:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;5183:15:5;5166:66;;;-1:-1:-1;;;;;5166:66:5;;;;;;;;;;;5183:15;5166:66;;;5247:64;;;-1:-1:-1;;;;;5247:64:5;;;;;;;;;;;;;;;;;;;;3726:1592;;;;:::o;1101:29::-;;;-1:-1:-1;;;;;1101:29:5;;:::o;2411:1103::-;2754:25;2677:6;2619:8;;;;;;;;;-1:-1:-1;;;;;2619:8:5;-1:-1:-1;;;;;2619:15:5;;:17;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2619:17:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2619:17:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2619:17:5;:54;;;-1:-1:-1;;;;;2619:54:5;;2647:10;2619:54;;;;2667:4;2619:54;;;;;;-1:-1:-1;;;;;2619:27:5;;;;;;:54;;;;;:17;;:54;;;;;;;;:27;:54;;;5:2:-1;;;;30:1;27;20:12;5:2;2619:54:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2619:54:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2619:54:5;2698:28;;;;;;;;;;;;;2619:64;;;;;;2698:28;2619:54;2698:28;;;304:6:0;293:9;285:26;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;2890:14:5;;;2922:8;;2875:56;;;-1:-1:-1;;;;;2875:56:5;;-1:-1:-1;;;;;2922:8:5;;;2875:56;;;;;;;;2813:10;;2890:14;;;;;2875:46;;:56;;;;;;;;;;;;;;;2795:15;2890:14;2875:56;;;5:2:-1;;;;30:1;27;20:12;5:2;2875:56:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2875:56:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2875:56:5;2972:8;;:17;;;-1:-1:-1;;;;;2972:17:5;;;;2875:56;;-1:-1:-1;;;;;;2972:8:5;;;;:15;;:17;;;;;2875:56;;2972:17;;;;;;;;:8;:17;;;5:2:-1;;;;30:1;27;20:12;5:2;2972:17:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2972:17:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2972:17:5;:61;;;-1:-1:-1;;;;;2972:61:5;;-1:-1:-1;;;;;2972:61:5;;;;;;;;;;;;;;;;;;;;;;:30;;;;;;;:61;;;;;:17;;:61;;;;;;;-1:-1:-1;2972:30:5;:61;;;5:2:-1;;;;30:1;27;20:12;5:2;2972:61:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2972:61:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2972:61:5;3047:26;;;;;;;;;;;;;;2972:61;3047:26;;;2951:132;;;;;-1:-1:-1;;;;;2951:132:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;2951:132:5;-1:-1:-1;3128:8:5;;3151:11;;3176:5;;3093:222;;;-1:-1:-1;;;;;3093:222:5;;-1:-1:-1;;;;;3128:8:5;;;3093:222;;;;3151:11;;;3093:222;;;;3176:5;;;3093:222;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:13;;;;;;:222;;;;;3128:8;;3093:222;;;;;;;;3128:8;3093:13;:222;;;5:2:-1;;;;30:1;27;20:12;5:2;3093:222:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;3326:8:5;;:29;;;-1:-1:-1;;;;;3326:29:5;;-1:-1:-1;;;;;3326:29:5;;;;;;;;;:8;;;;;-1:-1:-1;3326:15:5;;-1:-1:-1;3326:29:5;;;;;:8;;:29;;;;;;;:8;;:29;;;5:2:-1;;;;30:1;27;20:12;5:2;3326:29:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;3370:50:5;;;-1:-1:-1;;;;;3370:50:5;;;;;;;;;;;-1:-1:-1;3387:9:5;;-1:-1:-1;3370:50:5;;;;;;;;;;3460:11;;3430:77;;;-1:-1:-1;;;;;3430:77:5;;-1:-1:-1;;;;;3430:77:5;;;;;;;;;;;;;;;;3460:11;;;;;3430:54;;:77;;;;;3460:11;;3430:77;;;;;;;3460:11;;3430:77;;;5:2:-1;;;;30:1;27;20:12;5:2;3430:77:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3430:77:5;;;;321:1:0;2411:1103:5;;;;;;;;;:::o;1069:26::-;;;-1:-1:-1;;;;;1069:26:5;;:::o;1347:137:17:-;863:9;:7;:9::i;:::-;855:18;;;;;;1445:1;1429:6;;1408:40;;-1:-1:-1;;;;;1429:6:17;;;;1408:40;;1445:1;;1408:40;1475:1;1458:19;;-1:-1:-1;;;;;;1458:19:17;;;1347:137::o;1040:23:5:-;;;-1:-1:-1;;;;;1040:23:5;;:::o;1010:24::-;;;-1:-1:-1;;;;;1010:24:5;;:::o;1892:82::-;863:9:17;:7;:9::i;:::-;855:18;;;;;;1953:5:5;:14;;-1:-1:-1;;;;;;1953:14:5;-1:-1:-1;;;;;1953:14:5;;;;;;;;;;1892:82::o;659:77:17:-;697:7;723:6;-1:-1:-1;;;;;723:6:17;659:77;:::o;979:90::-;1019:4;1056:6;-1:-1:-1;;;;;1056:6:17;1042:10;:20;;979:90::o;1656:106:5:-;863:9:17;:7;:9::i;:::-;855:18;;;;;;1729:11:5;:26;;-1:-1:-1;;;;;;1729:26:5;-1:-1:-1;;;;;1729:26:5;;;;;;;;;;1656:106::o;1446:104::-;863:9:17;:7;:9::i;:::-;855:18;;;;;;1513:8:5;:30;;-1:-1:-1;;;;;;1513:30:5;-1:-1:-1;;;;;1513:30:5;;;;;;;;;;1446:104::o;1556:94::-;863:9:17;:7;:9::i;:::-;855:18;;;;;;1623:8:5;:20;;-1:-1:-1;;;;;;1623:20:5;-1:-1:-1;;;;;1623:20:5;;;;;;;;;;1556:94::o;1768:118::-;863:9:17;:7;:9::i;:::-;855:18;;;;;;1847:14:5;:32;;-1:-1:-1;;;;;;1847:32:5;-1:-1:-1;;;;;1847:32:5;;;;;;;;;;1768:118::o;1136:20::-;;;-1:-1:-1;;;;;1136:20:5;;:::o;1655:107:17:-;863:9;:7;:9::i;:::-;855:18;;;;;;1727:28;1746:8;1727:18;:28::i;:::-;1655:107;:::o;1906:183::-;-1:-1:-1;;;;;1979:22:17;;1971:31;;;;;;2038:6;;;2017:38;;-1:-1:-1;;;;;2017:38:17;;;;2038:6;;;2017:38;;;2065:6;:17;;-1:-1:-1;;;;;;2065:17:17;-1:-1:-1;;;;;2065:17:17;;;;;;;;;;1906:183::o",
  "source": "pragma solidity ^0.5.0;\n\nimport \"openzeppelin-solidity/contracts/ownership/Ownable.sol\";\nimport \"../DBC.sol\";\nimport \"../Registry.sol\";\nimport \"../ForwardFactory.sol\";\nimport \"./ContractForDifference.sol\";\nimport \"./ContractForDifferenceRegistry.sol\";\n\ncontract ContractForDifferenceFactory is DBC, Ownable {\n    event LogCFDFactoryNew(\n        bytes32 indexed marketId,\n        address indexed creator,\n        address newCFDAddr\n    );\n    event LogCFDFactoryNewByUpgrade(\n        address indexed newCFDAddr,\n        address oldCFDAddr\n    );\n\n    string constant REASON_MUST_BE_LATEST = \"Can only upgrade on a factory that is the latest\";\n    string constant REASON_MUST_REGISTERED_CFD = \"Caller must be a registered CFD\";\n    string constant REASON_UPGRADEABLE_FLAG_NOT_SET = \"upgradeable is not set in the CFD\";\n    string constant REASON_DAI_TRANSFER_FAILED = \"Failure transfering ownership of DAI tokens\";\n    string constant REASON_DAI_ALLOWANCE_TOO_LOW = \"DAI allowance is less than the _value\";\n\n    Registry public registry;\n    address public cfdModel;\n    address public cfdRegistry;\n    address public forwardFactory;\n    address public feeds;\n\n    constructor(\n        address _registry,\n        address _cfdModel,\n        address _forwardFactory,\n        address _feeds\n    ) public {\n        setRegistry(_registry);\n        setCFDModel(_cfdModel);\n        setForwardFactory(_forwardFactory);\n        setFeeds(_feeds);\n    }\n\n    function setRegistry(address _registry) public onlyOwner {\n        registry = Registry(_registry);\n    }\n\n    function setCFDModel(address _cfdModel) public onlyOwner {\n        cfdModel = _cfdModel;\n    }\n\n    function setCFDRegistry(address _cfdRegistry) public onlyOwner {\n        cfdRegistry = _cfdRegistry;\n    }\n\n    function setForwardFactory(address _forwardFactory) public onlyOwner {\n        forwardFactory = _forwardFactory;\n    }\n\n    function setFeeds(address _feeds) public onlyOwner {\n        feeds = _feeds;\n    }\n\n    /**\n     * Create a new ContractForDifference instance\n     *\n     * @param _marketId Contract for this market (see Feeds.sol markets)\n     * @param _strikePrice Contact strike price\n     * @param _notionalAmountDai Contract notional amount\n     * @param _isBuyer If the caller is to be the buyer, else they will be the seller\n     * @param _value Amount of DAI to deposit\n     *\n     * @return address of new contract\n     */\n    function createContract(\n        bytes32 _marketId,\n        uint _strikePrice,\n        uint _notionalAmountDai,\n        bool _isBuyer,\n        uint _value\n    )\n        external\n        pre_cond(\n            registry.getDAI().allowance(msg.sender, address(this)) >= _value, \n            REASON_DAI_ALLOWANCE_TOO_LOW\n        )\n        returns (ContractForDifference cfd)\n    {\n        address creator = msg.sender;\n\n        cfd = ContractForDifference(\n            ForwardFactory(forwardFactory).createForwarder(cfdModel)\n        );\n        require(\n            registry.getDAI().transferFrom(creator, address(cfd), _value),\n            REASON_DAI_TRANSFER_FAILED\n        );\n        cfd.createNew(\n            address(registry),\n            cfdRegistry,\n            feeds,\n            creator,\n            _marketId,\n            _strikePrice,\n            _notionalAmountDai,\n            _isBuyer\n        );\n\n        registry.addCFD(address(cfd));\n        emit LogCFDFactoryNew(_marketId, creator, address(cfd));\n        ContractForDifferenceRegistry(cfdRegistry).registerNew(address(cfd), creator);\n    }\n\n    /**\n     * Upgrade a CFD at a different set of contracts to this set of contracts.\n     * The old CFD itself will invoke this function to do the upgrade.\n\n     * @return address of new contract\n     */\n    function createByUpgrade()\n        external\n        returns (ContractForDifference newCfd)\n    {\n        // can only upgrade this if factory is the latest version\n        require(registry.getCFDFactoryLatest() == address(this), REASON_MUST_BE_LATEST);\n\n        address cfdAddr = msg.sender;\n\n        // can only upgrade if cfd registered and not with this latest version\n        address registryEntry = registry.allCFDs(cfdAddr);\n        require(\n            registryEntry != address(0) && registryEntry != address(this), \n            REASON_MUST_REGISTERED_CFD\n        );\n\n        ContractForDifference existingCfd = ContractForDifference(cfdAddr);\n        require(existingCfd.upgradeable(), REASON_UPGRADEABLE_FLAG_NOT_SET);\n\n        newCfd = ContractForDifference(\n            ForwardFactory(forwardFactory).createForwarder(cfdModel)\n        );\n\n        // Register in the CFD registry before calling createByUpgrade as\n        // createByUpgrade requires this to registerParty().\n        ContractForDifferenceRegistry(cfdRegistry).registerNew(\n            address(newCfd),\n            existingCfd.buyer()\n        );\n\n        newCfd.createByUpgrade(\n            cfdAddr,\n            address(registry),\n            cfdRegistry,\n            feeds\n        );\n\n        // Put the CFD in the main Registry\n        registry.addCFD(address(newCfd));\n\n        // replicate logging for an ordinary create so queries will get this to\n        emit LogCFDFactoryNew(newCfd.market(), newCfd.buyer(), address(newCfd));\n        emit LogCFDFactoryNewByUpgrade(address(newCfd), address(existingCfd));\n    }\n\n}\n",
  "sourcePath": "/home/julien/0xFutures/protocol-master/contracts/cfd/ContractForDifferenceFactory.sol",
  "compiler": {
    "name": "solc",
    "version": "0.5.6+commit.b259423e.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.8",
  "updatedAt": "2019-05-28T09:07:46.847Z",
  "devdoc": {
    "methods": {
      "createByUpgrade()": {
        "return": "address of new contract"
      },
      "createContract(bytes32,uint256,uint256,bool,uint256)": {
        "params": {
          "_isBuyer": "If the caller is to be the buyer, else they will be the seller",
          "_marketId": "Contract for this market (see Feeds.sol markets)",
          "_notionalAmountDai": "Contract notional amount",
          "_strikePrice": "Contact strike price",
          "_value": "Amount of DAI to deposit"
        },
        "return": "address of new contract"
      },
      "isOwner()": {
        "return": "true if `msg.sender` is the owner of the contract."
      },
      "owner()": {
        "return": "the address of the owner."
      },
      "renounceOwnership()": {
        "details": "Allows the current owner to relinquish control of the contract."
      },
      "transferOwnership(address)": {
        "details": "Allows the current owner to transfer control of the contract to a newOwner.",
        "params": {
          "newOwner": "The address to transfer ownership to."
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "createByUpgrade()": {
        "notice": "Upgrade a CFD at a different set of contracts to this set of contracts. The old CFD itself will invoke this function to do the upgrade."
      },
      "createContract(bytes32,uint256,uint256,bool,uint256)": {
        "notice": "Create a new ContractForDifference instance"
      },
      "renounceOwnership()": {
        "notice": "Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore."
      }
    }
  }
}