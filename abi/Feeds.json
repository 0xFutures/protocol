{
  "contractName": "Feeds",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "daemonAccount",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "marketNames",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "fallback"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "bytesId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "strId",
          "type": "string"
        }
      ],
      "name": "LogFeedsMarketAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "marketId",
          "type": "bytes32"
        }
      ],
      "name": "LogFeedsMarketRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "marketId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "LogFeedsPush",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_marketId",
          "type": "bytes32"
        }
      ],
      "name": "isMarketActive",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isDaemon",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_daemon",
          "type": "address"
        }
      ],
      "name": "setDaemonAccount",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_marketId",
          "type": "bytes32"
        },
        {
          "name": "_value",
          "type": "uint256"
        },
        {
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "push",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_marketId",
          "type": "bytes32"
        }
      ],
      "name": "read",
      "outputs": [
        {
          "name": "value",
          "type": "uint256"
        },
        {
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_marketStrId",
          "type": "string"
        }
      ],
      "name": "addMarket",
      "outputs": [
        {
          "name": "marketId",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_marketId",
          "type": "bytes32"
        }
      ],
      "name": "removeMarket",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "0x60806040819052601e60015560008054600160a060020a0319163317808255600160a060020a0316917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3610cda8061005c6000396000f3fe6080604052600436106100da5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630baeb69a81146101a0578063313ce567146101d157806341955214146101f857806342fe6695146102975780635c5212dd1461031457806361da143914610340578063715018a6146103835780637564912b1461039857806380957015146103d65780638da5cb5b146103eb5780638f32d59b1461040057806392f4b0b314610415578063e649d78c1461044b578063f2fde38b1461047e578063f4463db5146104b1575b3480156100e657600080fd5b50604080518082018252601c81527f43616e27742063616c6c2066616c6c6261636b2066756e6374696f6e000000006020808301918252925160e560020a62461bcd0281526004810193845282516024820152825192939283926044909201919080838360005b8381101561016557818101518382015260200161014d565b50505050905090810190601f1680156101925780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b3480156101ac57600080fd5b506101b56104db565b60408051600160a060020a039092168252519081900360200190f35b3480156101dd57600080fd5b506101e66104ea565b60408051918252519081900360200190f35b34801561020457600080fd5b506102226004803603602081101561021b57600080fd5b50356104f0565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561025c578181015183820152602001610244565b50505050905090810190601f1680156102895780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102a357600080fd5b506101e6600480360360208110156102ba57600080fd5b8101906020810181356401000000008111156102d557600080fd5b8201836020820111156102e757600080fd5b8035906020019184600183028401116401000000008311171561030957600080fd5b50909250905061058b565b34801561032057600080fd5b5061033e6004803603602081101561033757600080fd5b5035610669565b005b34801561034c57600080fd5b5061036a6004803603602081101561036357600080fd5b50356107a6565b6040805192835260208301919091528051918290030190f35b34801561038f57600080fd5b5061033e610878565b3480156103a457600080fd5b506103c2600480360360208110156103bb57600080fd5b50356108e2565b604080519115158252519081900360200190f35b3480156103e257600080fd5b506103c26108f7565b3480156103f757600080fd5b506101b5610909565b34801561040c57600080fd5b506103c2610918565b34801561042157600080fd5b5061033e6004803603606081101561043857600080fd5b5080359060208101359060400135610929565b34801561045757600080fd5b5061033e6004803603602081101561046e57600080fd5b5035600160a060020a0316610b09565b34801561048a57600080fd5b5061033e600480360360208110156104a157600080fd5b5035600160a060020a0316610b4b565b3480156104bd57600080fd5b506103c2600480360360208110156104d457600080fd5b5035610b6a565b600454600160a060020a031681565b60015481565b60036020908152600091825260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290918301828280156105835780601f1061055857610100808354040283529160200191610583565b820191906000526020600020905b81548152906001019060200180831161056657829003601f168201915b505050505081565b6000610595610918565b15156105a057600080fd5b8282604051602001808383808284376040805191909301818103601f19018252835280516020918201206000818152600283528481208054600160ff1990911617905560039092529290209195506106019450909250869150859050610c16565b50807fec0192f611133301ab5dd94a415ca4ed865668ca2f52cceee52eaa561044bafa848460405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a292915050565b610671610918565b151561067c57600080fd5b61068581610b6a565b606060405190810160405280602581526020017f4d61726b6574206d7573742062652061637469766520746f207075736820612081526020017f76616c756500000000000000000000000000000000000000000000000000000081525081819015156107365760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561016557818101518382015260200161014d565b506000838152600260209081526040808320805460ff19169055805180820182528381528083018481528785526005909352818420905181559151600192909201919091555184917f1de4d777747a0fae0f827374bf2373391fee95df6f6fc3e24af9c7ca46ecd37291a2505050565b6000806107b283610b6a565b606060405190810160405280602581526020017f4d61726b6574206d7573742062652061637469766520746f207075736820612081526020017f76616c756500000000000000000000000000000000000000000000000000000081525081819015156108635760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561016557818101518382015260200161014d565b5061086d85610b7f565b935093505050915091565b610880610918565b151561088b57600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b60026020526000908152604090205460ff1681565b600454600160a060020a031633145b90565b600054600160a060020a031690565b600054600160a060020a0316331490565b6109316108f7565b606060405190810160405280602481526020017f43616c6c6572206d75737420626520746865207265676973746572656420446181526020017f656d6f6e0000000000000000000000000000000000000000000000000000000081525081819015156109e25760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561016557818101518382015260200161014d565b506109ec85610b6a565b606060405190810160405280602581526020017f4d61726b6574206d7573742062652061637469766520746f207075736820612081526020017f76616c75650000000000000000000000000000000000000000000000000000008152508181901515610a9d5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561016557818101518382015260200161014d565b50604080518082018252878152602080820188815260008b81526005835284902092518355516001909201919091558151888152915187928a927f62a9ea16f13bd1758296411634390e5cfe2b3879cb368388a74714a03698cbd992918290030190a350505050505050565b610b11610918565b1515610b1c57600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b610b53610918565b1515610b5e57600080fd5b610b6781610b99565b50565b60009081526002602052604090205460ff1690565b600090815260056020526040902080546001909101549091565b600160a060020a0381161515610bae57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610c575782800160ff19823516178555610c84565b82800160010185558215610c84579182015b82811115610c84578235825591602001919060010190610c69565b50610c90929150610c94565b5090565b61090691905b80821115610c905760008155600101610c9a56fea165627a7a72305820830cc78408087ff93297fe0633934e5289e170915fb86fe147cabf50845dd7850029",
  "deployedBytecode": "0x6080604052600436106100da5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630baeb69a81146101a0578063313ce567146101d157806341955214146101f857806342fe6695146102975780635c5212dd1461031457806361da143914610340578063715018a6146103835780637564912b1461039857806380957015146103d65780638da5cb5b146103eb5780638f32d59b1461040057806392f4b0b314610415578063e649d78c1461044b578063f2fde38b1461047e578063f4463db5146104b1575b3480156100e657600080fd5b50604080518082018252601c81527f43616e27742063616c6c2066616c6c6261636b2066756e6374696f6e000000006020808301918252925160e560020a62461bcd0281526004810193845282516024820152825192939283926044909201919080838360005b8381101561016557818101518382015260200161014d565b50505050905090810190601f1680156101925780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b3480156101ac57600080fd5b506101b56104db565b60408051600160a060020a039092168252519081900360200190f35b3480156101dd57600080fd5b506101e66104ea565b60408051918252519081900360200190f35b34801561020457600080fd5b506102226004803603602081101561021b57600080fd5b50356104f0565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561025c578181015183820152602001610244565b50505050905090810190601f1680156102895780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102a357600080fd5b506101e6600480360360208110156102ba57600080fd5b8101906020810181356401000000008111156102d557600080fd5b8201836020820111156102e757600080fd5b8035906020019184600183028401116401000000008311171561030957600080fd5b50909250905061058b565b34801561032057600080fd5b5061033e6004803603602081101561033757600080fd5b5035610669565b005b34801561034c57600080fd5b5061036a6004803603602081101561036357600080fd5b50356107a6565b6040805192835260208301919091528051918290030190f35b34801561038f57600080fd5b5061033e610878565b3480156103a457600080fd5b506103c2600480360360208110156103bb57600080fd5b50356108e2565b604080519115158252519081900360200190f35b3480156103e257600080fd5b506103c26108f7565b3480156103f757600080fd5b506101b5610909565b34801561040c57600080fd5b506103c2610918565b34801561042157600080fd5b5061033e6004803603606081101561043857600080fd5b5080359060208101359060400135610929565b34801561045757600080fd5b5061033e6004803603602081101561046e57600080fd5b5035600160a060020a0316610b09565b34801561048a57600080fd5b5061033e600480360360208110156104a157600080fd5b5035600160a060020a0316610b4b565b3480156104bd57600080fd5b506103c2600480360360208110156104d457600080fd5b5035610b6a565b600454600160a060020a031681565b60015481565b60036020908152600091825260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290918301828280156105835780601f1061055857610100808354040283529160200191610583565b820191906000526020600020905b81548152906001019060200180831161056657829003601f168201915b505050505081565b6000610595610918565b15156105a057600080fd5b8282604051602001808383808284376040805191909301818103601f19018252835280516020918201206000818152600283528481208054600160ff1990911617905560039092529290209195506106019450909250869150859050610c16565b50807fec0192f611133301ab5dd94a415ca4ed865668ca2f52cceee52eaa561044bafa848460405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a292915050565b610671610918565b151561067c57600080fd5b61068581610b6a565b606060405190810160405280602581526020017f4d61726b6574206d7573742062652061637469766520746f207075736820612081526020017f76616c756500000000000000000000000000000000000000000000000000000081525081819015156107365760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561016557818101518382015260200161014d565b506000838152600260209081526040808320805460ff19169055805180820182528381528083018481528785526005909352818420905181559151600192909201919091555184917f1de4d777747a0fae0f827374bf2373391fee95df6f6fc3e24af9c7ca46ecd37291a2505050565b6000806107b283610b6a565b606060405190810160405280602581526020017f4d61726b6574206d7573742062652061637469766520746f207075736820612081526020017f76616c756500000000000000000000000000000000000000000000000000000081525081819015156108635760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561016557818101518382015260200161014d565b5061086d85610b7f565b935093505050915091565b610880610918565b151561088b57600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b60026020526000908152604090205460ff1681565b600454600160a060020a031633145b90565b600054600160a060020a031690565b600054600160a060020a0316331490565b6109316108f7565b606060405190810160405280602481526020017f43616c6c6572206d75737420626520746865207265676973746572656420446181526020017f656d6f6e0000000000000000000000000000000000000000000000000000000081525081819015156109e25760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561016557818101518382015260200161014d565b506109ec85610b6a565b606060405190810160405280602581526020017f4d61726b6574206d7573742062652061637469766520746f207075736820612081526020017f76616c75650000000000000000000000000000000000000000000000000000008152508181901515610a9d5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561016557818101518382015260200161014d565b50604080518082018252878152602080820188815260008b81526005835284902092518355516001909201919091558151888152915187928a927f62a9ea16f13bd1758296411634390e5cfe2b3879cb368388a74714a03698cbd992918290030190a350505050505050565b610b11610918565b1515610b1c57600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b610b53610918565b1515610b5e57600080fd5b610b6781610b99565b50565b60009081526002602052604090205460ff1690565b600090815260056020526040902080546001909101549091565b600160a060020a0381161515610bae57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610c575782800160ff19823516178555610c84565b82800160010185558215610c84579182015b82811115610c84578235825591602001919060010190610c69565b50610c90929150610c94565b5090565b61090691905b80821115610c905760008155600101610c9a56fea165627a7a72305820830cc78408087ff93297fe0633934e5289e170915fb86fe147cabf50845dd7850029",
  "sourceMap": "111:4027:1:-;;;;;1031:2;1008:25;;515:6:11;:19;;-1:-1:-1;;;;;;515:19:11;524:10;515:19;;;;-1:-1:-1;;;;;582:6:11;;549:40;;515:6;;549:40;111:4027:1;;;;;;",
  "deployedSourceMap": "111:4027:1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;4112:15:1;;;;;;;;;;;;;;;;;;;4105:23;;-1:-1:-1;;;;;4105:23:1;;;;;;;;;;;;;;;;4112:15;;4105:23;;;;;;;;4112:15;4105:23;;4112:15;-1:-1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;4105:23:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1509:28;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1509:28:1;;;;;;;;-1:-1:-1;;;;;1509:28:1;;;;;;;;;;;;;;1008:25;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1008:25:1;;;;;;;;;;;;;;;;;;;;1382:45;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1382:45:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1382:45:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;1382:45:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3316:330;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3316:330:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3316:330:1;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;3316:330:1;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;3316:330:1;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;-1:-1;3316:330:1;;-1:-1:-1;3316:330:1;-1:-1:-1;3316:330:1;;3693:347;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3693:347:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3693:347:1;;;;;2662:233;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2662:233:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2662:233:1;;;;;;;;;;;;;;;;;;;;;;;;;;1347:137:11;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1347:137:11;;;;1125:39:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1125:39:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1125:39:1;;;;;;;;;;;;;;;;;;;;;1544:98;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1544:98:1;;;;659:77:11;;8:9:-1;5:2;;;30:1;27;20:12;5:2;659:77:11;;;;979:90;;8:9:-1;5:2;;;30:1;27;20:12;5:2;979:90:11;;;;2205:373:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2205:373:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2205:373:1;;;;;;;;;;;;;1648:100;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1648:100:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1648:100:1;-1:-1:-1;;;;;1648:100:1;;;1655:107:11;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1655:107:11;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1655:107:11;-1:-1:-1;;;;;1655:107:11;;;1171:112:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1171:112:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1171:112:1;;;1509:28;;;-1:-1:-1;;;;;1509:28:1;;:::o;1008:25::-;;;;:::o;1382:45::-;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1382:45:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;3316:330::-;3417:16;863:9:11;:7;:9::i;:::-;855:18;;;;;;;;3487:12:1;;3470:30;;;;;;;30:3:-1;22:6;14;1:33;3470:30:1;;;45:16:-1;;;;26:21;;;-1:-1;;22:32;6:49;;3470:30:1;;3460:41;;49:4:-1;3460:41:1;;;;3511:17;;;;:7;:17;;;;;:24;;3531:4;-1:-1:-1;;3511:24:1;;;;;;3545:11;:21;;;;;;3460:41;;-1:-1:-1;3545:36:1;;-1:-1:-1;3545:21:1;;-1:-1:-1;3569:12:1;;-1:-1:-1;3569:12:1;;-1:-1:-1;3545:36:1;:::i;:::-;;3616:8;3596:43;3626:12;;3596:43;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;;74:27;3596:43:1;;137:4:-1;117:14;;;-1:-1;;113:30;157:16;;;3596:43:1;;;;-1:-1:-1;3596:43:1;;-1:-1:-1;;;;3596:43:1;3316:330;;;;:::o;3693:347::-;863:9:11;:7;:9::i;:::-;855:18;;;;;;;;3786:25:1;3801:9;3786:14;:25::i;:::-;3813:28;;;;;;;;;;;;;;;;;;;;;;;293:9:0;304:6;285:26;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;3878:5:1;3857:18;;;:7;:18;;;;;;;;:26;;-1:-1:-1;;3857:26:1;;;3917:15;;;;;;;;;;;;;;;;3893:21;;;:10;:21;;;;;;:39;;;;;;3857:26;3893:39;;;;;;;;3947:32;3865:9;;3947:32;;;883:1:11;;3693:347:1;:::o;2662:233::-;2816:10;2828:14;2742:25;2757:9;2742:14;:25::i;:::-;2769:28;;;;;;;;;;;;;;;;;;;;;;;293:9:0;304:6;285:26;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;2865:23:1;2878:9;2865:12;:23::i;:::-;2858:30;;;;2662:233;;;;;:::o;1347:137:11:-;863:9;:7;:9::i;:::-;855:18;;;;;;;;1445:1;1429:6;;1408:40;;-1:-1:-1;;;;;1429:6:11;;;;1408:40;;1445:1;;1408:40;1475:1;1458:19;;-1:-1:-1;;1458:19:11;;;1347:137::o;1125:39:1:-;;;;;;;;;;;;;;;:::o;1544:98::-;1622:13;;-1:-1:-1;;;;;1622:13:1;1608:10;:27;1544:98;;:::o;659:77:11:-;697:7;723:6;-1:-1:-1;;;;;723:6:11;659:77;:::o;979:90::-;1019:4;1056:6;-1:-1:-1;;;;;1056:6:11;1042:10;:20;;979:90::o;2205:373:1:-;2332:10;:8;:10::i;:::-;2344:26;;;;;;;;;;;;;;;;;;;;;;;293:9:0;304:6;285:26;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;2389:25:1;2404:9;2389:14;:25::i;:::-;2416:28;;;;;;;;;;;;;;;;;;;;;;;293:9:0;304:6;285:26;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;2484:29:1;;;;;;;;;;;;;;;;;;-1:-1:-1;2460:21:1;;;:10;:21;;;;;:53;;;;;;;;;;;;;2528:43;;;;;;;2502:10;;2471:9;;2528:43;;;;;;;;;321:1:0;;2205:373:1;;;;;:::o;1648:100::-;863:9:11;:7;:9::i;:::-;855:18;;;;;;;;1718:13:1;:23;;-1:-1:-1;;1718:23:1;-1:-1:-1;;;;;1718:23:1;;;;;;;;;;1648:100::o;1655:107:11:-;863:9;:7;:9::i;:::-;855:18;;;;;;;;1727:28;1746:8;1727:18;:28::i;:::-;1655:107;:::o;1171:112:1:-;1235:4;1258:18;;;:7;:18;;;;;;;;;1171:112::o;2901:225::-;2989:10;3039:21;;;:10;:21;;;;;:27;;3088:31;;;;;3039:27;;2901:225::o;1906:183:11:-;-1:-1:-1;;;;;1979:22:11;;;;1971:31;;;;;;2038:6;;;2017:38;;-1:-1:-1;;;;;2017:38:11;;;;2038:6;;;2017:38;;;2065:6;:17;;-1:-1:-1;;2065:17:11;-1:-1:-1;;;;;2065:17:11;;;;;;;;;;1906:183::o;111:4027:1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;111:4027:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;111:4027:1;;;-1:-1:-1;111:4027:1;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;",
  "source": "pragma solidity ^0.5.0;\n\nimport \"openzeppelin-solidity/contracts/ownership/Ownable.sol\";\nimport \"./DBC.sol\";\n\n\ncontract Feeds is DBC, Ownable {\n\n    event LogFeedsMarketAdded(bytes32 indexed bytesId, string strId);\n    event LogFeedsMarketRemoved(bytes32 indexed marketId);\n    event LogFeedsPush(bytes32 indexed marketId, uint indexed timestamp, uint value);\n\n    string constant REASON_MUST_BE_FROM_DAEMON = \"Caller must be the registered Daemon\";\n    string constant REASON_MUST_BE_ACTIVE_MARKET = \"Market must be active to push a value\";\n    string constant REASON_FALLBACK = \"Can't call fallback function\";\n\n    /**\n     * As solidity doesn't support storing floats we'll store values as integers\n     * adjusted by a predetermined number of decimals.\n     *\n     * For example if decimals is 18 then:\n     *  1.23456789 is stored as 1234567890000000000.\n     *\n     * For now we have one fixed for all markets. Later we'll likely need to\n     * support a different number for some markets.\n     */\n    uint public decimals = 30;\n\n\n    /**\n     * Active markets - market active if markets[market_id] is true\n     */\n    mapping(bytes32 => bool) public markets;\n\n    function isMarketActive(bytes32 _marketId) public view returns (bool) {\n        return markets[_marketId];\n    }\n\n    /**\n     * Mapping from the market id to the string form. eg. \"Poloniex_BTC_ETH\"\n     */\n    mapping(bytes32 => string) public marketNames;\n\n\n    /**\n     * Daemon - account that pushes new price feed values\n     */\n    address public daemonAccount;\n\n    function isDaemon() public view returns (bool) {\n        return msg.sender == daemonAccount;\n    }\n\n    function setDaemonAccount(address _daemon) public onlyOwner {\n        daemonAccount = _daemon;\n    }\n\n\n    /**\n     * Feed data - by market\n     */\n    struct DataPoint {\n        uint value;       // original value * (10**decimals)\n        uint timestamp;   // UNIX milliseconds\n    }\n    mapping(bytes32 => DataPoint) latestData;\n\n\n    /**\n     * Push value and timestamp of read into the contract.\n     * @param _value Read value * (10^decimals). See decimal description above.\n     * @param _timestamp UNIX milliseconds timestamp of the read\n     */\n    function push(\n        bytes32 _marketId,\n        uint _value,\n        uint _timestamp\n    )\n        external\n        pre_cond(isDaemon(), REASON_MUST_BE_FROM_DAEMON)\n        pre_cond(isMarketActive(_marketId), REASON_MUST_BE_ACTIVE_MARKET)\n    {\n        latestData[_marketId] = DataPoint(_value, _timestamp);\n        emit LogFeedsPush(_marketId, _timestamp, _value);\n    }\n\n    /**\n     * Read the latest value and timestamp from the contract.\n     */\n    function read(bytes32 _marketId)\n        external\n        view\n        pre_cond(isMarketActive(_marketId), REASON_MUST_BE_ACTIVE_MARKET)\n        returns (uint value, uint timestamp)\n    {\n        return readInternal(_marketId);\n    }\n\n    function readInternal(bytes32 _marketId)\n        internal\n        view\n        returns (uint value, uint timestamp)\n    {\n        value = latestData[_marketId].value;\n        timestamp = latestData[_marketId].timestamp;\n    }\n\n\n    /**\n     * Add a new market\n     * @param _marketStrId String id of market something like \"Poloniex_BTC_ETH\"\n     * @return marketId bytes32 keccak256 of the _marketStrId\n     */\n    function addMarket(string calldata _marketStrId)\n        external\n        onlyOwner\n        returns (bytes32 marketId)\n    {\n        marketId = keccak256(abi.encodePacked(_marketStrId));\n        markets[marketId] = true;\n        marketNames[marketId] = _marketStrId;\n        emit LogFeedsMarketAdded(marketId, _marketStrId);\n    }\n\n    /**\n     * Removes a market.\n     */\n    function removeMarket(bytes32 _marketId)\n        external\n        onlyOwner\n        pre_cond(isMarketActive(_marketId), REASON_MUST_BE_ACTIVE_MARKET)\n    {\n        markets[_marketId] = false;\n        latestData[_marketId] = DataPoint(0, 0);\n        emit LogFeedsMarketRemoved(_marketId);\n        // TODO: provide a withdraw and mark balances\n    }\n\n    // Disable the fallback\n    function () external {\n        revert(REASON_FALLBACK);\n    }\n\n}\n",
  "sourcePath": "/home/julien/0xFutures/protocol-infura/contracts/Feeds.sol",
  "compiler": {
    "name": "solc",
    "version": "0.5.0+commit.1d4f565a.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.2",
  "updatedAt": "2019-03-04T19:10:12.054Z",
  "devdoc": {
    "methods": {
      "addMarket(string)": {
        "params": {
          "_marketStrId": "String id of market something like \"Poloniex_BTC_ETH\""
        },
        "return": "marketId bytes32 keccak256 of the _marketStrId"
      },
      "isOwner()": {
        "return": "true if `msg.sender` is the owner of the contract."
      },
      "owner()": {
        "return": "the address of the owner."
      },
      "push(bytes32,uint256,uint256)": {
        "params": {
          "_timestamp": "UNIX milliseconds timestamp of the read",
          "_value": "Read value * (10^decimals). See decimal description above."
        }
      },
      "renounceOwnership()": {
        "details": "Allows the current owner to relinquish control of the contract."
      },
      "transferOwnership(address)": {
        "details": "Allows the current owner to transfer control of the contract to a newOwner.",
        "params": {
          "newOwner": "The address to transfer ownership to."
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "addMarket(string)": {
        "notice": "Add a new market"
      },
      "push(bytes32,uint256,uint256)": {
        "notice": "Push value and timestamp of read into the contract."
      },
      "read(bytes32)": {
        "notice": "Read the latest value and timestamp from the contract."
      },
      "removeMarket(bytes32)": {
        "notice": "Removes a market."
      },
      "renounceOwnership()": {
        "notice": "Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore."
      }
    }
  }
}