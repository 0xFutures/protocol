{
  "contractName": "Feeds",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "daemonAccount",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "marketNames",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "fallback"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "bytesId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "strId",
          "type": "string"
        }
      ],
      "name": "LogFeedsMarketAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "marketId",
          "type": "bytes32"
        }
      ],
      "name": "LogFeedsMarketRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "marketId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "LogFeedsPush",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "previousOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipRenounced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_marketId",
          "type": "bytes32"
        }
      ],
      "name": "isMarketActive",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isDaemon",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_daemon",
          "type": "address"
        }
      ],
      "name": "setDaemonAccount",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_marketId",
          "type": "bytes32"
        },
        {
          "name": "_value",
          "type": "uint256"
        },
        {
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "push",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_marketId",
          "type": "bytes32"
        }
      ],
      "name": "read",
      "outputs": [
        {
          "name": "value",
          "type": "uint256"
        },
        {
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_marketStrId",
          "type": "string"
        }
      ],
      "name": "addMarket",
      "outputs": [
        {
          "name": "marketId",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_marketId",
          "type": "bytes32"
        }
      ],
      "name": "removeMarket",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "0x6080604052601e60015560008054600160a060020a03191633179055610c098061002a6000396000f3006080604052600436106100cf5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630baeb69a8114610195578063313ce567146101c657806341955214146101ed57806342fe66951461027a5780635c5212dd1461029a57806361da1439146102b4578063715018a6146102e55780637564912b146102fa57806380957015146103265780638da5cb5b1461033b57806392f4b0b314610350578063e649d78c1461036e578063f2fde38b1461038f578063f4463db5146103b0575b3480156100db57600080fd5b50604080518082018252601c81527f43616e27742063616c6c2066616c6c6261636b2066756e6374696f6e000000006020808301918252925160e560020a62461bcd0281526004810193845282516024820152825192939283926044909201919080838360005b8381101561015a578181015183820152602001610142565b50505050905090810190601f1680156101875780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b3480156101a157600080fd5b506101aa6103c8565b60408051600160a060020a039092168252519081900360200190f35b3480156101d257600080fd5b506101db6103d7565b60408051918252519081900360200190f35b3480156101f957600080fd5b506102056004356103dd565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561023f578181015183820152602001610227565b50505050905090810190601f16801561026c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561028657600080fd5b506101db6004803560248101910135610478565b3480156102a657600080fd5b506102b260043561059b565b005b3480156102c057600080fd5b506102cc6004356106dc565b6040805192835260208301919091528051918290030190f35b3480156102f157600080fd5b506102b26107ae565b34801561030657600080fd5b5061031260043561081a565b604080519115158252519081900360200190f35b34801561033257600080fd5b5061031261082f565b34801561034757600080fd5b506101aa610841565b34801561035c57600080fd5b506102b2600435602435604435610850565b34801561037a57600080fd5b506102b2600160a060020a0360043516610a30565b34801561039b57600080fd5b506102b2600160a060020a0360043516610a76565b3480156103bc57600080fd5b50610312600435610a99565b600454600160a060020a031681565b60015481565b60036020908152600091825260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290918301828280156104705780601f1061044557610100808354040283529160200191610470565b820191906000526020600020905b81548152906001019060200180831161045357829003601f168201915b505050505081565b60008054600160a060020a0316331461049057600080fd5b8282604051602001808383808284378201915050925050506040516020818303038152906040526040518082805190602001908083835b602083106104e65780518252601f1990920191602091820191016104c7565b51815160001960209485036101000a019081169019919091161790526040805194909201849003909320600081815260028552828120805460ff1916600117905560039094529220919450610542935090915085905084610b45565b50604080516020808252810184905282917fec0192f611133301ab5dd94a415ca4ed865668ca2f52cceee52eaa561044bafa9186918691908190810184848082843760405192018290039550909350505050a292915050565b600054600160a060020a031633146105b257600080fd5b6105bb81610a99565b606060405190810160405280602581526020017f4d61726b6574206d7573742062652061637469766520746f207075736820612081526020017f76616c7565000000000000000000000000000000000000000000000000000000815250818190151561066c5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561015a578181015183820152602001610142565b506000838152600260209081526040808320805460ff19169055805180820182528381528083018481528785526005909352818420905181559151600192909201919091555184917f1de4d777747a0fae0f827374bf2373391fee95df6f6fc3e24af9c7ca46ecd37291a2505050565b6000806106e883610a99565b606060405190810160405280602581526020017f4d61726b6574206d7573742062652061637469766520746f207075736820612081526020017f76616c756500000000000000000000000000000000000000000000000000000081525081819015156107995760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561015a578181015183820152602001610142565b506107a385610aae565b935093505050915091565b600054600160a060020a031633146107c557600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b60026020526000908152604090205460ff1681565b600454600160a060020a031633145b90565b600054600160a060020a031681565b61085861082f565b606060405190810160405280602481526020017f43616c6c6572206d75737420626520746865207265676973746572656420446181526020017f656d6f6e0000000000000000000000000000000000000000000000000000000081525081819015156109095760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561015a578181015183820152602001610142565b5061091385610a99565b606060405190810160405280602581526020017f4d61726b6574206d7573742062652061637469766520746f207075736820612081526020017f76616c756500000000000000000000000000000000000000000000000000000081525081819015156109c45760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561015a578181015183820152602001610142565b50604080518082018252878152602080820188815260008b81526005835284902092518355516001909201919091558151888152915187928a927f62a9ea16f13bd1758296411634390e5cfe2b3879cb368388a74714a03698cbd992918290030190a350505050505050565b600054600160a060020a03163314610a4757600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a03163314610a8d57600080fd5b610a9681610ac8565b50565b60009081526002602052604090205460ff1690565b600090815260056020526040902080546001909101549091565b600160a060020a0381161515610add57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610b865782800160ff19823516178555610bb3565b82800160010185558215610bb3579182015b82811115610bb3578235825591602001919060010190610b98565b50610bbf929150610bc3565b5090565b61083e91905b80821115610bbf5760008155600101610bc95600a165627a7a723058207257a437a6011debbf31b0a988326460980bbd65e986c0fcfaf79c2e43bc74820029",
  "deployedBytecode": "0x6080604052600436106100cf5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630baeb69a8114610195578063313ce567146101c657806341955214146101ed57806342fe66951461027a5780635c5212dd1461029a57806361da1439146102b4578063715018a6146102e55780637564912b146102fa57806380957015146103265780638da5cb5b1461033b57806392f4b0b314610350578063e649d78c1461036e578063f2fde38b1461038f578063f4463db5146103b0575b3480156100db57600080fd5b50604080518082018252601c81527f43616e27742063616c6c2066616c6c6261636b2066756e6374696f6e000000006020808301918252925160e560020a62461bcd0281526004810193845282516024820152825192939283926044909201919080838360005b8381101561015a578181015183820152602001610142565b50505050905090810190601f1680156101875780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b3480156101a157600080fd5b506101aa6103c8565b60408051600160a060020a039092168252519081900360200190f35b3480156101d257600080fd5b506101db6103d7565b60408051918252519081900360200190f35b3480156101f957600080fd5b506102056004356103dd565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561023f578181015183820152602001610227565b50505050905090810190601f16801561026c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561028657600080fd5b506101db6004803560248101910135610478565b3480156102a657600080fd5b506102b260043561059b565b005b3480156102c057600080fd5b506102cc6004356106dc565b6040805192835260208301919091528051918290030190f35b3480156102f157600080fd5b506102b26107ae565b34801561030657600080fd5b5061031260043561081a565b604080519115158252519081900360200190f35b34801561033257600080fd5b5061031261082f565b34801561034757600080fd5b506101aa610841565b34801561035c57600080fd5b506102b2600435602435604435610850565b34801561037a57600080fd5b506102b2600160a060020a0360043516610a30565b34801561039b57600080fd5b506102b2600160a060020a0360043516610a76565b3480156103bc57600080fd5b50610312600435610a99565b600454600160a060020a031681565b60015481565b60036020908152600091825260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290918301828280156104705780601f1061044557610100808354040283529160200191610470565b820191906000526020600020905b81548152906001019060200180831161045357829003601f168201915b505050505081565b60008054600160a060020a0316331461049057600080fd5b8282604051602001808383808284378201915050925050506040516020818303038152906040526040518082805190602001908083835b602083106104e65780518252601f1990920191602091820191016104c7565b51815160001960209485036101000a019081169019919091161790526040805194909201849003909320600081815260028552828120805460ff1916600117905560039094529220919450610542935090915085905084610b45565b50604080516020808252810184905282917fec0192f611133301ab5dd94a415ca4ed865668ca2f52cceee52eaa561044bafa9186918691908190810184848082843760405192018290039550909350505050a292915050565b600054600160a060020a031633146105b257600080fd5b6105bb81610a99565b606060405190810160405280602581526020017f4d61726b6574206d7573742062652061637469766520746f207075736820612081526020017f76616c7565000000000000000000000000000000000000000000000000000000815250818190151561066c5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561015a578181015183820152602001610142565b506000838152600260209081526040808320805460ff19169055805180820182528381528083018481528785526005909352818420905181559151600192909201919091555184917f1de4d777747a0fae0f827374bf2373391fee95df6f6fc3e24af9c7ca46ecd37291a2505050565b6000806106e883610a99565b606060405190810160405280602581526020017f4d61726b6574206d7573742062652061637469766520746f207075736820612081526020017f76616c756500000000000000000000000000000000000000000000000000000081525081819015156107995760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561015a578181015183820152602001610142565b506107a385610aae565b935093505050915091565b600054600160a060020a031633146107c557600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b60026020526000908152604090205460ff1681565b600454600160a060020a031633145b90565b600054600160a060020a031681565b61085861082f565b606060405190810160405280602481526020017f43616c6c6572206d75737420626520746865207265676973746572656420446181526020017f656d6f6e0000000000000000000000000000000000000000000000000000000081525081819015156109095760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561015a578181015183820152602001610142565b5061091385610a99565b606060405190810160405280602581526020017f4d61726b6574206d7573742062652061637469766520746f207075736820612081526020017f76616c756500000000000000000000000000000000000000000000000000000081525081819015156109c45760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561015a578181015183820152602001610142565b50604080518082018252878152602080820188815260008b81526005835284902092518355516001909201919091558151888152915187928a927f62a9ea16f13bd1758296411634390e5cfe2b3879cb368388a74714a03698cbd992918290030190a350505050505050565b600054600160a060020a03163314610a4757600080fd5b6004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600054600160a060020a03163314610a8d57600080fd5b610a9681610ac8565b50565b60009081526002602052604090205460ff1690565b600090815260056020526040902080546001909101549091565b600160a060020a0381161515610add57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610b865782800160ff19823516178555610bb3565b82800160010185558215610bb3579182015b82811115610bb3578235825591602001919060010190610b98565b50610bbf929150610bc3565b5090565b61083e91905b80821115610bbf5760008155600101610bc95600a165627a7a723058207257a437a6011debbf31b0a988326460980bbd65e986c0fcfaf79c2e43bc74820029",
  "sourceMap": "142:4018:1:-;;;1062:2;1039:25;;567:5:11;:18;;-1:-1:-1;;;;;;567:18:11;575:10;567:18;;;142:4018:1;;;;;;",
  "deployedSourceMap": "142:4018:1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;4134:15:1;;;;;;;;;;;;;;;;;;;4127:23;;-1:-1:-1;;;;;4127:23:1;;;;;;;;;;;;;;;;4134:15;;4127:23;;;;;;;;4134:15;4127:23;;4134:15;-1:-1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;4127:23:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1540:28;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1540:28:1;;;;;;;;-1:-1:-1;;;;;1540:28:1;;;;;;;;;;;;;;1039:25;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1039:25:1;;;;;;;;;;;;;;;;;;;;1413:45;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1413:45:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;1413:45:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3347:321;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3347:321:1;;;;;;;;;;;;3715:347;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3715:347:1;;;;;;;2693:233;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2693:233:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;1001:111:11;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1001:111:11;;;;1156:39:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1156:39:1;;;;;;;;;;;;;;;;;;;;;;;1575:98;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1575:98:1;;;;238:20:11;;8:9:-1;5:2;;;30:1;27;20:12;5:2;238:20:11;;;;2236:373:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2236:373:1;;;;;;;;;1679:100;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1679:100:1;-1:-1:-1;;;;;1679:100:1;;;;;1274:103:11;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1274:103:11;-1:-1:-1;;;;;1274:103:11;;;;;1202:112:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1202:112:1;;;;;1540:28;;;-1:-1:-1;;;;;1540:28:1;;:::o;1039:25::-;;;;:::o;1413:45::-;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1413:45:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;3347:321::-;3439:16;719:5:11;;-1:-1:-1;;;;;719:5:11;705:10;:19;697:28;;;;;;3509:12:1;;3492:30;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;3492:30:1;;;3482:41;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;-1:-1;;263:2;259:12;;;254:3;250:22;246:30;340:21;;;311:9;;295:26;;;;377:20;365:33;;3482:41:1;;;;;;;;;;;;;-1:-1:-1;3533:17:1;;;:7;:17;;;;;:24;;-1:-1:-1;;3533:24:1;274:1:-1;3533:24:1;;;3567:11;:21;;;;;3482:41;;-1:-1:-1;3567:36:1;;-1:-1:-1;3567:21:1;;-1:-1:-1;3591:12:1;;-1:-1:-1;3591:12:1;3567:36;:::i;:::-;-1:-1:-1;3618:43:1;;;;;;;;;;;;3638:8;;3618:43;;3648:12;;;;3618:43;;;;;3648:12;;;;3618:43;;;;;;;;;;-1:-1:-1;3618:43:1;;-1:-1:-1;;;;3618:43:1;3347:321;;;;:::o;3715:347::-;719:5:11;;-1:-1:-1;;;;;719:5:11;705:10;:19;697:28;;;;;;3808:25:1;3823:9;3808:14;:25::i;:::-;3835:28;;;;;;;;;;;;;;;;;;;;;;;317:9:0;328:6;309:26;;;;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;-1:-1:-1;3900:5:1;3879:18;;;:7;:18;;;;;;;;:26;;-1:-1:-1;;3879:26:1;;;3939:15;;;;;;;;;;;;;;;;3915:21;;;:10;:21;;;;;;:39;;;;;;3879:26;3915:39;;;;;;;;3969:32;3887:9;;3969:32;;;731:1:11;;3715:347:1;:::o;2693:233::-;2847:10;2859:14;2773:25;2788:9;2773:14;:25::i;:::-;2800:28;;;;;;;;;;;;;;;;;;;;;;;317:9:0;328:6;309:26;;;;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;;2896:23:1;2909:9;2896:12;:23::i;:::-;2889:30;;;;2693:233;;;;;:::o;1001:111:11:-;719:5;;-1:-1:-1;;;;;719:5:11;705:10;:19;697:28;;;;;;1077:5;;;1058:25;;-1:-1:-1;;;;;1077:5:11;;;;1058:25;;;1105:1;1089:18;;-1:-1:-1;;1089:18:11;;;1001:111::o;1156:39:1:-;;;;;;;;;;;;;;;:::o;1575:98::-;1653:13;;-1:-1:-1;;;;;1653:13:1;1639:10;:27;1575:98;;:::o;238:20:11:-;;;-1:-1:-1;;;;;238:20:11;;:::o;2236:373:1:-;2363:10;:8;:10::i;:::-;2375:26;;;;;;;;;;;;;;;;;;;;;;;317:9:0;328:6;309:26;;;;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;;2420:25:1;2435:9;2420:14;:25::i;:::-;2447:28;;;;;;;;;;;;;;;;;;;;;;;317:9:0;328:6;309:26;;;;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;-1:-1:-1;2515:29:1;;;;;;;;;;;;;;;;;;-1:-1:-1;2491:21:1;;;:10;:21;;;;;:53;;;;;;;;;;;;;2559:43;;;;;;;2533:10;;2502:9;;2559:43;;;;;;;;;345:1:0;;2236:373:1;;;;;:::o;1679:100::-;719:5:11;;-1:-1:-1;;;;;719:5:11;705:10;:19;697:28;;;;;;1749:13:1;:23;;-1:-1:-1;;1749:23:1;-1:-1:-1;;;;;1749:23:1;;;;;;;;;;1679:100::o;1274:103:11:-;719:5;;-1:-1:-1;;;;;719:5:11;705:10;:19;697:28;;;;;;1343:29;1362:9;1343:18;:29::i;:::-;1274:103;:::o;1202:112:1:-;1266:4;1289:18;;;:7;:18;;;;;;;;;1202:112::o;2932:225::-;3020:10;3070:21;;;:10;:21;;;;;:27;;3119:31;;;;;3070:27;;2932:225::o;1512:171:11:-;-1:-1:-1;;;;;1582:23:11;;;;1574:32;;;;;;1638:5;;;1617:38;;-1:-1:-1;;;;;1617:38:11;;;;1638:5;;;1617:38;;;1661:5;:17;;-1:-1:-1;;1661:17:11;-1:-1:-1;;;;;1661:17:11;;;;;;;;;;1512:171::o;142:4018:1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;142:4018:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;142:4018:1;;;-1:-1:-1;142:4018:1;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;",
  "source": "pragma solidity ^0.4.23;\npragma experimental \"v0.5.0\";\n\nimport \"openzeppelin-solidity/contracts/ownership/Ownable.sol\";\nimport \"./DBC.sol\";\n\n\ncontract Feeds is DBC, Ownable {\n\n    event LogFeedsMarketAdded(bytes32 indexed bytesId, string strId);\n    event LogFeedsMarketRemoved(bytes32 indexed marketId);\n    event LogFeedsPush(bytes32 indexed marketId, uint indexed timestamp, uint value);\n\n    string constant REASON_MUST_BE_FROM_DAEMON = \"Caller must be the registered Daemon\";\n    string constant REASON_MUST_BE_ACTIVE_MARKET = \"Market must be active to push a value\";\n    string constant REASON_FALLBACK = \"Can't call fallback function\";\n\n    /**\n     * As solidity doesn't support storing floats we'll store values as integers\n     * adjusted by a predetermined number of decimals.\n     *\n     * For example if decimals is 18 then:\n     *  1.23456789 is stored as 1234567890000000000.\n     *\n     * For now we have one fixed for all markets. Later we'll likely need to\n     * support a different number for some markets.\n     */\n    uint public decimals = 30;\n\n\n    /**\n     * Active markets - market active if markets[market_id] is true\n     */\n    mapping(bytes32 => bool) public markets;\n\n    function isMarketActive(bytes32 _marketId) public view returns (bool) {\n        return markets[_marketId];\n    }\n\n    /**\n     * Mapping from the market id to the string form. eg. \"Poloniex_BTC_ETH\"\n     */\n    mapping(bytes32 => string) public marketNames;\n\n\n    /**\n     * Daemon - account that pushes new price feed values\n     */\n    address public daemonAccount;\n\n    function isDaemon() public view returns (bool) {\n        return msg.sender == daemonAccount;\n    }\n\n    function setDaemonAccount(address _daemon) public onlyOwner {\n        daemonAccount = _daemon;\n    }\n\n\n    /**\n     * Feed data - by market\n     */\n    struct DataPoint {\n        uint value;       // original value * (10**decimals)\n        uint timestamp;   // UNIX milliseconds\n    }\n    mapping(bytes32 => DataPoint) latestData;\n\n\n    /**\n     * Push value and timestamp of read into the contract.\n     * @param _value Read value * (10^decimals). See decimal description above.\n     * @param _timestamp UNIX milliseconds timestamp of the read\n     */\n    function push(\n        bytes32 _marketId,\n        uint _value,\n        uint _timestamp\n    )\n        external\n        pre_cond(isDaemon(), REASON_MUST_BE_FROM_DAEMON)\n        pre_cond(isMarketActive(_marketId), REASON_MUST_BE_ACTIVE_MARKET)\n    {\n        latestData[_marketId] = DataPoint(_value, _timestamp);\n        emit LogFeedsPush(_marketId, _timestamp, _value);\n    }\n\n    /**\n     * Read the latest value and timestamp from the contract.\n     */\n    function read(bytes32 _marketId)\n        external\n        view\n        pre_cond(isMarketActive(_marketId), REASON_MUST_BE_ACTIVE_MARKET)\n        returns (uint value, uint timestamp)\n    {\n        return readInternal(_marketId);\n    }\n\n    function readInternal(bytes32 _marketId)\n        internal\n        view\n        returns (uint value, uint timestamp)\n    {\n        value = latestData[_marketId].value;\n        timestamp = latestData[_marketId].timestamp;\n    }\n\n\n    /**\n     * Add a new market\n     * @param _marketStrId String id of market something like \"Poloniex_BTC_ETH\"\n     * @return marketId bytes32 keccak256 of the _marketStrId\n     */\n    function addMarket(string _marketStrId)\n        external\n        onlyOwner\n        returns (bytes32 marketId)\n    {\n        marketId = keccak256(abi.encodePacked(_marketStrId));\n        markets[marketId] = true;\n        marketNames[marketId] = _marketStrId;\n        emit LogFeedsMarketAdded(marketId, _marketStrId);\n    }\n\n    /**\n     * Removes a market.\n     */\n    function removeMarket(bytes32 _marketId)\n        external\n        onlyOwner\n        pre_cond(isMarketActive(_marketId), REASON_MUST_BE_ACTIVE_MARKET)\n    {\n        markets[_marketId] = false;\n        latestData[_marketId] = DataPoint(0, 0);\n        emit LogFeedsMarketRemoved(_marketId);\n        // TODO: provide a withdraw and mark balances\n    }\n\n    // Disable the fallback\n    function () external {\n        revert(REASON_FALLBACK);\n    }\n\n}\n",
  "sourcePath": "/home/julien/0xFutures/protocol/contracts/Feeds.sol",
  "compiler": {
    "name": "solc",
    "version": "0.4.25+commit.59dbf8f1.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "2.0.2",
  "updatedAt": "2019-02-11T02:38:36.546Z"
}