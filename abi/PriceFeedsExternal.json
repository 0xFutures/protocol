{
  "contractName": "PriceFeedsExternal",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "marketNames",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "bytesId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "strId",
          "type": "string"
        }
      ],
      "name": "LogPriceFeedsExternalMarketAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "marketId",
          "type": "bytes32"
        }
      ],
      "name": "LogPriceFeedsExternalMarketRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_marketId",
          "type": "bytes32"
        }
      ],
      "name": "isMarketActive",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_marketStrId",
          "type": "string"
        },
        {
          "name": "_priceContract",
          "type": "address"
        },
        {
          "name": "_callSig",
          "type": "bytes32"
        }
      ],
      "name": "addMarket",
      "outputs": [
        {
          "name": "marketId",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_marketId",
          "type": "bytes32"
        }
      ],
      "name": "removeMarket",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_marketId",
          "type": "bytes32"
        }
      ],
      "name": "read",
      "outputs": [
        {
          "name": "priceValue",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": "0x6080604081905260008054600160a060020a0319163317808255600160a060020a0316917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36109ea806100576000396000f3fe6080604052600436106100985763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630b8043d5811461009d578063419552141461013b5780635c5212dd146101da57806361da143914610206578063715018a6146102305780638da5cb5b146102455780638f32d59b14610276578063f2fde38b1461029f578063f4463db5146102d2575b600080fd5b3480156100a957600080fd5b50610129600480360360608110156100c057600080fd5b8101906020810181356401000000008111156100db57600080fd5b8201836020820111156100ed57600080fd5b8035906020019184600183028401116401000000008311171561010f57600080fd5b9193509150600160a060020a0381351690602001356102fc565b60408051918252519081900360200190f35b34801561014757600080fd5b506101656004803603602081101561015e57600080fd5b5035610417565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561019f578181015183820152602001610187565b50505050905090810190601f1680156101cc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101e657600080fd5b50610204600480360360208110156101fd57600080fd5b50356104b0565b005b34801561021257600080fd5b506101296004803603602081101561022957600080fd5b503561064f565b34801561023c57600080fd5b506102046107e2565b34801561025157600080fd5b5061025a61084c565b60408051600160a060020a039092168252519081900360200190f35b34801561028257600080fd5b5061028b61085c565b604080519115158252519081900360200190f35b3480156102ab57600080fd5b50610204600480360360208110156102c257600080fd5b5035600160a060020a031661086d565b3480156102de57600080fd5b5061028b600480360360208110156102f557600080fd5b503561088c565b600061030661085c565b151561031157600080fd5b8484604051602001808383808284376040805191909301818103601f1901825280845281516020928301208185018552600160a060020a038b811683528383018b8152600083815260018087528882209551865473ffffffffffffffffffffffffffffffffffffffff19169416939093178555905193909101929092556002909252929092209195506103ad9450909250889150879050610926565b50807fba600a88fc714ebd6a38fe64f2b502e9c06a548e4a883a2b43ac0d344be0d212868660405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a2949350505050565b600260208181526000928352604092839020805484516001821615610100026000190190911693909304601f81018390048302840183019094528383529192908301828280156104a85780601f1061047d576101008083540402835291602001916104a8565b820191906000526020600020905b81548152906001019060200180831161048b57829003601f168201915b505050505081565b6104b861085c565b15156104c357600080fd5b6104cc8161088c565b606060405190810160405280602581526020017f4d61726b6574206d7573742062652061637469766520746f207075736820612081526020017f76616c756500000000000000000000000000000000000000000000000000000081525081819015156105d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561059557818101518382015260200161057d565b50505050905090810190601f1680156105c25780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50604080518082018252600080825260208083018281528783526001918290528483209351845473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0390911617845551920191909155905184917f241027c30341da155be2f8d6bf3ae10bdf6083fd0ffcf36e848ae540041fff1191a2505050565b600081815260016020818152604080842080549381015482518085019190915282518082038501815290830192839052805191948694606094600160a060020a039092169382918401908083835b602083106106bc5780518252601f19909201916020918201910161069d565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d806000811461071c576040519150601f19603f3d011682016040523d82523d6000602084013e610721565b606091505b5090925090508115156107c257604080518082018252601a81527f45787465726e616c2070726963652063616c6c206661696c6564000000000000602080830191825292517f08c379a00000000000000000000000000000000000000000000000000000000081526004810193845282516024820152825192939283926044909201919080838360008381101561059557818101518382015260200161057d565b8080602001905160208110156107d757600080fd5b505195945050505050565b6107ea61085c565b15156107f557600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a03165b90565b600054600160a060020a0316331490565b61087561085c565b151561088057600080fd5b610889816108a9565b50565b600090815260016020526040902054600160a060020a0316151590565b600160a060020a03811615156108be57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106109675782800160ff19823516178555610994565b82800160010185558215610994579182015b82811115610994578235825591602001919060010190610979565b506109a09291506109a4565b5090565b61085991905b808211156109a057600081556001016109aa56fea165627a7a723058200231123ff5349ff20ed7f07b3f818fe30151b2c4449768e7457f641556dcdb4b0029",
  "deployedBytecode": "0x6080604052600436106100985763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630b8043d5811461009d578063419552141461013b5780635c5212dd146101da57806361da143914610206578063715018a6146102305780638da5cb5b146102455780638f32d59b14610276578063f2fde38b1461029f578063f4463db5146102d2575b600080fd5b3480156100a957600080fd5b50610129600480360360608110156100c057600080fd5b8101906020810181356401000000008111156100db57600080fd5b8201836020820111156100ed57600080fd5b8035906020019184600183028401116401000000008311171561010f57600080fd5b9193509150600160a060020a0381351690602001356102fc565b60408051918252519081900360200190f35b34801561014757600080fd5b506101656004803603602081101561015e57600080fd5b5035610417565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561019f578181015183820152602001610187565b50505050905090810190601f1680156101cc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101e657600080fd5b50610204600480360360208110156101fd57600080fd5b50356104b0565b005b34801561021257600080fd5b506101296004803603602081101561022957600080fd5b503561064f565b34801561023c57600080fd5b506102046107e2565b34801561025157600080fd5b5061025a61084c565b60408051600160a060020a039092168252519081900360200190f35b34801561028257600080fd5b5061028b61085c565b604080519115158252519081900360200190f35b3480156102ab57600080fd5b50610204600480360360208110156102c257600080fd5b5035600160a060020a031661086d565b3480156102de57600080fd5b5061028b600480360360208110156102f557600080fd5b503561088c565b600061030661085c565b151561031157600080fd5b8484604051602001808383808284376040805191909301818103601f1901825280845281516020928301208185018552600160a060020a038b811683528383018b8152600083815260018087528882209551865473ffffffffffffffffffffffffffffffffffffffff19169416939093178555905193909101929092556002909252929092209195506103ad9450909250889150879050610926565b50807fba600a88fc714ebd6a38fe64f2b502e9c06a548e4a883a2b43ac0d344be0d212868660405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a2949350505050565b600260208181526000928352604092839020805484516001821615610100026000190190911693909304601f81018390048302840183019094528383529192908301828280156104a85780601f1061047d576101008083540402835291602001916104a8565b820191906000526020600020905b81548152906001019060200180831161048b57829003601f168201915b505050505081565b6104b861085c565b15156104c357600080fd5b6104cc8161088c565b606060405190810160405280602581526020017f4d61726b6574206d7573742062652061637469766520746f207075736820612081526020017f76616c756500000000000000000000000000000000000000000000000000000081525081819015156105d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561059557818101518382015260200161057d565b50505050905090810190601f1680156105c25780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50604080518082018252600080825260208083018281528783526001918290528483209351845473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0390911617845551920191909155905184917f241027c30341da155be2f8d6bf3ae10bdf6083fd0ffcf36e848ae540041fff1191a2505050565b600081815260016020818152604080842080549381015482518085019190915282518082038501815290830192839052805191948694606094600160a060020a039092169382918401908083835b602083106106bc5780518252601f19909201916020918201910161069d565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d806000811461071c576040519150601f19603f3d011682016040523d82523d6000602084013e610721565b606091505b5090925090508115156107c257604080518082018252601a81527f45787465726e616c2070726963652063616c6c206661696c6564000000000000602080830191825292517f08c379a00000000000000000000000000000000000000000000000000000000081526004810193845282516024820152825192939283926044909201919080838360008381101561059557818101518382015260200161057d565b8080602001905160208110156107d757600080fd5b505195945050505050565b6107ea61085c565b15156107f557600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a03165b90565b600054600160a060020a0316331490565b61087561085c565b151561088057600080fd5b610889816108a9565b50565b600090815260016020526040902054600160a060020a0316151590565b600160a060020a03811615156108be57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106109675782800160ff19823516178555610994565b82800160010185558215610994579182015b82811115610994578235825591602001919060010190610979565b506109a09291506109a4565b5090565b61085991905b808211156109a057600081556001016109aa56fea165627a7a723058200231123ff5349ff20ed7f07b3f818fe30151b2c4449768e7457f641556dcdb4b0029",
  "sourceMap": "313:2396:9:-;;;;;515:6:15;:19;;-1:-1:-1;;;;;;515:19:15;524:10;515:19;;;;-1:-1:-1;;;;;582:6:15;;549:40;;515:6;;549:40;313:2396:9;;;;;;",
  "deployedSourceMap": "313:2396:9:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1377:445;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1377:445:9;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1377:445:9;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;1377:445:9;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;1377:445:9;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;1377:445:9;;-1:-1:-1;1377:445:9;-1:-1:-1;;;;;;1377:445:9;;;;;;;;;;;;;;;;;;;;;;;;;820:45;;8:9:-1;5:2;;;30:1;27;20:12;5:2;820:45:9;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;820:45:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;820:45:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1828:275;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1828:275:9;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1828:275:9;;;;;2109:598;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2109:598:9;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2109:598:9;;;1347:137:15;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1347:137:15;;;;659:77;;8:9:-1;5:2;;;30:1;27;20:12;5:2;659:77:15;;;;;;;;-1:-1:-1;;;;;659:77:15;;;;;;;;;;;;;;979:90;;8:9:-1;5:2;;;30:1;27;20:12;5:2;979:90:15;;;;;;;;;;;;;;;;;;;;;;1655:107;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1655:107:15;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1655:107:15;-1:-1:-1;;;;;1655:107:15;;;872:140:9;;8:9:-1;5:2;;;30:1;27;20:12;5:2;872:140:9;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;872:140:9;;;1377:445;1552:16;863:9:15;:7;:9::i;:::-;855:18;;;;;;;;1622:12:9;;1605:30;;;;;;;30:3:-1;22:6;14;1:33;1605:30:9;;;45:16:-1;;;;26:21;;;-1:-1;;22:32;6:49;;1605:30:9;;;1595:41;;49:4:-1;1595:41:9;;;;1666:32;;;;;-1:-1:-1;;;;;1666:32:9;;;;;;;;;;;-1:-1:-1;1646:17:9;;;:7;:17;;;;;;:52;;;;-1:-1:-1;;1646:52:9;;;;;;;;;;;;;;;;;;;1708:11;:21;;;;;;;1595:41;;-1:-1:-1;1708:36:9;;-1:-1:-1;1708:21:9;;-1:-1:-1;1732:12:9;;-1:-1:-1;1732:12:9;;-1:-1:-1;1708:36:9;:::i;:::-;;1792:8;1759:56;1802:12;;1759:56;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;;74:27;1759:56:9;;137:4:-1;117:14;;;-1:-1;;113:30;157:16;;;1759:56:9;;;;-1:-1:-1;1759:56:9;;-1:-1:-1;;;;1759:56:9;1377:445;;;;;;:::o;820:45::-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;820:45:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1828:275::-;863:9:15;:7;:9::i;:::-;855:18;;;;;;;;1921:25:9;1936:9;1921:14;:25::i;:::-;1948:28;;;;;;;;;;;;;;;;;;;;;;;293:9:0;304:6;285:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2013:23:9;;;;;;;;-1:-1:-1;2013:23:9;;;;;;;;;;1992:18;;;2013:23;1992:18;;;;;;;:44;;;;-1:-1:-1;;1992:44:9;-1:-1:-1;;;;;1992:44:9;;;;;;;;;;;;;2051:45;;1992:18;;2051:45;;;883:1:15;;1828:275:9;:::o;2109:598::-;2163:15;2214:18;;;:7;:18;;;;;;;;2316:20;;2378:14;;;;2361:32;;;;;;;;;;;26:21:-1;;;22:32;;6:49;;2361:32:9;;;;;;;2316:87;;2214:18;;2163:15;;2265:20;;-1:-1:-1;;;;;2316:20:9;;;;2361:32;;2316:87;;;;2361:32;2316:87;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;2316:87:9;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;2295:108:9;;-1:-1:-1;2295:108:9;-1:-1:-1;2418:8:9;;2414:80;;;2449:33;;;;;;;;;;;;;;;;;;;2442:41;;;;;;;;;;;;;;;;;;;2449:33;;2442:41;;;;;;;;2449:33;2442:41;;2449:33;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;2414:80:9;2684:7;2673:27;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2673:27:9;;2109:598;-1:-1:-1;;;;;2109:598:9:o;1347:137:15:-;863:9;:7;:9::i;:::-;855:18;;;;;;;;1445:1;1429:6;;1408:40;;-1:-1:-1;;;;;1429:6:15;;;;1408:40;;1445:1;;1408:40;1475:1;1458:19;;-1:-1:-1;;1458:19:15;;;1347:137::o;659:77::-;697:7;723:6;-1:-1:-1;;;;;723:6:15;659:77;;:::o;979:90::-;1019:4;1056:6;-1:-1:-1;;;;;1056:6:15;1042:10;:20;;979:90::o;1655:107::-;863:9;:7;:9::i;:::-;855:18;;;;;;;;1727:28;1746:8;1727:18;:28::i;:::-;1655:107;:::o;872:140:9:-;936:4;959:18;;;:7;:18;;;;;:32;-1:-1:-1;;;;;959:32:9;:46;;;872:140::o;1906:183:15:-;-1:-1:-1;;;;;1979:22:15;;;;1971:31;;;;;;2038:6;;;2017:38;;-1:-1:-1;;;;;2017:38:15;;;;2038:6;;;2017:38;;;2065:6;:17;;-1:-1:-1;;2065:17:15;-1:-1:-1;;;;;2065:17:15;;;;;;;;;;1906:183::o;313:2396:9:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;313:2396:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;313:2396:9;;;-1:-1:-1;313:2396:9;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;",
  "source": "pragma solidity ^0.5.0;\n\nimport \"openzeppelin-solidity/contracts/ownership/Ownable.sol\";\nimport \"../DBC.sol\";\n\n\n/**\n * Market prices feeds coming from external sources. \n * External here means any contract outside the 0xfutures protocol contracts.\n * Examples: MakerDAO price feed, EtherDelta DEX price, etc.\n */\ncontract PriceFeedsExternal is DBC, Ownable {\n    event LogPriceFeedsExternalMarketAdded(bytes32 indexed bytesId, string strId);\n    event LogPriceFeedsExternalMarketRemoved(bytes32 indexed marketId);\n\n    string constant REASON_MUST_BE_ACTIVE_MARKET = \"Market must be active to push a value\";\n    string constant REASON_EXTERNAL_PRICE_CALL_FAILED = \"External price call failed\";\n\n    struct Market {\n        address priceContract;\n        bytes32 callSig;\n    }\n    mapping(bytes32 => Market) markets;\n    mapping(bytes32 => string) public marketNames;\n\n    function isMarketActive(bytes32 _marketId) public view returns (bool) {\n        return markets[_marketId].priceContract != address(0);\n    }\n\n    /**\n     * Add a new market\n     * @param _marketStrId String id of market. eg. \"Poloniex_BTC_ETH\"\n     * @param _priceContract Address of contract to fetch price from\n     * @param _callSig Call signature hash of the contract function to fetch \n     *                  the price from\n     * @return marketId bytes32 keccak256 of the _marketStrId\n     */\n    function addMarket(\n        string calldata _marketStrId, \n        address _priceContract, \n        bytes32 _callSig\n    )\n        external\n        onlyOwner\n        returns (bytes32 marketId)\n    {\n        marketId = keccak256(abi.encodePacked(_marketStrId));\n        markets[marketId] = Market(_priceContract, _callSig);\n        marketNames[marketId] = _marketStrId;\n        emit LogPriceFeedsExternalMarketAdded(marketId, _marketStrId);\n    }\n\n    function removeMarket(bytes32 _marketId)\n        external\n        onlyOwner\n        pre_cond(isMarketActive(_marketId), REASON_MUST_BE_ACTIVE_MARKET)\n    {\n        markets[_marketId] = Market(address(0x0), 0);\n        emit LogPriceFeedsExternalMarketRemoved(_marketId);\n    }\n\n    function read(bytes32 _marketId) public view returns (uint priceValue) {\n        Market storage market = markets[_marketId];\n\n        bool success;\n        bytes memory rspData;\n        (success, rspData) = market.priceContract.staticcall(\n            abi.encodePacked(market.callSig)\n        );\n\n        if (!success) {\n            revert(REASON_EXTERNAL_PRICE_CALL_FAILED);\n        }\n        \n        // TODO: assuming a bytes32 return convertable to uint here\n        //   but shouldn't - generic unpack mechanism for other feeds workable?\n        priceValue = abi.decode(rspData, (uint));\n    }\n}\n",
  "sourcePath": "/home/julien/0xFutures/protocol-master/contracts/feeds/PriceFeedsExternal.sol",
  "compiler": {
    "name": "solc",
    "version": "0.5.0+commit.1d4f565a.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.2",
  "updatedAt": "2019-04-23T12:49:06.813Z",
  "devdoc": {
    "methods": {
      "addMarket(string,address,bytes32)": {
        "params": {
          "_callSig": "Call signature hash of the contract function to fetch                  the price from",
          "_marketStrId": "String id of market. eg. \"Poloniex_BTC_ETH\"",
          "_priceContract": "Address of contract to fetch price from"
        },
        "return": "marketId bytes32 keccak256 of the _marketStrId"
      },
      "isOwner()": {
        "return": "true if `msg.sender` is the owner of the contract."
      },
      "owner()": {
        "return": "the address of the owner."
      },
      "renounceOwnership()": {
        "details": "Allows the current owner to relinquish control of the contract."
      },
      "transferOwnership(address)": {
        "details": "Allows the current owner to transfer control of the contract to a newOwner.",
        "params": {
          "newOwner": "The address to transfer ownership to."
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "addMarket(string,address,bytes32)": {
        "notice": "Add a new market"
      },
      "renounceOwnership()": {
        "notice": "Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore."
      }
    },
    "notice": "Market prices feeds coming from external sources.  External here means any contract outside the 0xfutures protocol contracts. Examples: MakerDAO price feed, EtherDelta DEX price, etc."
  }
}