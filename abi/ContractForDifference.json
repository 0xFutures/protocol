{
  "contractName": "ContractForDifference",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "notionalAmountDai",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "seller",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "feedsAddr",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "terminated",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "FORCE_TERMINATE_PENALTY_PERCENT",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerSaleStrikePrice",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerInitialNotional",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerDepositBalance",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "upgradeCalledBy",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "upgradeable",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "MINIMUM_NOTIONAL_AMOUNT_DAI",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "closed",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerSaleTimeLimit",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerInitialStrikePrice",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyer",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerInitialNotional",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerSaleStrikePrice",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "market",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "cfdRegistryAddr",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerDepositBalance",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "initiated",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerSelling",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "strikePrice",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerInitialStrikePrice",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerSaleTimeLimit",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerSelling",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "notionalAmountDai",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "deposit",
          "type": "uint256"
        }
      ],
      "name": "LogCFDCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "joiner",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amountSent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "notionalAmountDai",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "strikePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "buyerDepositBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "sellerDepositBalance",
          "type": "uint256"
        }
      ],
      "name": "LogCFDInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "LogCFDTransferPosition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        }
      ],
      "name": "LogCFDCanceledNew",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "newStrikePrice",
          "type": "uint256"
        }
      ],
      "name": "LogCFDStrikePriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "saleStrikePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "timeLimit",
          "type": "uint256"
        }
      ],
      "name": "LogCFDSale",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        }
      ],
      "name": "LogCFDSaleCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "LogCFDSaleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "newNotional",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "sellerAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "buyerDeposit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        }
      ],
      "name": "LogCFDSold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "isWithdraw",
          "type": "bool"
        },
        {
          "indexed": false,
          "name": "newBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        }
      ],
      "name": "LogCFDPartyBalanceUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LogCFDTransferFunds",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "buyerCollateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "sellerCollateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        }
      ],
      "name": "LogCFDClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "terminator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "terminatorAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "otherParty",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "otherPartyAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        }
      ],
      "name": "LogCFDForceTerminated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "newCFD",
          "type": "address"
        }
      ],
      "name": "LogCFDUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "remainder",
          "type": "uint256"
        }
      ],
      "name": "LogCFDRemainingBalanceUnexpected",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isActive",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isBuyerSelling",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isSellerSelling",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_party",
          "type": "address"
        }
      ],
      "name": "isSelling",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_party",
          "type": "address"
        }
      ],
      "name": "isContractParty",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_registryAddr",
          "type": "address"
        },
        {
          "name": "_cfdRegistryAddr",
          "type": "address"
        },
        {
          "name": "_feedsAddr",
          "type": "address"
        },
        {
          "name": "_partyAddr",
          "type": "address"
        },
        {
          "name": "_marketId",
          "type": "bytes32"
        },
        {
          "name": "_strikePrice",
          "type": "uint256"
        },
        {
          "name": "_notionalAmountDai",
          "type": "uint256"
        },
        {
          "name": "_isBuyer",
          "type": "bool"
        }
      ],
      "name": "create",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_cfdAddr",
          "type": "address"
        },
        {
          "name": "_registryAddr",
          "type": "address"
        },
        {
          "name": "_cfdRegistryAddr",
          "type": "address"
        },
        {
          "name": "_feedsAddr",
          "type": "address"
        }
      ],
      "name": "createByUpgrade",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCfdAttributes",
      "outputs": [
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "bytes32"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "bool"
        },
        {
          "name": "",
          "type": "bool"
        },
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCfdAttributes2",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCfdAttributes3",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        },
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "cancelNew",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "topup",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_newAddress",
          "type": "address"
        }
      ],
      "name": "transferPosition",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_desiredStrikePrice",
          "type": "uint256"
        },
        {
          "name": "_timeLimit",
          "type": "uint256"
        }
      ],
      "name": "sellPrepare",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_newPrice",
          "type": "uint256"
        }
      ],
      "name": "sellUpdate",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_newStrikePrice",
          "type": "uint256"
        }
      ],
      "name": "changeStrikePrice",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "sellCancel",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_buyBuyerSide",
          "type": "bool"
        },
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "liquidate",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "forceTerminate",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "upgrade",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "status",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_marketPrice",
          "type": "uint256"
        },
        {
          "name": "_buyerDepositBalance",
          "type": "uint256"
        },
        {
          "name": "_sellerDepositBalance",
          "type": "uint256"
        },
        {
          "name": "_strikePrice",
          "type": "uint256"
        }
      ],
      "name": "marketPriceInRange",
      "outputs": [
        {
          "name": "inRange",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_oldNotional",
          "type": "uint256"
        },
        {
          "name": "_oldStrikePrice",
          "type": "uint256"
        },
        {
          "name": "_newStrikePrice",
          "type": "uint256"
        }
      ],
      "name": "calculateNewNotional",
      "outputs": [
        {
          "name": "newNotional",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_strikePrice",
          "type": "uint256"
        },
        {
          "name": "_marketPrice",
          "type": "uint256"
        },
        {
          "name": "_notionalAmount",
          "type": "uint256"
        },
        {
          "name": "_depositBalance",
          "type": "uint256"
        },
        {
          "name": "_isBuyer",
          "type": "bool"
        }
      ],
      "name": "calculateCollateralAmount",
      "outputs": [
        {
          "name": "collateral",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_notionalAmountDai",
          "type": "uint256"
        },
        {
          "name": "_depositBalance",
          "type": "uint256"
        },
        {
          "name": "_strikePrice",
          "type": "uint256"
        },
        {
          "name": "_calcForBuyerSide",
          "type": "bool"
        }
      ],
      "name": "cutOffPrice",
      "outputs": [
        {
          "name": "price",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_notional",
          "type": "uint256"
        }
      ],
      "name": "creatorFee",
      "outputs": [
        {
          "name": "fee",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_notional",
          "type": "uint256"
        }
      ],
      "name": "joinerFee",
      "outputs": [
        {
          "name": "fee",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_strikePrice",
          "type": "uint256"
        },
        {
          "name": "_currentPrice",
          "type": "uint256"
        },
        {
          "name": "_notionalAmount",
          "type": "uint256"
        }
      ],
      "name": "changeInDai",
      "outputs": [
        {
          "name": "change",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_value",
          "type": "uint256"
        },
        {
          "name": "_newValue",
          "type": "uint256"
        }
      ],
      "name": "percentChange",
      "outputs": [
        {
          "name": "percent",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_amount",
          "type": "uint256"
        },
        {
          "name": "_percent",
          "type": "uint256"
        }
      ],
      "name": "percentOf",
      "outputs": [
        {
          "name": "adjusted",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "bytecode": "",
  "deployedBytecode": "",
  "sourceMap": "626:40648:5:-;;;5062:29;;;5464:43;;;;5645:23;5:2:-1;;;;30:1;27;20:12;5:2;5645:23:5;626:40648;;;;;;",
  "deployedSourceMap": "626:40648:5:-;;;;;;;;;-1:-1:-1;;;626:40648:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4397:29;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4397:29:5;;;;;;;;;;;;;;;;;;;;4308:21;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4308:21:5;;;;;;;;-1:-1:-1;;;;;4308:21:5;;;;;;;;;;;;;;5550:24;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5550:24:5;;;;38607:332;;8:9:-1;5:2;;;30:1;27;20:12;5:2;38607:332:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;38607:332:5;;;;;;;;;;;;;5129:22;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5129:22:5;;;;;;;;;;;;;;;;;;;;;;21450:492;;8:9:-1;5:2;;;30:1;27;20:12;5:2;21450:492:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;21450:492:5;;;;;4065:56;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4065:56:5;;;;4848:32;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4848:32:5;;;;33275:354;;8:9:-1;5:2;;;30:1;27;20:12;5:2;33275:354:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4470:33;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4470:33:5;;;;5812:107;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5812:107:5;;;;9984:1064;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9984:1064:5;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;;;;;;9984:1064:5;;;;;;;;;;;;;;;;;;;;;;;;;27748:1353;;8:9:-1;5:2;;;30:1;27;20:12;5:2;27748:1353:5;;;;11603:440;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11603:440:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4809:32;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4809:32:5;;;;16154:1667;;8:9:-1;5:2;;;30:1;27;20:12;5:2;16154:1667:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;16154:1667:5;;;35628:364;;8:9:-1;5:2;;;30:1;27;20:12;5:2;35628:364:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;35628:364:5;;;;;;;;;;;;;14808:1064;;8:9:-1;5:2;;;30:1;27;20:12;5:2;14808:1064:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;14808:1064:5;;;5464:43;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5464:43:5;;;;37628:403;;8:9:-1;5:2;;;30:1;27;20:12;5:2;37628:403:5;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;37628:403:5;;;;;;;;;;;;;;;;;;;;5304:31;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5304:31:5;;;;6310:162;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6310:162:5;;;;4127:59;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4127:59:5;;;;14198:452;;8:9:-1;5:2;;;30:1;27;20:12;5:2;14198:452:5;;;;6991:127;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6991:127:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;6991:127:5;-1:-1:-1;;;;;6991:127:5;;;5097:26;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5097:26:5;;;;7970:1623;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7970:1623:5;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;;;;;;7970:1623:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;36576:470;;8:9:-1;5:2;;;30:1;27;20:12;5:2;36576:470:5;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;36576:470:5;;;;;;;;;;;;;;;;;;;;;;;;;18518:708;;8:9:-1;5:2;;;30:1;27;20:12;5:2;18518:708:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;18518:708:5;-1:-1:-1;;;;;18518:708:5;;;4886:30;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4886:30:5;;;;4655:36;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4655:36:5;;;;22041:574;;8:9:-1;5:2;;;30:1;27;20:12;5:2;22041:574:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;22041:574:5;;;4248:20;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4248:20:5;;;;4432:32;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4432:32:5;;;;4923:33;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4923:33:5;;;;38092:140;;8:9:-1;5:2;;;30:1;27;20:12;5:2;38092:140:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;38092:140:5;;;34440:685;;8:9:-1;5:2;;;30:1;27;20:12;5:2;34440:685:5;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;34440:685:5;;;;;;;;;;;;;;;;;;5581:24;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5581:24:5;;;;12048:180;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12048:180:5;;;;;;;;;;;;;-1:-1:-1;;;;;12048:180:5;;;;;;;;;;;;;;;;4369:21;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4369:21:5;;;;19633:1742;;8:9:-1;5:2;;;30:1;27;20:12;5:2;19633:1742:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;19633:1742:5;;;;;;;;38320:138;;8:9:-1;5:2;;;30:1;27;20:12;5:2;38320:138:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;38320:138:5;;;29265:2421;;8:9:-1;5:2;;;30:1;27;20:12;5:2;29265:2421:5;;;;5514:30;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5514:30:5;;;;6034:158;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6034:158:5;;;;39246:203;;8:9:-1;5:2;;;30:1;27;20:12;5:2;39246:203:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;39246:203:5;;;;;;;;4772:31;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4772:31:5;;;;5062:29;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5062:29:5;;;;39630:197;;8:9:-1;5:2;;;30:1;27;20:12;5:2;39630:197:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;39630:197:5;;;;;;;;5000:24;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5000:24:5;;;;12489:1454;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12489:1454:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;12489:1454:5;;;11238:360;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11238:360:5;;;;;;;;-1:-1:-1;;;;;11238:360:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4585:23;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4585:23:5;;;;4614:35;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4614:35:5;;;;6612:178;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6612:178:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;6612:178:5;-1:-1:-1;;;;;6612:178:5;;;32064:1085;;8:9:-1;5:2;;;30:1;27;20:12;5:2;32064:1085:5;;;;4962:31;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4962:31:5;;;;23192:2811;;8:9:-1;5:2;;;30:1;27;20:12;5:2;23192:2811:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;23192:2811:5;;;;;;;;;;22699:251;;8:9:-1;5:2;;;30:1;27;20:12;5:2;22699:251:5;;;;5030:25;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5030:25:5;;;;4397:29;;;;:::o;4308:21::-;;;-1:-1:-1;;;;;4308:21:5;;:::o;5550:24::-;;;-1:-1:-1;;;;;5550:24:5;;:::o;38607:332::-;38764:11;38800:132;38854:12;38880:13;38907:15;38800:40;:132::i;:::-;38791:141;38607:332;-1:-1:-1;;;;38607:332:5:o;5129:22::-;;;;;;;;;:::o;21450:492::-;21534:10;:8;:10::i;:::-;21546:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;21546:21:5;;;;;285:26:0;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21586:21:5;21596:10;21586:9;:21::i;:::-;21609;;;;;;;;;;;;;;;;;;285:26:0;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;21664:29:5;;;;;;;;;;;;;;;;;21661:1;21649:13;;;21664:29;21649:13;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;21727:5:5;;-1:-1:-1;;;;;21727:5:5;21713:10;:19;21709:172;;;21748:20;:32;;;21709:172;;;21815:6;;-1:-1:-1;;;;;21815:6:5;21801:10;:20;21797:84;;;21837:21;:33;;;21797:84;21895:40;;;21913:10;21895:40;;;;;;;;;;;;;;;;;;;;;321:1:0;;;;21450:492:5;;;:::o;4065:56::-;4120:1;4065:56;:::o;4848:32::-;;;;:::o;33275:354::-;33364:6;;33338;;33364;;;;;:14;;33374:4;33364:14;33360:262;;;-1:-1:-1;33399:13:5;33392:20;;33360:262;33431:9;;;;;;;:18;;33427:195;;-1:-1:-1;33470:14:5;33463:21;;33427:195;33503:16;:14;:16::i;:::-;:37;;;;33523:17;:15;:17::i;:::-;33499:123;;;-1:-1:-1;33561:11:5;33554:18;;33499:123;-1:-1:-1;33606:16:5;33499:123;33275:354;:::o;4470:33::-;;;;:::o;5812:107::-;5876:9;;5853:4;;5876:9;;;;;:17;;5889:4;5876:17;:36;;;;-1:-1:-1;5897:6:5;;;;;;;:15;5876:36;5869:43;;5812:107;:::o;9984:1064::-;10163:28;10216:8;10163:62;;10245:6;-1:-1:-1;;;;;10245:13:5;;:15;;;;;-1:-1:-1;;;10245:15:5;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10245:15:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10245:15:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10245:15:5;10236:6;:24;10290:26;;;;;;;;-1:-1:-1;;;;;10290:24:5;;;;;:26;;;;;10245:15;;10290:26;;;;;;;:24;:26;;;5:2:-1;;;;30:1;27;20:12;5:2;10290:26:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10290:26:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10290:26:5;10270:17;:46;10340:20;;;;;;;;-1:-1:-1;;;;;10340:18:5;;;;;:20;;;;;10290:26;;10340:20;;;;;;;:18;:20;;;5:2:-1;;;;30:1;27;20:12;5:2;10340:20:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10340:20:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10340:20:5;10326:11;:34;10378:14;;;;;;;;-1:-1:-1;;;;;10378:12:5;;;;;:14;;;;;10340:20;;10378:14;;;;;;;:12;:14;;;5:2:-1;;;;30:1;27;20:12;5:2;10378:14:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10378:14:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10378:14:5;10370:5;:22;;-1:-1:-1;;;;;;10370:22:5;-1:-1:-1;;;;;10370:22:5;;;;;;10411:15;;;;;;;;:13;;;;;;:15;;;;;10378:14;;10411:15;;;;;;;;:13;:15;;;5:2:-1;;;;30:1;27;20:12;5:2;10411:15:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10411:15:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10411:15:5;10402:6;:24;;-1:-1:-1;;;;;;10402:24:5;-1:-1:-1;;;;;10402:24:5;;;;;;10459:28;;;;;;;;:26;;;;;;:28;;;;;10411:15;;10459:28;;;;;;;;:26;:28;;;5:2:-1;;;;30:1;27;20:12;5:2;10459:28:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10459:28:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10459:28:5;10437:19;:50;10520:29;;;;;;;;-1:-1:-1;;;;;10520:27:5;;;;;:29;;;;;10459:28;;10520:29;;;;;;;:27;:29;;;5:2:-1;;;;30:1;27;20:12;5:2;10520:29:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10520:29:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10520:29:5;10497:20;:52;;;10585:32;;;;;;;;-1:-1:-1;;;;;10585:30:5;;;;;:32;;;;10520:29;;10585:32;;;;;;;:30;:32;;;5:2:-1;;;;30:1;27;20:12;5:2;10585:32:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10585:32:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10585:32:5;10559:23;:58;10651:29;;;;;;;;-1:-1:-1;;;;;10651:27:5;;;;;:29;;;;;10585:32;;10651:29;;;;;;;:27;:29;;;5:2:-1;;;;30:1;27;20:12;5:2;10651:29:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10651:29:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10651:29:5;10628:20;:52;10714:30;;;;;;;;-1:-1:-1;;;;;10714:28:5;;;;;:30;;;;;10651:29;;10714:30;;;;;;;:28;:30;;;5:2:-1;;;;30:1;27;20:12;5:2;10714:30:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10714:30:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10714:30:5;10690:21;:54;10781:33;;;;;;;;-1:-1:-1;;;;;10781:31:5;;;;;:33;;;;;10714:30;;10781:33;;;;;;;:31;:33;;;5:2:-1;;;;30:1;27;20:12;5:2;10781:33:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10781:33:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10781:33:5;10754:24;:60;10825:15;:34;;-1:-1:-1;;;;;10825:34:5;;;-1:-1:-1;;;;;;10825:34:5;;;;;;;;10869:8;:34;;;;;;;;;;;10913:9;:22;;;;;;;;;;;;;;10946:9;:16;;-1:-1:-1;;10946:16:5;;;;;10825:34;11034:6;10973:68;;;-1:-1:-1;;;;;10973:68:5;;11034:6;;;10973:68;;;;;11003:15;;;;;10973:60;;:68;;;;;10825:15;;10973:68;;;;;;;;10825:15;11003;10973:68;;;5:2:-1;;;;30:1;27;20:12;5:2;10973:68:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10973:68:5;;;;9984:1064;;;;;:::o;27748:1353::-;27803:10;:8;:10::i;:::-;27815:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;27815:21:5;;;;;285:26:0;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;27852:16:5;27871:13;:11;:13::i;:::-;27852:32;;28042:165;28078:11;28107:19;;28144:20;;28182:11;;28042:18;:165::i;:::-;28041:166;28020:249;;;;;-1:-1:-1;;;;;28020:249:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;28349:16;28368:157;28422:17;;28453:19;;28486:11;;28511:4;28368:40;:157::i;:::-;28349:176;-1:-1:-1;28633:25:5;;;28612:18;28633:25;28685:30;;28709:6;;-1:-1:-1;;;;;28709:6:5;28685:30;;;28701:5;;-1:-1:-1;;;;;28701:5:5;28685:30;28668:47;;28754:14;28771:8;;;;;;;;;-1:-1:-1;;;;;28771:8:5;-1:-1:-1;;;;;28771:15:5;;:17;;;;;-1:-1:-1;;;28771:17:5;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;28771:17:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;28771:17:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;28771:17:5;:42;;;-1:-1:-1;;;;;28771:42:5;;28807:4;28771:42;;;;;;-1:-1:-1;;;;;28771:27:5;;;;;;:42;;;;;:17;;:42;;;;;;;;:27;:42;;;5:2:-1;;;;30:1;27;20:12;5:2;28771:42:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;28771:42:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;28771:42:5;;-1:-1:-1;28823:30:5;28835:6;28771:42;28823:11;:30::i;:::-;28868:38;;;-1:-1:-1;;;;;28868:38:5;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;28868:38:5;;;;;;;;;;28917:6;:13;;-1:-1:-1;;28917:13:5;;;;;28946:148;28972:6;28992:13;:29;;29020:1;28992:29;;;29008:9;28992:29;29035:13;:29;;29055:9;29035:29;;;29051:1;29035:29;29078:6;;28946:148;;;-1:-1:-1;;;;;28946:148:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;321:1:0;;;;;27748:1353:5;;:::o;11603:440::-;11760:20;;11794:21;;11829:19;;11862:20;;11896;;11930:21;;11965:23;;12002:24;;11603:440;;;;;;;;:::o;4809:32::-;;;;:::o;16154:1667::-;18003:26;;;;;;;;;;;;;;;;;;;;;;;;16241:15;;18000:1;17981:20;;;17973:57;;;;-1:-1:-1;;;;;17973:57:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;17973:57:5;-1:-1:-1;18048:9:5;;18067:24;;;;;;;;;;;;;;;;;;18048:9;;;;;:17;;18061:4;18048:17;18040:52;;;;-1:-1:-1;;;;;18040:52:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;18040:52:5;-1:-1:-1;18110:6:5;;18127:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;18127:25:5;;;;;18110:6;;;;;:15;18102:51;;;;-1:-1:-1;;;;;18102:51:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;18102:51:5;;18171:27;18187:10;18171:15;:27::i;:::-;18200:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;18200:28:5;;;;-1:-1:-1;;;;;18200:28:5;;;18163:66;;;;;;;-1:-1:-1;;;;;18163:66:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;18163:66:5;;18247:21;18257:10;18247:9;:21::i;:::-;18279:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;18279:25:5;;;;;18247:30;18239:66;;;;-1:-1:-1;;;;;18239:66:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;18239:66:5;-1:-1:-1;16272:12:5;16301:5;;-1:-1:-1;;;;;16301:5:5;16287:10;:19;;;16341:52;;16373:20;;16341:52;;;16351:19;;16341:52;16316:77;;16496:17;16478:15;:35;16474:87;;;16534:26;;;;;;;;;;;;;;;;;;;;;;;;16527:34;;-1:-1:-1;;;;;16527:34:5;;;;;;;;;;;;;;;;16534:26;;16527:34;;;;;;;;16534:26;16527:34;;16534:26;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;16474:87:5;16693:35;;;16672:18;16757:13;:11;:13::i;:::-;16738:32;;16785:222;16817:11;16842:7;:45;;16868:19;;16842:45;;;16852:13;16842:45;16901:7;:46;;16934:13;16901:46;;;16911:20;;16901:46;16961:11;;16785:18;:222::i;:::-;16784:223;16780:294;;;17030:32;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;17030:32:5;;;;;;;17023:40;;-1:-1:-1;;;;;17023:40:5;;;;;;;;;;;;;;;;17030:32;;17023:40;;;;;;;;17030:32;17023:40;;17030:32;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;16780:294:5;17084:15;17102:193;17170:11;;17195;17220:17;;17251:13;17278:7;17102:54;:193::i;:::-;17084:211;;17311:77;17358:17;;17377:10;17311:46;:77::i;:::-;17310:78;17306:147;;;17411:30;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;17411:30:5;;;;;;;17404:38;;-1:-1:-1;;;;;17404:38:5;;;;;;;;;;;;;;;;17411:30;;17404:38;;;;;;;;17411:30;17404:38;;17411:30;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;17306:147:5;17463:40;17475:10;17487:15;17463:11;:40::i;:::-;17518:48;;;17538:10;17518:48;;;;;;;;;;-1:-1:-1;;;;;;;;;;;17518:48:5;;;;;;;;;;17581:7;17577:140;;;17604:19;:35;;;17577:140;;;17670:20;:36;;;17577:140;17807:6;;17732:82;;;17757:10;17732:82;;;;;;;;17786:4;17732:82;;;;;;;;;;;;;;;;;;;;;;;;;;;18315:1;;;;;16154:1667;;:::o;35628:364::-;35796:16;35842:143;35905:12;35931:15;35960;35842:49;:143::i;14808:1064::-;14883:24;;;;;;;;;;;;;;;;;14880:1;14870:11;;;;14883:24;14870:11;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;14926:9:5;;14945:24;;;;;;;;;;;;;;;;;14926:9;;;;;;:17;;14939:4;14926:17;;14945:24;14926:17;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;14988:6:5;;15005:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;15005:25:5;;;;14988:6;;;;;;:15;;15005:25;14988:15;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;15049:27:5;15065:10;15049:15;:27::i;:::-;15078:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;15078:28:5;;;;-1:-1:-1;;;;;15078:28:5;;;293:9:0;304:6;285:26;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;15125:21:5;15135:10;15125:9;:21::i;:::-;15157:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;15157:25:5;;;;15125:30;;;15157:25;15125:30;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;15198:12:5;15227:5;;-1:-1:-1;;;;;15227:5:5;15213:10;:19;;15267:101;15361:6;15213:19;15268:78;;15326:20;;15268:78;;;15291:19;;15268:78;15267:93;:101;:93;:101;:::i;:::-;15242:126;;15450:84;15497:17;;15516;15450:46;:84::i;:::-;15449:85;15445:141;;;15555:30;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;15555:30:5;;;;;;;15548:38;;-1:-1:-1;;;;;15548:38:5;;;;;;;;;;;;;;;;15555:30;;15548:38;;;;;;;;15555:30;15548:38;;15555:30;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;15445:141:5;15597:16;15606:6;15597:8;:16::i;:::-;15628:7;15624:148;;;15651:19;:39;;;15624:148;;;15721:20;:40;;;15624:148;15787:78;15812:10;15824:6;15832:5;15839:17;15858:6;;15787:78;;;;-1:-1:-1;;;;;15787:78:5;-1:-1:-1;;;;;15787:78:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;321:1:0;;;;;;;;;;14808:1064:5;;;:::o;5464:43::-;;;;;;-1:-1:-1;;;;;5464:43:5;;:::o;37628:403::-;37822:10;37856:168;37910:18;37942:15;37971:12;37997:17;37856:40;:168::i;:::-;37848:176;37628:403;-1:-1:-1;;;;;37628:403:5:o;5304:31::-;;;;;;;;;:::o;6310:162::-;6381:13;;6358:4;;6381:13;;;;;:84;;;;-1:-1:-1;6411:19:5;;:24;;:53;;-1:-1:-1;;6445:19:5;;6439:3;:25;;6310:162::o;4127:59::-;4178:8;4127:59;:::o;14198:452::-;14253:9;;14273:28;;;;;;;;;;;;;;;;;14253:9;;;;;;:18;;14273:28;14253:18;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;14320:27:5;14336:10;14320:15;:27::i;:::-;14349:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;14349:28:5;;;;-1:-1:-1;;;;;14349:28:5;;;293:9:0;304:6;285:26;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;14411:8:5;;:17;;;;;;;;14393:15;;-1:-1:-1;;;;;14411:8:5;;:15;;:17;;;;;;;;;;;;;;:8;:17;;;5:2:-1;;;;30:1;27;20:12;5:2;14411:17:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;14411:17:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;14411:17:5;:42;;;-1:-1:-1;;;;;14411:42:5;;14447:4;14411:42;;;;;;-1:-1:-1;;;;;14411:27:5;;;;;;:42;;;;;:17;;:42;;;;;;;;:27;:42;;;5:2:-1;;;;30:1;27;20:12;5:2;14411:42:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;14411:42:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;14411:42:5;;-1:-1:-1;14463:35:5;14475:10;14411:42;14463:11;:35::i;:::-;14513:43;;;14533:10;14513:43;;;;;;;;;;-1:-1:-1;;;;;;;;;;;14513:43:5;;;;;;;;;;14566:6;:13;;-1:-1:-1;;14566:13:5;;;;;14636:6;;14594:49;;;14612:10;14594:49;;;;;;;;;;;;;;;;;;;;;;;;;321:1:0;;;14198:452:5;;:::o;6991:127::-;7053:4;7086:5;;-1:-1:-1;;;;;7076:15:5;;;7086:5;;7076:15;;:35;;-1:-1:-1;7105:6:5;;-1:-1:-1;;;;;7095:16:5;;;7105:6;;7095:16;7076:35;7069:42;6991:127;-1:-1:-1;;6991:127:5:o;5097:26::-;;;;;;;;;:::o;7970:1623::-;8340:23;;;;;;;;;;;;;;;;;4178:8;8289:49;;;;8340:23;8289:49;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;8379:8:5;:34;;-1:-1:-1;;;;;;8379:34:5;-1:-1:-1;;;;;8379:34:5;;;;;;;;;;;8441:17;;;;;;;;-1:-1:-1;;8441:8:5;;;;:15;;:17;;;;;;;;;;;;;;;:8;:17;;;5:2:-1;;;;30:1;27;20:12;5:2;8441:17:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8441:17:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;8441:17:5;:42;;;-1:-1:-1;;;;;8441:42:5;;8477:4;8441:42;;;;;;-1:-1:-1;;;;;8441:27:5;;;;;;:42;;;;;:17;;:42;;;;;;;;:27;:42;;;5:2:-1;;;;30:1;27;20:12;5:2;8441:42:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8441:42:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;8441:42:5;;-1:-1:-1;8493:9:5;8505:59;8545:18;8505:39;:59::i;:::-;8493:71;-1:-1:-1;8578:18:5;;;8574:66;;8617:22;;;;;;;;;;;;;;;;;;;8610:30;;-1:-1:-1;;;;;8610:30:5;;;;;;;;;;;;;;;;8617:22;;8610:30;;;;;;;;8617:22;8610:30;;8617:22;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;8574:66:5;8673:17;;;8705:82;8752:18;8673:17;8705:46;:82::i;:::-;8704:83;8700:139;;;8808:30;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;8808:30:5;;;;;;;8801:38;;-1:-1:-1;;;;;8801:38:5;;;;;;;;;;;;;;;;8808:30;;8801:38;;;;;;;;8808:30;8801:38;;8808:30;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;8700:139:5;8854:8;8850:208;;;8878:5;:18;;-1:-1:-1;;;;;;8878:18:5;-1:-1:-1;;;;;8878:18:5;;;;;8910:19;:36;;;8850:208;;;8977:6;:19;;-1:-1:-1;;;;;;8977:19:5;-1:-1:-1;;;;;8977:19:5;;;;;9010:20;:37;;;8850:208;9068:6;:18;;;9096:17;:38;;;9144:20;:41;;;9195:21;:42;;;9248:11;:26;;;9284:23;:38;;;9332:24;:39;;;9382:15;:34;;-1:-1:-1;;;;;9382:34:5;;;-1:-1:-1;;;;;;9382:34:5;;;;;;;9426:9;:22;;;;;;;;;;;;;9464:122;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;321:1:0;;;7970:1623:5;;;;;;;;;;:::o;36576:470::-;36799:15;36843:196;36911:12;36937;36963:15;36992;37021:8;36843:54;:196::i;:::-;36830:209;36576:470;-1:-1:-1;;;;;;36576:470:5:o;18518:708::-;18599:6;;18616:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;18616:25:5;;;;18599:6;;;;;;:15;;18616:25;18599:15;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;18660:27:5;18676:10;18660:15;:27::i;:::-;18689:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;18689:28:5;;;;-1:-1:-1;;;;;18689:28:5;;;293:9:0;304:6;285:26;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;18736:28:5;18752:11;18736:15;:28::i;:::-;18775:24;;;;;;;;;;;;;;;;;18736:37;;;18775:24;18736:37;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;18818:21:5;18828:10;18818:9;:21::i;:::-;18850:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;18850:25:5;;;;18818:30;;;18850:25;18818:30;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;18909:5:5;;-1:-1:-1;;;;;18909:5:5;18895:10;:19;18891:183;;;18916:5;:19;;-1:-1:-1;;;;;;18916:19:5;-1:-1:-1;;;;;18916:19:5;;;;;18891:183;;;18968:6;;-1:-1:-1;;;;;18968:6:5;18954:10;:20;18950:124;;;18976:6;:20;;-1:-1:-1;;;;;;18976:20:5;-1:-1:-1;;;;;18976:20:5;;;;;18950:124;;;19029:15;;;;;-1:-1:-1;;;;;19029:15:5;19015:10;:29;19011:63;;;19046:15;:28;;-1:-1:-1;;19046:28:5;;;19011:63;19114:15;;19084:73;;;-1:-1:-1;;;;;19084:73:5;;-1:-1:-1;;;;;19084:73:5;;;;;;;;;19114:15;;;;;19084:60;;:73;;;;;19114:15;;19084:73;;;;;;;19114:15;;19084:73;;;5:2:-1;;;;30:1;27;20:12;5:2;19084:73:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;19172:47:5;;;19195:10;19172:47;;-1:-1:-1;;;;;19172:47:5;;;;;;;;;;-1:-1:-1;19172:47:5;;;;;;;;-1:-1:-1;19172:47:5;321:1:0;;;;;;18518:708:5;;;:::o;4886:30::-;;;;:::o;4655:36::-;;;;:::o;22041:574::-;22138:9;;22158:28;;;;;;;;;;;;;;;;;22138:9;;;;;;:18;;22158:28;22138:18;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;22205:6:5;;22222:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;22222:25:5;;;;22205:6;;;;;;:15;;22222:25;22205:15;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;22266:27:5;22282:10;22266:15;:27::i;:::-;22295:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;22295:28:5;;;;-1:-1:-1;;;;;22295:28:5;;;293:9:0;304:6;285:26;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;22363:29:5;;;;;;;;;;;;;;;;;22360:1;22342:19;;;22363:29;22342:19;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;22408:11:5;:29;;;22447:23;:41;;;22498:24;:42;;;22555:53;;;22580:10;22555:53;;;;;;;;;;;;;;;;;;;;;321:1:0;;;;;;22041:574:5;;;:::o;4248:20::-;;;-1:-1:-1;;;;;4248:20:5;;:::o;4432:32::-;;;;:::o;4923:33::-;;;;:::o;38092:140::-;38149:8;38175:50;38215:9;38175:39;:50::i;34440:685::-;34644:12;34672:16;34691:159;34745:17;;34776:20;34810:12;34836:4;34691:40;:159::i;:::-;34672:178;;34860:17;34880:161;34934:17;;34965:21;35000:12;35026:5;34880:40;:161::i;:::-;34860:181;;35076:11;35061:12;:26;:57;;;;;35106:12;35091;:27;35061:57;35051:67;34440:685;-1:-1:-1;;;;;;;34440:685:5:o;5581:24::-;;;-1:-1:-1;;;;;5581:24:5;;:::o;12048:180::-;12172:10;;;;;;;;12196:15;;;;-1:-1:-1;;;;;12196:15:5;;12048:180::o;4369:21::-;;;;:::o;19633:1742::-;19731:27;19747:10;19731:15;:27::i;:::-;19760:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;19760:28:5;;;;-1:-1:-1;;;;;19760:28:5;;;293:9:0;304:6;285:26;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;19807:10:5;:8;:10::i;:::-;19819:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;19819:21:5;;;;;285:26:0;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;19914:21:5;19924:10;19914:9;:21::i;:::-;19946:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;19946:25:5;;;;19914:30;;;19946:25;19914:30;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;20015:29:5;;;;;;;;;;;;;;;;;20012:1;19990:23;;;20015:29;19990:23;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;20094:12:5;20124:5;;-1:-1:-1;;;;;20124:5:5;20110:10;:19;20109:36;;20140:5;20109:36;;;20133:4;20109:36;20094:51;;20155:19;20178:7;20177:54;;20211:20;;20177:54;;;20189:19;;20177:54;20155:76;;20241:11;20255:163;20309:17;;20340:14;20368:19;20401:7;20255:40;:163::i;:::-;20241:177;;20458:14;20475:33;20497:10;20475:21;:33::i;:::-;20536:5;;20458:50;;-1:-1:-1;;;;;;20536:5:5;20522:10;:19;20518:654;;;20660:31;;;;;;;;;;;;;;;;;;;;;;;;20630:28;;;20622:70;;;;-1:-1:-1;;;;;20622:70:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;20622:70:5;-1:-1:-1;20706:12:5;:19;;-1:-1:-1;;20706:19:5;20721:4;20706:19;;;20739:20;:42;;;20795:18;:30;;;20518:654;;;20860:6;;-1:-1:-1;;;;;20860:6:5;20846:10;:20;20842:330;;;20993:31;;;;;;;;;;;;;;;;;;;;;;;;20963:28;;;20955:70;;;;-1:-1:-1;;;;;20955:70:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;20955:70:5;-1:-1:-1;21039:13:5;:20;;-1:-1:-1;;21039:20:5;;;;;21073:21;:43;;;21130:19;:31;;;20842:330;21212:15;;21182:71;;;;;;21242:10;21182:71;;;;;;-1:-1:-1;;;;;21212:15:5;;;;21182:59;;:71;;;;;21212:15;;21182:71;;;;;;;;21212:15;;21182:71;;;5:2:-1;;;;30:1;27;20:12;5:2;21182:71:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;21182:71:5;;;;21268:100;21292:10;21316:19;21349:9;21268:100;;;;-1:-1:-1;;;;;21268:100:5;-1:-1:-1;;;;;21268:100:5;;;;;;;;;;;;;;;;;;;;;;;;;;;321:1:0;;;;;;;;;;19633:1742:5;;;;:::o;38320:138::-;38376:8;38402:49;38441:9;38402:38;:49::i;29265:2421::-;29325:10;:8;:10::i;:::-;29337:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;29337:21:5;;;;;285:26:0;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;29377:27:5;29393:10;29377:15;:27::i;:::-;29406:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;29406:28:5;;;;-1:-1:-1;;;;;29406:28:5;;;293:9:0;304:6;285:26;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;29450:16:5;29469:13;:11;:13::i;:::-;29492:24;29533:5;;29640:11;;29690:17;;29721:19;;29450:32;;-1:-1:-1;;;;;;29533:5:5;;;29519:10;:19;;29572:196;;29450:32;;29533:5;29572:54;:196::i;:::-;29549:219;;29778:21;29802:198;29870:11;;29895;29920:17;;29951:20;;29985:5;29802:54;:198::i;:::-;29778:222;;30242:21;30266:124;30373:16;30266:89;30339:15;30266:8;;;;;;;;;-1:-1:-1;;;;;30266:8:5;-1:-1:-1;;;;;30266:15:5;;:17;;;;;-1:-1:-1;;;30266:17:5;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;30266:17:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;30266:17:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;30266:17:5;:55;;;-1:-1:-1;;;;;30266:55:5;;30315:4;30266:55;;;;;;-1:-1:-1;;;;;30266:40:5;;;;;;:55;;;;;:17;;:55;;;;;;;;:40;:55;;;5:2:-1;;;;30:1;27;20:12;5:2;30266:55:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;30266:55:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;30266:55:5;;:89;:72;:89;:::i;:::-;:106;:124;:106;:124;:::i;:::-;30242:148;-1:-1:-1;30404:21:5;;30400:107;;30446:50;;;;;;;;;;;;;;;;;30400:107;30516:35;30534:16;30516:17;:35::i;:::-;30638:12;30653:163;30705:19;:56;;30745:16;30705:56;;;30727:15;30705:56;4120:1;30653:38;:163::i;:::-;30638:178;;30830:19;30826:297;;;30883:28;:15;30903:7;30883:28;:19;:28;:::i;:::-;30865:46;-1:-1:-1;30944:29:5;:16;30965:7;30944:29;:20;:29;:::i;:::-;30925:48;;30826:297;;;31022:28;:15;31042:7;31022:28;:19;:28;:::i;:::-;31004:46;-1:-1:-1;31083:29:5;:16;31104:7;31083:29;:20;:29;:::i;:::-;31064:48;;30826:297;31197:5;;31185:35;;-1:-1:-1;;;;;31197:5:5;31204:15;31185:11;:35::i;:::-;31255:5;;31235:43;;;-1:-1:-1;;;;;31255:5:5;;;31235:43;;;;;;;;;;-1:-1:-1;;;;;;;;;;;31235:43:5;;;;;;;;;31300:6;;31288:37;;-1:-1:-1;;;;;31300:6:5;31308:16;31288:11;:37::i;:::-;31360:6;;31340:45;;;-1:-1:-1;;;;;31360:6:5;;;31340:45;;;;;;;;;;-1:-1:-1;;;;;;;;;;;31340:45:5;;;;;;;;;31396:10;:17;;-1:-1:-1;;;;31396:17:5;;;;;31423:13;;;;;31447:232;;;;31511:5;;;31535:6;31561;;31489:79;;;-1:-1:-1;;;;;31511:5:5;;;31489:79;;;;;;;;31535:6;;;;31489:79;;;;;;;;;;;;;;;;;;;;;;;;;31447:232;;;31622:6;;;31648:5;31672:6;;31600:79;;;-1:-1:-1;;;;;31622:6:5;;;31600:79;;;;;;;;31648:5;;;;31600:79;;;;;;;;;;;;;;;;;;;;;;;;;31447:232;321:1:0;;;;;;;;29265:2421:5;;:::o;5514:30::-;;;-1:-1:-1;;;;;5514:30:5;;:::o;6034:158::-;6104:12;;6081:4;;6104:12;;:81;;;;-1:-1:-1;6133:18:5;;:23;;:51;;-1:-1:-1;;6166:18:5;;6160:3;:24;;6034:158::o;39246:203::-;39343:12;39381:61;39424:6;39432:9;39381:42;:61::i;:::-;39371:71;39246:203;-1:-1:-1;;;39246:203:5:o;4772:31::-;;;;:::o;5062:29::-;;;;;;;;;:::o;39630:197::-;39723:13;39763:57;39802:7;39811:8;39763:38;:57::i;5000:24::-;;;;;;:::o;12489:1454::-;12553:9;;12573:28;;;;;;;;;;;;;;;;;12553:9;;;;;;:18;;12573:28;12553:18;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;12620:6:5;;12637:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;12637:25:5;;;;12620:6;;;;;;:15;;12637:25;12620:15;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;12714:27:5;12730:10;12714:15;:27::i;:::-;12752:24;;;;;;;;;;;;;;;;;12714:36;;;12752:24;12714:36;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;12830:15:5;12848:57;12887:17;;12848:38;:57::i;:::-;12830:75;-1:-1:-1;12919:20:5;;;12915:68;;12960:22;;;;;;;;;;;;;;;;;;;12953:30;;-1:-1:-1;;;;;12953:30:5;;;;;;;;;;;;;;;;12960:22;;12953:30;;;;;;;;12960:22;12953:30;;12960:22;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;12915:68:5;13097:17;;13016:19;;;;13050:81;;13016:19;13050:46;:81::i;:::-;13049:82;13045:138;;;13152:30;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;13152:30:5;;;;;;;13145:38;;-1:-1:-1;;;;;13145:38:5;;;;;;;;;;;;;;;;13152:30;;13145:38;;;;;;;;13152:30;13145:38;;13152:30;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;13045:138:5;13194:16;13203:6;13194:8;:16::i;:::-;13220:112;13264:58;13304:17;;13264:39;:58::i;:::-;13251:10;:71;13220:17;:112::i;:::-;13364:1;13347:5;-1:-1:-1;;;;;13347:5:5;:19;13343:219;;;13382:5;:18;;-1:-1:-1;;;;;;13382:18:5;13390:10;13382:18;;;13414:19;:36;;;13343:219;;;13481:6;:19;;-1:-1:-1;;;;;;13481:19:5;13490:10;13481:19;;;13514:20;:37;;;13343:219;13572:9;:16;;-1:-1:-1;;13572:16:5;;;;;13628:15;;13598:72;;;-1:-1:-1;;;;;13598:72:5;;13659:10;13598:72;;;;;;-1:-1:-1;;;;;13628:15:5;;;;13598:60;;:72;;;;;13572:16;;13598:72;;;;;;;;13572:16;13628:15;13598:72;;;5:2:-1;;;;30:1;27;20:12;5:2;13598:72:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;13598:72:5;;;;13685:251;13714:10;13738:6;13758:5;;;;;;;;;-1:-1:-1;;;;;13758:5:5;13777:6;;;;;;;;;-1:-1:-1;;;;;13777:6:5;13797;;13817:17;;13848:11;;13873:19;;13906:20;;13685:251;;;;-1:-1:-1;;;;;13685:251:5;-1:-1:-1;;;;;13685:251:5;;;;;;;;;;;-1:-1:-1;;;;;13685:251:5;-1:-1:-1;;;;;13685:251:5;;;;;;-1:-1:-1;;;;;13685:251:5;-1:-1:-1;;;;;13685:251:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;321:1:0;;;;;;12489:1454:5;;;:::o;11238:360::-;11311:7;11405:5;;;11424:6;11444;;11464:11;;11489:17;;11520:12;;11311:7;;;;;;;;;;;;;;-1:-1:-1;;;;;11405:5:5;;;;11424:6;;11444;11464:11;11489:17;11520:12;;;;;11405:5;11546:13;;;11573:8;:6;:8::i;:::-;11384:207;;;;-1:-1:-1;11384:207:5;;-1:-1:-1;11384:207:5;;-1:-1:-1;11384:207:5;-1:-1:-1;11384:207:5;-1:-1:-1;11384:207:5;-1:-1:-1;11384:207:5;;-1:-1:-1;11238:360:5;-1:-1:-1;11238:360:5:o;4585:23::-;;;;:::o;4614:35::-;;;;:::o;6612:178::-;6668:4;6702:5;;-1:-1:-1;;;;;6692:15:5;;;6702:5;;6692:15;:35;;;;;6711:16;:14;:16::i;:::-;6691:92;;;-1:-1:-1;6755:6:5;;-1:-1:-1;;;;;6745:16:5;;;6755:6;;6745:16;:37;;;;;6765:17;:15;:17::i;32064:1085::-;32117:27;32133:10;32117:15;:27::i;:::-;32146:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;32146:28:5;;;;-1:-1:-1;;;;;32146:28:5;;;293:9:0;304:6;285:26;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;32193:10:5;:8;:10::i;:::-;32205:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;32205:21:5;;;;;285:26:0;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;32245:21:5;32255:10;32245:9;:21::i;:::-;32277:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;32277:25:5;;;;32245:30;;;32277:25;32245:30;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;32335:15:5;;32352:26;;;;;;;;;;;;;;;;;32335:15;;;;-1:-1:-1;;;;;32335:15:5;32321:10;:29;;;32352:26;32321:29;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;32432:8:5;;;;;;;;;-1:-1:-1;;;;;32432:8:5;-1:-1:-1;;;;;32432:28:5;;:30;;;;;-1:-1:-1;;;32432:30:5;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;32432:30:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;32432:30:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;32432:30:5;32397:8;;:31;;;;;;32422:4;32397:31;;;;;;-1:-1:-1;;;;;32397:65:5;;;;:8;;;;:16;;:31;;;;;32432:30;;32397:31;;;;;;;;:8;:31;;;5:2:-1;;;;30:1;27;20:12;5:2;32397:31:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;32397:31:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;32397:31:5;32464:29;;;;;;;;;;;;;32397:31;32464:29;;;-1:-1:-1;;;;;32397:65:5;;;;;;;;;32464:29;32397:65;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;32561:15:5;;;;;-1:-1:-1;;;;;32561:15:5;:29;32557:108;;;32606:15;:28;;-1:-1:-1;;32606:28:5;32624:10;32606:28;;;;;32648:7;;32557:108;32794:11;:18;;-1:-1:-1;;32794:18:5;;;;;32849:8;;:30;;;;;;;;32794:18;;-1:-1:-1;;;;;32849:8:5;;:28;;:30;;;;;;;;;;;;;;:8;:30;;;5:2:-1;;;;30:1;27;20:12;5:2;32849:30:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;32849:30:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;32849:30:5;32914:64;;;;;;;;32849:30;;-1:-1:-1;32889:14:5;;-1:-1:-1;;;;;32914:62:5;;;;;:64;;;;;32849:30;;32914:64;;;;;;;32889:14;32914:62;:64;;;5:2:-1;;;;30:1;27;20:12;5:2;32914:64:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;32914:64:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;32914:64:5;33009:8;;:17;;;;;;;;32914:64;;-1:-1:-1;32989:63:5;;32914:64;;-1:-1:-1;;;;;33009:8:5;;:15;;:17;;;;;32914:64;;33009:17;;;;;;;:8;:17;;;5:2:-1;;;;30:1;27;20:12;5:2;33009:17:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;33009:17:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;33009:17:5;:42;;;-1:-1:-1;;;;;33009:42:5;;33045:4;33009:42;;;;;;-1:-1:-1;;;;;33009:27:5;;;;;;:42;;;;;:17;;:42;;;;;;;;:27;:42;;;5:2:-1;;;;30:1;27;20:12;5:2;33009:42:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;33009:42:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;33009:42:5;32989:11;:63::i;:::-;33062:11;:19;;-1:-1:-1;;33091:13:5;;;;;33120:22;;;-1:-1:-1;;;;;33120:22:5;;;;;;;;;;;;;;;321:1:0;;;;;;;;;;32064:1085:5;;:::o;4962:31::-;;;;:::o;23192:2811::-;23280:13;26156:10;:8;:10::i;:::-;26168:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;26168:21:5;;;;;26148:42;;;;;;-1:-1:-1;;;;;26148:42:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;26148:42:5;;26208:41;26218:13;:30;;26242:6;;-1:-1:-1;;;;;26242:6:5;26218:30;;;26234:5;;-1:-1:-1;;;;;26234:5:5;26218:30;26208:9;:41::i;:::-;26251:22;;;;;;;;;;;;;;;;;;26200:74;;;;;;-1:-1:-1;;;;;26200:74:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;26200:74:5;;26292:27;26308:10;26292:15;:27::i;:::-;26330:24;;;;;;;;;;;;;;;;;;26292:36;26284:71;;;;-1:-1:-1;;;;;26284:71:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;26284:71:5;;23309:9;23321:57;23360:17;;23321:38;:57::i;:::-;23309:69;-1:-1:-1;23392:14:5;;;23388:62;;23427:22;;;;;;;;;;;;;;;;;;;23420:30;;-1:-1:-1;;;;;23420:30:5;;;;;;;;;;;;;;;;23427:22;;23420:30;;;;;;;;23427:22;23420:30;;23427:22;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;23388:62:5;23523:19;23545:16;:6;23556:4;23545:16;:10;:16;:::i;:::-;23523:38;;23576:81;23623:17;;23642:14;23576:46;:81::i;:::-;23575:82;23571:138;;;23678:30;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;23678:30:5;;;;;;;23671:38;;-1:-1:-1;;;;;23671:38:5;;;;;;;;;;;;;;;;23678:30;;23671:38;;;;;;;;23678:30;23671:38;;23678:30;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;23571:138:5;23720:16;23739:13;:11;:13::i;:::-;23720:32;;23762:19;23784:13;:84;;23847:21;;23784:84;;;23812:20;;23784:84;23762:106;;23944:245;23976:11;24001:13;:52;;24034:19;;24001:52;;;24017:14;24001:52;24067:13;:53;;24106:14;24067:53;;;24083:20;;24067:53;24134:14;23944:18;:245::i;:::-;23943:246;23939:317;;;24212:32;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;24212:32:5;;;;;;;24205:40;;-1:-1:-1;;;;;24205:40:5;;;;;;;;;;;;;;;;24212:32;;24205:40;;;;;;;;24212:32;24205:40;;24212:32;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;23939:317:5;24315:16;24324:6;24315:8;:16::i;:::-;24341:23;24359:4;24341:17;:23::i;:::-;24412:20;24435:13;:30;;24459:6;;-1:-1:-1;;;;;24459:6:5;24435:30;;;24451:5;;-1:-1:-1;;;;;24451:5:5;24435:30;24412:53;;24475:27;24505:107;24535:13;24562:14;24590:12;24505:16;:107::i;:::-;24475:137;;24661:27;24691:75;24751:14;24691:8;;;;;;;;;-1:-1:-1;;;;;24691:8:5;-1:-1:-1;;;;;24691:15:5;;:17;;;;;-1:-1:-1;;;24691:17:5;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;24691:75:5;24661:105;;24814:16;24833:143;24896:17;;24927:11;;24952:14;24833:49;:143::i;:::-;24814:162;;24991:13;24987:536;;;25020:5;:18;;-1:-1:-1;;;;;;25020:18:5;25028:10;25020:18;;;25052:19;:36;;;25102:23;:40;;;25156:20;:34;;;25204:20;:45;;;24987:536;;;25280:6;:19;;-1:-1:-1;;;;;;25280:19:5;25289:10;25280:19;;;25313:20;:37;;;25364:24;:41;;;25419:21;:35;;;25468:19;:44;;;24987:536;25533:11;:28;;;25571:17;:31;;;25613:24;25623:13;25613:9;:24::i;:::-;25724:15;;-1:-1:-1;;;;;25724:31:5;;;:15;;;;;:31;25720:90;;;25771:15;:28;;-1:-1:-1;;25771:28:5;;;25720:90;25850:15;;25820:72;;;-1:-1:-1;;;;;25820:72:5;;25881:10;25820:72;;;;;;-1:-1:-1;;;;;25850:15:5;;;;25820:60;;:72;;;;;25850:15;;25820:72;;;;;;;;25850:15;;25820:72;;;5:2:-1;;;;30:1;27;20:12;5:2;25820:72:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;25989:6:5;;25907:89;;;25918:10;25907:89;;-1:-1:-1;;;;;25907:89:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;25907:89:5;;;;;;;-1:-1:-1;25907:89:5;26365:1;;;;;;;;23192:2811;;;:::o;22699:251::-;22755:10;:8;:10::i;:::-;22767:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;22767:21:5;;;;;285:26:0;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;22807:21:5;22817:10;22807:9;:21::i;:::-;22830;;;;;;;;;;;;;;;;;;285:26:0;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;22891:5:5;;22867:30;;-1:-1:-1;;;;;22891:5:5;22877:10;:19;22867:9;:30::i;:::-;22912:31;;;22932:10;22912:31;;;;;;;;;;;;;321:1:0;;22699:251:5;;:::o;5030:25::-;;;;;;;;;:::o;2574:316:7:-;2733:11;2760:18;2781:42;2795:12;2809:13;2781;:42::i;:::-;2760:63;;2842:41;2852:15;2869:13;2842:9;:41::i;33706:204:5:-;33852:9;;33868:6;;33846:29;;;;;;;;;;;;;;;33776:10;;;;-1:-1:-1;;;;;33852:9:5;;;;33846:21;;:29;;;;;;;;;;33852:9;33846:29;;;5:2:-1;;;;30:1;27;20:12;5:2;33846:29:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;33846:29:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;33846:29:5;;-1:-1:-1;;33706:204:5;:::o;6372:1083:7:-;6568:10;6655:24;6683:17;6682:96;;1134:24;6682:96;;;1054:25;6682:96;6655:123;-1:-1:-1;6788:22:7;355:8;6814:34;;;6813:50;6788:75;;6921:15;355:8;7002:18;355:8;6972:12;:26;6953:15;:46;:67;;;;;;;;6939:105;;;;;;;;6921:123;;7196:17;:51;;;;;7230:17;7217:10;:30;7196:51;7192:77;;;7268:1;7261:8;;;;;;;7192:77;7340:17;7339:109;;7438:10;7418:17;:30;7339:109;;;7393:10;7373:17;:30;7339:109;7331:117;6372:1083;-1:-1:-1;;;;;;;;6372:1083:7:o;40645:182:5:-;40731:8;;;;;;;;;-1:-1:-1;;;;;40731:8:5;-1:-1:-1;;;;;40731:15:5;;:17;;;;;-1:-1:-1;;;40731:17:5;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;40731:17:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;40731:17:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;40731:17:5;:39;;;;;;-1:-1:-1;;;;;40731:39:5;;;;;;;;;;;;;;;:26;;;;;;;:39;;;;;:17;;:39;;;;;;;-1:-1:-1;40731:26:5;:39;;;5:2:-1;;;;30:1;27;20:12;5:2;40731:39:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;40731:39:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;40731:39:5;40784:26;;;;;;;;;;;;40731:39;40784:26;;;;;;;;;;;;40710:110;;;;;;-1:-1:-1;;;;;40710:110:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;40710:110:5;;40645:182;;:::o;4484:972:7:-;4709:15;355:8;5044:33;;;;5100:12;;5135;;5170:15;;4709;;355:8;5100:12;5235:6;;;5234:21;;5233:28;;;;;;;;5228:1;:34;:47;;;;;;;;5214:84;;;;;;;;5197:101;;5308:17;5328:8;:42;;5360:10;5356:1;:14;5328:42;;;5343:10;5339:1;:14;5328:42;5308:62;-1:-1:-1;5405:1:7;5388:18;;;5381:26;;;;5435:13;4484:972;-1:-1:-1;;;;;;;;;;;4484:972:7:o;5462:327::-;5594:12;5644:54;5654:15;516:2;5644:9;:54::i;:::-;5633:7;:65;;5632:150;;;;;5727:54;5737:15;591:3;5727:9;:54::i;:::-;5716:7;:65;;5622:160;5462:327;-1:-1:-1;;;5462:327:7:o;2060:365::-;2230:16;355:8;2290:102;2361:15;2325:32;:15;355:8;2325:32;:19;:32;:::i;:::-;:52;;;;;;;2290:12;;2325:52;;2290:102;:16;:102;:::i;:::-;2276:142;;;;;;;;;2060:365;-1:-1:-1;;;;2060:365:7:o;1431:145:10:-;1489:7;1520:5;;;1543:6;;;;1535:15;;;;;41079:192:5;41149:8;;;;;;;;;-1:-1:-1;;;;;41149:8:5;-1:-1:-1;;;;;41149:15:5;;:17;;;;;-1:-1:-1;;;41149:17:5;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;41149:17:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;41149:17:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;41149:17:5;:65;;;;;;41180:10;41149:65;;;;41200:4;41149:65;;;;;;;;;;;;-1:-1:-1;;;;;41149:30:5;;;;;;:65;;;;;:17;;:65;;;;;;;;-1:-1:-1;41149:30:5;:65;;;5:2:-1;;;;30:1;27;20:12;5:2;41149:65:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;41149:65:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;41149:65:5;41228:26;;;;;;;;;;;;41149:65;41228:26;;;;;;;;;;;;41128:136;;;;;;-1:-1:-1;;;;;41128:136:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;41128:136:5;;41079:192;:::o;1229:120:7:-;1288:8;1340:2;1314:23;1324:9;1335:1;1314:9;:23::i;:::-;:28;;;;;;;;;1229:120;-1:-1:-1;;1229:120:7:o;39976:220:5:-;40112:14;40168:3;40155:10;:16;40154:35;;40188:1;40154:35;;;-1:-1:-1;40175:10:5;39976:220::o;1437:119:7:-;1495:8;1547:2;1521:23;1531:9;1542:1;1521:9;:23::i;1205:145:10:-;1263:7;1290:6;;;;1282:15;;;;;;-1:-1:-1;1319:5:10;;;1205:145::o;40890:104:5:-;40960:8;;:18;;;;;;;;40948:39;;-1:-1:-1;;;;;40960:8:5;;:16;;:18;;;;;;;;;;;;;;:8;:18;;;5:2:-1;;;;30:1;27;20:12;5:2;40960:18:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;40960:18:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;40960:18:5;40980:6;40948:11;:39::i;:::-;40890:104;:::o;3732:168:7:-;3890:3;3868:18;;3867:26;;3732:168::o;3197:354::-;3296:12;3338:9;3328:6;:19;3324:33;;;-1:-1:-1;3356:1:7;3349:8;;3324:33;3386:28;;;3367:16;3407:6;3457:3;3442:18;;3441:34;;;;;;;;3424:51;;3514:1;3501:10;:14;3500:43;;3533:10;3532:11;;3500:43;;26562:710:5;26713:27;26849:245;26917:11;;26942:14;26970:17;;27001:12;:57;;27038:20;;27001:57;;;27016:19;;27001:57;27072:12;26849:54;:245::i;:::-;26824:270;;27144:49;27156:12;27170:22;27144:11;:49::i;:::-;27208:57;;;-1:-1:-1;;;;;27208:57:5;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;27208:57:5;;;;;;;;;;26562:710;;;;;:::o;40255:333::-;40318:15;40314:268;;;40372:1;40349:20;:24;;;40387:18;:22;40423:12;:20;;-1:-1:-1;;40423:20:5;;;40314:268;;;40498:1;40474:21;:25;;;40513:19;:23;40550:13;:21;;-1:-1:-1;;40550:21:5;;;40255:333;:::o;229:421:10:-;287:7;527:6;;523:45;;;-1:-1:-1;556:1:10;549:8;;523:45;590:5;;;594:1;590;:5;613;;;;;;;;:10;605:19;;;;",
  "source": "pragma solidity ^0.5.0;\n\nimport \"openzeppelin-solidity/contracts/math/SafeMath.sol\";\nimport \"../DBC.sol\";\nimport \"../Feeds.sol\";\nimport \"../Registry.sol\";\nimport \"./ContractForDifferenceFactory.sol\";\nimport \"./ContractForDifferenceRegistry.sol\";\nimport \"./ContractForDifferenceLibrary.sol\";\n\n\n/*\n * SOLIUM DISABLE: \n *\n *   security/no-block-members - we need to use 'now' in order to set a time \n *       limit.\n */\n\n /* solium-disable security/no-block-members */\n\n/**\n * @title Contract for difference\n *\n * Contract for difference for a given market between a\n * \"buyer\" (long position) and \"seller\" (short position).\n */\ncontract ContractForDifference is DBC {\n    using SafeMath for uint;\n\n    /*\n     * Events\n     */\n\n    event LogCFDCreated(\n        address creator,\n        bytes32 market,\n        uint notionalAmountDai,\n        uint deposit\n    );\n    event LogCFDInitiated(\n        address joiner,\n        uint amountSent,\n        address buyer,\n        address seller,\n        bytes32 market,\n        uint notionalAmountDai,\n        uint strikePrice,\n        uint buyerDepositBalance,\n        uint sellerDepositBalance\n    );\n    event LogCFDTransferPosition(address oldOwner, address newOwner);\n    event LogCFDCanceledNew(address party, uint amount, bytes32 market);\n    event LogCFDStrikePriceUpdated(address party, uint newStrikePrice);\n\n    event LogCFDSale(\n        address party,\n        uint saleStrikePrice,\n        uint timeLimit\n    );\n    event LogCFDSaleCancelled(address party);\n    event LogCFDSaleUpdated(address party, uint newPrice);\n    event LogCFDSold(address to, address by, uint newNotional, uint sellerAmount, uint buyerDeposit, bytes32 market);\n\n    event LogCFDPartyBalanceUpdate(address party, uint amount, bool isWithdraw, uint newBalance, bytes32 market);\n    event LogCFDTransferFunds(address receiver, uint amount);\n\n    event LogCFDClosed(address winner, uint buyerCollateral, uint sellerCollateral, bytes32 market);\n    event LogCFDForceTerminated(address terminator, uint terminatorAmount, address otherParty, uint otherPartyAmount, bytes32 market);\n    event LogCFDUpgraded(address newCFD);\n    event LogCFDRemainingBalanceUnexpected(uint remainder);\n\n    enum Status {\n        CREATED,\n        INITIATED,\n        SALE,\n        CLOSED\n    }\n\n    /*\n     * Constants\n     */\n\n    string constant REASON_NOTIONAL_TOO_LOW = \"Notional below minimum\";\n    string constant REASON_FEES_NOT_ENOUGH = \"Not enough sent to cover fees\";\n    string constant REASON_DAI_TRANSFER_FAILED = \"Failure transfering ownership of DAI tokens\";\n    string constant REASON_COLLATERAL_RANGE_FAILED = \"collateralInRange false\";\n    string constant REASON_MUST_NOT_BE_INITIATED = \"Must not be initiated\";\n    string constant REASON_MUST_NOT_BE_CLOSED = \"Must not be closed\";\n    string constant REASON_MUST_NOT_BE_PARTY = \"Contract party can't call this\";\n    string constant REASON_MUST_BE_INITIATED = \"Must be initiated\";\n    string constant REASON_MUST_BE_SELLER = \"msg.sender must be seller\";\n    string constant REASON_MUST_NOT_BE_SELLER = \"msg.sender must not be seller\";\n    string constant REASON_MUST_BE_ON_SALE = \"Must be on sale\";\n    string constant REASON_MUST_BE_POSITIVE_PRICE = \"Price must be > 0\";\n    string constant REASON_ONLY_CONTRACT_PARTIES = \"Only contract parties can do this\";\n    string constant REASON_MUST_BE_ACTIVE = \"Must be active\";\n    string constant REASON_MARKET_PRICE_RANGE_FAILED = \"collateralInRange false\";\n    string constant REASON_WITHDRAW_NOT_ENOUGH = \"Can't withdraw more then available\";\n    string constant REASON_AMOUNT_NOT_ENOUGH = \"Amount not enough\";\n    string constant REASON_UPGRADE_ALREADY_SET = \"msg.sender already called\";\n    string constant REASON_UPGRADE_ALREADY_LATEST = \"Already at latest version\";\n    string constant REASON_TRANSFER_TO_EXISTING_PARTY = \"Can't transfer to existing party\";\n    string constant REASON_MUST_BE_MORE_THAN_CUTOFF = \"Must be more than liquidation price\";\n    string constant REASON_MUST_BE_LESS_THAN_CUTOFF = \"Must be less than liquidation price\";\n\n    uint public constant FORCE_TERMINATE_PENALTY_PERCENT = 5;\n    uint public constant MINIMUM_NOTIONAL_AMOUNT_DAI = 1 * 1e18; // 1 DAI/1 USD\n\n\n    /*\n     * State variables\n     */\n\n    address public buyer;                           // long\n    address public seller;                          // short\n    bytes32 public market;\n\n    uint public notionalAmountDai;\n    uint public buyerInitialNotional;\n    uint public sellerInitialNotional;\n\n    // format of strike prices as in Feeds contract - see Feeds.decimals()\n    uint public strikePrice;\n    uint public buyerInitialStrikePrice;\n    uint public sellerInitialStrikePrice;\n\n    // balances of amounts actually deposited/withdrawn from the contract\n    uint public buyerDepositBalance;\n    uint public sellerDepositBalance;\n\n    uint public buyerSaleStrikePrice;\n    uint public buyerSaleTimeLimit;\n\n    uint public sellerSaleStrikePrice;\n    uint public sellerSaleTimeLimit;\n\n    bool public buyerSelling;\n    bool public sellerSelling;\n\n    bool public initiated = false;\n    bool public closed = false;\n    bool public terminated;\n\n    // set to true for a short period of time - when second party has called\n    // upgrade and upgrade has called the new factory to do the work\n    bool public upgradeable = false;\n\n    // set to first party that calls upgrade\n    // enables identification of who called and that it has been called once\n    address public upgradeCalledBy = address(0);\n\n    address public cfdRegistryAddr;\n    address public feedsAddr;\n\n    Registry public registry;\n\n    /*\n     * Functions\n     */\n\n    constructor() public {}\n\n    /**\n     * @dev Contract has been initiated (has 2 parties) and not yet terminated.\n     * @return true if contract is active\n     */\n    function isActive() public view returns (bool) {\n        return initiated == true && closed == false;\n    }\n\n    /**\n     * @dev Is buyer / long party selling.\n     * @return true if buyer has side up for sale\n     */\n    function isBuyerSelling() public view returns (bool) {\n        return buyerSelling &&\n            (buyerSaleTimeLimit == 0 || now < buyerSaleTimeLimit);\n    }\n\n    /**\n     * @dev Is seller / short party selling.\n     * @return true if seller has side up for sale\n     */\n    function isSellerSelling() public view returns (bool) {\n        return sellerSelling &&\n            (sellerSaleTimeLimit == 0 || now < sellerSaleTimeLimit);\n    }\n\n    /**\n     * @dev If the given party is selling one side of the contract.\n     * @return true if the given party is selling\n     */\n    function isSelling(address _party) public view returns (bool) {\n        return (_party == buyer && isBuyerSelling()) ||\n            (_party == seller && isSellerSelling());\n    }\n\n    /**\n     * @dev Check if the given address is one of the 2 parties of the contract.\n     * @param _party Address to check\n     * @return true if _party is either the buyer or seller.\n     */\n    function isContractParty(address _party) public view returns (bool) {\n        return _party == buyer || _party == seller;\n    }\n\n    /**\n     * @dev Create a new CFDinstance specifying the terms of the contract.\n     *\n     * Fee of 0.3% of the notional is taken.\n     *\n     * Therefore the intial deposit is _value minus these fees.\n     *\n     * @param _registryAddr Registry contract address\n     * @param _cfdRegistryAddr CFD Registry contract address\n     * @param _feedsAddr Feeds address\n     * @param _partyAddr Address of the party creating the contract\n     * @param _marketId Contract is for prices on this market\n     * @param _strikePrice Agreed initial price for the contract (compatible\n                with Feeds stored price - see Feeds.decimals() adjustment)\n     * @param _notionalAmountDai Contract amount\n     * @param _isBuyer Flag indicating if the contract creator wants to take the\n     *            buyer (true) or the seller side (false).\n     */\n    function create(\n        address _registryAddr,\n        address _cfdRegistryAddr,\n        address _feedsAddr,\n        address _partyAddr, // msg.sender calling the Factory\n        bytes32 _marketId,\n        uint _strikePrice,\n        uint _notionalAmountDai,\n        bool _isBuyer\n    )\n        public\n        pre_cond(_notionalAmountDai >= MINIMUM_NOTIONAL_AMOUNT_DAI, REASON_NOTIONAL_TOO_LOW)\n    {\n        registry = Registry(_registryAddr);\n        uint daiBalance = registry.getDAI().balanceOf(address(this));\n        uint fees = ContractForDifferenceLibrary.creatorFee(_notionalAmountDai);\n        if (daiBalance <= fees)\n            revert(REASON_FEES_NOT_ENOUGH);\n\n        uint collateralSent = daiBalance - fees;\n        if (!ContractForDifferenceLibrary.collateralInRange(_notionalAmountDai, collateralSent))\n            revert(REASON_COLLATERAL_RANGE_FAILED);\n\n        if (_isBuyer) {\n            buyer = _partyAddr;\n            buyerDepositBalance = collateralSent;\n        } else {\n            seller = _partyAddr;\n            sellerDepositBalance = collateralSent;\n        }\n\n        market = _marketId;\n        notionalAmountDai = _notionalAmountDai;\n        buyerInitialNotional = _notionalAmountDai;\n        sellerInitialNotional = _notionalAmountDai;\n\n        strikePrice = _strikePrice;\n        buyerInitialStrikePrice = _strikePrice;\n        sellerInitialStrikePrice = _strikePrice;\n\n        cfdRegistryAddr = _cfdRegistryAddr;\n        feedsAddr = _feedsAddr;\n\n        emit LogCFDCreated(\n            _partyAddr,\n            market,\n            notionalAmountDai,\n            daiBalance\n        );\n    }\n\n    /**\n     * @dev Create a new CFDinstance from a previous CFD instance. This is part\n     *      of the upgrade process (see CFD.upgrade()).\n     *\n     * @param _cfdAddr Address of the existing / old CFD\n     * @param _registryAddr Address of Registry contract\n     * @param _cfdRegistryAddr Address of CFDRegistry contract\n     * @param _feedsAddr Address to send fees to\n     */\n    function createByUpgrade(\n        address _cfdAddr,\n        address _registryAddr,\n        address _cfdRegistryAddr,\n        address _feedsAddr\n    )\n        public\n    {\n        ContractForDifference oldCfd = ContractForDifference(_cfdAddr);\n\n        market = oldCfd.market();\n        notionalAmountDai = oldCfd.notionalAmountDai();\n        strikePrice = oldCfd.strikePrice();\n        buyer = oldCfd.buyer();\n        seller = oldCfd.seller();\n\n        buyerDepositBalance = oldCfd.buyerDepositBalance();\n        buyerInitialNotional = oldCfd.buyerInitialNotional();\n        buyerInitialStrikePrice = oldCfd.buyerInitialStrikePrice();\n\n        sellerDepositBalance = oldCfd.sellerDepositBalance();\n        sellerInitialNotional = oldCfd.sellerInitialNotional();\n        sellerInitialStrikePrice = oldCfd.sellerInitialStrikePrice();\n\n        cfdRegistryAddr = _cfdRegistryAddr;\n        registry = Registry(_registryAddr);\n        feedsAddr = _feedsAddr;\n\n        initiated = true;\n\n        ContractForDifferenceRegistry(cfdRegistryAddr).registerParty(seller);\n    }\n\n    /**\n     * Returns an array with all the attributes of the contract\n     * (Had to split in 3 functions because of the stack limit)\n     * Max number of return values == 8\n     */\n    function getCfdAttributes()\n        public\n        view\n        returns (address, address, bytes32, uint, uint, bool, bool, Status)\n    {\n        return (\n            buyer,\n            seller,\n            market,\n            strikePrice,\n            notionalAmountDai,\n            buyerSelling,\n            sellerSelling,\n            status()\n        );\n    }\n    function getCfdAttributes2()\n        public\n        view\n        returns (uint, uint, uint, uint, uint, uint, uint, uint)\n    {\n        return (\n            buyerInitialNotional,\n            sellerInitialNotional,\n            buyerDepositBalance,\n            sellerDepositBalance,\n            buyerSaleStrikePrice,\n            sellerSaleStrikePrice,\n            buyerInitialStrikePrice,\n            sellerInitialStrikePrice\n        );\n    }\n    function getCfdAttributes3()\n        public\n        view\n        returns (bool, address)\n    {\n        return (\n            terminated,\n            upgradeCalledBy\n        );\n    }\n\n    /**\n     * @dev Counterparty deposits their funds into the contract thereby joining\n     * and initiating the contract.\n     *\n     * Fee of 0.5% of the notional is taken.\n     *\n     * Therefore the intial deposit is _value minus these fees.\n     */\n    function deposit(uint _value)\n        external\n        pre_cond(initiated == false, REASON_MUST_NOT_BE_INITIATED)\n        pre_cond(closed == false, REASON_MUST_NOT_BE_CLOSED) // cancelNew has not been called\n        pre_cond(isContractParty(msg.sender) == false, REASON_MUST_NOT_BE_PARTY) // reject contract creator depositing\n    {\n        uint joinerFees = ContractForDifferenceLibrary.joinerFee(notionalAmountDai);\n        if (_value <= joinerFees)\n            revert(REASON_FEES_NOT_ENOUGH);\n\n        uint collateralSent = _value - joinerFees;\n        if (!ContractForDifferenceLibrary.collateralInRange(notionalAmountDai, collateralSent))\n            revert(REASON_COLLATERAL_RANGE_FAILED);\n\n        daiClaim(_value);\n        daiTransferToFees(\n            joinerFees + ContractForDifferenceLibrary.creatorFee(notionalAmountDai)\n        );\n\n        if (buyer == address(0)) {\n            buyer = msg.sender;\n            buyerDepositBalance = collateralSent;\n        } else {\n            seller = msg.sender;\n            sellerDepositBalance = collateralSent;\n        }\n\n        initiated = true;\n        ContractForDifferenceRegistry(cfdRegistryAddr).registerParty(msg.sender);\n        emit LogCFDInitiated(\n            msg.sender,\n            _value,\n            buyer,\n            seller,\n            market,\n            notionalAmountDai,\n            strikePrice,\n            buyerDepositBalance,\n            sellerDepositBalance\n        );\n    }\n\n    /**\n     * @dev Cancels a newly created contract refunding the balance to the party\n     *      that created the contract. This can only be called before a contract\n     *      is initiated. ie. between the create() and deposit() calls.\n     */\n    function cancelNew()\n        external\n        pre_cond(initiated == false, REASON_MUST_NOT_BE_INITIATED)\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\n    {\n        uint amountSent = registry.getDAI().balanceOf(address(this));\n        daiTransfer(msg.sender, amountSent);\n        emit LogCFDTransferFunds(msg.sender, amountSent);\n        closed = true;\n        emit LogCFDCanceledNew(msg.sender, amountSent, market);\n    }\n\n    /**\n     * @dev Party adds more funds to the contract thereby increasing their\n     *      deposit balance.\n     * @param _value DAI amount\n     */\n    function topup(uint _value)\n        external\n        pre_cond(_value >= 1, REASON_AMOUNT_NOT_ENOUGH)\n        pre_cond(initiated == true, REASON_MUST_BE_INITIATED)\n        pre_cond(closed == false, REASON_MUST_NOT_BE_CLOSED)\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\n        pre_cond(isSelling(msg.sender) == false, REASON_MUST_NOT_BE_SELLER)\n    {\n        bool isBuyer = msg.sender == buyer;\n        uint newDepositBalance = (isBuyer ? \n            buyerDepositBalance : \n            sellerDepositBalance\n        ).add(_value);\n\n        // check topup doesn't make collateral exceed the maximum\n        if (!ContractForDifferenceLibrary.collateralInRange(notionalAmountDai, newDepositBalance))\n            revert(REASON_COLLATERAL_RANGE_FAILED);\n\n        daiClaim(_value);\n\n        if (isBuyer) {\n            buyerDepositBalance = newDepositBalance;\n        } else {\n            sellerDepositBalance = newDepositBalance;\n        }\n\n        emit LogCFDPartyBalanceUpdate(msg.sender, _value, false, newDepositBalance, market);\n    }\n\n    /**\n     * @dev Party withdraws funds from the contract.\n     *      They can only withdraw down to an amount that leaves the collateral\n     *      to notional difference at 20% or more.\n     * @param _withdrawAmount Amount to withdraw from the deposits balance.\n     */\n    function withdraw(uint _withdrawAmount)\n        external\n        assertWithdrawPreCond(_withdrawAmount)\n    {\n        bool isBuyer = msg.sender == buyer;\n        uint currentDepositBal = isBuyer ? buyerDepositBalance : sellerDepositBalance;\n\n        // first simple check that can't withdraw more then deposited\n        if (_withdrawAmount > currentDepositBal)\n            revert(REASON_WITHDRAW_NOT_ENOUGH);\n\n        // second a more precise check that the collateral at new balance will remain above the min\n        uint newDepositBal = currentDepositBal - _withdrawAmount;\n        uint marketPrice = latestPrice();\n        if (!marketPriceInRange(\n            marketPrice,\n            isBuyer ? newDepositBal : buyerDepositBalance,\n            isBuyer ? sellerDepositBalance : newDepositBal,\n            strikePrice // unchanged on withdraw\n        )) {\n            revert(REASON_MARKET_PRICE_RANGE_FAILED);\n        }\n\n        uint collateral = ContractForDifferenceLibrary.calculateCollateralAmount(\n            strikePrice,\n            marketPrice,\n            notionalAmountDai,\n            newDepositBal,\n            isBuyer\n        );\n\n        if (!ContractForDifferenceLibrary.collateralInRange(notionalAmountDai, collateral)) {\n            revert(REASON_COLLATERAL_RANGE_FAILED);\n        }\n\n        daiTransfer(msg.sender, _withdrawAmount);\n        emit LogCFDTransferFunds(msg.sender, _withdrawAmount);\n\n        if (isBuyer) {\n            buyerDepositBalance = newDepositBal;\n        } else {\n            sellerDepositBalance = newDepositBal;\n        }\n\n        emit LogCFDPartyBalanceUpdate(msg.sender, _withdrawAmount, true, newDepositBal, market);\n    }\n\n    /* NOTE: Split off into modifier to work around 'stack too deep' error */\n    modifier assertWithdrawPreCond(uint _withdrawAmount) \n    {\n        require(_withdrawAmount >= 1, REASON_WITHDRAW_NOT_ENOUGH);\n        require(initiated == true, REASON_MUST_BE_INITIATED);\n        require(closed == false, REASON_MUST_NOT_BE_CLOSED);\n        require(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES);\n        require(isSelling(msg.sender) == false, REASON_MUST_NOT_BE_SELLER);\n        _;\n    }\n\n    /**\n     * @dev Parties can transfer contract ownership to another address by\n     *      calling this function.\n     * @param _newAddress Addreess of the new party to swap in.\n     */\n    function transferPosition(address _newAddress)\n        external\n        pre_cond(closed == false, REASON_MUST_NOT_BE_CLOSED)\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\n        pre_cond(isContractParty(_newAddress) == false, REASON_MUST_NOT_BE_PARTY)\n        pre_cond(isSelling(msg.sender) == false, REASON_MUST_NOT_BE_SELLER)\n    {\n        if (msg.sender == buyer) buyer = _newAddress;\n        else if (msg.sender == seller) seller = _newAddress;\n        else if (msg.sender == upgradeCalledBy) upgradeCalledBy = address(0);\n        ContractForDifferenceRegistry(cfdRegistryAddr).registerParty(_newAddress);\n        emit LogCFDTransferPosition(msg.sender, _newAddress);\n    }\n\n    /**\n     * @dev Position in a contract can be sold to another party. This function\n     *      makes the callers side available for sale. A party can buy the side\n     *      with the buy function.\n     * @param _desiredStrikePrice Sellers desired sell strike price\n     * @param _timeLimit Sale available until this time in UNIX epoch seconds\n     *                  (< now for no limit)\n     */\n    function sellPrepare(uint _desiredStrikePrice, uint _timeLimit)\n        external\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\n        // reject already marked selling by the caller\n        pre_cond(isSelling(msg.sender) == false, REASON_MUST_NOT_BE_SELLER)\n        pre_cond(_desiredStrikePrice > 0, REASON_MUST_BE_POSITIVE_PRICE)\n    {\n        // calculate cutoff price\n        bool isBuyer = (msg.sender == buyer) ? true : false;\n        uint depositBalance = (isBuyer) ? buyerDepositBalance : sellerDepositBalance;\n        uint cutOff = ContractForDifferenceLibrary.cutOffPrice(\n            notionalAmountDai,\n            depositBalance,\n            _desiredStrikePrice,\n            isBuyer\n        );\n\n        // mark side on sale\n        uint timeLimit = timeLimitFutureOrZero(_timeLimit);\n        if (msg.sender == buyer) {\n            // check strike price is not below liquidation price\n            require(_desiredStrikePrice > cutOff, REASON_MUST_BE_MORE_THAN_CUTOFF);\n            buyerSelling = true;\n            buyerSaleStrikePrice = _desiredStrikePrice;\n            buyerSaleTimeLimit = timeLimit;\n        } else if (msg.sender == seller) {\n            // check strike price is not already above liquidation price\n            require(_desiredStrikePrice < cutOff, REASON_MUST_BE_LESS_THAN_CUTOFF);\n            sellerSelling = true;\n            sellerSaleStrikePrice = _desiredStrikePrice;\n            sellerSaleTimeLimit = timeLimit;\n        }\n\n        ContractForDifferenceRegistry(cfdRegistryAddr).registerSale(msg.sender);\n        emit LogCFDSale(\n            msg.sender,\n            _desiredStrikePrice,\n            timeLimit\n        );\n    }\n\n    /**\n     * @dev Seller can update the price on the sale.\n     */\n    function sellUpdate(\n        uint _newPrice\n    )\n        external\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\n        pre_cond(isSelling(msg.sender), REASON_MUST_BE_SELLER)\n        pre_cond(_newPrice > 0, REASON_MUST_BE_POSITIVE_PRICE)\n    {\n        if (msg.sender == buyer) {\n            buyerSaleStrikePrice = _newPrice;\n        } else if (msg.sender == seller) {\n            sellerSaleStrikePrice = _newPrice;\n        }\n        emit LogCFDSaleUpdated(msg.sender, _newPrice);\n    }\n\n    /**\n     * @dev Party can update the strike price of an non-initialized contract\n     */\n    function changeStrikePrice(\n        uint _newStrikePrice\n    )\n        external\n        pre_cond(initiated == false, REASON_MUST_NOT_BE_INITIATED)\n        pre_cond(closed == false, REASON_MUST_NOT_BE_CLOSED)\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\n        pre_cond(_newStrikePrice > 0, REASON_MUST_BE_POSITIVE_PRICE)\n    {\n        strikePrice = _newStrikePrice;\n        buyerInitialStrikePrice = _newStrikePrice;\n        sellerInitialStrikePrice = _newStrikePrice;\n        emit LogCFDStrikePriceUpdated(msg.sender, _newStrikePrice);\n    }\n\n    /**\n     * @dev Cancel the for sale status setup by sellPrepare()\n     */\n    function sellCancel()\n        external\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\n        pre_cond(isSelling(msg.sender), REASON_MUST_BE_SELLER)\n    {\n        clearSale(msg.sender == buyer);\n        emit LogCFDSaleCancelled(msg.sender);\n    }\n\n    /**\n     * @dev Buy the side in the contract that is for sale.\n     *\n     * Fee of 0.5% of the notional is taken.\n     *\n     * @param _buyBuyerSide Buying the buyer side or the seller side?\n     * @param _value DAI amount\n     */\n    function buy(bool _buyBuyerSide, uint _value)\n        external\n        assertBuyPreCond(_buyBuyerSide)\n    {\n        uint fees = ContractForDifferenceLibrary.joinerFee(notionalAmountDai);\n        if (_value <= fees)\n            revert(REASON_FEES_NOT_ENOUGH);\n\n        // check sent collateral falls in the allowable range\n        uint collateralSent = _value.sub(fees);\n        if (!ContractForDifferenceLibrary.collateralInRange(notionalAmountDai, collateralSent))\n            revert(REASON_COLLATERAL_RANGE_FAILED);\n\n        uint marketPrice = latestPrice();\n        uint newStrikePrice = _buyBuyerSide ?\n            buyerSaleStrikePrice :\n            sellerSaleStrikePrice;\n\n        // check new parameters fall in the allowable range\n        if (!marketPriceInRange(\n            marketPrice,\n            _buyBuyerSide ? collateralSent : buyerDepositBalance,\n            _buyBuyerSide ? sellerDepositBalance : collateralSent,\n            newStrikePrice // buying at this strike price\n        )) {\n            revert(REASON_MARKET_PRICE_RANGE_FAILED);\n        }\n\n        // move ownership of sent DAI to the CFD\n        daiClaim(_value);\n        daiTransferToFees(fees);\n\n        // transfer to selling party\n        address sellingParty = _buyBuyerSide ? buyer : seller;\n        uint sellingPartyCollateral = buyTransferFunds(\n            _buyBuyerSide,\n            newStrikePrice,\n            sellingParty\n        );\n\n        // set new party and balances\n        uint remainingPartyDeposits = registry.getDAI().\n            balanceOf(address(this)).sub(collateralSent);\n\n        // new notional amount value\n        uint newNotional = ContractForDifferenceLibrary.calculateNewNotional(\n            notionalAmountDai,\n            strikePrice,\n            newStrikePrice\n        );\n\n        if (_buyBuyerSide) {\n            buyer = msg.sender;\n            buyerDepositBalance = collateralSent;\n            buyerInitialStrikePrice = newStrikePrice;\n            buyerInitialNotional = newNotional;\n            sellerDepositBalance = remainingPartyDeposits;\n        } else {\n            seller = msg.sender;\n            sellerDepositBalance = collateralSent;\n            sellerInitialStrikePrice = newStrikePrice;\n            sellerInitialNotional = newNotional;\n            buyerDepositBalance = remainingPartyDeposits;\n        }\n\n        strikePrice = newStrikePrice;\n        notionalAmountDai = newNotional;\n\n        clearSale(_buyBuyerSide);\n\n        // clean up upgradeCalledBy if the departing party had set that\n        if (upgradeCalledBy == sellingParty) {\n            upgradeCalledBy = address(0);\n        }\n\n        ContractForDifferenceRegistry(cfdRegistryAddr).registerParty(msg.sender);\n        emit LogCFDSold(msg.sender, sellingParty, newNotional, sellingPartyCollateral, _value, market);\n    }\n\n    /* NOTE: Split off into modifier to work around 'stack too deep' error */\n    modifier assertBuyPreCond(bool _buyBuyerSide) \n    {\n        require(isActive(), REASON_MUST_BE_ACTIVE);\n        require(isSelling(_buyBuyerSide ? buyer : seller), REASON_MUST_BE_ON_SALE);\n        require(isContractParty(msg.sender) == false, REASON_MUST_NOT_BE_PARTY);\n        _;\n    }\n\n    /**\n     * Does all transfers of funds related to the buy().\n     *\n     * Transfer logic split off in seperate function ONLY to workaround\n     * 'Stack too deep' limit.\n     */\n    function buyTransferFunds(\n        bool buyBuyerSide,\n        uint newStrikePrice,\n        address sellingParty\n    )\n        private\n        returns (uint sellingPartyCollateral)\n    {\n        // determine collateral amount to send to the selling party\n        sellingPartyCollateral = ContractForDifferenceLibrary.calculateCollateralAmount(\n            strikePrice,\n            newStrikePrice,\n            notionalAmountDai,\n            buyBuyerSide ? buyerDepositBalance : sellerDepositBalance,\n            buyBuyerSide\n        );\n\n        // send money to selling party\n        daiTransfer(sellingParty, sellingPartyCollateral);\n        emit LogCFDTransferFunds(sellingParty, sellingPartyCollateral);\n    }\n\n    /**\n     * @dev Daemons will call this routine when the market price has moved\n     *      enough that the closeRatio for this contract has been reached.\n     *      It can actually be called by anyone who is willing to pay the gas\n     *      for the liquidate. But if the market has moved past the liquidate\n     *      threshold the call will be rejected.\n     *\n     * This will disolve the contract and return each parties balance of\n     * collateral.\n     */\n    function liquidate()\n        external\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\n    {\n        uint marketPrice = latestPrice();\n\n        // #11 double check the 5% threshold was crossed, if not then REJECT\n        // (can only liquidate if out of range)\n        require(\n            !marketPriceInRange(\n                marketPrice,\n                buyerDepositBalance,\n                sellerDepositBalance,\n                strikePrice\n            ), \n            \"Liquidate threshold not yet reached\"\n        );\n\n        // fetch one of the cutoffs to determine which is the winner\n        uint buyerCutOff = ContractForDifferenceLibrary.cutOffPrice(\n            notionalAmountDai,\n            buyerDepositBalance,\n            strikePrice,\n            true\n        );\n\n        // if buyer cutoff still in range then buyer wins, otherwise seller\n        bool winnerIsBuyer = marketPrice > buyerCutOff;\n        address winner = winnerIsBuyer ? buyer : seller;\n\n        // winner takes all\n        uint remaining = registry.getDAI().balanceOf(address(this));\n        daiTransfer(winner, remaining);\n        emit LogCFDTransferFunds(winner, remaining);\n\n        closed = true;\n\n        emit LogCFDClosed(\n            winner,\n            winnerIsBuyer ? remaining : 0,\n            winnerIsBuyer ? 0 : remaining,\n            market\n        );\n    }\n\n    /**\n     * Force terminate executed by one party who will penalised 5% of their\n     * collateral. Then penalty will be sent to the counterparty.\n     */\n    function forceTerminate()\n        external\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\n    {\n        uint marketPrice = latestPrice();\n        bool forcingPartyIsBuyer = msg.sender == buyer;\n\n        uint buyerCollateral = ContractForDifferenceLibrary.calculateCollateralAmount(\n            strikePrice,\n            marketPrice,\n            notionalAmountDai,\n            buyerDepositBalance,\n            true\n        );\n        uint sellerCollateral = ContractForDifferenceLibrary.calculateCollateralAmount(\n            strikePrice,\n            marketPrice,\n            notionalAmountDai,\n            sellerDepositBalance,\n            false\n        );\n\n        //\n        // calculate and check the remainder - it should be equal to zero\n        //\n        // if not expected log the event and transfer the remainder to fees - it\n        //     will be sorted out manually\n        //\n        uint balanceRemainder = registry.getDAI().\n            balanceOf(address(this)).\n            sub(buyerCollateral).\n            sub(sellerCollateral);\n        if (balanceRemainder != 0) {\n            emit LogCFDRemainingBalanceUnexpected(balanceRemainder);\n        }\n        daiTransferToFees(balanceRemainder);\n\n        // penalise the force terminator 5% and give it to the counterparty\n        uint penalty = ContractForDifferenceLibrary.percentOf(\n            forcingPartyIsBuyer ? buyerCollateral : sellerCollateral,\n            FORCE_TERMINATE_PENALTY_PERCENT\n        );\n        if (forcingPartyIsBuyer) {\n            buyerCollateral = buyerCollateral.sub(penalty);\n            sellerCollateral = sellerCollateral.add(penalty);\n        } else {\n            buyerCollateral = buyerCollateral.add(penalty);\n            sellerCollateral = sellerCollateral.sub(penalty);\n        }\n\n        // Send collateral amounts back each party.\n        daiTransfer(buyer, buyerCollateral);\n        emit LogCFDTransferFunds(buyer, buyerCollateral);\n        daiTransfer(seller, sellerCollateral);\n        emit LogCFDTransferFunds(seller, sellerCollateral);\n\n        terminated = true;\n        closed = true;\n\n        if (forcingPartyIsBuyer)\n            emit LogCFDForceTerminated(buyer, buyerCollateral, seller, sellerCollateral, market);\n        else\n            emit LogCFDForceTerminated(seller, sellerCollateral, buyer, buyerCollateral, market);\n    }\n\n    /**\n     * @dev Upgrade contract to a new version. This involves creating a new CFD\n     *      at the latest contract set - transferring over all properties and\n     *      value from this one to the new one.\n     *      An upgrade requires a call to this function from both parties. Then\n     *      upgrade will happen when the second party makes the call.\n     */\n    function upgrade()\n        external\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\n        pre_cond(isSelling(msg.sender) == false, REASON_MUST_NOT_BE_SELLER)\n        pre_cond(msg.sender != upgradeCalledBy, REASON_UPGRADE_ALREADY_SET)\n        pre_cond(registry.allCFDs(address(this)) != registry.getCFDFactoryLatest(), REASON_UPGRADE_ALREADY_LATEST)\n    {\n        // 1st call to initiate upgrade process\n        if (upgradeCalledBy == address(0)) {\n            upgradeCalledBy = msg.sender;\n            return;\n        }\n\n        // if here then then this is the 2nd call, invoked by the opposite, so\n        // kick off the upgrade process\n        upgradeable = true;\n        address cfdFactoryLatest = registry.getCFDFactoryLatest();\n        address newCfd = address(ContractForDifferenceFactory(cfdFactoryLatest).createByUpgrade());\n        daiTransfer(newCfd, registry.getDAI().balanceOf(address(this)));\n        upgradeable = false;\n        closed = true;\n\n        emit LogCFDUpgraded(newCfd);\n    }\n\n    /**\n     * @dev Derive status from the state variables.\n     * @return Status reflecting the current state.\n     */\n    function status()\n        public\n        view\n        returns (Status)\n    {\n        if (closed == true)\n            return Status.CLOSED;\n        else if (initiated == false)\n            return Status.CREATED;\n        else if (isBuyerSelling() || isSellerSelling())\n            return Status.SALE;\n        else\n            return Status.INITIATED;\n    }\n\n    /**\n     * Get the latest read for the market of this CFD.\n     */\n    function latestPrice()\n        internal\n        view\n        returns (uint price)\n    {\n        uint marketPrice;\n        (marketPrice, ) = Feeds(feedsAddr).read(market);\n        return marketPrice;\n    }\n\n    /**\n     * @dev Checks if given parameters and given market price result in a price\n     *      inside an allowable range. This range is defined by the ContractForDifferenceLibrary.cutOffPrice\n     *      function formulas. The idea is that as parameters change - leverage,\n     *      market price etc., we must check the change doesn't result in a\n     *      liquidation event due to too little collateral.\n     *\n     * @param _marketPrice Current market price\n     * @return true if in range; false if not\n     */\n\n    function marketPriceInRange(\n        uint _marketPrice,\n        uint _buyerDepositBalance,\n        uint _sellerDepositBalance,\n        uint _strikePrice\n    )\n        public\n        view\n        returns (bool inRange)\n    {\n        uint buyerCutOff = ContractForDifferenceLibrary.cutOffPrice(\n            notionalAmountDai,\n            _buyerDepositBalance,\n            _strikePrice,\n            true\n        );\n        uint sellerCutOff = ContractForDifferenceLibrary.cutOffPrice(\n            notionalAmountDai,\n            _sellerDepositBalance,\n            _strikePrice,\n            false\n        );\n        inRange = _marketPrice > buyerCutOff && _marketPrice < sellerCutOff;\n    }\n\n   /**\n     * @dev Calculate new notional amount after a side has been sold at a new\n     *      strike price.\n     *\n     * Formula is:\n     *  N2 = N1 * S2 / S1\n     * Where:\n     *  N1 = previous notional\n     *  S1 = previous strike price\n     *  S2 = sale strike price\n     *\n     * @param _oldNotional Existing notional.\n     * @param _oldStrikePrice Existing strike price.\n     * @param _newStrikePrice New / Sale strike price.\n     * @return newNotional Result of the calculation.\n     */\n    function calculateNewNotional(\n        uint _oldNotional,\n        uint _oldStrikePrice,\n        uint _newStrikePrice\n    )\n        public\n        pure\n        returns (uint newNotional)\n    {\n        newNotional = ContractForDifferenceLibrary.calculateNewNotional(\n            _oldNotional,\n            _oldStrikePrice,\n            _newStrikePrice\n        );\n    }\n\n    /**\n     * @dev Calculate the collateral amount for one party given the current\n     *      market price and original strike price, notional amount and the\n     *      amount the party has deposited into the contract.\n     *\n     * @param _marketPrice Current market price\n     * @param _strikePrice CFD strike price\n     * @param _notionalAmount CFD notional amount\n     * @param _depositBalance Balances of deposits into the contract\n     * @param _isBuyer Buyer or Seller / Long or short party?\n     *\n     * @return collateral Amount of collateral for the party\n     */\n    function calculateCollateralAmount(\n        uint _strikePrice,\n        uint _marketPrice,\n        uint _notionalAmount,\n        uint _depositBalance,\n        bool _isBuyer\n    )\n        public\n        pure\n        returns (uint collateral)\n    {\n        collateral = ContractForDifferenceLibrary.calculateCollateralAmount(\n            _strikePrice,\n            _marketPrice,\n            _notionalAmount,\n            _depositBalance,\n            _isBuyer\n        );\n    }\n\n    /**\n     * @dev Calculate the cut off price for buyer or seller.\n     *\n     * This is the price that if passed would raise a liquidation event.\n     *\n     * Base Formulas are:\n     *     Buyer:  1.05 * S - depositBalanceLong  * S / N\n     *     Seller: 0.95 * S + depositBalanceShort * S / N\n     *\n     * However for Solidity we need to adjust parts by FACTOR_UINT to ensure\n     * no fractions.\n     *\n     * @param _notionalAmountDai Contract notional amount\n     * @param _depositBalance Balance of deposits for one party\n     *\n     * @return cut off price\n     */\n    function cutOffPrice(\n        uint _notionalAmountDai,\n        uint _depositBalance,\n        uint _strikePrice,\n        bool _calcForBuyerSide\n    )\n        public\n        pure\n        returns (uint price)\n    {\n        price = ContractForDifferenceLibrary.cutOffPrice(\n            _notionalAmountDai,\n            _depositBalance,\n            _strikePrice,\n            _calcForBuyerSide\n        );\n    }\n\n    /**\n     * Creator fee - 0.3% of notional.\n     */\n    function creatorFee(uint _notional) public pure returns (uint fee) {\n        fee = ContractForDifferenceLibrary.creatorFee(_notional);\n    }\n\n    /**\n     * Joiner (deposit or buy) percentage fee - 0.5% of notional.\n     */\n    function joinerFee(uint _notional) public pure returns (uint fee) {\n        fee = ContractForDifferenceLibrary.joinerFee(_notional);\n    }\n\n    /**\n     * @dev Calculate the change in contract value based on the price change.\n     * @param _currentPrice Current market price\n     */\n    function changeInDai(\n        uint _strikePrice,\n        uint _currentPrice,\n        uint _notionalAmount\n    )\n        public\n        pure\n        returns (uint change)\n    {\n        change = ContractForDifferenceLibrary.changeInDai(\n            _strikePrice,\n            _currentPrice,\n            _notionalAmount\n        );\n    }\n\n    /**\n     * @dev Return a percentage change comparing a value with a new value.\n     * @param _value The existing value to compare against\n     * @param _newValue The new value to compare the change against\n     * @return Percentage change (eg. _value = 100, _newValue = 90 then return 10)\n     */\n    function percentChange(uint _value, uint _newValue)\n        public\n        pure\n        returns (uint percent)\n    {\n        percent = ContractForDifferenceLibrary.percentChange(_value, _newValue);\n    }\n\n    /**\n     * @dev Return a percentage of a given amount.\n     * @param _amount Amount to calculate the percentage of\n     * @param _percent Percent amount (1 - 100)\n     */\n    function percentOf(uint _amount, uint _percent)\n        public\n        pure\n        returns (uint adjusted)\n    {\n        adjusted = ContractForDifferenceLibrary.percentOf(_amount, _percent);\n    }\n\n    /**\n     * Utility that given a time limit will preverve it if in the future OR\n     * set it to 0 if it's in the present or past.\n     */\n    function timeLimitFutureOrZero(\n        uint _timeLimit\n    )\n        private\n        view // not pure because of 'now'\n        returns(uint timeLimit)\n    {\n        timeLimit = (_timeLimit > now) ? _timeLimit : 0;\n    }\n\n    /**\n     * Clear all sale related state.\n     */\n    function clearSale(bool _clearBuyerSide) private {\n        if (_clearBuyerSide) {\n            buyerSaleStrikePrice = 0;\n            buyerSaleTimeLimit = 0;\n            buyerSelling = false;\n        } else {\n            sellerSaleStrikePrice = 0;\n            sellerSaleTimeLimit = 0;\n            sellerSelling = false;\n        }\n    }\n\n    /**\n     * Transfer DAI to an address.\n     */\n    function daiTransfer(address _to, uint _value) private {\n        require(\n            registry.getDAI().transfer(_to, _value),\n            REASON_DAI_TRANSFER_FAILED\n        );\n    }\n\n    /**\n     * Transfer DAI to the fees address.\n     */\n    function daiTransferToFees(uint _value) private {\n        daiTransfer(registry.getFees(), _value);\n    }\n\n    /**\n     * Claim DAI - ie. move approved DAI to this CFD contract.\n     */\n    function daiClaim(uint _value) private {\n        require(\n            registry.getDAI().transferFrom(msg.sender, address(this), _value),\n            REASON_DAI_TRANSFER_FAILED\n        );\n    }\n\n}\n",
  "sourcePath": "/home/julien/0xFutures/protocol-infura/contracts/cfd/ContractForDifference.sol",
  "compiler": {
    "name": "solc",
    "version": "0.5.0+commit.1d4f565a.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.2",
  "updatedAt": "2019-03-12T11:09:05.544Z",
  "devdoc": {
    "methods": {
      "buy(bool,uint256)": {
        "details": "Buy the side in the contract that is for sale.     * Fee of 0.5% of the notional is taken.",
        "params": {
          "_buyBuyerSide": "Buying the buyer side or the seller side?",
          "_value": "DAI amount"
        }
      },
      "calculateCollateralAmount(uint256,uint256,uint256,uint256,bool)": {
        "details": "Calculate the collateral amount for one party given the current     market price and original strike price, notional amount and the     amount the party has deposited into the contract.",
        "params": {
          "_depositBalance": "Balances of deposits into the contract",
          "_isBuyer": "Buyer or Seller / Long or short party?",
          "_marketPrice": "Current market price",
          "_notionalAmount": "CFD notional amount",
          "_strikePrice": "CFD strike price"
        },
        "return": "collateral Amount of collateral for the party"
      },
      "calculateNewNotional(uint256,uint256,uint256)": {
        "details": "Calculate new notional amount after a side has been sold at a new     strike price.     * Formula is: N2 = N1 * S2 / S1 Where: N1 = previous notional S1 = previous strike price S2 = sale strike price",
        "params": {
          "_newStrikePrice": "New / Sale strike price.",
          "_oldNotional": "Existing notional.",
          "_oldStrikePrice": "Existing strike price."
        },
        "return": "newNotional Result of the calculation."
      },
      "cancelNew()": {
        "details": "Cancels a newly created contract refunding the balance to the party     that created the contract. This can only be called before a contract     is initiated. ie. between the create() and deposit() calls."
      },
      "changeInDai(uint256,uint256,uint256)": {
        "details": "Calculate the change in contract value based on the price change.",
        "params": {
          "_currentPrice": "Current market price"
        }
      },
      "changeStrikePrice(uint256)": {
        "details": "Party can update the strike price of an non-initialized contract"
      },
      "create(address,address,address,address,bytes32,uint256,uint256,bool)": {
        "details": "Create a new CFDinstance specifying the terms of the contract.     * Fee of 0.3% of the notional is taken.     * Therefore the intial deposit is _value minus these fees.",
        "params": {
          "_cfdRegistryAddr": "CFD Registry contract address",
          "_feedsAddr": "Feeds address",
          "_isBuyer": "Flag indicating if the contract creator wants to take the           buyer (true) or the seller side (false).",
          "_marketId": "Contract is for prices on this market",
          "_notionalAmountDai": "Contract amount",
          "_partyAddr": "Address of the party creating the contract",
          "_registryAddr": "Registry contract address",
          "_strikePrice": "Agreed initial price for the contract (compatible with Feeds stored price - see Feeds.decimals() adjustment)"
        }
      },
      "createByUpgrade(address,address,address,address)": {
        "details": "Create a new CFDinstance from a previous CFD instance. This is part     of the upgrade process (see CFD.upgrade()).",
        "params": {
          "_cfdAddr": "Address of the existing / old CFD",
          "_cfdRegistryAddr": "Address of CFDRegistry contract",
          "_feedsAddr": "Address to send fees to",
          "_registryAddr": "Address of Registry contract"
        }
      },
      "cutOffPrice(uint256,uint256,uint256,bool)": {
        "details": "Calculate the cut off price for buyer or seller.     * This is the price that if passed would raise a liquidation event.     * Base Formulas are:    Buyer:  1.05 * S - depositBalanceLong  * S / N    Seller: 0.95 * S + depositBalanceShort * S / N     * However for Solidity we need to adjust parts by FACTOR_UINT to ensure no fractions.",
        "params": {
          "_depositBalance": "Balance of deposits for one party",
          "_notionalAmountDai": "Contract notional amount"
        },
        "return": "cut off price"
      },
      "deposit(uint256)": {
        "details": "Counterparty deposits their funds into the contract thereby joining and initiating the contract.     * Fee of 0.5% of the notional is taken.     * Therefore the intial deposit is _value minus these fees."
      },
      "isActive()": {
        "details": "Contract has been initiated (has 2 parties) and not yet terminated.",
        "return": "true if contract is active"
      },
      "isBuyerSelling()": {
        "details": "Is buyer / long party selling.",
        "return": "true if buyer has side up for sale"
      },
      "isContractParty(address)": {
        "details": "Check if the given address is one of the 2 parties of the contract.",
        "params": {
          "_party": "Address to check"
        },
        "return": "true if _party is either the buyer or seller."
      },
      "isSellerSelling()": {
        "details": "Is seller / short party selling.",
        "return": "true if seller has side up for sale"
      },
      "isSelling(address)": {
        "details": "If the given party is selling one side of the contract.",
        "return": "true if the given party is selling"
      },
      "liquidate()": {
        "details": "Daemons will call this routine when the market price has moved     enough that the closeRatio for this contract has been reached.     It can actually be called by anyone who is willing to pay the gas     for the liquidate. But if the market has moved past the liquidate     threshold the call will be rejected.     * This will disolve the contract and return each parties balance of collateral."
      },
      "marketPriceInRange(uint256,uint256,uint256,uint256)": {
        "details": "Checks if given parameters and given market price result in a price     inside an allowable range. This range is defined by the ContractForDifferenceLibrary.cutOffPrice     function formulas. The idea is that as parameters change - leverage,     market price etc., we must check the change doesn't result in a     liquidation event due to too little collateral.",
        "params": {
          "_marketPrice": "Current market price"
        },
        "return": "true if in range; false if not"
      },
      "percentChange(uint256,uint256)": {
        "details": "Return a percentage change comparing a value with a new value.",
        "params": {
          "_newValue": "The new value to compare the change against",
          "_value": "The existing value to compare against"
        },
        "return": "Percentage change (eg. _value = 100, _newValue = 90 then return 10)"
      },
      "percentOf(uint256,uint256)": {
        "details": "Return a percentage of a given amount.",
        "params": {
          "_amount": "Amount to calculate the percentage of",
          "_percent": "Percent amount (1 - 100)"
        }
      },
      "sellCancel()": {
        "details": "Cancel the for sale status setup by sellPrepare()"
      },
      "sellPrepare(uint256,uint256)": {
        "details": "Position in a contract can be sold to another party. This function     makes the callers side available for sale. A party can buy the side     with the buy function.",
        "params": {
          "_desiredStrikePrice": "Sellers desired sell strike price",
          "_timeLimit": "Sale available until this time in UNIX epoch seconds                 (< now for no limit)"
        }
      },
      "sellUpdate(uint256)": {
        "details": "Seller can update the price on the sale."
      },
      "status()": {
        "details": "Derive status from the state variables.",
        "return": "Status reflecting the current state."
      },
      "topup(uint256)": {
        "details": "Party adds more funds to the contract thereby increasing their     deposit balance.",
        "params": {
          "_value": "DAI amount"
        }
      },
      "transferPosition(address)": {
        "details": "Parties can transfer contract ownership to another address by     calling this function.",
        "params": {
          "_newAddress": "Addreess of the new party to swap in."
        }
      },
      "upgrade()": {
        "details": "Upgrade contract to a new version. This involves creating a new CFD     at the latest contract set - transferring over all properties and     value from this one to the new one.     An upgrade requires a call to this function from both parties. Then     upgrade will happen when the second party makes the call."
      },
      "withdraw(uint256)": {
        "details": "Party withdraws funds from the contract.     They can only withdraw down to an amount that leaves the collateral     to notional difference at 20% or more.",
        "params": {
          "_withdrawAmount": "Amount to withdraw from the deposits balance."
        }
      }
    },
    "title": "Contract for difference * Contract for difference for a given market between a \"buyer\" (long position) and \"seller\" (short position)."
  },
  "userdoc": {
    "methods": {
      "creatorFee(uint256)": {
        "notice": "Creator fee - 0.3% of notional."
      },
      "forceTerminate()": {
        "notice": "Force terminate executed by one party who will penalised 5% of their collateral. Then penalty will be sent to the counterparty."
      },
      "getCfdAttributes()": {
        "notice": "Returns an array with all the attributes of the contract (Had to split in 3 functions because of the stack limit) Max number of return values == 8"
      },
      "joinerFee(uint256)": {
        "notice": "Joiner (deposit or buy) percentage fee - 0.5% of notional."
      }
    }
  }
}