{
  "contractName": "ContractForDifference",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "notionalAmountDai",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "seller",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "feedsAddr",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "terminated",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "FORCE_TERMINATE_PENALTY_PERCENT",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerSaleStrikePrice",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerInitialNotional",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerDepositBalance",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "upgradeCalledBy",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "upgradeable",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "MINIMUM_NOTIONAL_AMOUNT_DAI",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "closed",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerSaleTimeLimit",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerInitialStrikePrice",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyer",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerInitialNotional",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerSaleStrikePrice",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "market",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "cfdRegistryAddr",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerDepositBalance",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "initiated",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerSelling",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "strikePrice",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerInitialStrikePrice",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerSaleTimeLimit",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerSelling",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "notionalAmountDai",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "deposit",
          "type": "uint256"
        }
      ],
      "name": "LogCFDCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "joiner",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amountSent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "notionalAmountDai",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "strikePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "buyerDepositBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "sellerDepositBalance",
          "type": "uint256"
        }
      ],
      "name": "LogCFDInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "LogCFDTransferPosition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        }
      ],
      "name": "LogCFDCanceledNew",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "newStrikePrice",
          "type": "uint256"
        }
      ],
      "name": "LogCFDStrikePriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "saleStrikePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "timeLimit",
          "type": "uint256"
        }
      ],
      "name": "LogCFDSale",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        }
      ],
      "name": "LogCFDSaleCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "LogCFDSaleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "newNotional",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "sellerAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "buyerDeposit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        }
      ],
      "name": "LogCFDSold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "isWithdraw",
          "type": "bool"
        },
        {
          "indexed": false,
          "name": "newBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        }
      ],
      "name": "LogCFDPartyBalanceUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LogCFDTransferFunds",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "buyerCollateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "sellerCollateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        }
      ],
      "name": "LogCFDClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "terminator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "terminatorAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "otherParty",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "otherPartyAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        }
      ],
      "name": "LogCFDForceTerminated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "newCFD",
          "type": "address"
        }
      ],
      "name": "LogCFDUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "remainder",
          "type": "uint256"
        }
      ],
      "name": "LogCFDRemainingBalanceUnexpected",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isActive",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isBuyerSelling",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isSellerSelling",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_party",
          "type": "address"
        }
      ],
      "name": "isSelling",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_party",
          "type": "address"
        }
      ],
      "name": "isContractParty",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_registryAddr",
          "type": "address"
        },
        {
          "name": "_cfdRegistryAddr",
          "type": "address"
        },
        {
          "name": "_feedsAddr",
          "type": "address"
        },
        {
          "name": "_partyAddr",
          "type": "address"
        },
        {
          "name": "_marketId",
          "type": "bytes32"
        },
        {
          "name": "_strikePrice",
          "type": "uint256"
        },
        {
          "name": "_notionalAmountDai",
          "type": "uint256"
        },
        {
          "name": "_isBuyer",
          "type": "bool"
        }
      ],
      "name": "create",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_cfdAddr",
          "type": "address"
        },
        {
          "name": "_registryAddr",
          "type": "address"
        },
        {
          "name": "_cfdRegistryAddr",
          "type": "address"
        },
        {
          "name": "_feedsAddr",
          "type": "address"
        }
      ],
      "name": "createByUpgrade",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCfdAttributes",
      "outputs": [
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "bytes32"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "bool"
        },
        {
          "name": "",
          "type": "bool"
        },
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCfdAttributes2",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCfdAttributes3",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        },
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "cancelNew",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "topup",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_newAddress",
          "type": "address"
        }
      ],
      "name": "transferPosition",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_desiredStrikePrice",
          "type": "uint256"
        },
        {
          "name": "_timeLimit",
          "type": "uint256"
        }
      ],
      "name": "sellPrepare",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_newPrice",
          "type": "uint256"
        }
      ],
      "name": "sellUpdate",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_newStrikePrice",
          "type": "uint256"
        }
      ],
      "name": "changeStrikePrice",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "sellCancel",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_buyBuyerSide",
          "type": "bool"
        },
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "liquidate",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "forceTerminate",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "upgrade",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "status",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_marketPrice",
          "type": "uint256"
        },
        {
          "name": "_buyerDepositBalance",
          "type": "uint256"
        },
        {
          "name": "_sellerDepositBalance",
          "type": "uint256"
        },
        {
          "name": "_strikePrice",
          "type": "uint256"
        }
      ],
      "name": "marketPriceInRange",
      "outputs": [
        {
          "name": "inRange",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_oldNotional",
          "type": "uint256"
        },
        {
          "name": "_oldStrikePrice",
          "type": "uint256"
        },
        {
          "name": "_newStrikePrice",
          "type": "uint256"
        }
      ],
      "name": "calculateNewNotional",
      "outputs": [
        {
          "name": "newNotional",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_strikePrice",
          "type": "uint256"
        },
        {
          "name": "_marketPrice",
          "type": "uint256"
        },
        {
          "name": "_notionalAmount",
          "type": "uint256"
        },
        {
          "name": "_depositBalance",
          "type": "uint256"
        },
        {
          "name": "_isBuyer",
          "type": "bool"
        }
      ],
      "name": "calculateCollateralAmount",
      "outputs": [
        {
          "name": "collateral",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_notionalAmountDai",
          "type": "uint256"
        },
        {
          "name": "_depositBalance",
          "type": "uint256"
        },
        {
          "name": "_strikePrice",
          "type": "uint256"
        },
        {
          "name": "_calcForBuyerSide",
          "type": "bool"
        }
      ],
      "name": "cutOffPrice",
      "outputs": [
        {
          "name": "price",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_notional",
          "type": "uint256"
        }
      ],
      "name": "creatorFee",
      "outputs": [
        {
          "name": "fee",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_notional",
          "type": "uint256"
        }
      ],
      "name": "joinerFee",
      "outputs": [
        {
          "name": "fee",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_strikePrice",
          "type": "uint256"
        },
        {
          "name": "_currentPrice",
          "type": "uint256"
        },
        {
          "name": "_notionalAmount",
          "type": "uint256"
        }
      ],
      "name": "changeInDai",
      "outputs": [
        {
          "name": "change",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_value",
          "type": "uint256"
        },
        {
          "name": "_newValue",
          "type": "uint256"
        }
      ],
      "name": "percentChange",
      "outputs": [
        {
          "name": "percent",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_amount",
          "type": "uint256"
        },
        {
          "name": "_percent",
          "type": "uint256"
        }
      ],
      "name": "percentOf",
      "outputs": [
        {
          "name": "adjusted",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "bytecode": "",
  "deployedBytecode": "",
  "sourceMap": "626:39787:5:-;;;4876:29;;;5278:43;;;;5459:23;5:2:-1;;;;30:1;27;20:12;5:2;5459:23:5;626:39787;;;;;;",
  "deployedSourceMap": "626:39787:5:-;;;;;;;;;-1:-1:-1;;;626:39787:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4211:29;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4211:29:5;;;;;;;;;;;;;;;;;;;;4122:21;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4122:21:5;;;;;;;;-1:-1:-1;;;;;4122:21:5;;;;;;;;;;;;;;5364:24;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5364:24:5;;;;37746:332;;8:9:-1;5:2;;;30:1;27;20:12;5:2;37746:332:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;37746:332:5;;;;;;;;;;;;;4943:22;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4943:22:5;;;;;;;;;;;;;;;;;;;;;;20589:492;;8:9:-1;5:2;;;30:1;27;20:12;5:2;20589:492:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;20589:492:5;;;;;3879:56;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3879:56:5;;;;4662:32;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4662:32:5;;;;32414:354;;8:9:-1;5:2;;;30:1;27;20:12;5:2;32414:354:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4284:33;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4284:33:5;;;;5626:107;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5626:107:5;;;;9798:1064;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9798:1064:5;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;;;;;;9798:1064:5;;;;;;;;;;;;;;;;;;;;;;;;;26887:1353;;8:9:-1;5:2;;;30:1;27;20:12;5:2;26887:1353:5;;;;11417:440;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11417:440:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4623:32;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4623:32:5;;;;15968:1667;;8:9:-1;5:2;;;30:1;27;20:12;5:2;15968:1667:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;15968:1667:5;;;34767:364;;8:9:-1;5:2;;;30:1;27;20:12;5:2;34767:364:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;34767:364:5;;;;;;;;;;;;;14622:1064;;8:9:-1;5:2;;;30:1;27;20:12;5:2;14622:1064:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;14622:1064:5;;;5278:43;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5278:43:5;;;;36767:403;;8:9:-1;5:2;;;30:1;27;20:12;5:2;36767:403:5;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;36767:403:5;;;;;;;;;;;;;;;;;;;;5118:31;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5118:31:5;;;;6124:162;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6124:162:5;;;;3941:59;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3941:59:5;;;;14012:452;;8:9:-1;5:2;;;30:1;27;20:12;5:2;14012:452:5;;;;6805:127;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6805:127:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;6805:127:5;-1:-1:-1;;;;;6805:127:5;;;4911:26;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4911:26:5;;;;7784:1623;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7784:1623:5;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;;;;;;7784:1623:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;35715:470;;8:9:-1;5:2;;;30:1;27;20:12;5:2;35715:470:5;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;35715:470:5;;;;;;;;;;;;;;;;;;;;;;;;;18332:708;;8:9:-1;5:2;;;30:1;27;20:12;5:2;18332:708:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;18332:708:5;-1:-1:-1;;;;;18332:708:5;;;4700:30;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4700:30:5;;;;4469:36;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4469:36:5;;;;21180:574;;8:9:-1;5:2;;;30:1;27;20:12;5:2;21180:574:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;21180:574:5;;;4062:20;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4062:20:5;;;;4246:32;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4246:32:5;;;;4737:33;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4737:33:5;;;;37231:140;;8:9:-1;5:2;;;30:1;27;20:12;5:2;37231:140:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;37231:140:5;;;33579:685;;8:9:-1;5:2;;;30:1;27;20:12;5:2;33579:685:5;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;33579:685:5;;;;;;;;;;;;;;;;;;5395:24;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5395:24:5;;;;11862:180;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11862:180:5;;;;;;;;;;;;;-1:-1:-1;;;;;11862:180:5;;;;;;;;;;;;;;;;4183:21;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4183:21:5;;;;19447:1067;;8:9:-1;5:2;;;30:1;27;20:12;5:2;19447:1067:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;19447:1067:5;;;;;;;;37459:138;;8:9:-1;5:2;;;30:1;27;20:12;5:2;37459:138:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;37459:138:5;;;28404:2421;;8:9:-1;5:2;;;30:1;27;20:12;5:2;28404:2421:5;;;;5328:30;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5328:30:5;;;;5848:158;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5848:158:5;;;;38385:203;;8:9:-1;5:2;;;30:1;27;20:12;5:2;38385:203:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;38385:203:5;;;;;;;;4586:31;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4586:31:5;;;;4876:29;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4876:29:5;;;;38769:197;;8:9:-1;5:2;;;30:1;27;20:12;5:2;38769:197:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;38769:197:5;;;;;;;;4814:24;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4814:24:5;;;;12303:1454;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12303:1454:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;12303:1454:5;;;11052:360;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11052:360:5;;;;;;;;-1:-1:-1;;;;;11052:360:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4399:23;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4399:23:5;;;;4428:35;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4428:35:5;;;;6426:178;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6426:178:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;6426:178:5;-1:-1:-1;;;;;6426:178:5;;;31203:1085;;8:9:-1;5:2;;;30:1;27;20:12;5:2;31203:1085:5;;;;4776:31;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4776:31:5;;;;22331:2811;;8:9:-1;5:2;;;30:1;27;20:12;5:2;22331:2811:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;22331:2811:5;;;;;;;;;;21838:251;;8:9:-1;5:2;;;30:1;27;20:12;5:2;21838:251:5;;;;4844:25;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4844:25:5;;;;4211:29;;;;:::o;4122:21::-;;;-1:-1:-1;;;;;4122:21:5;;:::o;5364:24::-;;;-1:-1:-1;;;;;5364:24:5;;:::o;37746:332::-;37903:11;37939:132;37993:12;38019:13;38046:15;37939:40;:132::i;:::-;37930:141;37746:332;-1:-1:-1;;;;37746:332:5:o;4943:22::-;;;;;;;;;:::o;20589:492::-;20673:10;:8;:10::i;:::-;20685:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;20685:21:5;;;;;285:26:0;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20725:21:5;20735:10;20725:9;:21::i;:::-;20748;;;;;;;;;;;;;;;;;;285:26:0;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;20803:29:5;;;;;;;;;;;;;;;;;20800:1;20788:13;;;20803:29;20788:13;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;20866:5:5;;-1:-1:-1;;;;;20866:5:5;20852:10;:19;20848:172;;;20887:20;:32;;;20848:172;;;20954:6;;-1:-1:-1;;;;;20954:6:5;20940:10;:20;20936:84;;;20976:21;:33;;;20936:84;21034:40;;;21052:10;21034:40;;;;;;;;;;;;;;;;;;;;;321:1:0;;;;20589:492:5;;;:::o;3879:56::-;3934:1;3879:56;:::o;4662:32::-;;;;:::o;32414:354::-;32503:6;;32477;;32503;;;;;:14;;32513:4;32503:14;32499:262;;;-1:-1:-1;32538:13:5;32531:20;;32499:262;32570:9;;;;;;;:18;;32566:195;;-1:-1:-1;32609:14:5;32602:21;;32566:195;32642:16;:14;:16::i;:::-;:37;;;;32662:17;:15;:17::i;:::-;32638:123;;;-1:-1:-1;32700:11:5;32693:18;;32638:123;-1:-1:-1;32745:16:5;32638:123;32414:354;:::o;4284:33::-;;;;:::o;5626:107::-;5690:9;;5667:4;;5690:9;;;;;:17;;5703:4;5690:17;:36;;;;-1:-1:-1;5711:6:5;;;;;;;:15;5690:36;5683:43;;5626:107;:::o;9798:1064::-;9977:28;10030:8;9977:62;;10059:6;-1:-1:-1;;;;;10059:13:5;;:15;;;;;-1:-1:-1;;;10059:15:5;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10059:15:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10059:15:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10059:15:5;10050:6;:24;10104:26;;;;;;;;-1:-1:-1;;;;;10104:24:5;;;;;:26;;;;;10059:15;;10104:26;;;;;;;:24;:26;;;5:2:-1;;;;30:1;27;20:12;5:2;10104:26:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10104:26:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10104:26:5;10084:17;:46;10154:20;;;;;;;;-1:-1:-1;;;;;10154:18:5;;;;;:20;;;;;10104:26;;10154:20;;;;;;;:18;:20;;;5:2:-1;;;;30:1;27;20:12;5:2;10154:20:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10154:20:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10154:20:5;10140:11;:34;10192:14;;;;;;;;-1:-1:-1;;;;;10192:12:5;;;;;:14;;;;;10154:20;;10192:14;;;;;;;:12;:14;;;5:2:-1;;;;30:1;27;20:12;5:2;10192:14:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10192:14:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10192:14:5;10184:5;:22;;-1:-1:-1;;;;;;10184:22:5;-1:-1:-1;;;;;10184:22:5;;;;;;10225:15;;;;;;;;:13;;;;;;:15;;;;;10192:14;;10225:15;;;;;;;;:13;:15;;;5:2:-1;;;;30:1;27;20:12;5:2;10225:15:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10225:15:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10225:15:5;10216:6;:24;;-1:-1:-1;;;;;;10216:24:5;-1:-1:-1;;;;;10216:24:5;;;;;;10273:28;;;;;;;;:26;;;;;;:28;;;;;10225:15;;10273:28;;;;;;;;:26;:28;;;5:2:-1;;;;30:1;27;20:12;5:2;10273:28:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10273:28:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10273:28:5;10251:19;:50;10334:29;;;;;;;;-1:-1:-1;;;;;10334:27:5;;;;;:29;;;;;10273:28;;10334:29;;;;;;;:27;:29;;;5:2:-1;;;;30:1;27;20:12;5:2;10334:29:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10334:29:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10334:29:5;10311:20;:52;;;10399:32;;;;;;;;-1:-1:-1;;;;;10399:30:5;;;;;:32;;;;10334:29;;10399:32;;;;;;;:30;:32;;;5:2:-1;;;;30:1;27;20:12;5:2;10399:32:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10399:32:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10399:32:5;10373:23;:58;10465:29;;;;;;;;-1:-1:-1;;;;;10465:27:5;;;;;:29;;;;;10399:32;;10465:29;;;;;;;:27;:29;;;5:2:-1;;;;30:1;27;20:12;5:2;10465:29:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10465:29:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10465:29:5;10442:20;:52;10528:30;;;;;;;;-1:-1:-1;;;;;10528:28:5;;;;;:30;;;;;10465:29;;10528:30;;;;;;;:28;:30;;;5:2:-1;;;;30:1;27;20:12;5:2;10528:30:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10528:30:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10528:30:5;10504:21;:54;10595:33;;;;;;;;-1:-1:-1;;;;;10595:31:5;;;;;:33;;;;;10528:30;;10595:33;;;;;;;:31;:33;;;5:2:-1;;;;30:1;27;20:12;5:2;10595:33:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10595:33:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10595:33:5;10568:24;:60;10639:15;:34;;-1:-1:-1;;;;;10639:34:5;;;-1:-1:-1;;;;;;10639:34:5;;;;;;;;10683:8;:34;;;;;;;;;;;10727:9;:22;;;;;;;;;;;;;;10760:9;:16;;-1:-1:-1;;10760:16:5;;;;;10639:34;10848:6;10787:68;;;-1:-1:-1;;;;;10787:68:5;;10848:6;;;10787:68;;;;;10817:15;;;;;10787:60;;:68;;;;;10639:15;;10787:68;;;;;;;;10639:15;10817;10787:68;;;5:2:-1;;;;30:1;27;20:12;5:2;10787:68:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10787:68:5;;;;9798:1064;;;;;:::o;26887:1353::-;26942:10;:8;:10::i;:::-;26954:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;26954:21:5;;;;;285:26:0;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;26991:16:5;27010:13;:11;:13::i;:::-;26991:32;;27181:165;27217:11;27246:19;;27283:20;;27321:11;;27181:18;:165::i;:::-;27180:166;27159:249;;;;;-1:-1:-1;;;;;27159:249:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27488:16;27507:157;27561:17;;27592:19;;27625:11;;27650:4;27507:40;:157::i;:::-;27488:176;-1:-1:-1;27772:25:5;;;27751:18;27772:25;27824:30;;27848:6;;-1:-1:-1;;;;;27848:6:5;27824:30;;;27840:5;;-1:-1:-1;;;;;27840:5:5;27824:30;27807:47;;27893:14;27910:8;;;;;;;;;-1:-1:-1;;;;;27910:8:5;-1:-1:-1;;;;;27910:15:5;;:17;;;;;-1:-1:-1;;;27910:17:5;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;27910:17:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;27910:17:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;27910:17:5;:42;;;-1:-1:-1;;;;;27910:42:5;;27946:4;27910:42;;;;;;-1:-1:-1;;;;;27910:27:5;;;;;;:42;;;;;:17;;:42;;;;;;;;:27;:42;;;5:2:-1;;;;30:1;27;20:12;5:2;27910:42:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;27910:42:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;27910:42:5;;-1:-1:-1;27962:30:5;27974:6;27910:42;27962:11;:30::i;:::-;28007:38;;;-1:-1:-1;;;;;28007:38:5;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;28007:38:5;;;;;;;;;;28056:6;:13;;-1:-1:-1;;28056:13:5;;;;;28085:148;28111:6;28131:13;:29;;28159:1;28131:29;;;28147:9;28131:29;28174:13;:29;;28194:9;28174:29;;;28190:1;28174:29;28217:6;;28085:148;;;-1:-1:-1;;;;;28085:148:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;321:1:0;;;;;26887:1353:5;;:::o;11417:440::-;11574:20;;11608:21;;11643:19;;11676:20;;11710;;11744:21;;11779:23;;11816:24;;11417:440;;;;;;;;:::o;4623:32::-;;;;:::o;15968:1667::-;17817:26;;;;;;;;;;;;;;;;;;;;;;;;16055:15;;17814:1;17795:20;;;17787:57;;;;-1:-1:-1;;;;;17787:57:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;17787:57:5;-1:-1:-1;17862:9:5;;17881:24;;;;;;;;;;;;;;;;;;17862:9;;;;;:17;;17875:4;17862:17;17854:52;;;;-1:-1:-1;;;;;17854:52:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;17854:52:5;-1:-1:-1;17924:6:5;;17941:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;17941:25:5;;;;;17924:6;;;;;:15;17916:51;;;;-1:-1:-1;;;;;17916:51:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;17916:51:5;;17985:27;18001:10;17985:15;:27::i;:::-;18014:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;18014:28:5;;;;-1:-1:-1;;;;;18014:28:5;;;17977:66;;;;;;;-1:-1:-1;;;;;17977:66:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;17977:66:5;;18061:21;18071:10;18061:9;:21::i;:::-;18093:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;18093:25:5;;;;;18061:30;18053:66;;;;-1:-1:-1;;;;;18053:66:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;18053:66:5;-1:-1:-1;16086:12:5;16115:5;;-1:-1:-1;;;;;16115:5:5;16101:10;:19;;;16155:52;;16187:20;;16155:52;;;16165:19;;16155:52;16130:77;;16310:17;16292:15;:35;16288:87;;;16348:26;;;;;;;;;;;;;;;;;;;;;;;;16341:34;;-1:-1:-1;;;;;16341:34:5;;;;;;;;;;;;;;;;16348:26;;16341:34;;;;;;;;16348:26;16341:34;;16348:26;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;16288:87:5;16507:35;;;16486:18;16571:13;:11;:13::i;:::-;16552:32;;16599:222;16631:11;16656:7;:45;;16682:19;;16656:45;;;16666:13;16656:45;16715:7;:46;;16748:13;16715:46;;;16725:20;;16715:46;16775:11;;16599:18;:222::i;:::-;16598:223;16594:294;;;16844:32;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;16844:32:5;;;;;;;16837:40;;-1:-1:-1;;;;;16837:40:5;;;;;;;;;;;;;;;;16844:32;;16837:40;;;;;;;;16844:32;16837:40;;16844:32;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;16594:294:5;16898:15;16916:193;16984:11;;17009;17034:17;;17065:13;17092:7;16916:54;:193::i;:::-;16898:211;;17125:77;17172:17;;17191:10;17125:46;:77::i;:::-;17124:78;17120:147;;;17225:30;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;17225:30:5;;;;;;;17218:38;;-1:-1:-1;;;;;17218:38:5;;;;;;;;;;;;;;;;17225:30;;17218:38;;;;;;;;17225:30;17218:38;;17225:30;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;17120:147:5;17277:40;17289:10;17301:15;17277:11;:40::i;:::-;17332:48;;;17352:10;17332:48;;;;;;;;;;-1:-1:-1;;;;;;;;;;;17332:48:5;;;;;;;;;;17395:7;17391:140;;;17418:19;:35;;;17391:140;;;17484:20;:36;;;17391:140;17621:6;;17546:82;;;17571:10;17546:82;;;;;;;;17600:4;17546:82;;;;;;;;;;;;;;;;;;;;;;;;;;;18129:1;;;;;15968:1667;;:::o;34767:364::-;34935:16;34981:143;35044:12;35070:15;35099;34981:49;:143::i;14622:1064::-;14697:24;;;;;;;;;;;;;;;;;14694:1;14684:11;;;;14697:24;14684:11;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;14740:9:5;;14759:24;;;;;;;;;;;;;;;;;14740:9;;;;;;:17;;14753:4;14740:17;;14759:24;14740:17;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;14802:6:5;;14819:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;14819:25:5;;;;14802:6;;;;;;:15;;14819:25;14802:15;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;14863:27:5;14879:10;14863:15;:27::i;:::-;14892:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;14892:28:5;;;;-1:-1:-1;;;;;14892:28:5;;;293:9:0;304:6;285:26;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;14939:21:5;14949:10;14939:9;:21::i;:::-;14971:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;14971:25:5;;;;14939:30;;;14971:25;14939:30;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;15012:12:5;15041:5;;-1:-1:-1;;;;;15041:5:5;15027:10;:19;;15081:101;15175:6;15027:19;15082:78;;15140:20;;15082:78;;;15105:19;;15082:78;15081:93;:101;:93;:101;:::i;:::-;15056:126;;15264:84;15311:17;;15330;15264:46;:84::i;:::-;15263:85;15259:141;;;15369:30;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;15369:30:5;;;;;;;15362:38;;-1:-1:-1;;;;;15362:38:5;;;;;;;;;;;;;;;;15369:30;;15362:38;;;;;;;;15369:30;15362:38;;15369:30;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;15259:141:5;15411:16;15420:6;15411:8;:16::i;:::-;15442:7;15438:148;;;15465:19;:39;;;15438:148;;;15535:20;:40;;;15438:148;15601:78;15626:10;15638:6;15646:5;15653:17;15672:6;;15601:78;;;;-1:-1:-1;;;;;15601:78:5;-1:-1:-1;;;;;15601:78:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;321:1:0;;;;;;;;;;14622:1064:5;;;:::o;5278:43::-;;;;;;-1:-1:-1;;;;;5278:43:5;;:::o;36767:403::-;36961:10;36995:168;37049:18;37081:15;37110:12;37136:17;36995:40;:168::i;:::-;36987:176;36767:403;-1:-1:-1;;;;;36767:403:5:o;5118:31::-;;;;;;;;;:::o;6124:162::-;6195:13;;6172:4;;6195:13;;;;;:84;;;;-1:-1:-1;6225:19:5;;:24;;:53;;-1:-1:-1;;6259:19:5;;6253:3;:25;;6124:162::o;3941:59::-;3992:8;3941:59;:::o;14012:452::-;14067:9;;14087:28;;;;;;;;;;;;;;;;;14067:9;;;;;;:18;;14087:28;14067:18;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;14134:27:5;14150:10;14134:15;:27::i;:::-;14163:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;14163:28:5;;;;-1:-1:-1;;;;;14163:28:5;;;293:9:0;304:6;285:26;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;14225:8:5;;:17;;;;;;;;14207:15;;-1:-1:-1;;;;;14225:8:5;;:15;;:17;;;;;;;;;;;;;;:8;:17;;;5:2:-1;;;;30:1;27;20:12;5:2;14225:17:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;14225:17:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;14225:17:5;:42;;;-1:-1:-1;;;;;14225:42:5;;14261:4;14225:42;;;;;;-1:-1:-1;;;;;14225:27:5;;;;;;:42;;;;;:17;;:42;;;;;;;;:27;:42;;;5:2:-1;;;;30:1;27;20:12;5:2;14225:42:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;14225:42:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;14225:42:5;;-1:-1:-1;14277:35:5;14289:10;14225:42;14277:11;:35::i;:::-;14327:43;;;14347:10;14327:43;;;;;;;;;;-1:-1:-1;;;;;;;;;;;14327:43:5;;;;;;;;;;14380:6;:13;;-1:-1:-1;;14380:13:5;;;;;14450:6;;14408:49;;;14426:10;14408:49;;;;;;;;;;;;;;;;;;;;;;;;;321:1:0;;;14012:452:5;;:::o;6805:127::-;6867:4;6900:5;;-1:-1:-1;;;;;6890:15:5;;;6900:5;;6890:15;;:35;;-1:-1:-1;6919:6:5;;-1:-1:-1;;;;;6909:16:5;;;6919:6;;6909:16;6890:35;6883:42;6805:127;-1:-1:-1;;6805:127:5:o;4911:26::-;;;;;;;;;:::o;7784:1623::-;8154:23;;;;;;;;;;;;;;;;;3992:8;8103:49;;;;8154:23;8103:49;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;8193:8:5;:34;;-1:-1:-1;;;;;;8193:34:5;-1:-1:-1;;;;;8193:34:5;;;;;;;;;;;8255:17;;;;;;;;-1:-1:-1;;8255:8:5;;;;:15;;:17;;;;;;;;;;;;;;;:8;:17;;;5:2:-1;;;;30:1;27;20:12;5:2;8255:17:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8255:17:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;8255:17:5;:42;;;-1:-1:-1;;;;;8255:42:5;;8291:4;8255:42;;;;;;-1:-1:-1;;;;;8255:27:5;;;;;;:42;;;;;:17;;:42;;;;;;;;:27;:42;;;5:2:-1;;;;30:1;27;20:12;5:2;8255:42:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8255:42:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;8255:42:5;;-1:-1:-1;8307:9:5;8319:59;8359:18;8319:39;:59::i;:::-;8307:71;-1:-1:-1;8392:18:5;;;8388:66;;8431:22;;;;;;;;;;;;;;;;;;;8424:30;;-1:-1:-1;;;;;8424:30:5;;;;;;;;;;;;;;;;8431:22;;8424:30;;;;;;;;8431:22;8424:30;;8431:22;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;8388:66:5;8487:17;;;8519:82;8566:18;8487:17;8519:46;:82::i;:::-;8518:83;8514:139;;;8622:30;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;8622:30:5;;;;;;;8615:38;;-1:-1:-1;;;;;8615:38:5;;;;;;;;;;;;;;;;8622:30;;8615:38;;;;;;;;8622:30;8615:38;;8622:30;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;8514:139:5;8668:8;8664:208;;;8692:5;:18;;-1:-1:-1;;;;;;8692:18:5;-1:-1:-1;;;;;8692:18:5;;;;;8724:19;:36;;;8664:208;;;8791:6;:19;;-1:-1:-1;;;;;;8791:19:5;-1:-1:-1;;;;;8791:19:5;;;;;8824:20;:37;;;8664:208;8882:6;:18;;;8910:17;:38;;;8958:20;:41;;;9009:21;:42;;;9062:11;:26;;;9098:23;:38;;;9146:24;:39;;;9196:15;:34;;-1:-1:-1;;;;;9196:34:5;;;-1:-1:-1;;;;;;9196:34:5;;;;;;;9240:9;:22;;;;;;;;;;;;;9278:122;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;321:1:0;;;7784:1623:5;;;;;;;;;;:::o;35715:470::-;35938:15;35982:196;36050:12;36076;36102:15;36131;36160:8;35982:54;:196::i;:::-;35969:209;35715:470;-1:-1:-1;;;;;;35715:470:5:o;18332:708::-;18413:6;;18430:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;18430:25:5;;;;18413:6;;;;;;:15;;18430:25;18413:15;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;18474:27:5;18490:10;18474:15;:27::i;:::-;18503:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;18503:28:5;;;;-1:-1:-1;;;;;18503:28:5;;;293:9:0;304:6;285:26;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;18550:28:5;18566:11;18550:15;:28::i;:::-;18589:24;;;;;;;;;;;;;;;;;18550:37;;;18589:24;18550:37;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;18632:21:5;18642:10;18632:9;:21::i;:::-;18664:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;18664:25:5;;;;18632:30;;;18664:25;18632:30;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;18723:5:5;;-1:-1:-1;;;;;18723:5:5;18709:10;:19;18705:183;;;18730:5;:19;;-1:-1:-1;;;;;;18730:19:5;-1:-1:-1;;;;;18730:19:5;;;;;18705:183;;;18782:6;;-1:-1:-1;;;;;18782:6:5;18768:10;:20;18764:124;;;18790:6;:20;;-1:-1:-1;;;;;;18790:20:5;-1:-1:-1;;;;;18790:20:5;;;;;18764:124;;;18843:15;;;;;-1:-1:-1;;;;;18843:15:5;18829:10;:29;18825:63;;;18860:15;:28;;-1:-1:-1;;18860:28:5;;;18825:63;18928:15;;18898:73;;;-1:-1:-1;;;;;18898:73:5;;-1:-1:-1;;;;;18898:73:5;;;;;;;;;18928:15;;;;;18898:60;;:73;;;;;18928:15;;18898:73;;;;;;;18928:15;;18898:73;;;5:2:-1;;;;30:1;27;20:12;5:2;18898:73:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;18986:47:5;;;19009:10;18986:47;;-1:-1:-1;;;;;18986:47:5;;;;;;;;;;-1:-1:-1;18986:47:5;;;;;;;;-1:-1:-1;18986:47:5;321:1:0;;;;;;18332:708:5;;;:::o;4700:30::-;;;;:::o;4469:36::-;;;;:::o;21180:574::-;21277:9;;21297:28;;;;;;;;;;;;;;;;;21277:9;;;;;;:18;;21297:28;21277:18;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;21344:6:5;;21361:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;21361:25:5;;;;21344:6;;;;;;:15;;21361:25;21344:15;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;21405:27:5;21421:10;21405:15;:27::i;:::-;21434:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;21434:28:5;;;;-1:-1:-1;;;;;21434:28:5;;;293:9:0;304:6;285:26;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;21502:29:5;;;;;;;;;;;;;;;;;21499:1;21481:19;;;21502:29;21481:19;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;21547:11:5;:29;;;21586:23;:41;;;21637:24;:42;;;21694:53;;;21719:10;21694:53;;;;;;;;;;;;;;;;;;;;;321:1:0;;;;;;21180:574:5;;;:::o;4062:20::-;;;-1:-1:-1;;;;;4062:20:5;;:::o;4246:32::-;;;;:::o;4737:33::-;;;;:::o;37231:140::-;37288:8;37314:50;37354:9;37314:39;:50::i;33579:685::-;33783:12;33811:16;33830:159;33884:17;;33915:20;33949:12;33975:4;33830:40;:159::i;:::-;33811:178;;33999:17;34019:161;34073:17;;34104:21;34139:12;34165:5;34019:40;:161::i;:::-;33999:181;;34215:11;34200:12;:26;:57;;;;;34245:12;34230;:27;34200:57;34190:67;33579:685;-1:-1:-1;;;;;;;33579:685:5:o;5395:24::-;;;-1:-1:-1;;;;;5395:24:5;;:::o;11862:180::-;11986:10;;;;;;;;12010:15;;;;-1:-1:-1;;;;;12010:15:5;;11862:180::o;4183:21::-;;;;:::o;19447:1067::-;19545:27;19561:10;19545:15;:27::i;:::-;19574:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;19574:28:5;;;;-1:-1:-1;;;;;19574:28:5;;;293:9:0;304:6;285:26;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;19621:10:5;:8;:10::i;:::-;19633:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;19633:21:5;;;;;285:26:0;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;19728:21:5;19738:10;19728:9;:21::i;:::-;19760:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;19760:25:5;;;;19728:30;;;19760:25;19728:30;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;19829:29:5;;;;;;;;;;;;;;;;;19826:1;19804:23;;;19829:29;19804:23;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;19903:14:5;19920:33;19942:10;19920:21;:33::i;:::-;19981:5;;19903:50;;-1:-1:-1;;;;;;19981:5:5;19967:10;:19;19963:348;;;20002:12;:19;;-1:-1:-1;;20002:19:5;20017:4;20002:19;;;20035:20;:42;;;20091:18;:30;;;19963:348;;;20156:6;;-1:-1:-1;;;;;20156:6:5;20142:10;:20;20138:173;;;20178:13;:20;;-1:-1:-1;;20178:20:5;;;;;20212:21;:43;;;20269:19;:31;;;20138:173;20351:15;;20321:71;;;;;;20381:10;20321:71;;;;;;-1:-1:-1;;;;;20351:15:5;;;;20321:59;;:71;;;;;20351:15;;20321:71;;;;;;;;20351:15;;20321:71;;;5:2:-1;;;;30:1;27;20:12;5:2;20321:71:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;20407:100:5;;;20431:10;20407:100;;;;;;;;;;;;;;;;;;-1:-1:-1;20407:100:5;;;;;;;-1:-1:-1;20407:100:5;321:1:0;;;;;;;19447:1067:5;;;;:::o;37459:138::-;37515:8;37541:49;37580:9;37541:38;:49::i;28404:2421::-;28464:10;:8;:10::i;:::-;28476:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;28476:21:5;;;;;285:26:0;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;28516:27:5;28532:10;28516:15;:27::i;:::-;28545:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;28545:28:5;;;;-1:-1:-1;;;;;28545:28:5;;;293:9:0;304:6;285:26;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;28589:16:5;28608:13;:11;:13::i;:::-;28631:24;28672:5;;28779:11;;28829:17;;28860:19;;28589:32;;-1:-1:-1;;;;;;28672:5:5;;;28658:10;:19;;28711:196;;28589:32;;28672:5;28711:54;:196::i;:::-;28688:219;;28917:21;28941:198;29009:11;;29034;29059:17;;29090:20;;29124:5;28941:54;:198::i;:::-;28917:222;;29381:21;29405:124;29512:16;29405:89;29478:15;29405:8;;;;;;;;;-1:-1:-1;;;;;29405:8:5;-1:-1:-1;;;;;29405:15:5;;:17;;;;;-1:-1:-1;;;29405:17:5;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;29405:17:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;29405:17:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;29405:17:5;:55;;;-1:-1:-1;;;;;29405:55:5;;29454:4;29405:55;;;;;;-1:-1:-1;;;;;29405:40:5;;;;;;:55;;;;;:17;;:55;;;;;;;;:40;:55;;;5:2:-1;;;;30:1;27;20:12;5:2;29405:55:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;29405:55:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;29405:55:5;;:89;:72;:89;:::i;:::-;:106;:124;:106;:124;:::i;:::-;29381:148;-1:-1:-1;29543:21:5;;29539:107;;29585:50;;;;;;;;;;;;;;;;;29539:107;29655:35;29673:16;29655:17;:35::i;:::-;29777:12;29792:163;29844:19;:56;;29884:16;29844:56;;;29866:15;29844:56;3934:1;29792:38;:163::i;:::-;29777:178;;29969:19;29965:297;;;30022:28;:15;30042:7;30022:28;:19;:28;:::i;:::-;30004:46;-1:-1:-1;30083:29:5;:16;30104:7;30083:29;:20;:29;:::i;:::-;30064:48;;29965:297;;;30161:28;:15;30181:7;30161:28;:19;:28;:::i;:::-;30143:46;-1:-1:-1;30222:29:5;:16;30243:7;30222:29;:20;:29;:::i;:::-;30203:48;;29965:297;30336:5;;30324:35;;-1:-1:-1;;;;;30336:5:5;30343:15;30324:11;:35::i;:::-;30394:5;;30374:43;;;-1:-1:-1;;;;;30394:5:5;;;30374:43;;;;;;;;;;-1:-1:-1;;;;;;;;;;;30374:43:5;;;;;;;;;30439:6;;30427:37;;-1:-1:-1;;;;;30439:6:5;30447:16;30427:11;:37::i;:::-;30499:6;;30479:45;;;-1:-1:-1;;;;;30499:6:5;;;30479:45;;;;;;;;;;-1:-1:-1;;;;;;;;;;;30479:45:5;;;;;;;;;30535:10;:17;;-1:-1:-1;;;;30535:17:5;;;;;30562:13;;;;;30586:232;;;;30650:5;;;30674:6;30700;;30628:79;;;-1:-1:-1;;;;;30650:5:5;;;30628:79;;;;;;;;30674:6;;;;30628:79;;;;;;;;;;;;;;;;;;;;;;;;;30586:232;;;30761:6;;;30787:5;30811:6;;30739:79;;;-1:-1:-1;;;;;30761:6:5;;;30739:79;;;;;;;;30787:5;;;;30739:79;;;;;;;;;;;;;;;;;;;;;;;;;30586:232;321:1:0;;;;;;;;28404:2421:5;;:::o;5328:30::-;;;-1:-1:-1;;;;;5328:30:5;;:::o;5848:158::-;5918:12;;5895:4;;5918:12;;:81;;;;-1:-1:-1;5947:18:5;;:23;;:51;;-1:-1:-1;;5980:18:5;;5974:3;:24;;5848:158::o;38385:203::-;38482:12;38520:61;38563:6;38571:9;38520:42;:61::i;:::-;38510:71;38385:203;-1:-1:-1;;;38385:203:5:o;4586:31::-;;;;:::o;4876:29::-;;;;;;;;;:::o;38769:197::-;38862:13;38902:57;38941:7;38950:8;38902:38;:57::i;4814:24::-;;;;;;:::o;12303:1454::-;12367:9;;12387:28;;;;;;;;;;;;;;;;;12367:9;;;;;;:18;;12387:28;12367:18;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;12434:6:5;;12451:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;12451:25:5;;;;12434:6;;;;;;:15;;12451:25;12434:15;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;12528:27:5;12544:10;12528:15;:27::i;:::-;12566:24;;;;;;;;;;;;;;;;;12528:36;;;12566:24;12528:36;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;12644:15:5;12662:57;12701:17;;12662:38;:57::i;:::-;12644:75;-1:-1:-1;12733:20:5;;;12729:68;;12774:22;;;;;;;;;;;;;;;;;;;12767:30;;-1:-1:-1;;;;;12767:30:5;;;;;;;;;;;;;;;;12774:22;;12767:30;;;;;;;;12774:22;12767:30;;12774:22;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;12729:68:5;12911:17;;12830:19;;;;12864:81;;12830:19;12864:46;:81::i;:::-;12863:82;12859:138;;;12966:30;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;12966:30:5;;;;;;;12959:38;;-1:-1:-1;;;;;12959:38:5;;;;;;;;;;;;;;;;12966:30;;12959:38;;;;;;;;12966:30;12959:38;;12966:30;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;12859:138:5;13008:16;13017:6;13008:8;:16::i;:::-;13034:112;13078:58;13118:17;;13078:39;:58::i;:::-;13065:10;:71;13034:17;:112::i;:::-;13178:1;13161:5;-1:-1:-1;;;;;13161:5:5;:19;13157:219;;;13196:5;:18;;-1:-1:-1;;;;;;13196:18:5;13204:10;13196:18;;;13228:19;:36;;;13157:219;;;13295:6;:19;;-1:-1:-1;;;;;;13295:19:5;13304:10;13295:19;;;13328:20;:37;;;13157:219;13386:9;:16;;-1:-1:-1;;13386:16:5;;;;;13442:15;;13412:72;;;-1:-1:-1;;;;;13412:72:5;;13473:10;13412:72;;;;;;-1:-1:-1;;;;;13442:15:5;;;;13412:60;;:72;;;;;13386:16;;13412:72;;;;;;;;13386:16;13442:15;13412:72;;;5:2:-1;;;;30:1;27;20:12;5:2;13412:72:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;13412:72:5;;;;13499:251;13528:10;13552:6;13572:5;;;;;;;;;-1:-1:-1;;;;;13572:5:5;13591:6;;;;;;;;;-1:-1:-1;;;;;13591:6:5;13611;;13631:17;;13662:11;;13687:19;;13720:20;;13499:251;;;;-1:-1:-1;;;;;13499:251:5;-1:-1:-1;;;;;13499:251:5;;;;;;;;;;;-1:-1:-1;;;;;13499:251:5;-1:-1:-1;;;;;13499:251:5;;;;;;-1:-1:-1;;;;;13499:251:5;-1:-1:-1;;;;;13499:251:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;321:1:0;;;;;;12303:1454:5;;;:::o;11052:360::-;11125:7;11219:5;;;11238:6;11258;;11278:11;;11303:17;;11334:12;;11125:7;;;;;;;;;;;;;;-1:-1:-1;;;;;11219:5:5;;;;11238:6;;11258;11278:11;11303:17;11334:12;;;;;11219:5;11360:13;;;11387:8;:6;:8::i;:::-;11198:207;;;;-1:-1:-1;11198:207:5;;-1:-1:-1;11198:207:5;;-1:-1:-1;11198:207:5;-1:-1:-1;11198:207:5;-1:-1:-1;11198:207:5;-1:-1:-1;11198:207:5;;-1:-1:-1;11052:360:5;-1:-1:-1;11052:360:5:o;4399:23::-;;;;:::o;4428:35::-;;;;:::o;6426:178::-;6482:4;6516:5;;-1:-1:-1;;;;;6506:15:5;;;6516:5;;6506:15;:35;;;;;6525:16;:14;:16::i;:::-;6505:92;;;-1:-1:-1;6569:6:5;;-1:-1:-1;;;;;6559:16:5;;;6569:6;;6559:16;:37;;;;;6579:17;:15;:17::i;31203:1085::-;31256:27;31272:10;31256:15;:27::i;:::-;31285:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;31285:28:5;;;;-1:-1:-1;;;;;31285:28:5;;;293:9:0;304:6;285:26;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;31332:10:5;:8;:10::i;:::-;31344:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;31344:21:5;;;;;285:26:0;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;31384:21:5;31394:10;31384:9;:21::i;:::-;31416:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;31416:25:5;;;;31384:30;;;31416:25;31384:30;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;31474:15:5;;31491:26;;;;;;;;;;;;;;;;;31474:15;;;;-1:-1:-1;;;;;31474:15:5;31460:10;:29;;;31491:26;31460:29;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;31571:8:5;;;;;;;;;-1:-1:-1;;;;;31571:8:5;-1:-1:-1;;;;;31571:28:5;;:30;;;;;-1:-1:-1;;;31571:30:5;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;31571:30:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;31571:30:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;31571:30:5;31536:8;;:31;;;;;;31561:4;31536:31;;;;;;-1:-1:-1;;;;;31536:65:5;;;;:8;;;;:16;;:31;;;;;31571:30;;31536:31;;;;;;;;:8;:31;;;5:2:-1;;;;30:1;27;20:12;5:2;31536:31:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;31536:31:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;31536:31:5;31603:29;;;;;;;;;;;;;31536:31;31603:29;;;-1:-1:-1;;;;;31536:65:5;;;;;;;;;31603:29;31536:65;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;31700:15:5;;;;;-1:-1:-1;;;;;31700:15:5;:29;31696:108;;;31745:15;:28;;-1:-1:-1;;31745:28:5;31763:10;31745:28;;;;;31787:7;;31696:108;31933:11;:18;;-1:-1:-1;;31933:18:5;;;;;31988:8;;:30;;;;;;;;31933:18;;-1:-1:-1;;;;;31988:8:5;;:28;;:30;;;;;;;;;;;;;;:8;:30;;;5:2:-1;;;;30:1;27;20:12;5:2;31988:30:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;31988:30:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;31988:30:5;32053:64;;;;;;;;31988:30;;-1:-1:-1;32028:14:5;;-1:-1:-1;;;;;32053:62:5;;;;;:64;;;;;31988:30;;32053:64;;;;;;;32028:14;32053:62;:64;;;5:2:-1;;;;30:1;27;20:12;5:2;32053:64:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;32053:64:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;32053:64:5;32148:8;;:17;;;;;;;;32053:64;;-1:-1:-1;32128:63:5;;32053:64;;-1:-1:-1;;;;;32148:8:5;;:15;;:17;;;;;32053:64;;32148:17;;;;;;;:8;:17;;;5:2:-1;;;;30:1;27;20:12;5:2;32148:17:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;32148:17:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;32148:17:5;:42;;;-1:-1:-1;;;;;32148:42:5;;32184:4;32148:42;;;;;;-1:-1:-1;;;;;32148:27:5;;;;;;:42;;;;;:17;;:42;;;;;;;;:27;:42;;;5:2:-1;;;;30:1;27;20:12;5:2;32148:42:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;32148:42:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;32148:42:5;32128:11;:63::i;:::-;32201:11;:19;;-1:-1:-1;;32230:13:5;;;;;32259:22;;;-1:-1:-1;;;;;32259:22:5;;;;;;;;;;;;;;;321:1:0;;;;;;;;;;31203:1085:5;;:::o;4776:31::-;;;;:::o;22331:2811::-;22419:13;25295:10;:8;:10::i;:::-;25307:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;25307:21:5;;;;;25287:42;;;;;;-1:-1:-1;;;;;25287:42:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;25287:42:5;;25347:41;25357:13;:30;;25381:6;;-1:-1:-1;;;;;25381:6:5;25357:30;;;25373:5;;-1:-1:-1;;;;;25373:5:5;25357:30;25347:9;:41::i;:::-;25390:22;;;;;;;;;;;;;;;;;;25339:74;;;;;;-1:-1:-1;;;;;25339:74:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;25339:74:5;;25431:27;25447:10;25431:15;:27::i;:::-;25469:24;;;;;;;;;;;;;;;;;;25431:36;25423:71;;;;-1:-1:-1;;;;;25423:71:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;25423:71:5;;22448:9;22460:57;22499:17;;22460:38;:57::i;:::-;22448:69;-1:-1:-1;22531:14:5;;;22527:62;;22566:22;;;;;;;;;;;;;;;;;;;22559:30;;-1:-1:-1;;;;;22559:30:5;;;;;;;;;;;;;;;;22566:22;;22559:30;;;;;;;;22566:22;22559:30;;22566:22;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;22527:62:5;22662:19;22684:16;:6;22695:4;22684:16;:10;:16;:::i;:::-;22662:38;;22715:81;22762:17;;22781:14;22715:46;:81::i;:::-;22714:82;22710:138;;;22817:30;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;22817:30:5;;;;;;;22810:38;;-1:-1:-1;;;;;22810:38:5;;;;;;;;;;;;;;;;22817:30;;22810:38;;;;;;;;22817:30;22810:38;;22817:30;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;22710:138:5;22859:16;22878:13;:11;:13::i;:::-;22859:32;;22901:19;22923:13;:84;;22986:21;;22923:84;;;22951:20;;22923:84;22901:106;;23083:245;23115:11;23140:13;:52;;23173:19;;23140:52;;;23156:14;23140:52;23206:13;:53;;23245:14;23206:53;;;23222:20;;23206:53;23273:14;23083:18;:245::i;:::-;23082:246;23078:317;;;23351:32;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;23351:32:5;;;;;;;23344:40;;-1:-1:-1;;;;;23344:40:5;;;;;;;;;;;;;;;;23351:32;;23344:40;;;;;;;;23351:32;23344:40;;23351:32;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;23078:317:5;23454:16;23463:6;23454:8;:16::i;:::-;23480:23;23498:4;23480:17;:23::i;:::-;23551:20;23574:13;:30;;23598:6;;-1:-1:-1;;;;;23598:6:5;23574:30;;;23590:5;;-1:-1:-1;;;;;23590:5:5;23574:30;23551:53;;23614:27;23644:107;23674:13;23701:14;23729:12;23644:16;:107::i;:::-;23614:137;;23800:27;23830:75;23890:14;23830:8;;;;;;;;;-1:-1:-1;;;;;23830:8:5;-1:-1:-1;;;;;23830:15:5;;:17;;;;;-1:-1:-1;;;23830:17:5;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;23830:75:5;23800:105;;23953:16;23972:143;24035:17;;24066:11;;24091:14;23972:49;:143::i;:::-;23953:162;;24130:13;24126:536;;;24159:5;:18;;-1:-1:-1;;;;;;24159:18:5;24167:10;24159:18;;;24191:19;:36;;;24241:23;:40;;;24295:20;:34;;;24343:20;:45;;;24126:536;;;24419:6;:19;;-1:-1:-1;;;;;;24419:19:5;24428:10;24419:19;;;24452:20;:37;;;24503:24;:41;;;24558:21;:35;;;24607:19;:44;;;24126:536;24672:11;:28;;;24710:17;:31;;;24752:24;24762:13;24752:9;:24::i;:::-;24863:15;;-1:-1:-1;;;;;24863:31:5;;;:15;;;;;:31;24859:90;;;24910:15;:28;;-1:-1:-1;;24910:28:5;;;24859:90;24989:15;;24959:72;;;-1:-1:-1;;;;;24959:72:5;;25020:10;24959:72;;;;;;-1:-1:-1;;;;;24989:15:5;;;;24959:60;;:72;;;;;24989:15;;24959:72;;;;;;;;24989:15;;24959:72;;;5:2:-1;;;;30:1;27;20:12;5:2;24959:72:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;25128:6:5;;25046:89;;;25057:10;25046:89;;-1:-1:-1;;;;;25046:89:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;25046:89:5;;;;;;;-1:-1:-1;25046:89:5;25504:1;;;;;;;;22331:2811;;;:::o;21838:251::-;21894:10;:8;:10::i;:::-;21906:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;21906:21:5;;;;;285:26:0;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;21946:21:5;21956:10;21946:9;:21::i;:::-;21969;;;;;;;;;;;;;;;;;;285:26:0;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;22030:5:5;;22006:30;;-1:-1:-1;;;;;22030:5:5;22016:10;:19;22006:9;:30::i;:::-;22051:31;;;22071:10;22051:31;;;;;;;;;;;;;321:1:0;;21838:251:5;;:::o;4844:25::-;;;;;;;;;:::o;2574:316:7:-;2733:11;2760:18;2781:42;2795:12;2809:13;2781;:42::i;:::-;2760:63;;2842:41;2852:15;2869:13;2842:9;:41::i;32845:204:5:-;32991:9;;33007:6;;32985:29;;;;;;;;;;;;;;;32915:10;;;;-1:-1:-1;;;;;32991:9:5;;;;32985:21;;:29;;;;;;;;;;32991:9;32985:29;;;5:2:-1;;;;30:1;27;20:12;5:2;32985:29:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;32985:29:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;32985:29:5;;-1:-1:-1;;32845:204:5;:::o;6372:1083:7:-;6568:10;6655:24;6683:17;6682:96;;1134:24;6682:96;;;1054:25;6682:96;6655:123;-1:-1:-1;6788:22:7;355:8;6814:34;;;6813:50;6788:75;;6921:15;355:8;7002:18;355:8;6972:12;:26;6953:15;:46;:67;;;;;;;;6939:105;;;;;;;;6921:123;;7196:17;:51;;;;;7230:17;7217:10;:30;7196:51;7192:77;;;7268:1;7261:8;;;;;;;7192:77;7340:17;7339:109;;7438:10;7418:17;:30;7339:109;;;7393:10;7373:17;:30;7339:109;7331:117;6372:1083;-1:-1:-1;;;;;;;;6372:1083:7:o;39784:182:5:-;39870:8;;;;;;;;;-1:-1:-1;;;;;39870:8:5;-1:-1:-1;;;;;39870:15:5;;:17;;;;;-1:-1:-1;;;39870:17:5;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;39870:17:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;39870:17:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;39870:17:5;:39;;;;;;-1:-1:-1;;;;;39870:39:5;;;;;;;;;;;;;;;:26;;;;;;;:39;;;;;:17;;:39;;;;;;;-1:-1:-1;39870:26:5;:39;;;5:2:-1;;;;30:1;27;20:12;5:2;39870:39:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;39870:39:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;39870:39:5;39923:26;;;;;;;;;;;;39870:39;39923:26;;;;;;;;;;;;39849:110;;;;;;-1:-1:-1;;;;;39849:110:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;39849:110:5;;39784:182;;:::o;4484:972:7:-;4709:15;355:8;5044:33;;;;5100:12;;5135;;5170:15;;4709;;355:8;5100:12;5235:6;;;5234:21;;5233:28;;;;;;;;5228:1;:34;:47;;;;;;;;5214:84;;;;;;;;5197:101;;5308:17;5328:8;:42;;5360:10;5356:1;:14;5328:42;;;5343:10;5339:1;:14;5328:42;5308:62;-1:-1:-1;5405:1:7;5388:18;;;5381:26;;;;5435:13;4484:972;-1:-1:-1;;;;;;;;;;;4484:972:7:o;5462:327::-;5594:12;5644:54;5654:15;516:2;5644:9;:54::i;:::-;5633:7;:65;;5632:150;;;;;5727:54;5737:15;591:3;5727:9;:54::i;:::-;5716:7;:65;;5622:160;5462:327;-1:-1:-1;;;5462:327:7:o;2060:365::-;2230:16;355:8;2290:102;2361:15;2325:32;:15;355:8;2325:32;:19;:32;:::i;:::-;:52;;;;;;;2290:12;;2325:52;;2290:102;:16;:102;:::i;:::-;2276:142;;;;;;;;;2060:365;-1:-1:-1;;;;2060:365:7:o;1431:145:10:-;1489:7;1520:5;;;1543:6;;;;1535:15;;;;;40218:192:5;40288:8;;;;;;;;;-1:-1:-1;;;;;40288:8:5;-1:-1:-1;;;;;40288:15:5;;:17;;;;;-1:-1:-1;;;40288:17:5;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;40288:17:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;40288:17:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;40288:17:5;:65;;;;;;40319:10;40288:65;;;;40339:4;40288:65;;;;;;;;;;;;-1:-1:-1;;;;;40288:30:5;;;;;;:65;;;;;:17;;:65;;;;;;;;-1:-1:-1;40288:30:5;:65;;;5:2:-1;;;;30:1;27;20:12;5:2;40288:65:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;40288:65:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;40288:65:5;40367:26;;;;;;;;;;;;40288:65;40367:26;;;;;;;;;;;;40267:136;;;;;;-1:-1:-1;;;;;40267:136:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;40267:136:5;;40218:192;:::o;1229:120:7:-;1288:8;1340:2;1314:23;1324:9;1335:1;1314:9;:23::i;:::-;:28;;;;;;;;;1229:120;-1:-1:-1;;1229:120:7:o;39115:220:5:-;39251:14;39307:3;39294:10;:16;39293:35;;39327:1;39293:35;;;-1:-1:-1;39314:10:5;39115:220::o;1437:119:7:-;1495:8;1547:2;1521:23;1531:9;1542:1;1521:9;:23::i;1205:145:10:-;1263:7;1290:6;;;;1282:15;;;;;;-1:-1:-1;1319:5:10;;;1205:145::o;40029:104:5:-;40099:8;;:18;;;;;;;;40087:39;;-1:-1:-1;;;;;40099:8:5;;:16;;:18;;;;;;;;;;;;;;:8;:18;;;5:2:-1;;;;30:1;27;20:12;5:2;40099:18:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;40099:18:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;40099:18:5;40119:6;40087:11;:39::i;:::-;40029:104;:::o;3732:168:7:-;3890:3;3868:18;;3867:26;;3732:168::o;3197:354::-;3296:12;3338:9;3328:6;:19;3324:33;;;-1:-1:-1;3356:1:7;3349:8;;3324:33;3386:28;;;3367:16;3407:6;3457:3;3442:18;;3441:34;;;;;;;;3424:51;;3514:1;3501:10;:14;3500:43;;3533:10;3532:11;;3500:43;;25701:710:5;25852:27;25988:245;26056:11;;26081:14;26109:17;;26140:12;:57;;26177:20;;26140:57;;;26155:19;;26140:57;26211:12;25988:54;:245::i;:::-;25963:270;;26283:49;26295:12;26309:22;26283:11;:49::i;:::-;26347:57;;;-1:-1:-1;;;;;26347:57:5;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;26347:57:5;;;;;;;;;;25701:710;;;;;:::o;39394:333::-;39457:15;39453:268;;;39511:1;39488:20;:24;;;39526:18;:22;39562:12;:20;;-1:-1:-1;;39562:20:5;;;39453:268;;;39637:1;39613:21;:25;;;39652:19;:23;39689:13;:21;;-1:-1:-1;;39689:21:5;;;39394:333;:::o;229:421:10:-;287:7;527:6;;523:45;;;-1:-1:-1;556:1:10;549:8;;523:45;590:5;;;594:1;590;:5;613;;;;;;;;:10;605:19;;;;",
  "source": "pragma solidity ^0.5.0;\n\nimport \"openzeppelin-solidity/contracts/math/SafeMath.sol\";\nimport \"../DBC.sol\";\nimport \"../Feeds.sol\";\nimport \"../Registry.sol\";\nimport \"./ContractForDifferenceFactory.sol\";\nimport \"./ContractForDifferenceRegistry.sol\";\nimport \"./ContractForDifferenceLibrary.sol\";\n\n\n/*\n * SOLIUM DISABLE: \n *\n *   security/no-block-members - we need to use 'now' in order to set a time \n *       limit.\n */\n\n /* solium-disable security/no-block-members */\n\n/**\n * @title Contract for difference\n *\n * Contract for difference for a given market between a\n * \"buyer\" (long position) and \"seller\" (short position).\n */\ncontract ContractForDifference is DBC {\n    using SafeMath for uint;\n\n    /*\n     * Events\n     */\n\n    event LogCFDCreated(\n        address creator,\n        bytes32 market,\n        uint notionalAmountDai,\n        uint deposit\n    );\n    event LogCFDInitiated(\n        address joiner,\n        uint amountSent,\n        address buyer,\n        address seller,\n        bytes32 market,\n        uint notionalAmountDai,\n        uint strikePrice,\n        uint buyerDepositBalance,\n        uint sellerDepositBalance\n    );\n    event LogCFDTransferPosition(address oldOwner, address newOwner);\n    event LogCFDCanceledNew(address party, uint amount, bytes32 market);\n    event LogCFDStrikePriceUpdated(address party, uint newStrikePrice);\n\n    event LogCFDSale(\n        address party,\n        uint saleStrikePrice,\n        uint timeLimit\n    );\n    event LogCFDSaleCancelled(address party);\n    event LogCFDSaleUpdated(address party, uint newPrice);\n    event LogCFDSold(address to, address by, uint newNotional, uint sellerAmount, uint buyerDeposit, bytes32 market);\n\n    event LogCFDPartyBalanceUpdate(address party, uint amount, bool isWithdraw, uint newBalance, bytes32 market);\n    event LogCFDTransferFunds(address receiver, uint amount);\n\n    event LogCFDClosed(address winner, uint buyerCollateral, uint sellerCollateral, bytes32 market);\n    event LogCFDForceTerminated(address terminator, uint terminatorAmount, address otherParty, uint otherPartyAmount, bytes32 market);\n    event LogCFDUpgraded(address newCFD);\n    event LogCFDRemainingBalanceUnexpected(uint remainder);\n\n    enum Status {\n        CREATED,\n        INITIATED,\n        SALE,\n        CLOSED\n    }\n\n    /*\n     * Constants\n     */\n\n    string constant REASON_NOTIONAL_TOO_LOW = \"Notional below minimum\";\n    string constant REASON_FEES_NOT_ENOUGH = \"Not enough sent to cover fees\";\n    string constant REASON_DAI_TRANSFER_FAILED = \"Failure transfering ownership of DAI tokens\";\n    string constant REASON_COLLATERAL_RANGE_FAILED = \"collateralInRange false\";\n    string constant REASON_MUST_NOT_BE_INITIATED = \"Must not be initiated\";\n    string constant REASON_MUST_NOT_BE_CLOSED = \"Must not be closed\";\n    string constant REASON_MUST_NOT_BE_PARTY = \"Contract party can't call this\";\n    string constant REASON_MUST_BE_INITIATED = \"Must be initiated\";\n    string constant REASON_MUST_BE_SELLER = \"msg.sender must be seller\";\n    string constant REASON_MUST_NOT_BE_SELLER = \"msg.sender must not be seller\";\n    string constant REASON_MUST_BE_ON_SALE = \"Must be on sale\";\n    string constant REASON_MUST_BE_POSITIVE_PRICE = \"Price must be > 0\";\n    string constant REASON_ONLY_CONTRACT_PARTIES = \"Only contract parties can do this\";\n    string constant REASON_MUST_BE_ACTIVE = \"Must be active\";\n    string constant REASON_MARKET_PRICE_RANGE_FAILED = \"collateralInRange false\";\n    string constant REASON_WITHDRAW_NOT_ENOUGH = \"Can't withdraw more then available\";\n    string constant REASON_AMOUNT_NOT_ENOUGH = \"Amount not enough\";\n    string constant REASON_UPGRADE_ALREADY_SET = \"msg.sender already called\";\n    string constant REASON_UPGRADE_ALREADY_LATEST = \"Already at latest version\";\n    string constant REASON_TRANSFER_TO_EXISTING_PARTY = \"Can't transfer to existing party\";\n\n    uint public constant FORCE_TERMINATE_PENALTY_PERCENT = 5;\n    uint public constant MINIMUM_NOTIONAL_AMOUNT_DAI = 1 * 1e18; // 1 DAI/1 USD\n\n\n    /*\n     * State variables\n     */\n\n    address public buyer;                           // long\n    address public seller;                          // short\n    bytes32 public market;\n\n    uint public notionalAmountDai;\n    uint public buyerInitialNotional;\n    uint public sellerInitialNotional;\n\n    // format of strike prices as in Feeds contract - see Feeds.decimals()\n    uint public strikePrice;\n    uint public buyerInitialStrikePrice;\n    uint public sellerInitialStrikePrice;\n\n    // balances of amounts actually deposited/withdrawn from the contract\n    uint public buyerDepositBalance;\n    uint public sellerDepositBalance;\n\n    uint public buyerSaleStrikePrice;\n    uint public buyerSaleTimeLimit;\n\n    uint public sellerSaleStrikePrice;\n    uint public sellerSaleTimeLimit;\n\n    bool public buyerSelling;\n    bool public sellerSelling;\n\n    bool public initiated = false;\n    bool public closed = false;\n    bool public terminated;\n\n    // set to true for a short period of time - when second party has called\n    // upgrade and upgrade has called the new factory to do the work\n    bool public upgradeable = false;\n\n    // set to first party that calls upgrade\n    // enables identification of who called and that it has been called once\n    address public upgradeCalledBy = address(0);\n\n    address public cfdRegistryAddr;\n    address public feedsAddr;\n\n    Registry public registry;\n\n    /*\n     * Functions\n     */\n\n    constructor() public {}\n\n    /**\n     * @dev Contract has been initiated (has 2 parties) and not yet terminated.\n     * @return true if contract is active\n     */\n    function isActive() public view returns (bool) {\n        return initiated == true && closed == false;\n    }\n\n    /**\n     * @dev Is buyer / long party selling.\n     * @return true if buyer has side up for sale\n     */\n    function isBuyerSelling() public view returns (bool) {\n        return buyerSelling &&\n            (buyerSaleTimeLimit == 0 || now < buyerSaleTimeLimit);\n    }\n\n    /**\n     * @dev Is seller / short party selling.\n     * @return true if seller has side up for sale\n     */\n    function isSellerSelling() public view returns (bool) {\n        return sellerSelling &&\n            (sellerSaleTimeLimit == 0 || now < sellerSaleTimeLimit);\n    }\n\n    /**\n     * @dev If the given party is selling one side of the contract.\n     * @return true if the given party is selling\n     */\n    function isSelling(address _party) public view returns (bool) {\n        return (_party == buyer && isBuyerSelling()) ||\n            (_party == seller && isSellerSelling());\n    }\n\n    /**\n     * @dev Check if the given address is one of the 2 parties of the contract.\n     * @param _party Address to check\n     * @return true if _party is either the buyer or seller.\n     */\n    function isContractParty(address _party) public view returns (bool) {\n        return _party == buyer || _party == seller;\n    }\n\n    /**\n     * @dev Create a new CFDinstance specifying the terms of the contract.\n     *\n     * Fee of 0.3% of the notional is taken.\n     *\n     * Therefore the intial deposit is _value minus these fees.\n     *\n     * @param _registryAddr Registry contract address\n     * @param _cfdRegistryAddr CFD Registry contract address\n     * @param _feedsAddr Feeds address\n     * @param _partyAddr Address of the party creating the contract\n     * @param _marketId Contract is for prices on this market\n     * @param _strikePrice Agreed initial price for the contract (compatible\n                with Feeds stored price - see Feeds.decimals() adjustment)\n     * @param _notionalAmountDai Contract amount\n     * @param _isBuyer Flag indicating if the contract creator wants to take the\n     *            buyer (true) or the seller side (false).\n     */\n    function create(\n        address _registryAddr,\n        address _cfdRegistryAddr,\n        address _feedsAddr,\n        address _partyAddr, // msg.sender calling the Factory\n        bytes32 _marketId,\n        uint _strikePrice,\n        uint _notionalAmountDai,\n        bool _isBuyer\n    )\n        public\n        pre_cond(_notionalAmountDai >= MINIMUM_NOTIONAL_AMOUNT_DAI, REASON_NOTIONAL_TOO_LOW)\n    {\n        registry = Registry(_registryAddr);\n        uint daiBalance = registry.getDAI().balanceOf(address(this));\n        uint fees = ContractForDifferenceLibrary.creatorFee(_notionalAmountDai);\n        if (daiBalance <= fees)\n            revert(REASON_FEES_NOT_ENOUGH);\n\n        uint collateralSent = daiBalance - fees;\n        if (!ContractForDifferenceLibrary.collateralInRange(_notionalAmountDai, collateralSent))\n            revert(REASON_COLLATERAL_RANGE_FAILED);\n\n        if (_isBuyer) {\n            buyer = _partyAddr;\n            buyerDepositBalance = collateralSent;\n        } else {\n            seller = _partyAddr;\n            sellerDepositBalance = collateralSent;\n        }\n\n        market = _marketId;\n        notionalAmountDai = _notionalAmountDai;\n        buyerInitialNotional = _notionalAmountDai;\n        sellerInitialNotional = _notionalAmountDai;\n\n        strikePrice = _strikePrice;\n        buyerInitialStrikePrice = _strikePrice;\n        sellerInitialStrikePrice = _strikePrice;\n\n        cfdRegistryAddr = _cfdRegistryAddr;\n        feedsAddr = _feedsAddr;\n\n        emit LogCFDCreated(\n            _partyAddr,\n            market,\n            notionalAmountDai,\n            daiBalance\n        );\n    }\n\n    /**\n     * @dev Create a new CFDinstance from a previous CFD instance. This is part\n     *      of the upgrade process (see CFD.upgrade()).\n     *\n     * @param _cfdAddr Address of the existing / old CFD\n     * @param _registryAddr Address of Registry contract\n     * @param _cfdRegistryAddr Address of CFDRegistry contract\n     * @param _feedsAddr Address to send fees to\n     */\n    function createByUpgrade(\n        address _cfdAddr,\n        address _registryAddr,\n        address _cfdRegistryAddr,\n        address _feedsAddr\n    )\n        public\n    {\n        ContractForDifference oldCfd = ContractForDifference(_cfdAddr);\n\n        market = oldCfd.market();\n        notionalAmountDai = oldCfd.notionalAmountDai();\n        strikePrice = oldCfd.strikePrice();\n        buyer = oldCfd.buyer();\n        seller = oldCfd.seller();\n\n        buyerDepositBalance = oldCfd.buyerDepositBalance();\n        buyerInitialNotional = oldCfd.buyerInitialNotional();\n        buyerInitialStrikePrice = oldCfd.buyerInitialStrikePrice();\n\n        sellerDepositBalance = oldCfd.sellerDepositBalance();\n        sellerInitialNotional = oldCfd.sellerInitialNotional();\n        sellerInitialStrikePrice = oldCfd.sellerInitialStrikePrice();\n\n        cfdRegistryAddr = _cfdRegistryAddr;\n        registry = Registry(_registryAddr);\n        feedsAddr = _feedsAddr;\n\n        initiated = true;\n\n        ContractForDifferenceRegistry(cfdRegistryAddr).registerParty(seller);\n    }\n\n    /**\n     * Returns an array with all the attributes of the contract\n     * (Had to split in 3 functions because of the stack limit)\n     * Max number of return values == 8\n     */\n    function getCfdAttributes()\n        public\n        view\n        returns (address, address, bytes32, uint, uint, bool, bool, Status)\n    {\n        return (\n            buyer,\n            seller,\n            market,\n            strikePrice,\n            notionalAmountDai,\n            buyerSelling,\n            sellerSelling,\n            status()\n        );\n    }\n    function getCfdAttributes2()\n        public\n        view\n        returns (uint, uint, uint, uint, uint, uint, uint, uint)\n    {\n        return (\n            buyerInitialNotional,\n            sellerInitialNotional,\n            buyerDepositBalance,\n            sellerDepositBalance,\n            buyerSaleStrikePrice,\n            sellerSaleStrikePrice,\n            buyerInitialStrikePrice,\n            sellerInitialStrikePrice\n        );\n    }\n    function getCfdAttributes3()\n        public\n        view\n        returns (bool, address)\n    {\n        return (\n            terminated,\n            upgradeCalledBy\n        );\n    }\n\n    /**\n     * @dev Counterparty deposits their funds into the contract thereby joining\n     * and initiating the contract.\n     *\n     * Fee of 0.5% of the notional is taken.\n     *\n     * Therefore the intial deposit is _value minus these fees.\n     */\n    function deposit(uint _value)\n        external\n        pre_cond(initiated == false, REASON_MUST_NOT_BE_INITIATED)\n        pre_cond(closed == false, REASON_MUST_NOT_BE_CLOSED) // cancelNew has not been called\n        pre_cond(isContractParty(msg.sender) == false, REASON_MUST_NOT_BE_PARTY) // reject contract creator depositing\n    {\n        uint joinerFees = ContractForDifferenceLibrary.joinerFee(notionalAmountDai);\n        if (_value <= joinerFees)\n            revert(REASON_FEES_NOT_ENOUGH);\n\n        uint collateralSent = _value - joinerFees;\n        if (!ContractForDifferenceLibrary.collateralInRange(notionalAmountDai, collateralSent))\n            revert(REASON_COLLATERAL_RANGE_FAILED);\n\n        daiClaim(_value);\n        daiTransferToFees(\n            joinerFees + ContractForDifferenceLibrary.creatorFee(notionalAmountDai)\n        );\n\n        if (buyer == address(0)) {\n            buyer = msg.sender;\n            buyerDepositBalance = collateralSent;\n        } else {\n            seller = msg.sender;\n            sellerDepositBalance = collateralSent;\n        }\n\n        initiated = true;\n        ContractForDifferenceRegistry(cfdRegistryAddr).registerParty(msg.sender);\n        emit LogCFDInitiated(\n            msg.sender,\n            _value,\n            buyer,\n            seller,\n            market,\n            notionalAmountDai,\n            strikePrice,\n            buyerDepositBalance,\n            sellerDepositBalance\n        );\n    }\n\n    /**\n     * @dev Cancels a newly created contract refunding the balance to the party\n     *      that created the contract. This can only be called before a contract\n     *      is initiated. ie. between the create() and deposit() calls.\n     */\n    function cancelNew()\n        external\n        pre_cond(initiated == false, REASON_MUST_NOT_BE_INITIATED)\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\n    {\n        uint amountSent = registry.getDAI().balanceOf(address(this));\n        daiTransfer(msg.sender, amountSent);\n        emit LogCFDTransferFunds(msg.sender, amountSent);\n        closed = true;\n        emit LogCFDCanceledNew(msg.sender, amountSent, market);\n    }\n\n    /**\n     * @dev Party adds more funds to the contract thereby increasing their\n     *      deposit balance.\n     * @param _value DAI amount\n     */\n    function topup(uint _value)\n        external\n        pre_cond(_value >= 1, REASON_AMOUNT_NOT_ENOUGH)\n        pre_cond(initiated == true, REASON_MUST_BE_INITIATED)\n        pre_cond(closed == false, REASON_MUST_NOT_BE_CLOSED)\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\n        pre_cond(isSelling(msg.sender) == false, REASON_MUST_NOT_BE_SELLER)\n    {\n        bool isBuyer = msg.sender == buyer;\n        uint newDepositBalance = (isBuyer ? \n            buyerDepositBalance : \n            sellerDepositBalance\n        ).add(_value);\n\n        // check topup doesn't make collateral exceed the maximum\n        if (!ContractForDifferenceLibrary.collateralInRange(notionalAmountDai, newDepositBalance))\n            revert(REASON_COLLATERAL_RANGE_FAILED);\n\n        daiClaim(_value);\n\n        if (isBuyer) {\n            buyerDepositBalance = newDepositBalance;\n        } else {\n            sellerDepositBalance = newDepositBalance;\n        }\n\n        emit LogCFDPartyBalanceUpdate(msg.sender, _value, false, newDepositBalance, market);\n    }\n\n    /**\n     * @dev Party withdraws funds from the contract.\n     *      They can only withdraw down to an amount that leaves the collateral\n     *      to notional difference at 20% or more.\n     * @param _withdrawAmount Amount to withdraw from the deposits balance.\n     */\n    function withdraw(uint _withdrawAmount)\n        external\n        assertWithdrawPreCond(_withdrawAmount)\n    {\n        bool isBuyer = msg.sender == buyer;\n        uint currentDepositBal = isBuyer ? buyerDepositBalance : sellerDepositBalance;\n\n        // first simple check that can't withdraw more then deposited\n        if (_withdrawAmount > currentDepositBal)\n            revert(REASON_WITHDRAW_NOT_ENOUGH);\n\n        // second a more precise check that the collateral at new balance will remain above the min\n        uint newDepositBal = currentDepositBal - _withdrawAmount;\n        uint marketPrice = latestPrice();\n        if (!marketPriceInRange(\n            marketPrice,\n            isBuyer ? newDepositBal : buyerDepositBalance,\n            isBuyer ? sellerDepositBalance : newDepositBal,\n            strikePrice // unchanged on withdraw\n        )) {\n            revert(REASON_MARKET_PRICE_RANGE_FAILED);\n        }\n\n        uint collateral = ContractForDifferenceLibrary.calculateCollateralAmount(\n            strikePrice,\n            marketPrice,\n            notionalAmountDai,\n            newDepositBal,\n            isBuyer\n        );\n\n        if (!ContractForDifferenceLibrary.collateralInRange(notionalAmountDai, collateral)) {\n            revert(REASON_COLLATERAL_RANGE_FAILED);\n        }\n\n        daiTransfer(msg.sender, _withdrawAmount);\n        emit LogCFDTransferFunds(msg.sender, _withdrawAmount);\n\n        if (isBuyer) {\n            buyerDepositBalance = newDepositBal;\n        } else {\n            sellerDepositBalance = newDepositBal;\n        }\n\n        emit LogCFDPartyBalanceUpdate(msg.sender, _withdrawAmount, true, newDepositBal, market);\n    }\n\n    /* NOTE: Split off into modifier to work around 'stack too deep' error */\n    modifier assertWithdrawPreCond(uint _withdrawAmount) \n    {\n        require(_withdrawAmount >= 1, REASON_WITHDRAW_NOT_ENOUGH);\n        require(initiated == true, REASON_MUST_BE_INITIATED);\n        require(closed == false, REASON_MUST_NOT_BE_CLOSED);\n        require(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES);\n        require(isSelling(msg.sender) == false, REASON_MUST_NOT_BE_SELLER);\n        _;\n    }\n\n    /**\n     * @dev Parties can transfer contract ownership to another address by\n     *      calling this function.\n     * @param _newAddress Addreess of the new party to swap in.\n     */\n    function transferPosition(address _newAddress)\n        external\n        pre_cond(closed == false, REASON_MUST_NOT_BE_CLOSED)\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\n        pre_cond(isContractParty(_newAddress) == false, REASON_MUST_NOT_BE_PARTY)\n        pre_cond(isSelling(msg.sender) == false, REASON_MUST_NOT_BE_SELLER)\n    {\n        if (msg.sender == buyer) buyer = _newAddress;\n        else if (msg.sender == seller) seller = _newAddress;\n        else if (msg.sender == upgradeCalledBy) upgradeCalledBy = address(0);\n        ContractForDifferenceRegistry(cfdRegistryAddr).registerParty(_newAddress);\n        emit LogCFDTransferPosition(msg.sender, _newAddress);\n    }\n\n    /**\n     * @dev Position in a contract can be sold to another party. This function\n     *      makes the callers side available for sale. A party can buy the side\n     *      with the buy function.\n     * @param _desiredStrikePrice Sellers desired sell strike price\n     * @param _timeLimit Sale available until this time in UNIX epoch seconds\n     *                  (< now for no limit)\n     */\n    function sellPrepare(uint _desiredStrikePrice, uint _timeLimit)\n        external\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\n        // reject already marked selling by the caller\n        pre_cond(isSelling(msg.sender) == false, REASON_MUST_NOT_BE_SELLER)\n        pre_cond(_desiredStrikePrice > 0, REASON_MUST_BE_POSITIVE_PRICE)\n    {\n        // mark side on sale\n        uint timeLimit = timeLimitFutureOrZero(_timeLimit);\n        if (msg.sender == buyer) {\n            buyerSelling = true;\n            buyerSaleStrikePrice = _desiredStrikePrice;\n            buyerSaleTimeLimit = timeLimit;\n        } else if (msg.sender == seller) {\n            sellerSelling = true;\n            sellerSaleStrikePrice = _desiredStrikePrice;\n            sellerSaleTimeLimit = timeLimit;\n        }\n\n        ContractForDifferenceRegistry(cfdRegistryAddr).registerSale(msg.sender);\n        emit LogCFDSale(\n            msg.sender,\n            _desiredStrikePrice,\n            timeLimit\n        );\n    }\n\n    /**\n     * @dev Seller can update the price on the sale.\n     */\n    function sellUpdate(\n        uint _newPrice\n    )\n        external\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\n        pre_cond(isSelling(msg.sender), REASON_MUST_BE_SELLER)\n        pre_cond(_newPrice > 0, REASON_MUST_BE_POSITIVE_PRICE)\n    {\n        if (msg.sender == buyer) {\n            buyerSaleStrikePrice = _newPrice;\n        } else if (msg.sender == seller) {\n            sellerSaleStrikePrice = _newPrice;\n        }\n        emit LogCFDSaleUpdated(msg.sender, _newPrice);\n    }\n\n    /**\n     * @dev Party can update the strike price of an non-initialized contract\n     */\n    function changeStrikePrice(\n        uint _newStrikePrice\n    )\n        external\n        pre_cond(initiated == false, REASON_MUST_NOT_BE_INITIATED)\n        pre_cond(closed == false, REASON_MUST_NOT_BE_CLOSED)\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\n        pre_cond(_newStrikePrice > 0, REASON_MUST_BE_POSITIVE_PRICE)\n    {\n        strikePrice = _newStrikePrice;\n        buyerInitialStrikePrice = _newStrikePrice;\n        sellerInitialStrikePrice = _newStrikePrice;\n        emit LogCFDStrikePriceUpdated(msg.sender, _newStrikePrice);\n    }\n\n    /**\n     * @dev Cancel the for sale status setup by sellPrepare()\n     */\n    function sellCancel()\n        external\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\n        pre_cond(isSelling(msg.sender), REASON_MUST_BE_SELLER)\n    {\n        clearSale(msg.sender == buyer);\n        emit LogCFDSaleCancelled(msg.sender);\n    }\n\n    /**\n     * @dev Buy the side in the contract that is for sale.\n     *\n     * Fee of 0.5% of the notional is taken.\n     *\n     * @param _buyBuyerSide Buying the buyer side or the seller side?\n     * @param _value DAI amount\n     */\n    function buy(bool _buyBuyerSide, uint _value)\n        external\n        assertBuyPreCond(_buyBuyerSide)\n    {\n        uint fees = ContractForDifferenceLibrary.joinerFee(notionalAmountDai);\n        if (_value <= fees)\n            revert(REASON_FEES_NOT_ENOUGH);\n\n        // check sent collateral falls in the allowable range\n        uint collateralSent = _value.sub(fees);\n        if (!ContractForDifferenceLibrary.collateralInRange(notionalAmountDai, collateralSent))\n            revert(REASON_COLLATERAL_RANGE_FAILED);\n\n        uint marketPrice = latestPrice();\n        uint newStrikePrice = _buyBuyerSide ?\n            buyerSaleStrikePrice :\n            sellerSaleStrikePrice;\n\n        // check new parameters fall in the allowable range\n        if (!marketPriceInRange(\n            marketPrice,\n            _buyBuyerSide ? collateralSent : buyerDepositBalance,\n            _buyBuyerSide ? sellerDepositBalance : collateralSent,\n            newStrikePrice // buying at this strike price\n        )) {\n            revert(REASON_MARKET_PRICE_RANGE_FAILED);\n        }\n\n        // move ownership of sent DAI to the CFD\n        daiClaim(_value);\n        daiTransferToFees(fees);\n\n        // transfer to selling party\n        address sellingParty = _buyBuyerSide ? buyer : seller;\n        uint sellingPartyCollateral = buyTransferFunds(\n            _buyBuyerSide,\n            newStrikePrice,\n            sellingParty\n        );\n\n        // set new party and balances\n        uint remainingPartyDeposits = registry.getDAI().\n            balanceOf(address(this)).sub(collateralSent);\n\n        // new notional amount value\n        uint newNotional = ContractForDifferenceLibrary.calculateNewNotional(\n            notionalAmountDai,\n            strikePrice,\n            newStrikePrice\n        );\n\n        if (_buyBuyerSide) {\n            buyer = msg.sender;\n            buyerDepositBalance = collateralSent;\n            buyerInitialStrikePrice = newStrikePrice;\n            buyerInitialNotional = newNotional;\n            sellerDepositBalance = remainingPartyDeposits;\n        } else {\n            seller = msg.sender;\n            sellerDepositBalance = collateralSent;\n            sellerInitialStrikePrice = newStrikePrice;\n            sellerInitialNotional = newNotional;\n            buyerDepositBalance = remainingPartyDeposits;\n        }\n\n        strikePrice = newStrikePrice;\n        notionalAmountDai = newNotional;\n\n        clearSale(_buyBuyerSide);\n\n        // clean up upgradeCalledBy if the departing party had set that\n        if (upgradeCalledBy == sellingParty) {\n            upgradeCalledBy = address(0);\n        }\n\n        ContractForDifferenceRegistry(cfdRegistryAddr).registerParty(msg.sender);\n        emit LogCFDSold(msg.sender, sellingParty, newNotional, sellingPartyCollateral, _value, market);\n    }\n\n    /* NOTE: Split off into modifier to work around 'stack too deep' error */\n    modifier assertBuyPreCond(bool _buyBuyerSide) \n    {\n        require(isActive(), REASON_MUST_BE_ACTIVE);\n        require(isSelling(_buyBuyerSide ? buyer : seller), REASON_MUST_BE_ON_SALE);\n        require(isContractParty(msg.sender) == false, REASON_MUST_NOT_BE_PARTY);\n        _;\n    }\n\n    /**\n     * Does all transfers of funds related to the buy().\n     *\n     * Transfer logic split off in seperate function ONLY to workaround\n     * 'Stack too deep' limit.\n     */\n    function buyTransferFunds(\n        bool buyBuyerSide,\n        uint newStrikePrice,\n        address sellingParty\n    )\n        private\n        returns (uint sellingPartyCollateral)\n    {\n        // determine collateral amount to send to the selling party\n        sellingPartyCollateral = ContractForDifferenceLibrary.calculateCollateralAmount(\n            strikePrice,\n            newStrikePrice,\n            notionalAmountDai,\n            buyBuyerSide ? buyerDepositBalance : sellerDepositBalance,\n            buyBuyerSide\n        );\n\n        // send money to selling party\n        daiTransfer(sellingParty, sellingPartyCollateral);\n        emit LogCFDTransferFunds(sellingParty, sellingPartyCollateral);\n    }\n\n    /**\n     * @dev Daemons will call this routine when the market price has moved\n     *      enough that the closeRatio for this contract has been reached.\n     *      It can actually be called by anyone who is willing to pay the gas\n     *      for the liquidate. But if the market has moved past the liquidate\n     *      threshold the call will be rejected.\n     *\n     * This will disolve the contract and return each parties balance of\n     * collateral.\n     */\n    function liquidate()\n        external\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\n    {\n        uint marketPrice = latestPrice();\n\n        // #11 double check the 5% threshold was crossed, if not then REJECT\n        // (can only liquidate if out of range)\n        require(\n            !marketPriceInRange(\n                marketPrice,\n                buyerDepositBalance,\n                sellerDepositBalance,\n                strikePrice\n            ), \n            \"Liquidate threshold not yet reached\"\n        );\n\n        // fetch one of the cutoffs to determine which is the winner\n        uint buyerCutOff = ContractForDifferenceLibrary.cutOffPrice(\n            notionalAmountDai,\n            buyerDepositBalance,\n            strikePrice,\n            true\n        );\n\n        // if buyer cutoff still in range then buyer wins, otherwise seller\n        bool winnerIsBuyer = marketPrice > buyerCutOff;\n        address winner = winnerIsBuyer ? buyer : seller;\n\n        // winner takes all\n        uint remaining = registry.getDAI().balanceOf(address(this));\n        daiTransfer(winner, remaining);\n        emit LogCFDTransferFunds(winner, remaining);\n\n        closed = true;\n\n        emit LogCFDClosed(\n            winner,\n            winnerIsBuyer ? remaining : 0,\n            winnerIsBuyer ? 0 : remaining,\n            market\n        );\n    }\n\n    /**\n     * Force terminate executed by one party who will penalised 5% of their\n     * collateral. Then penalty will be sent to the counterparty.\n     */\n    function forceTerminate()\n        external\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\n    {\n        uint marketPrice = latestPrice();\n        bool forcingPartyIsBuyer = msg.sender == buyer;\n\n        uint buyerCollateral = ContractForDifferenceLibrary.calculateCollateralAmount(\n            strikePrice,\n            marketPrice,\n            notionalAmountDai,\n            buyerDepositBalance,\n            true\n        );\n        uint sellerCollateral = ContractForDifferenceLibrary.calculateCollateralAmount(\n            strikePrice,\n            marketPrice,\n            notionalAmountDai,\n            sellerDepositBalance,\n            false\n        );\n\n        //\n        // calculate and check the remainder - it should be equal to zero\n        //\n        // if not expected log the event and transfer the remainder to fees - it\n        //     will be sorted out manually\n        //\n        uint balanceRemainder = registry.getDAI().\n            balanceOf(address(this)).\n            sub(buyerCollateral).\n            sub(sellerCollateral);\n        if (balanceRemainder != 0) {\n            emit LogCFDRemainingBalanceUnexpected(balanceRemainder);\n        }\n        daiTransferToFees(balanceRemainder);\n\n        // penalise the force terminator 5% and give it to the counterparty\n        uint penalty = ContractForDifferenceLibrary.percentOf(\n            forcingPartyIsBuyer ? buyerCollateral : sellerCollateral,\n            FORCE_TERMINATE_PENALTY_PERCENT\n        );\n        if (forcingPartyIsBuyer) {\n            buyerCollateral = buyerCollateral.sub(penalty);\n            sellerCollateral = sellerCollateral.add(penalty);\n        } else {\n            buyerCollateral = buyerCollateral.add(penalty);\n            sellerCollateral = sellerCollateral.sub(penalty);\n        }\n\n        // Send collateral amounts back each party.\n        daiTransfer(buyer, buyerCollateral);\n        emit LogCFDTransferFunds(buyer, buyerCollateral);\n        daiTransfer(seller, sellerCollateral);\n        emit LogCFDTransferFunds(seller, sellerCollateral);\n\n        terminated = true;\n        closed = true;\n\n        if (forcingPartyIsBuyer)\n            emit LogCFDForceTerminated(buyer, buyerCollateral, seller, sellerCollateral, market);\n        else\n            emit LogCFDForceTerminated(seller, sellerCollateral, buyer, buyerCollateral, market);\n    }\n\n    /**\n     * @dev Upgrade contract to a new version. This involves creating a new CFD\n     *      at the latest contract set - transferring over all properties and\n     *      value from this one to the new one.\n     *      An upgrade requires a call to this function from both parties. Then\n     *      upgrade will happen when the second party makes the call.\n     */\n    function upgrade()\n        external\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\n        pre_cond(isSelling(msg.sender) == false, REASON_MUST_NOT_BE_SELLER)\n        pre_cond(msg.sender != upgradeCalledBy, REASON_UPGRADE_ALREADY_SET)\n        pre_cond(registry.allCFDs(address(this)) != registry.getCFDFactoryLatest(), REASON_UPGRADE_ALREADY_LATEST)\n    {\n        // 1st call to initiate upgrade process\n        if (upgradeCalledBy == address(0)) {\n            upgradeCalledBy = msg.sender;\n            return;\n        }\n\n        // if here then then this is the 2nd call, invoked by the opposite, so\n        // kick off the upgrade process\n        upgradeable = true;\n        address cfdFactoryLatest = registry.getCFDFactoryLatest();\n        address newCfd = address(ContractForDifferenceFactory(cfdFactoryLatest).createByUpgrade());\n        daiTransfer(newCfd, registry.getDAI().balanceOf(address(this)));\n        upgradeable = false;\n        closed = true;\n\n        emit LogCFDUpgraded(newCfd);\n    }\n\n    /**\n     * @dev Derive status from the state variables.\n     * @return Status reflecting the current state.\n     */\n    function status()\n        public\n        view\n        returns (Status)\n    {\n        if (closed == true)\n            return Status.CLOSED;\n        else if (initiated == false)\n            return Status.CREATED;\n        else if (isBuyerSelling() || isSellerSelling())\n            return Status.SALE;\n        else\n            return Status.INITIATED;\n    }\n\n    /**\n     * Get the latest read for the market of this CFD.\n     */\n    function latestPrice()\n        internal\n        view\n        returns (uint price)\n    {\n        uint marketPrice;\n        (marketPrice, ) = Feeds(feedsAddr).read(market);\n        return marketPrice;\n    }\n\n    /**\n     * @dev Checks if given parameters and given market price result in a price\n     *      inside an allowable range. This range is defined by the ContractForDifferenceLibrary.cutOffPrice\n     *      function formulas. The idea is that as parameters change - leverage,\n     *      market price etc., we must check the change doesn't result in a\n     *      liquidation event due to too little collateral.\n     *\n     * @param _marketPrice Current market price\n     * @return true if in range; false if not\n     */\n\n    function marketPriceInRange(\n        uint _marketPrice,\n        uint _buyerDepositBalance,\n        uint _sellerDepositBalance,\n        uint _strikePrice\n    )\n        public\n        view\n        returns (bool inRange)\n    {\n        uint buyerCutOff = ContractForDifferenceLibrary.cutOffPrice(\n            notionalAmountDai,\n            _buyerDepositBalance,\n            _strikePrice,\n            true\n        );\n        uint sellerCutOff = ContractForDifferenceLibrary.cutOffPrice(\n            notionalAmountDai,\n            _sellerDepositBalance,\n            _strikePrice,\n            false\n        );\n        inRange = _marketPrice > buyerCutOff && _marketPrice < sellerCutOff;\n    }\n\n   /**\n     * @dev Calculate new notional amount after a side has been sold at a new\n     *      strike price.\n     *\n     * Formula is:\n     *  N2 = N1 * S2 / S1\n     * Where:\n     *  N1 = previous notional\n     *  S1 = previous strike price\n     *  S2 = sale strike price\n     *\n     * @param _oldNotional Existing notional.\n     * @param _oldStrikePrice Existing strike price.\n     * @param _newStrikePrice New / Sale strike price.\n     * @return newNotional Result of the calculation.\n     */\n    function calculateNewNotional(\n        uint _oldNotional,\n        uint _oldStrikePrice,\n        uint _newStrikePrice\n    )\n        public\n        pure\n        returns (uint newNotional)\n    {\n        newNotional = ContractForDifferenceLibrary.calculateNewNotional(\n            _oldNotional,\n            _oldStrikePrice,\n            _newStrikePrice\n        );\n    }\n\n    /**\n     * @dev Calculate the collateral amount for one party given the current\n     *      market price and original strike price, notional amount and the\n     *      amount the party has deposited into the contract.\n     *\n     * @param _marketPrice Current market price\n     * @param _strikePrice CFD strike price\n     * @param _notionalAmount CFD notional amount\n     * @param _depositBalance Balances of deposits into the contract\n     * @param _isBuyer Buyer or Seller / Long or short party?\n     *\n     * @return collateral Amount of collateral for the party\n     */\n    function calculateCollateralAmount(\n        uint _strikePrice,\n        uint _marketPrice,\n        uint _notionalAmount,\n        uint _depositBalance,\n        bool _isBuyer\n    )\n        public\n        pure\n        returns (uint collateral)\n    {\n        collateral = ContractForDifferenceLibrary.calculateCollateralAmount(\n            _strikePrice,\n            _marketPrice,\n            _notionalAmount,\n            _depositBalance,\n            _isBuyer\n        );\n    }\n\n    /**\n     * @dev Calculate the cut off price for buyer or seller.\n     *\n     * This is the price that if passed would raise a liquidation event.\n     *\n     * Base Formulas are:\n     *     Buyer:  1.05 * S - depositBalanceLong  * S / N\n     *     Seller: 0.95 * S + depositBalanceShort * S / N\n     *\n     * However for Solidity we need to adjust parts by FACTOR_UINT to ensure\n     * no fractions.\n     *\n     * @param _notionalAmountDai Contract notional amount\n     * @param _depositBalance Balance of deposits for one party\n     *\n     * @return cut off price\n     */\n    function cutOffPrice(\n        uint _notionalAmountDai,\n        uint _depositBalance,\n        uint _strikePrice,\n        bool _calcForBuyerSide\n    )\n        public\n        pure\n        returns (uint price)\n    {\n        price = ContractForDifferenceLibrary.cutOffPrice(\n            _notionalAmountDai,\n            _depositBalance,\n            _strikePrice,\n            _calcForBuyerSide\n        );\n    }\n\n    /**\n     * Creator fee - 0.3% of notional.\n     */\n    function creatorFee(uint _notional) public pure returns (uint fee) {\n        fee = ContractForDifferenceLibrary.creatorFee(_notional);\n    }\n\n    /**\n     * Joiner (deposit or buy) percentage fee - 0.5% of notional.\n     */\n    function joinerFee(uint _notional) public pure returns (uint fee) {\n        fee = ContractForDifferenceLibrary.joinerFee(_notional);\n    }\n\n    /**\n     * @dev Calculate the change in contract value based on the price change.\n     * @param _currentPrice Current market price\n     */\n    function changeInDai(\n        uint _strikePrice,\n        uint _currentPrice,\n        uint _notionalAmount\n    )\n        public\n        pure\n        returns (uint change)\n    {\n        change = ContractForDifferenceLibrary.changeInDai(\n            _strikePrice,\n            _currentPrice,\n            _notionalAmount\n        );\n    }\n\n    /**\n     * @dev Return a percentage change comparing a value with a new value.\n     * @param _value The existing value to compare against\n     * @param _newValue The new value to compare the change against\n     * @return Percentage change (eg. _value = 100, _newValue = 90 then return 10)\n     */\n    function percentChange(uint _value, uint _newValue)\n        public\n        pure\n        returns (uint percent)\n    {\n        percent = ContractForDifferenceLibrary.percentChange(_value, _newValue);\n    }\n\n    /**\n     * @dev Return a percentage of a given amount.\n     * @param _amount Amount to calculate the percentage of\n     * @param _percent Percent amount (1 - 100)\n     */\n    function percentOf(uint _amount, uint _percent)\n        public\n        pure\n        returns (uint adjusted)\n    {\n        adjusted = ContractForDifferenceLibrary.percentOf(_amount, _percent);\n    }\n\n    /**\n     * Utility that given a time limit will preverve it if in the future OR\n     * set it to 0 if it's in the present or past.\n     */\n    function timeLimitFutureOrZero(\n        uint _timeLimit\n    )\n        private\n        view // not pure because of 'now'\n        returns(uint timeLimit)\n    {\n        timeLimit = (_timeLimit > now) ? _timeLimit : 0;\n    }\n\n    /**\n     * Clear all sale related state.\n     */\n    function clearSale(bool _clearBuyerSide) private {\n        if (_clearBuyerSide) {\n            buyerSaleStrikePrice = 0;\n            buyerSaleTimeLimit = 0;\n            buyerSelling = false;\n        } else {\n            sellerSaleStrikePrice = 0;\n            sellerSaleTimeLimit = 0;\n            sellerSelling = false;\n        }\n    }\n\n    /**\n     * Transfer DAI to an address.\n     */\n    function daiTransfer(address _to, uint _value) private {\n        require(\n            registry.getDAI().transfer(_to, _value),\n            REASON_DAI_TRANSFER_FAILED\n        );\n    }\n\n    /**\n     * Transfer DAI to the fees address.\n     */\n    function daiTransferToFees(uint _value) private {\n        daiTransfer(registry.getFees(), _value);\n    }\n\n    /**\n     * Claim DAI - ie. move approved DAI to this CFD contract.\n     */\n    function daiClaim(uint _value) private {\n        require(\n            registry.getDAI().transferFrom(msg.sender, address(this), _value),\n            REASON_DAI_TRANSFER_FAILED\n        );\n    }\n\n}\n",
  "sourcePath": "/home/julien/0xFutures/protocol-infura/contracts/cfd/ContractForDifference.sol",
  "compiler": {
    "name": "solc",
    "version": "0.5.0+commit.1d4f565a.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.2",
  "updatedAt": "2019-03-04T00:53:41.622Z",
  "devdoc": {
    "methods": {
      "buy(bool,uint256)": {
        "details": "Buy the side in the contract that is for sale.     * Fee of 0.5% of the notional is taken.",
        "params": {
          "_buyBuyerSide": "Buying the buyer side or the seller side?",
          "_value": "DAI amount"
        }
      },
      "calculateCollateralAmount(uint256,uint256,uint256,uint256,bool)": {
        "details": "Calculate the collateral amount for one party given the current     market price and original strike price, notional amount and the     amount the party has deposited into the contract.",
        "params": {
          "_depositBalance": "Balances of deposits into the contract",
          "_isBuyer": "Buyer or Seller / Long or short party?",
          "_marketPrice": "Current market price",
          "_notionalAmount": "CFD notional amount",
          "_strikePrice": "CFD strike price"
        },
        "return": "collateral Amount of collateral for the party"
      },
      "calculateNewNotional(uint256,uint256,uint256)": {
        "details": "Calculate new notional amount after a side has been sold at a new     strike price.     * Formula is: N2 = N1 * S2 / S1 Where: N1 = previous notional S1 = previous strike price S2 = sale strike price",
        "params": {
          "_newStrikePrice": "New / Sale strike price.",
          "_oldNotional": "Existing notional.",
          "_oldStrikePrice": "Existing strike price."
        },
        "return": "newNotional Result of the calculation."
      },
      "cancelNew()": {
        "details": "Cancels a newly created contract refunding the balance to the party     that created the contract. This can only be called before a contract     is initiated. ie. between the create() and deposit() calls."
      },
      "changeInDai(uint256,uint256,uint256)": {
        "details": "Calculate the change in contract value based on the price change.",
        "params": {
          "_currentPrice": "Current market price"
        }
      },
      "changeStrikePrice(uint256)": {
        "details": "Party can update the strike price of an non-initialized contract"
      },
      "create(address,address,address,address,bytes32,uint256,uint256,bool)": {
        "details": "Create a new CFDinstance specifying the terms of the contract.     * Fee of 0.3% of the notional is taken.     * Therefore the intial deposit is _value minus these fees.",
        "params": {
          "_cfdRegistryAddr": "CFD Registry contract address",
          "_feedsAddr": "Feeds address",
          "_isBuyer": "Flag indicating if the contract creator wants to take the           buyer (true) or the seller side (false).",
          "_marketId": "Contract is for prices on this market",
          "_notionalAmountDai": "Contract amount",
          "_partyAddr": "Address of the party creating the contract",
          "_registryAddr": "Registry contract address",
          "_strikePrice": "Agreed initial price for the contract (compatible with Feeds stored price - see Feeds.decimals() adjustment)"
        }
      },
      "createByUpgrade(address,address,address,address)": {
        "details": "Create a new CFDinstance from a previous CFD instance. This is part     of the upgrade process (see CFD.upgrade()).",
        "params": {
          "_cfdAddr": "Address of the existing / old CFD",
          "_cfdRegistryAddr": "Address of CFDRegistry contract",
          "_feedsAddr": "Address to send fees to",
          "_registryAddr": "Address of Registry contract"
        }
      },
      "cutOffPrice(uint256,uint256,uint256,bool)": {
        "details": "Calculate the cut off price for buyer or seller.     * This is the price that if passed would raise a liquidation event.     * Base Formulas are:    Buyer:  1.05 * S - depositBalanceLong  * S / N    Seller: 0.95 * S + depositBalanceShort * S / N     * However for Solidity we need to adjust parts by FACTOR_UINT to ensure no fractions.",
        "params": {
          "_depositBalance": "Balance of deposits for one party",
          "_notionalAmountDai": "Contract notional amount"
        },
        "return": "cut off price"
      },
      "deposit(uint256)": {
        "details": "Counterparty deposits their funds into the contract thereby joining and initiating the contract.     * Fee of 0.5% of the notional is taken.     * Therefore the intial deposit is _value minus these fees."
      },
      "isActive()": {
        "details": "Contract has been initiated (has 2 parties) and not yet terminated.",
        "return": "true if contract is active"
      },
      "isBuyerSelling()": {
        "details": "Is buyer / long party selling.",
        "return": "true if buyer has side up for sale"
      },
      "isContractParty(address)": {
        "details": "Check if the given address is one of the 2 parties of the contract.",
        "params": {
          "_party": "Address to check"
        },
        "return": "true if _party is either the buyer or seller."
      },
      "isSellerSelling()": {
        "details": "Is seller / short party selling.",
        "return": "true if seller has side up for sale"
      },
      "isSelling(address)": {
        "details": "If the given party is selling one side of the contract.",
        "return": "true if the given party is selling"
      },
      "liquidate()": {
        "details": "Daemons will call this routine when the market price has moved     enough that the closeRatio for this contract has been reached.     It can actually be called by anyone who is willing to pay the gas     for the liquidate. But if the market has moved past the liquidate     threshold the call will be rejected.     * This will disolve the contract and return each parties balance of collateral."
      },
      "marketPriceInRange(uint256,uint256,uint256,uint256)": {
        "details": "Checks if given parameters and given market price result in a price     inside an allowable range. This range is defined by the ContractForDifferenceLibrary.cutOffPrice     function formulas. The idea is that as parameters change - leverage,     market price etc., we must check the change doesn't result in a     liquidation event due to too little collateral.",
        "params": {
          "_marketPrice": "Current market price"
        },
        "return": "true if in range; false if not"
      },
      "percentChange(uint256,uint256)": {
        "details": "Return a percentage change comparing a value with a new value.",
        "params": {
          "_newValue": "The new value to compare the change against",
          "_value": "The existing value to compare against"
        },
        "return": "Percentage change (eg. _value = 100, _newValue = 90 then return 10)"
      },
      "percentOf(uint256,uint256)": {
        "details": "Return a percentage of a given amount.",
        "params": {
          "_amount": "Amount to calculate the percentage of",
          "_percent": "Percent amount (1 - 100)"
        }
      },
      "sellCancel()": {
        "details": "Cancel the for sale status setup by sellPrepare()"
      },
      "sellPrepare(uint256,uint256)": {
        "details": "Position in a contract can be sold to another party. This function     makes the callers side available for sale. A party can buy the side     with the buy function.",
        "params": {
          "_desiredStrikePrice": "Sellers desired sell strike price",
          "_timeLimit": "Sale available until this time in UNIX epoch seconds                 (< now for no limit)"
        }
      },
      "sellUpdate(uint256)": {
        "details": "Seller can update the price on the sale."
      },
      "status()": {
        "details": "Derive status from the state variables.",
        "return": "Status reflecting the current state."
      },
      "topup(uint256)": {
        "details": "Party adds more funds to the contract thereby increasing their     deposit balance.",
        "params": {
          "_value": "DAI amount"
        }
      },
      "transferPosition(address)": {
        "details": "Parties can transfer contract ownership to another address by     calling this function.",
        "params": {
          "_newAddress": "Addreess of the new party to swap in."
        }
      },
      "upgrade()": {
        "details": "Upgrade contract to a new version. This involves creating a new CFD     at the latest contract set - transferring over all properties and     value from this one to the new one.     An upgrade requires a call to this function from both parties. Then     upgrade will happen when the second party makes the call."
      },
      "withdraw(uint256)": {
        "details": "Party withdraws funds from the contract.     They can only withdraw down to an amount that leaves the collateral     to notional difference at 20% or more.",
        "params": {
          "_withdrawAmount": "Amount to withdraw from the deposits balance."
        }
      }
    },
    "title": "Contract for difference * Contract for difference for a given market between a \"buyer\" (long position) and \"seller\" (short position)."
  },
  "userdoc": {
    "methods": {
      "creatorFee(uint256)": {
        "notice": "Creator fee - 0.3% of notional."
      },
      "forceTerminate()": {
        "notice": "Force terminate executed by one party who will penalised 5% of their collateral. Then penalty will be sent to the counterparty."
      },
      "getCfdAttributes()": {
        "notice": "Returns an array with all the attributes of the contract (Had to split in 3 functions because of the stack limit) Max number of return values == 8"
      },
      "joinerFee(uint256)": {
        "notice": "Joiner (deposit or buy) percentage fee - 0.5% of notional."
      }
    }
  }
}