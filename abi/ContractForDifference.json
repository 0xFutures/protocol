{
  "contractName": "ContractForDifference",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "notionalAmountDai",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "seller",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "feedsAddr",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "terminated",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "FORCE_TERMINATE_PENALTY_PERCENT",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerSaleStrikePrice",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerInitialNotional",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerDepositBalance",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "upgradeCalledBy",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "upgradeable",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "MINIMUM_NOTIONAL_AMOUNT_DAI",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "closed",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerSaleTimeLimit",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerInitialStrikePrice",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyer",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerInitialNotional",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerSaleStrikePrice",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "market",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "cfdRegistryAddr",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerDepositBalance",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "initiated",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerSelling",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "strikePrice",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerInitialStrikePrice",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerSaleTimeLimit",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerSelling",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "notionalAmountDai",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "deposit",
          "type": "uint256"
        }
      ],
      "name": "LogCFDCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "joiner",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amountSent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "notionalAmountDai",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "strikePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "buyerDepositBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "sellerDepositBalance",
          "type": "uint256"
        }
      ],
      "name": "LogCFDInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "LogCFDTransferPosition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        }
      ],
      "name": "LogCFDCanceledNew",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "newStrikePrice",
          "type": "uint256"
        }
      ],
      "name": "LogCFDStrikePriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "saleStrikePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "timeLimit",
          "type": "uint256"
        }
      ],
      "name": "LogCFDSale",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        }
      ],
      "name": "LogCFDSaleCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "LogCFDSaleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "newNotional",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "sellerAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "buyerDeposit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        }
      ],
      "name": "LogCFDSold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "isWithdraw",
          "type": "bool"
        },
        {
          "indexed": false,
          "name": "newBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        }
      ],
      "name": "LogCFDPartyBalanceUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LogCFDTransferFunds",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "buyerCollateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "sellerCollateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        }
      ],
      "name": "LogCFDClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "terminator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "terminatorAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "otherParty",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "otherPartyAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        }
      ],
      "name": "LogCFDForceTerminated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "newCFD",
          "type": "address"
        }
      ],
      "name": "LogCFDUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "remainder",
          "type": "uint256"
        }
      ],
      "name": "LogCFDRemainingBalanceUnexpected",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isActive",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isBuyerSelling",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isSellerSelling",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_party",
          "type": "address"
        }
      ],
      "name": "isSelling",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_party",
          "type": "address"
        }
      ],
      "name": "isContractParty",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_registryAddr",
          "type": "address"
        },
        {
          "name": "_cfdRegistryAddr",
          "type": "address"
        },
        {
          "name": "_feedsAddr",
          "type": "address"
        },
        {
          "name": "_partyAddr",
          "type": "address"
        },
        {
          "name": "_marketId",
          "type": "bytes32"
        },
        {
          "name": "_strikePrice",
          "type": "uint256"
        },
        {
          "name": "_notionalAmountDai",
          "type": "uint256"
        },
        {
          "name": "_isBuyer",
          "type": "bool"
        }
      ],
      "name": "create",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_cfdAddr",
          "type": "address"
        },
        {
          "name": "_registryAddr",
          "type": "address"
        },
        {
          "name": "_cfdRegistryAddr",
          "type": "address"
        },
        {
          "name": "_feedsAddr",
          "type": "address"
        }
      ],
      "name": "createByUpgrade",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCfdAttributes",
      "outputs": [
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "bytes32"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "bool"
        },
        {
          "name": "",
          "type": "bool"
        },
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCfdAttributes2",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCfdAttributes3",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        },
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "cancelNew",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "topup",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_newAddress",
          "type": "address"
        }
      ],
      "name": "transferPosition",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_desiredStrikePrice",
          "type": "uint256"
        },
        {
          "name": "_timeLimit",
          "type": "uint256"
        }
      ],
      "name": "sellPrepare",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_newPrice",
          "type": "uint256"
        }
      ],
      "name": "sellUpdate",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_newStrikePrice",
          "type": "uint256"
        }
      ],
      "name": "changeStrikePrice",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "sellCancel",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_buyBuyerSide",
          "type": "bool"
        },
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "liquidate",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "forceTerminate",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "upgrade",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "status",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_marketPrice",
          "type": "uint256"
        },
        {
          "name": "_buyerDepositBalance",
          "type": "uint256"
        },
        {
          "name": "_sellerDepositBalance",
          "type": "uint256"
        },
        {
          "name": "_strikePrice",
          "type": "uint256"
        }
      ],
      "name": "marketPriceInRange",
      "outputs": [
        {
          "name": "inRange",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_oldNotional",
          "type": "uint256"
        },
        {
          "name": "_oldStrikePrice",
          "type": "uint256"
        },
        {
          "name": "_newStrikePrice",
          "type": "uint256"
        }
      ],
      "name": "calculateNewNotional",
      "outputs": [
        {
          "name": "newNotional",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_strikePrice",
          "type": "uint256"
        },
        {
          "name": "_marketPrice",
          "type": "uint256"
        },
        {
          "name": "_notionalAmount",
          "type": "uint256"
        },
        {
          "name": "_depositBalance",
          "type": "uint256"
        },
        {
          "name": "_isBuyer",
          "type": "bool"
        }
      ],
      "name": "calculateCollateralAmount",
      "outputs": [
        {
          "name": "collateral",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_notionalAmountDai",
          "type": "uint256"
        },
        {
          "name": "_depositBalance",
          "type": "uint256"
        },
        {
          "name": "_strikePrice",
          "type": "uint256"
        },
        {
          "name": "_calcForBuyerSide",
          "type": "bool"
        }
      ],
      "name": "cutOffPrice",
      "outputs": [
        {
          "name": "price",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_notional",
          "type": "uint256"
        }
      ],
      "name": "creatorFee",
      "outputs": [
        {
          "name": "fee",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_notional",
          "type": "uint256"
        }
      ],
      "name": "joinerFee",
      "outputs": [
        {
          "name": "fee",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_strikePrice",
          "type": "uint256"
        },
        {
          "name": "_currentPrice",
          "type": "uint256"
        },
        {
          "name": "_notionalAmount",
          "type": "uint256"
        }
      ],
      "name": "changeInDai",
      "outputs": [
        {
          "name": "change",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_value",
          "type": "uint256"
        },
        {
          "name": "_newValue",
          "type": "uint256"
        }
      ],
      "name": "percentChange",
      "outputs": [
        {
          "name": "percent",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_amount",
          "type": "uint256"
        },
        {
          "name": "_percent",
          "type": "uint256"
        }
      ],
      "name": "percentOf",
      "outputs": [
        {
          "name": "adjusted",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "bytecode": "",
  "deployedBytecode": "",
  "sourceMap": "684:40858:5:-;;;5045:29;;;5457:36;;;;5642:23;5:2:-1;;;;30:1;27;20:12;5:2;5642:23:5;684:40858;;;;;;",
  "deployedSourceMap": "684:40858:5:-;;;;;;;;;-1:-1:-1;;;684:40858:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4358:29;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4358:29:5;;;;;;;;;;;;;;;;;;;;4266:21;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4266:21:5;;;;;;;;-1:-1:-1;;;;;4266:21:5;;;;;;;;;;;;;;5539:24;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5539:24:5;;;;38785:346;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;38785:346:5;;;;;;;;;5114:22;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5114:22:5;;;;;;;;;;;;;;;;;;;;;;21168:506;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;21168:506:5;;;;;;;4014:56;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4014:56:5;;;;4822:32;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4822:32:5;;;;33271:367;;8:9:-1;5:2;;;30:1;27;20:12;5:2;33271:367:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4433:33;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4433:33:5;;;;5815:109;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5815:109:5;;;;10096:1095;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;10096:1095:5;-1:-1:-1;;;;;10096:1095:5;;;;;;;;;;;;;;;;;;;;27630:1387;;8:9:-1;5:2;;;30:1;27;20:12;5:2;27630:1387:5;;;;11769:455;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11769:455:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4781:32;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4781:32:5;;;;16438:1712;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;16438:1712:5;;;;;35704:378;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;35704:378:5;;;;;;;;;15057:1091;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;15057:1091:5;;;;;5457:36;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5457:36:5;;;;37770:419;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;37770:419:5;;;;;;;;;;;;;5293:31;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5293:31:5;;;;6330:165;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6330:165:5;;;;4077:59;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4077:59:5;;;;14439:453;;8:9:-1;5:2;;;30:1;27;20:12;5:2;14439:453:5;;;;7030:129;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;7030:129:5;-1:-1:-1;;;;;7030:129:5;;;;;5081:26;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5081:26:5;;;;8031:1663;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;8031:1663:5;-1:-1:-1;;;;;8031:1663:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;36681:488;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;36681:488:5;;;;;;;;;;;;;;;18865:713;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;18865:713:5;-1:-1:-1;;;;;18865:713:5;;;;;4861:30;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4861:30:5;;;;4623:36;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4623:36:5;;;;21778:587;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;21778:587:5;;;;;4205:20;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4205:20:5;;;;4394:32;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4394:32:5;;;;4900:33;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4900:33:5;;;;38255:142;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;38255:142:5;;;;;34475:708;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;34475:708:5;;;;;;;;;;;5572:24;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5572:24:5;;;;12230:189;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12230:189:5;;;;;;;;;;;;;-1:-1:-1;;;;;12230:189:5;;;;;;;;;;;;;;;;4328:21;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4328:21:5;;;;19995:1093;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;19995:1093:5;;;;;;;38490:140;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;38490:140:5;;;;;29187:2476;;8:9:-1;5:2;;;30:1;27;20:12;5:2;29187:2476:5;;;;5502:30;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5502:30:5;;;;6045:161;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6045:161:5;;;;39446:209;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;39446:209:5;;;;;;;4743:31;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4743:31:5;;;;5045:29;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5045:29:5;;;;39843:203;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;39843:203:5;;;;;;;4980:24;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4980:24:5;;;;12690:1487;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;12690:1487:5;;;;;11388:375;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11388:375:5;;;;;;;;-1:-1:-1;;;;;11388:375:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4551:23;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4551:23:5;;;;4581:35;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4581:35:5;;;;6641:181;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;6641:181:5;-1:-1:-1;;;;;6641:181:5;;;;;32050:1089;;8:9:-1;5:2;;;30:1;27;20:12;5:2;32050:1089:5;;;;4940:31;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4940:31:5;;;;22964:2872;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;22964:2872:5;;;;;;;;;22454:258;;8:9:-1;5:2;;;30:1;27;20:12;5:2;22454:258:5;;;;5011:25;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5011:25:5;;;;4358:29;;;;:::o;4266:21::-;;;-1:-1:-1;;;;;4266:21:5;;:::o;5539:24::-;;;-1:-1:-1;;;;;5539:24:5;;:::o;38785:346::-;38949:11;38987:136;39042:12;39069:13;39097:15;38987:40;:136::i;:::-;38978:145;38785:346;-1:-1:-1;;;;38785:346:5:o;5114:22::-;;;;;;;;;:::o;21168:506::-;21256:10;:8;:10::i;:::-;21268:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;21268:21:5;;;;;320:26:0;;;;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21309:21:5;21319:10;21309:9;:21::i;:::-;21332;;;;;;;;;;;;;;;;;;320:26:0;;;;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;-1:-1:-1;21388:29:5;;;;;;;;;;;;;;;;;21385:1;21373:13;;;21388:29;21373:13;320:26:0;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;-1:-1:-1;21453:5:5;;-1:-1:-1;;;;;21453:5:5;21439:10;:19;21435:176;;;21475:20;:32;;;21435:176;;;21543:6;;-1:-1:-1;;;;;21543:6:5;21529:10;:20;21525:86;;;21566:21;:33;;;21525:86;21626:40;;;21644:10;21626:40;;;;;;;;;;;;;;;;;;;;;357:1:0;;;;21168:506:5;;;:::o;4014:56::-;4069:1;4014:56;:::o;4822:32::-;;;;:::o;33271:367::-;33365:6;;33337;;33365;;;;;:14;;33375:4;33365:14;33361:269;;;-1:-1:-1;33401:13:5;33394:20;;33361:269;33434:9;;;;;;;:18;;33430:200;;-1:-1:-1;33474:14:5;33467:21;;33430:200;33508:16;:14;:16::i;:::-;:37;;;;33528:17;:15;:17::i;:::-;33504:126;;;-1:-1:-1;33567:11:5;33560:18;;33504:126;-1:-1:-1;33614:16:5;33504:126;33271:367;:::o;4433:33::-;;;;:::o;5815:109::-;5880:9;;5856:4;;5880:9;;;;;:17;;5893:4;5880:17;:36;;;;-1:-1:-1;5901:6:5;;;;;;;:15;5880:36;5873:43;;5815:109;:::o;10096:1095::-;10283:28;10336:8;10283:62;;10367:6;-1:-1:-1;;;;;10367:13:5;;:15;;;;;-1:-1:-1;;;10367:15:5;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10367:15:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10367:15:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10367:15:5;10358:6;:24;10413:26;;;;;;;;-1:-1:-1;;;;;10413:24:5;;;;;:26;;;;;10367:15;;10413:26;;;;;;;:24;:26;;;5:2:-1;;;;30:1;27;20:12;5:2;10413:26:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10413:26:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10413:26:5;10393:17;:46;10464:20;;;;;;;;-1:-1:-1;;;;;10464:18:5;;;;;:20;;;;;10413:26;;10464:20;;;;;;;:18;:20;;;5:2:-1;;;;30:1;27;20:12;5:2;10464:20:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10464:20:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10464:20:5;10450:11;:34;10503:14;;;;;;;;-1:-1:-1;;;;;10503:12:5;;;;;:14;;;;;10464:20;;10503:14;;;;;;;:12;:14;;;5:2:-1;;;;30:1;27;20:12;5:2;10503:14:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10503:14:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10503:14:5;10495:5;:22;;-1:-1:-1;;;;;;10495:22:5;-1:-1:-1;;;;;10495:22:5;;;;;;10537:15;;;;;;;;:13;;;;;;:15;;;;;10503:14;;10537:15;;;;;;;;:13;:15;;;5:2:-1;;;;30:1;27;20:12;5:2;10537:15:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10537:15:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10537:15:5;10528:6;:24;;-1:-1:-1;;;;;;10528:24:5;-1:-1:-1;;;;;10528:24:5;;;;;;10587:28;;;;;;;;:26;;;;;;:28;;;;;10537:15;;10587:28;;;;;;;;:26;:28;;;5:2:-1;;;;30:1;27;20:12;5:2;10587:28:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10587:28:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10587:28:5;10565:19;:50;10649:29;;;;;;;;-1:-1:-1;;;;;10649:27:5;;;;;:29;;;;;10587:28;;10649:29;;;;;;;:27;:29;;;5:2:-1;;;;30:1;27;20:12;5:2;10649:29:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10649:29:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10649:29:5;10626:20;:52;;;10715:32;;;;;;;;-1:-1:-1;;;;;10715:30:5;;;;;:32;;;;10649:29;;10715:32;;;;;;;:30;:32;;;5:2:-1;;;;30:1;27;20:12;5:2;10715:32:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10715:32:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10715:32:5;10689:23;:58;10783:29;;;;;;;;-1:-1:-1;;;;;10783:27:5;;;;;:29;;;;;10715:32;;10783:29;;;;;;;:27;:29;;;5:2:-1;;;;30:1;27;20:12;5:2;10783:29:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10783:29:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10783:29:5;10760:20;:52;10847:30;;;;;;;;-1:-1:-1;;;;;10847:28:5;;;;;:30;;;;;10783:29;;10847:30;;;;;;;:28;:30;;;5:2:-1;;;;30:1;27;20:12;5:2;10847:30:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10847:30:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10847:30:5;10823:21;:54;10915:33;;;;;;;;-1:-1:-1;;;;;10915:31:5;;;;;:33;;;;;10847:30;;10915:33;;;;;;;:31;:33;;;5:2:-1;;;;30:1;27;20:12;5:2;10915:33:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10915:33:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10915:33:5;10888:24;:60;10961:15;:34;;-1:-1:-1;;;;;10961:34:5;;;-1:-1:-1;;;;;;10961:34:5;;;;;;;;11006:8;:34;;;;;;;;;;;11051:9;:22;;;;;;;;;;;;;;11086:9;:16;;-1:-1:-1;;11086:16:5;;;;;10961:34;11176:6;11115:68;;;-1:-1:-1;;;;;11115:68:5;;11176:6;;;11115:68;;;;;11145:15;;;;;11115:60;;:68;;;;;10961:15;;11115:68;;;;;;;;10961:15;11145;11115:68;;;5:2:-1;;;;30:1;27;20:12;5:2;11115:68:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;11115:68:5;;;;10096:1095;;;;;:::o;27630:1387::-;27738:16;28250;28521:18;28578:14;28667;27687:10;:8;:10::i;:::-;27699:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;27699:21:5;;;;;320:26:0;;;;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;;27757:13:5;:11;:13::i;:::-;27738:32;;27933:170;27970:11;28000:19;;28038:20;;28077:11;;27933:18;:170::i;:::-;27932:171;27910:257;;;;;-1:-1:-1;;;;;27910:257:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;28269:162;28324:17;;28356:19;;28390:11;;28416:4;28269:40;:162::i;:::-;28250:181;;28556:11;28542;:25;28521:46;;28595:13;:30;;28619:6;;-1:-1:-1;;;;;28619:6:5;28595:30;;;28611:5;;-1:-1:-1;;;;;28611:5:5;28595:30;28578:47;;28684:8;;;;;;;;;-1:-1:-1;;;;;28684:8:5;-1:-1:-1;;;;;28684:15:5;;:17;;;;;-1:-1:-1;;;28684:17:5;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;28684:17:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;28684:17:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;28684:17:5;:33;;;-1:-1:-1;;;;;28684:33:5;;28712:4;28684:33;;;;;;-1:-1:-1;;;;;28684:27:5;;;;;;:33;;;;;:17;;:33;;;;;;;;:27;:33;;;5:2:-1;;;;30:1;27;20:12;5:2;28684:33:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;28684:33:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;28684:33:5;;-1:-1:-1;28728:30:5;28740:6;28684:33;28728:11;:30::i;:::-;28774:38;;;-1:-1:-1;;;;;28774:38:5;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;28774:38:5;;;;;;;;;;28825:6;:13;;-1:-1:-1;;28825:13:5;;;;;28856:153;28883:6;28904:13;:29;;28932:1;28904:29;;;28920:9;28904:29;28948:13;:29;;28968:9;28948:29;;;28964:1;28948:29;28992:6;;28856:153;;;-1:-1:-1;;;;;28856:153:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27630:1387;;;;;;;:::o;11769:455::-;11932:20;;11967:21;;12003:19;;12037:20;;12072;;12107:21;;12143:23;;12181:24;;11769:455;;;;;;;;:::o;4781:32::-;;;;:::o;16438:1712::-;16560:12;16605:22;16968:18;17035:16;17391:15;16527;18334:1;18315:15;:20;;18337:26;;;;;;;;;;;;;;;;;;;;;;;18307:57;;;;;;;-1:-1:-1;;;;;18307:57:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;18307:57:5;-1:-1:-1;18383:9:5;;18402:24;;;;;;;;;;;;;;;;;;18383:9;;;;;:17;;18396:4;18383:17;18375:52;;;;-1:-1:-1;;;;;18375:52:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;18375:52:5;-1:-1:-1;18446:6:5;;18463:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;18463:25:5;;;;;18446:6;;;;;:15;18438:51;;;;-1:-1:-1;;;;;18438:51:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;18438:51:5;;18508:27;18524:10;18508:15;:27::i;:::-;18537:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;18537:28:5;;;;-1:-1:-1;;;;;18537:28:5;;;18500:66;;;;;;;-1:-1:-1;;;;;18500:66:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;18500:66:5;;18585:21;18595:10;18585:9;:21::i;:::-;18617:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;18617:25:5;;;;;18585:30;18577:66;;;;-1:-1:-1;;;;;18577:66:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;18577:66:5;-1:-1:-1;16589:5:5;;-1:-1:-1;;;;;16589:5:5;16575:10;:19;;-1:-1:-1;16575:19:5;16630:52;;16662:20;;16630:52;;;16640:19;;16630:52;16605:77;;16788:17;16770:15;:35;16766:88;;;16827:26;;;;;;;;;;;;;;;;;;;;;;;;16820:34;;-1:-1:-1;;;;;16820:34:5;;;;;;;;;;;;;;;;16827:26;;16820:34;;;;;;;;16827:26;16820:34;;16827:26;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;16766:88:5;17009:15;16989:17;:35;16968:56;;17054:13;:11;:13::i;:::-;17035:32;;17083:227;17116:11;17142:7;:45;;17168:19;;17142:45;;;17152:13;17142:45;17202:7;:46;;17235:13;17202:46;;;17212:20;;17202:46;17263:11;;17083:18;:227::i;:::-;17082:228;17078:301;;;17334:32;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;17334:32:5;;;;;;;17327:40;;-1:-1:-1;;;;;17327:40:5;;;;;;;;;;;;;;;;17334:32;;17327:40;;;;;;;;17334:32;17327:40;;17334:32;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;17078:301:5;17409:199;17478:11;;17504;17530:17;;17562:13;17590:7;17409:54;:199::i;:::-;17391:217;;17626:77;17673:17;;17692:10;17626:46;:77::i;:::-;17625:78;17621:149;;;17727:30;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;17727:30:5;;;;;;;17720:38;;-1:-1:-1;;;;;17720:38:5;;;;;;;;;;;;;;;;17727:30;;17720:38;;;;;;;;17727:30;17720:38;;17727:30;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;17621:149:5;17782:40;17794:10;17806:15;17782:11;:40::i;:::-;17838:48;;;17858:10;17838:48;;;;;;;;;;-1:-1:-1;;;;;;;;;;;17838:48:5;;;;;;;;;;17903:7;17899:144;;;17927:19;:35;;;17899:144;;;17995:20;:36;;;17899:144;18135:6;;18060:82;;;18085:10;18060:82;;;;;;;;18114:4;18060:82;;;;;;;;;;;;;;;;;;;;;;;;;;;16438:1712;;;;;;;:::o;35704:378::-;35879:16;35927:147;35991:12;36018:15;36048;35927:49;:147::i;15057:1091::-;15134:24;;;;;;;;;;;;;;;;;15455:12;;;;15131:1;15121:11;;;;15134:24;15121:11;320:26:0;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;-1:-1:-1;15178:9:5;;15197:24;;;;;;;;;;;;;;;;;15178:9;;;;;;:17;;15191:4;15178:17;;15197:24;15178:17;320:26:0;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;-1:-1:-1;15241:6:5;;15258:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;15258:25:5;;;;15241:6;;;;;;:15;;15258:25;15241:15;320:26:0;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;;15303:27:5;15319:10;15303:15;:27::i;:::-;15332:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;15332:28:5;;;;-1:-1:-1;;;;;15332:28:5;;;328:9:0;339:6;320:26;;;;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;;15380:21:5;15390:10;15380:9;:21::i;:::-;15412:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;15412:25:5;;;;15380:30;;;15412:25;15380:30;320:26:0;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;-1:-1:-1;15484:5:5;;-1:-1:-1;;;;;15484:5:5;15470:10;:19;;-1:-1:-1;15525:104:5;15622:6;15470:19;15526:80;;15586:20;;15526:80;;;15550:19;;15526:80;15525:96;:104;:96;:104;:::i;:::-;15500:129;;15714:84;15761:17;;15780;15714:46;:84::i;:::-;15713:85;15709:142;;;15820:30;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;15820:30:5;;;;;;;15813:38;;-1:-1:-1;;;;;15813:38:5;;;;;;;;;;;;;;;;15820:30;;15813:38;;;;;;;;15820:30;15813:38;;15820:30;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;15709:142:5;15864:16;15873:6;15864:8;:16::i;:::-;15897:7;15893:152;;;15921:19;:39;;;15893:152;;;15993:20;:40;;;15893:152;16062:78;16087:10;16099:6;16107:5;16114:17;16133:6;;16062:78;;;;-1:-1:-1;;;;;16062:78:5;-1:-1:-1;;;;;16062:78:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;357:1:0;;;;;;;;15057:1091:5;;;;;:::o;5457:36::-;;;;;;-1:-1:-1;;;;;5457:36:5;;:::o;37770:419::-;37972:10;38008:173;38063:18;38096:15;38126:12;38153:17;38008:40;:173::i;:::-;38000:181;37770:419;-1:-1:-1;;;;;37770:419:5:o;5293:31::-;;;;;;;;;:::o;6330:165::-;6402:13;;6378:4;;6402:13;;;;;:85;;;;-1:-1:-1;6433:19:5;;:24;;:53;;-1:-1:-1;;6467:19:5;;6461:3;:25;;6330:165::o;4077:59::-;4128:8;4077:59;:::o;14439:453::-;14496:9;;14516:28;;;;;;;;;;;;;;;;;-1:-1:-1;;14496:9:5;;;;;:18;;14516:28;14496:18;320:26:0;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;;14564:27:5;14580:10;14564:15;:27::i;:::-;14593:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;14593:28:5;;;;-1:-1:-1;;;;;14593:28:5;;;328:9:0;339:6;320:26;;;;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;;14657:8:5;;;;;;;;;-1:-1:-1;;;;;14657:8:5;-1:-1:-1;;;;;14657:15:5;;:17;;;;;-1:-1:-1;;;14657:17:5;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;14657:17:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;14657:17:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;14657:17:5;:33;;;-1:-1:-1;;;;;14657:33:5;;14685:4;14657:33;;;;;;-1:-1:-1;;;;;14657:27:5;;;;;;:33;;;;;:17;;:33;;;;;;;;:27;:33;;;5:2:-1;;;;30:1;27;20:12;5:2;14657:33:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;14657:33:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;14657:33:5;;-1:-1:-1;14701:35:5;14713:10;14657:33;14701:11;:35::i;:::-;14752:43;;;14772:10;14752:43;;;;;;;;;;-1:-1:-1;;;;;;;;;;;14752:43:5;;;;;;;;;;14806:6;:13;;-1:-1:-1;;14806:13:5;;;;;14877:6;;14835:49;;;14853:10;14835:49;;;;;;;;;;;;;;;;;;;;;;;;;357:1:0;;14439:453:5;;;:::o;7030:129::-;7092:4;7126:5;;-1:-1:-1;;;;;7116:15:5;;;7126:5;;7116:15;;:35;;-1:-1:-1;7145:6:5;;-1:-1:-1;;;;;7135:16:5;;;7145:6;;7135:16;7116:35;7109:42;7030:129;-1:-1:-1;;7030:129:5:o;5081:26::-;;;;;;;;;:::o;8031:1663::-;8498:15;8560:9;8722:19;4128:8;8361:18;:49;;8412:23;;;;;;;;;;;;;;;;;;328:9:0;339:6;320:26;;;;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;;8473:13:5;8453:8;;:34;;;;;-1:-1:-1;;;;;8453:34:5;;;;;-1:-1:-1;;;;;8453:34:5;;;;;;8516:8;;;;;;;;;-1:-1:-1;;;;;8516:8:5;-1:-1:-1;;;;;8516:15:5;;:17;;;;;-1:-1:-1;;;8516:17:5;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8516:17:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8516:17:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;8516:17:5;:33;;;-1:-1:-1;;;;;8516:33:5;;8544:4;8516:33;;;;;;-1:-1:-1;;;;;8516:27:5;;;;;;:33;;;;;:17;;:33;;;;;;;;:27;:33;;;5:2:-1;;;;30:1;27;20:12;5:2;8516:33:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8516:33:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;8516:33:5;;-1:-1:-1;8572:59:5;8612:18;8572:39;:59::i;:::-;8560:71;-1:-1:-1;8646:18:5;;;8642:67;;8686:22;;;;;;;;;;;;;;;;;;;8679:30;;-1:-1:-1;;;;;8679:30:5;;;;;;;;;;;;;;;;8686:22;;8679:30;;;;;;;;8686:22;8679:30;;8686:22;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;8642:67:5;8757:4;8744:10;:17;8722:39;;8777:82;8824:18;8844:14;8777:46;:82::i;:::-;8776:83;8772:140;;;8881:30;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;8881:30:5;;;;;;;8874:38;;-1:-1:-1;;;;;8874:38:5;;;;;;;;;;;;;;;;8881:30;;8874:38;;;;;;;;8881:30;8874:38;;8881:30;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;8772:140:5;8929:8;8925:214;;;8954:5;:18;;-1:-1:-1;;;;;;8954:18:5;-1:-1:-1;;;;;8954:18:5;;;;;8987:19;:36;;;8925:214;;;9056:6;:19;;-1:-1:-1;;;;;;9056:19:5;-1:-1:-1;;;;;9056:19:5;;;;;9090:20;:37;;;8925:214;9151:6;:18;;;9180:17;:38;;;9229:20;:41;;;9281:21;:42;;;9336:11;:26;;;9373:23;:38;;;9422:24;:39;;;9474:15;:34;;-1:-1:-1;;;;;9474:34:5;;;-1:-1:-1;;;;;;9474:34:5;;;;;;;9519:9;:22;;;;;;;;;;;;;9559:127;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8031:1663;;;;;;;;;;;;;:::o;36681:488::-;36913:15;36959:202;37028:12;37055;37082:15;37112;37142:8;36959:54;:202::i;:::-;36946:215;36681:488;-1:-1:-1;;;;;;36681:488:5:o;18865:713::-;18948:6;;18965:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;18965:25:5;;;;18948:6;;;;;;:15;;18965:25;18948:15;320:26:0;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;;19010:27:5;19026:10;19010:15;:27::i;:::-;19039:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;19039:28:5;;;;-1:-1:-1;;;;;19039:28:5;;;328:9:0;339:6;320:26;;;;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;;19087:28:5;19103:11;19087:15;:28::i;:::-;19126:24;;;;;;;;;;;;;;;;;19087:37;;;19126:24;19087:37;320:26:0;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;;19170:21:5;19180:10;19170:9;:21::i;:::-;19202:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;19202:25:5;;;;19170:30;;;19202:25;19170:30;320:26:0;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;-1:-1:-1;19263:5:5;;-1:-1:-1;;;;;19263:5:5;19249:10;:19;19245:178;;;19270:5;:19;;-1:-1:-1;;;;;;19270:19:5;-1:-1:-1;;;;;19270:19:5;;;;;19245:178;;;19323:6;;-1:-1:-1;;;;;19323:6:5;19309:10;:20;19305:118;;;19331:6;:20;;-1:-1:-1;;;;;;19331:20:5;-1:-1:-1;;;;;19331:20:5;;;;;19305:118;;;19385:15;;;;;-1:-1:-1;;;;;19385:15:5;19371:10;:29;19367:56;;;19402:15;:21;;-1:-1:-1;;19402:21:5;;;19367:56;19464:15;;19434:73;;;-1:-1:-1;;;;;19434:73:5;;-1:-1:-1;;;;;19434:73:5;;;;;;;;;19464:15;;;;;19434:60;;:73;;;;;19464:15;;19434:73;;;;;;;19464:15;;19434:73;;;5:2:-1;;;;30:1;27;20:12;5:2;19434:73:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;19523:47:5;;;19546:10;19523:47;;-1:-1:-1;;;;;19523:47:5;;;;;;;;;;-1:-1:-1;19523:47:5;;;;;;;;-1:-1:-1;19523:47:5;357:1:0;;;;;;18865:713:5;;;:::o;4861:30::-;;;;:::o;4623:36::-;;;;:::o;21778:587::-;21879:9;;21899:28;;;;;;;;;;;;;;;;;21879:9;;;;;;:18;;21899:28;21879:18;320:26:0;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;-1:-1:-1;21947:6:5;;21964:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;21964:25:5;;;;21947:6;;;;;;:15;;21964:25;21947:15;320:26:0;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;;22009:27:5;22025:10;22009:15;:27::i;:::-;22038:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;22038:28:5;;;;-1:-1:-1;;;;;22038:28:5;;;328:9:0;339:6;320:26;;;;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;-1:-1:-1;22107:29:5;;;;;;;;;;;;;;;;;22104:1;22086:19;;;22107:29;22086:19;320:26:0;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;-1:-1:-1;22154:11:5;:29;;;22194:23;:41;;;22246:24;:42;;;22304:53;;;22329:10;22304:53;;;;;;;;;;;;;;;;;;;;;357:1:0;;;;;;21778:587:5;;;:::o;4205:20::-;;;-1:-1:-1;;;;;4205:20:5;;:::o;4394:32::-;;;;:::o;4900:33::-;;;;:::o;38255:142::-;38312:8;38339:50;38379:9;38339:39;:50::i;34475:708::-;34687:12;34717:16;34911:17;34736:164;34791:17;;34823:20;34858:12;34885:4;34736:40;:164::i;:::-;34717:183;;34931:166;34986:17;;35018:21;35054:12;35081:5;34931:40;:166::i;:::-;34911:186;;35133:11;35118:12;:26;:57;;;;;35163:12;35148;:27;35118:57;35108:67;34475:708;-1:-1:-1;;;;;;;34475:708:5:o;5572:24::-;;;-1:-1:-1;;;;;5572:24:5;;:::o;12230:189::-;12360:10;;;;;;;;12385:15;;;;-1:-1:-1;;;;;12385:15:5;;12230:189::o;4328:21::-;;;;:::o;19995:1093::-;20460:14;20095:27;20111:10;20095:15;:27::i;:::-;20124:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;20124:28:5;;;;-1:-1:-1;;;;;20124:28:5;;;328:9:0;339:6;320:26;;;;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;;20172:10:5;:8;:10::i;:::-;20184:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;20184:21:5;;;;;320:26:0;;;;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;;20281:21:5;20291:10;20281:9;:21::i;:::-;20313:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;20313:25:5;;;;20281:30;;;20313:25;20281:30;320:26:0;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;-1:-1:-1;20383:29:5;;;;;;;;;;;;;;;;;20380:1;20358:23;;;20383:29;20358:23;320:26:0;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;;20477:33:5;20499:10;20477:21;:33::i;:::-;20539:5;;20460:50;;-1:-1:-1;;;;;;20539:5:5;20525:10;:19;20521:356;;;20561:12;:19;;-1:-1:-1;;20561:19:5;20576:4;20561:19;;;20595:20;:42;;;20652:18;:30;;;20521:356;;;20718:6;;-1:-1:-1;;;;;20718:6:5;20704:10;:20;20700:177;;;20741:13;:20;;-1:-1:-1;;20741:20:5;;;;;20776:21;:43;;;20834:19;:31;;;20700:177;20919:15;;20889:71;;;;;;20949:10;20889:71;;;;;;-1:-1:-1;;;;;20919:15:5;;;;20889:59;;:71;;;;;20919:15;;20889:71;;;;;;;;20919:15;;20889:71;;;5:2:-1;;;;30:1;27;20:12;5:2;20889:71:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;20976:104:5;;;21001:10;20976:104;;;;;;;;;;;;;;;;;;-1:-1:-1;20976:104:5;;;;;;;-1:-1:-1;20976:104:5;357:1:0;;;;;;19995:1093:5;;;;;:::o;38490:140::-;38546:8;38573:49;38612:9;38573:38;:49::i;29187:2476::-;29377:16;29420:24;29479:20;29715:21;30193;30590:12;29249:10;:8;:10::i;:::-;29261:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;29261:21:5;;;;;320:26:0;;;;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;;29302:27:5;29318:10;29302:15;:27::i;:::-;29331:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;29331:28:5;;;;-1:-1:-1;;;;;29331:28:5;;;328:9:0;339:6;320:26;;;;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;;29396:13:5;:11;:13::i;:::-;29461:5;;29571:11;;29623:17;;29655:19;;29377:32;;-1:-1:-1;;;;;;29461:5:5;;;29447:10;:19;;-1:-1:-1;29502:202:5;;29571:11;;29377:32;;29461:5;29502:54;:202::i;:::-;29479:225;;29739:204;29808:11;;29834;29860:17;;29892:20;;29927:5;29739:54;:204::i;:::-;29715:228;;30217:118;30318:16;30217:82;30283:15;30217:8;;;;;;;;;-1:-1:-1;;;;;30217:8:5;-1:-1:-1;;;;;30217:15:5;;:17;;;;;-1:-1:-1;;;30217:17:5;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;30217:17:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;30217:17:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;30217:17:5;:47;;;-1:-1:-1;;;;;30217:47:5;;30259:4;30217:47;;;;;;-1:-1:-1;;;;;30217:41:5;;;;;;:47;;;;;:17;;:47;;;;;;;;:41;:47;;;5:2:-1;;;;30:1;27;20:12;5:2;30217:47:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;30217:47:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;30217:47:5;;:82;:65;:82;:::i;:::-;:100;:118;:100;:118;:::i;:::-;30193:142;-1:-1:-1;30350:21:5;;30346:109;;30393:50;;;;;;;;;;;;;;;;;30346:109;30465:35;30483:16;30465:17;:35::i;:::-;30605:166;30658:19;:56;;30698:16;30658:56;;;30680:15;30658:56;4069:1;30605:38;:166::i;:::-;30590:181;;30786:19;30782:303;;;30840:28;:15;30860:7;30840:28;:19;:28;:::i;:::-;30822:46;-1:-1:-1;30902:29:5;:16;30923:7;30902:29;:20;:29;:::i;:::-;30883:48;;30782:303;;;30982:28;:15;31002:7;30982:28;:19;:28;:::i;:::-;30964:46;-1:-1:-1;31044:29:5;:16;31065:7;31044:29;:20;:29;:::i;:::-;31025:48;;30782:303;31162:5;;31150:35;;-1:-1:-1;;;;;31162:5:5;31169:15;31150:11;:35::i;:::-;31221:5;;31201:43;;;-1:-1:-1;;;;;31221:5:5;;;31201:43;;;;;;;;;;-1:-1:-1;;;;;;;;;;;31201:43:5;;;;;;;;;31267:6;;31255:37;;-1:-1:-1;;;;;31267:6:5;31275:16;31255:11;:37::i;:::-;31328:6;;31308:45;;;-1:-1:-1;;;;;31328:6:5;;;31308:45;;;;;;;;;;-1:-1:-1;;;;;;;;;;;31308:45:5;;;;;;;;;31366:10;:17;;-1:-1:-1;;;;31366:17:5;;;;;31394:13;;;;;31420:235;;;;31485:5;;;31509:6;31535;;31463:79;;;-1:-1:-1;;;;;31485:5:5;;;31463:79;;;;;;;;31509:6;;;;31463:79;;;;;;;;;;;;;;;;;;;;;;;;;31420:235;;;31598:6;;;31624:5;31648:6;;31576:79;;;-1:-1:-1;;;;;31598:6:5;;;31576:79;;;;;;;;31624:5;;;;31576:79;;;;;;;;;;;;;;;;;;;;;;;;;31420:235;357:1:0;;29187:2476:5;;;;;;;;:::o;5502:30::-;;;-1:-1:-1;;;;;5502:30:5;;:::o;6045:161::-;6116:12;;6092:4;;6116:12;;:82;;;;-1:-1:-1;6146:18:5;;:23;;:51;;-1:-1:-1;;6179:18:5;;6173:3;:24;;6045:161::o;39446:209::-;39546:12;39586:61;39629:6;39637:9;39586:42;:61::i;:::-;39576:71;39446:209;-1:-1:-1;;;39446:209:5:o;4743:31::-;;;;:::o;5045:29::-;;;;;;;;;:::o;39843:203::-;39939:13;39981:57;40020:7;40029:8;39981:38;:57::i;4980:24::-;;;;;;:::o;12690:1487::-;12756:9;;12776:28;;;;;;;;;;;;;;;;;-1:-1:-1;;;;12756:9:5;;;;;;:18;;12776:28;12756:18;320:26:0;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;-1:-1:-1;12824:6:5;;12841:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;12841:25:5;;;;12824:6;;;;;;:15;;12841:25;12824:15;320:26:0;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;;12919:27:5;12935:10;12919:15;:27::i;:::-;12957:24;;;;;;;;;;;;;;;;;12919:36;;;12957:24;12919:36;320:26:0;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;;13055:57:5;13094:17;;13055:38;:57::i;:::-;13037:75;-1:-1:-1;13127:20:5;;;13123:69;;13169:22;;;;;;;;;;;;;;;;;;;13162:30;;-1:-1:-1;;;;;13162:30:5;;;;;;;;;;;;;;;;13169:22;;13162:30;;;;;;;;13169:22;13162:30;;13169:22;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;13123:69:5;13236:10;13227:6;:19;13205:41;;13262:81;13309:17;;13328:14;13262:46;:81::i;:::-;13261:82;13257:139;;;13365:30;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;13365:30:5;;;;;;;13358:38;;-1:-1:-1;;;;;13358:38:5;;;;;;;;;;;;;;;;13365:30;;13358:38;;;;;;;;13365:30;13358:38;;13365:30;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;13257:139:5;13409:16;13418:6;13409:8;:16::i;:::-;13436:114;13481:58;13521:17;;13481:39;:58::i;:::-;13468:10;:71;13436:17;:114::i;:::-;13567:5;;-1:-1:-1;;;;;13567:5:5;:12;13563:218;;;13596:5;:18;;-1:-1:-1;;;;;;13596:18:5;13604:10;13596:18;;;13629:19;:36;;;13563:218;;;13698:6;:19;;-1:-1:-1;;;;;;13698:19:5;13707:10;13698:19;;;13732:20;:37;;;13563:218;13793:9;:16;;-1:-1:-1;;13793:16:5;;;;;13850:15;;13820:72;;;-1:-1:-1;;;;;13820:72:5;;13881:10;13820:72;;;;;;-1:-1:-1;;;;;13850:15:5;;;;13820:60;;:72;;;;;13793:16;;13820:72;;;;;;;;13793:16;13850:15;13820:72;;;5:2:-1;;;;30:1;27;20:12;5:2;13820:72:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;13820:72:5;;;;13908:261;13938:10;13963:6;13984:5;;;;;;;;;-1:-1:-1;;;;;13984:5:5;14004:6;;;;;;;;;-1:-1:-1;;;;;14004:6:5;14025;;14046:17;;14078:11;;14104:19;;14138:20;;13908:261;;;;-1:-1:-1;;;;;13908:261:5;-1:-1:-1;;;;;13908:261:5;;;;;;;;;;;-1:-1:-1;;;;;13908:261:5;-1:-1:-1;;;;;13908:261:5;;;;;;-1:-1:-1;;;;;13908:261:5;-1:-1:-1;;;;;13908:261:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;357:1:0;;;;12690:1487:5;;;;;:::o;11388:375::-;11464:7;11561:5;;;11581:6;11602;;11623:11;;11649:17;;11681:12;;11464:7;;;;;;;;;;;;;;-1:-1:-1;;;;;11561:5:5;;;;11581:6;;11602;11623:11;11649:17;11681:12;;;;;11561:5;11708:13;;;11736:8;:6;:8::i;:::-;11539:216;;;;-1:-1:-1;11539:216:5;;-1:-1:-1;11539:216:5;;-1:-1:-1;11539:216:5;-1:-1:-1;11539:216:5;-1:-1:-1;11539:216:5;-1:-1:-1;11539:216:5;;-1:-1:-1;11388:375:5;-1:-1:-1;11388:375:5:o;4551:23::-;;;;:::o;4581:35::-;;;;:::o;6641:181::-;6697:4;6732:5;;-1:-1:-1;;;;;6722:15:5;;;6732:5;;6722:15;:35;;;;;6741:16;:14;:16::i;:::-;6721:93;;;-1:-1:-1;6786:6:5;;-1:-1:-1;;;;;6776:16:5;;;6786:6;;6776:16;:37;;;;;6796:17;:15;:17::i;32050:1089::-;32809:24;32877:14;32105:27;32121:10;32105:15;:27::i;:::-;32134:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;32134:28:5;;;;-1:-1:-1;;;;;32134:28:5;;;328:9:0;339:6;320:26;;;;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;;32182:10:5;:8;:10::i;:::-;32194:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;32194:21:5;;;;;320:26:0;;;;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;;32235:21:5;32245:10;32235:9;:21::i;:::-;32267:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;32267:25:5;;;;32235:30;;;32267:25;32235:30;320:26:0;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;-1:-1:-1;32326:15:5;;32343:26;;;;;;;;;;;;;;;;;32326:15;;;;-1:-1:-1;;;;;32326:15:5;32312:10;:29;;;32343:26;32312:29;320:26:0;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;;32415:8:5;;;;;;;;;-1:-1:-1;;;;;32415:8:5;-1:-1:-1;;;;;32415:28:5;;:30;;;;;-1:-1:-1;;;32415:30:5;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;32415:30:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;32415:30:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;32415:30:5;32389:8;;:22;;;;;;32406:4;32389:22;;;;;;-1:-1:-1;;;;;32389:56:5;;;;:8;;;;:16;;:22;;;;;32415:30;;32389:22;;;;;;;;:8;:22;;;5:2:-1;;;;30:1;27;20:12;5:2;32389:22:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;32389:22:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;32389:22:5;32447:29;;;;;;;;;;;;;32389:22;32447:29;;;-1:-1:-1;;;;;32389:56:5;;;;;;;;;32447:29;32389:56;320:26:0;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;-1:-1:-1;32547:15:5;;;;;-1:-1:-1;;;;;32547:15:5;:22;32543:104;;;32586:15;:28;;-1:-1:-1;;32586:28:5;32604:10;32586:28;;;;;32629:7;;32543:104;32780:11;:18;;-1:-1:-1;;32780:18:5;;;;;32836:8;;:30;;;;;;;;-1:-1:-1;;;;;32836:8:5;;;;:28;;:30;;;;;;;;;;;;;;;:8;:30;;;5:2:-1;;;;30:1;27;20:12;5:2;32836:30:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;32836:30:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;32836:30:5;32894:78;;;;;;;;32836:30;;-1:-1:-1;;;;;;32894:76:5;;;;;:78;;;;;32836:30;;32894:78;;;;;;;;;:76;:78;;;5:2:-1;;;;30:1;27;20:12;5:2;32894:78:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;32894:78:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;32894:78:5;33003:8;;:17;;;;;;;;32894:78;;-1:-1:-1;32983:54:5;;32894:78;;-1:-1:-1;;;;;33003:8:5;;:15;;:17;;;;;32894:78;;33003:17;;;;;;;:8;:17;;;5:2:-1;;;;30:1;27;20:12;5:2;33003:17:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;33003:17:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;33003:17:5;:33;;;-1:-1:-1;;;;;33003:33:5;;33031:4;33003:33;;;;;;-1:-1:-1;;;;;33003:27:5;;;;;;:33;;;;;:17;;:33;;;;;;;;:27;:33;;;5:2:-1;;;;30:1;27;20:12;5:2;33003:33:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;33003:33:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;33003:33:5;32983:11;:54::i;:::-;33048:11;:19;;-1:-1:-1;;33078:13:5;;;;;33109:22;;;-1:-1:-1;;;;;33109:22:5;;;;;;;;;;;;;;;357:1:0;;;;;;;;;32050:1089:5;;;;:::o;4940:31::-;;;;:::o;22964:2872::-;23085:9;23304:19;23505:16;23548:19;24217:20;24281:27;24474;24622:16;23054:13;25994:10;:8;:10::i;:::-;26006:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;26006:21:5;;;;;25986:42;;;;;;-1:-1:-1;;;;;25986:42:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;25986:42:5;;26047:41;26057:13;:30;;26081:6;;-1:-1:-1;;;;;26081:6:5;26057:30;;;26073:5;;-1:-1:-1;;;;;26073:5:5;26057:30;26047:9;:41::i;:::-;26090:22;;;;;;;;;;;;;;;;;;26039:74;;;;;;-1:-1:-1;;;;;26039:74:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;26039:74:5;;26132:27;26148:10;26132:15;:27::i;:::-;26170:24;;;;;;;;;;;;;;;;;;26132:36;26124:71;;;;-1:-1:-1;;;;;26124:71:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;26124:71:5;;23097:57;23136:17;;23097:38;:57::i;:::-;23085:69;-1:-1:-1;23169:14:5;;;23165:63;;23205:22;;;;;;;;;;;;;;;;;;;23198:30;;-1:-1:-1;;;;;23198:30:5;;;;;;;;;;;;;;;;23205:22;;23198:30;;;;;;;;23205:22;23198:30;;23205:22;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;23165:63:5;23326:16;:6;23337:4;23326:16;:10;:16;:::i;:::-;23304:38;;23358:81;23405:17;;23424:14;23358:46;:81::i;:::-;23357:82;23353:139;;;23461:30;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;23461:30:5;;;;;;;23454:38;;-1:-1:-1;;;;;23454:38:5;;;;;;;;;;;;;;;;23461:30;;23454:38;;;;;;;;23461:30;23454:38;;23461:30;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;23353:139:5;23524:13;:11;:13::i;:::-;23505:32;;23570:13;:86;;23635:21;;23570:86;;;23599:20;;23570:86;23548:108;;23735:250;23768:11;23794:13;:52;;23827:19;;23794:52;;;23810:14;23794:52;23861:13;:53;;23900:14;23861:53;;;23877:20;;23861:53;23929:14;23735:18;:250::i;:::-;23734:251;23730:324;;;24009:32;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;24009:32:5;;;;;;;24002:40;;-1:-1:-1;;;;;24002:40:5;;;;;;;;;;;;;;;;24009:32;;24002:40;;;;;;;;24009:32;24002:40;;24009:32;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;23730:324:5;24116:16;24125:6;24116:8;:16::i;:::-;24143:23;24161:4;24143:17;:23::i;:::-;24240:13;:30;;24264:6;;-1:-1:-1;;;;;24264:6:5;24240:30;;;24256:5;;-1:-1:-1;;;;;24256:5:5;24240:30;24217:53;;24311:111;24342:13;24370:14;24399:12;24311:16;:111::i;:::-;24281:141;;24504:67;24556:14;24504:8;;;;;;;;;-1:-1:-1;;;;;24504:8:5;-1:-1:-1;;;;;24504:15:5;;:17;;;;;-1:-1:-1;;;24504:17:5;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;24504:67:5;24474:97;;24641:147;24705:17;;24737:11;;24763:14;24641:49;:147::i;:::-;24622:166;;24805:13;24801:548;;;24835:5;:18;;-1:-1:-1;;;;;;24835:18:5;24843:10;24835:18;;;24868:19;:36;;;24919:23;:40;;;24974:20;:34;;;25023:20;:45;;;24801:548;;;25101:6;:19;;-1:-1:-1;;;;;;25101:19:5;25110:10;25101:19;;;25135:20;:37;;;25187:24;:41;;;25243:21;:35;;;25293:19;:44;;;24801:548;25361:11;:28;;;25400:17;:31;;;25444:24;25454:13;25444:9;:24::i;:::-;25558:15;;-1:-1:-1;;;;;25558:31:5;;;:15;;;;;:31;25554:85;;;25606:15;:21;;-1:-1:-1;;25606:21:5;;;25554:85;25681:15;;25651:72;;;-1:-1:-1;;;;;25651:72:5;;25712:10;25651:72;;;;;;-1:-1:-1;;;;;25681:15:5;;;;25651:60;;:72;;;;;25681:15;;25651:72;;;;;;;;25681:15;;25651:72;;;5:2:-1;;;;30:1;27;20:12;5:2;25651:72:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;25821:6:5;;25739:89;;;25750:10;25739:89;;-1:-1:-1;;;;;25739:89:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;25739:89:5;;;;;;;-1:-1:-1;25739:89:5;22964:2872;;;;;;;;;;;:::o;22454:258::-;22512:10;:8;:10::i;:::-;22524:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;22524:21:5;;;;;320:26:0;;;;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;;22565:21:5;22575:10;22565:9;:21::i;:::-;22588;;;;;;;;;;;;;;;;;;320:26:0;;;;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;-1:-1:-1;22651:5:5;;22627:30;;-1:-1:-1;;;;;22651:5:5;22637:10;:19;22627:9;:30::i;:::-;22673:31;;;22693:10;22673:31;;;;;;;;;;;;;357:1:0;;22454:258:5;;:::o;5011:25::-;;;;;;;;;:::o;2687:327:7:-;2853:11;2882:18;2903:42;2917:12;2931:13;2903;:42::i;:::-;2882:63;;2965:41;2975:15;2992:13;2965:9;:41::i;33720:212:5:-;33872:9;;33888:6;;33866:29;;;;;;;;;;;;;;;33793:10;;;;-1:-1:-1;;;;;33872:9:5;;;;33866:21;;:29;;;;;;;;;;33872:9;33866:29;;;5:2:-1;;;;30:1;27;20:12;5:2;33866:29:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;33866:29:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;33866:29:5;;33720:212;-1:-1:-1;;33720:212:5:o;6601:1114:7:-;6805:10;6895:24;7031:22;7168:15;6923:17;6922:98;;1194:24;6922:98;;;1113:25;6922:98;6895:125;-1:-1:-1;400:8:7;7057:34;;;7056:50;7031:75;;400:8;7250:18;400:8;7220:12;:26;7201:15;:46;:67;;;;;;;;7186:107;;;;;;;;7168:125;;7449:17;:51;;;;;7483:17;7470:10;:30;7449:51;7445:78;;;7522:1;7515:8;;;;7445:78;7597:17;7596:111;;7697:10;7677:17;:30;7596:111;;;7651:10;7631:17;:30;7596:111;7588:119;;6601:1114;;;;;;;;;;:::o;40898:187:5:-;40986:8;;;;;;;;;-1:-1:-1;;;;;40986:8:5;-1:-1:-1;;;;;40986:15:5;;:17;;;;;-1:-1:-1;;;40986:17:5;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;40986:17:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;40986:17:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;40986:17:5;:39;;;;;;-1:-1:-1;;;;;40986:39:5;;;;;;;;;;;;;;;:26;;;;;;;:39;;;;;:17;;:39;;;;;;;-1:-1:-1;40986:26:5;:39;;;5:2:-1;;;;30:1;27;20:12;5:2;40986:39:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;40986:39:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;40986:39:5;41040:26;;;;;;;;;;;;40986:39;41040:26;;;;;;;;;;;;40964:113;;;;;;-1:-1:-1;;;;;40964:113:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;40964:113:5;;40898:187;;:::o;4653:1000:7:-;4887:15;400:8;5229:33;;;;5286:12;;5322;;5358:15;;4887;;;;400:8;5286:12;5426:6;;;5425:21;;5424:28;;;;;;;;5419:1;:34;:47;;;;;;;;5404:86;;;;;;;;5387:103;;5521:8;:42;;5553:10;5549:1;:14;5521:42;;;5536:10;5532:1;:14;5521:42;5501:62;-1:-1:-1;5600:1:7;5583:18;;;5576:26;;;;5631:13;4653:1000;-1:-1:-1;;;;;;;;;;;4653:1000:7:o;5661:337::-;5799:12;5851:54;5861:15;564:2;5851:9;:54::i;:::-;5840:7;:65;;5839:151;;;;;5935:54;5945:15;640:3;5935:9;:54::i;:::-;5924:7;:65;;5829:161;5661:337;-1:-1:-1;;;5661:337:7:o;2153:379::-;2330:16;400:8;2393:104;2465:15;2429:32;:15;400:8;2429:32;:19;:32;:::i;:::-;:52;;;;;;;2393:12;;2429:52;;2393:104;:16;:104;:::i;:::-;2378:146;;;;;;;;;2153:379;-1:-1:-1;;;;2153:379:7:o;1238:128:10:-;1319:7;;;1339;;;;1332:15;;;41349:188:5;41421:8;;;;;;;;;-1:-1:-1;;;;;41421:8:5;-1:-1:-1;;;;;41421:15:5;;:17;;;;;-1:-1:-1;;;41421:17:5;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;41421:17:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;41421:17:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;41421:17:5;:56;;;;;;41452:10;41421:56;;;;41464:4;41421:56;;;;;;;;;;;;-1:-1:-1;;;;;41421:30:5;;;;;;:56;;;;;:17;;:56;;;;;;;;-1:-1:-1;41421:30:5;:56;;;5:2:-1;;;;30:1;27;20:12;5:2;41421:56:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;41421:56:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;41421:56:5;41492:26;;;;;;;;;;;;41421:56;41492:26;;;;;;;;;;;;41399:130;;;;;;-1:-1:-1;;;;;41399:130:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;41399:130:5;;41349:188;:::o;1295:122:7:-;1354:8;1407:2;1381:23;1391:9;1402:1;1381:9;:23::i;:::-;:28;;;;;;;;;1295:122;-1:-1:-1;;1295:122:7:o;40201:228:5:-;40342:14;40400:3;40387:10;:16;40386:35;;40420:1;40386:35;;;-1:-1:-1;40407:10:5;40201:228::o;1510:121:7:-;1568:8;1621:2;1595:23;1605:9;1616:1;1595:9;:23::i;1060:116:10:-;1120:7;1142:8;;;;1135:16;;;;-1:-1:-1;1164:7:10;;;1060:116::o;41153:106:5:-;41224:8;;:18;;;;;;;;41212:39;;-1:-1:-1;;;;;41224:8:5;;:16;;:18;;;;;;;;;;;;;;:8;:18;;;5:2:-1;;;;30:1;27;20:12;5:2;41224:18:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;41224:18:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;41224:18:5;41244:6;41212:11;:39::i;:::-;41153:106;:::o;3880:174:7:-;4043:3;4021:18;;4020:26;;3880:174::o;3329:363::-;3431:12;3505:16;3563:14;3475:9;3465:6;:19;3461:33;;;3493:1;3486:8;;;;3461:33;3545:6;3528:9;3524:28;3505:47;;3607:6;3581:12;3596:3;3581:18;3580:34;;;;;;;;3563:51;;3654:1;3641:10;:14;3640:43;;3673:10;3672:11;;3640:43;;;3659:10;3640:43;3625:59;;3329:363;;;;;;;:::o;26412:730:5:-;26569:27;26708:251;26777:11;;26803:14;26832:17;;26864:12;:57;;26901:20;;26864:57;;;26879:19;;26864:57;26936:12;26708:54;:251::i;:::-;26683:276;;27012:49;27024:12;27038:22;27012:11;:49::i;:::-;27077:57;;;-1:-1:-1;;;;;27077:57:5;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;27077:57:5;;;;;;;;;;26412:730;;;;;:::o;40493:343::-;40557:15;40553:276;;;40612:1;40589:20;:24;;;40628:18;:22;40665:12;:20;;-1:-1:-1;;40665:20:5;;;40553:276;;;40742:1;40718:21;:25;;;40758:19;:23;40796:13;:21;;-1:-1:-1;;40796:21:5;;;40493:343;:::o;203:380:10:-;263:9;489:7;;485:36;;;-1:-1:-1;513:1:10;506:8;;485:36;-1:-1:-1;531:7:10;;;536:2;531;:7;551:6;;;;;;;;:12;544:20;;",
  "source": "pragma solidity ^0.4.23;\r\npragma experimental \"v0.5.0\";\r\n\r\nimport \"openzeppelin-solidity/contracts/math/SafeMath.sol\";\r\nimport \"../DBC.sol\";\r\nimport \"../Feeds.sol\";\r\nimport \"../Registry.sol\";\r\nimport \"./ContractForDifferenceFactory.sol\";\r\nimport \"./ContractForDifferenceRegistry.sol\";\r\nimport \"./ContractForDifferenceLibrary.sol\";\r\n\r\n\r\n/*\r\n * SOLIUM DISABLE: \r\n *\r\n *   security/no-block-members - we need to use 'now' in order to set a time \r\n *       limit.\r\n */\r\n\r\n /* solium-disable security/no-block-members */\r\n\r\n/**\r\n * @title Contract for difference\r\n *\r\n * Contract for difference for a given market between a\r\n * \"buyer\" (long position) and \"seller\" (short position).\r\n */\r\ncontract ContractForDifference is DBC {\r\n    using SafeMath for uint;\r\n\r\n    /*\r\n     * Events\r\n     */\r\n\r\n    event LogCFDCreated(\r\n        address creator,\r\n        bytes32 market,\r\n        uint notionalAmountDai,\r\n        uint deposit\r\n    );\r\n    event LogCFDInitiated(\r\n        address joiner,\r\n        uint amountSent,\r\n        address buyer,\r\n        address seller,\r\n        bytes32 market,\r\n        uint notionalAmountDai,\r\n        uint strikePrice,\r\n        uint buyerDepositBalance,\r\n        uint sellerDepositBalance\r\n    );\r\n    event LogCFDTransferPosition(address oldOwner, address newOwner);\r\n    event LogCFDCanceledNew(address party, uint amount, bytes32 market);\r\n    event LogCFDStrikePriceUpdated(address party, uint newStrikePrice);\r\n\r\n    event LogCFDSale(\r\n        address party,\r\n        uint saleStrikePrice,\r\n        uint timeLimit\r\n    );\r\n    event LogCFDSaleCancelled(address party);\r\n    event LogCFDSaleUpdated(address party, uint newPrice);\r\n    event LogCFDSold(address to, address by, uint newNotional, uint sellerAmount, uint buyerDeposit, bytes32 market);\r\n\r\n    event LogCFDPartyBalanceUpdate(address party, uint amount, bool isWithdraw, uint newBalance, bytes32 market);\r\n    event LogCFDTransferFunds(address receiver, uint amount);\r\n\r\n    event LogCFDClosed(address winner, uint buyerCollateral, uint sellerCollateral, bytes32 market);\r\n    event LogCFDForceTerminated(address terminator, uint terminatorAmount, address otherParty, uint otherPartyAmount, bytes32 market);\r\n    event LogCFDUpgraded(address newCFD);\r\n    event LogCFDRemainingBalanceUnexpected(uint remainder);\r\n\r\n    enum Status {\r\n        CREATED,\r\n        INITIATED,\r\n        SALE,\r\n        CLOSED\r\n    }\r\n\r\n    /*\r\n     * Constants\r\n     */\r\n\r\n    string constant REASON_NOTIONAL_TOO_LOW = \"Notional below minimum\";\r\n    string constant REASON_FEES_NOT_ENOUGH = \"Not enough sent to cover fees\";\r\n    string constant REASON_DAI_TRANSFER_FAILED = \"Failure transfering ownership of DAI tokens\";\r\n    string constant REASON_COLLATERAL_RANGE_FAILED = \"collateralInRange false\";\r\n    string constant REASON_MUST_NOT_BE_INITIATED = \"Must not be initiated\";\r\n    string constant REASON_MUST_NOT_BE_CLOSED = \"Must not be closed\";\r\n    string constant REASON_MUST_NOT_BE_PARTY = \"Contract party can't call this\";\r\n    string constant REASON_MUST_BE_INITIATED = \"Must be initiated\";\r\n    string constant REASON_MUST_BE_SELLER = \"msg.sender must be seller\";\r\n    string constant REASON_MUST_NOT_BE_SELLER = \"msg.sender must not be seller\";\r\n    string constant REASON_MUST_BE_ON_SALE = \"Must be on sale\";\r\n    string constant REASON_MUST_BE_POSITIVE_PRICE = \"Price must be > 0\";\r\n    string constant REASON_ONLY_CONTRACT_PARTIES = \"Only contract parties can do this\";\r\n    string constant REASON_MUST_BE_ACTIVE = \"Must be active\";\r\n    string constant REASON_MARKET_PRICE_RANGE_FAILED = \"collateralInRange false\";\r\n    string constant REASON_WITHDRAW_NOT_ENOUGH = \"Can't withdraw more then available\";\r\n    string constant REASON_AMOUNT_NOT_ENOUGH = \"Amount not enough\";\r\n    string constant REASON_UPGRADE_ALREADY_SET = \"msg.sender already called\";\r\n    string constant REASON_UPGRADE_ALREADY_LATEST = \"Already at latest version\";\r\n    string constant REASON_TRANSFER_TO_EXISTING_PARTY = \"Can't transfer to existing party\";\r\n\r\n    uint public constant FORCE_TERMINATE_PENALTY_PERCENT = 5;\r\n    uint public constant MINIMUM_NOTIONAL_AMOUNT_DAI = 1 * 1e18; // 1 DAI/1 USD\r\n\r\n\r\n    /*\r\n     * State variables\r\n     */\r\n\r\n    address public buyer;                           // long\r\n    address public seller;                          // short\r\n    bytes32 public market;\r\n\r\n    uint public notionalAmountDai;\r\n    uint public buyerInitialNotional;\r\n    uint public sellerInitialNotional;\r\n\r\n    // format of strike prices as in Feeds contract - see Feeds.decimals()\r\n    uint public strikePrice;\r\n    uint public buyerInitialStrikePrice;\r\n    uint public sellerInitialStrikePrice;\r\n\r\n    // balances of amounts actually deposited/withdrawn from the contract\r\n    uint public buyerDepositBalance;\r\n    uint public sellerDepositBalance;\r\n\r\n    uint public buyerSaleStrikePrice;\r\n    uint public buyerSaleTimeLimit;\r\n\r\n    uint public sellerSaleStrikePrice;\r\n    uint public sellerSaleTimeLimit;\r\n\r\n    bool public buyerSelling;\r\n    bool public sellerSelling;\r\n\r\n    bool public initiated = false;\r\n    bool public closed = false;\r\n    bool public terminated;\r\n\r\n    // set to true for a short period of time - when second party has called\r\n    // upgrade and upgrade has called the new factory to do the work\r\n    bool public upgradeable = false;\r\n\r\n    // set to first party that calls upgrade\r\n    // enables identification of who called and that it has been called once\r\n    address public upgradeCalledBy = 0x0;\r\n\r\n    address public cfdRegistryAddr;\r\n    address public feedsAddr;\r\n\r\n    Registry public registry;\r\n\r\n    /*\r\n     * Functions\r\n     */\r\n\r\n    constructor() public {}\r\n\r\n    /**\r\n     * @dev Contract has been initiated (has 2 parties) and not yet terminated.\r\n     * @return true if contract is active\r\n     */\r\n    function isActive() public view returns (bool) {\r\n        return initiated == true && closed == false;\r\n    }\r\n\r\n    /**\r\n     * @dev Is buyer / long party selling.\r\n     * @return true if buyer has side up for sale\r\n     */\r\n    function isBuyerSelling() public view returns (bool) {\r\n        return buyerSelling &&\r\n            (buyerSaleTimeLimit == 0 || now < buyerSaleTimeLimit);\r\n    }\r\n\r\n    /**\r\n     * @dev Is seller / short party selling.\r\n     * @return true if seller has side up for sale\r\n     */\r\n    function isSellerSelling() public view returns (bool) {\r\n        return sellerSelling &&\r\n            (sellerSaleTimeLimit == 0 || now < sellerSaleTimeLimit);\r\n    }\r\n\r\n    /**\r\n     * @dev If the given party is selling one side of the contract.\r\n     * @return true if the given party is selling\r\n     */\r\n    function isSelling(address _party) public view returns (bool) {\r\n        return (_party == buyer && isBuyerSelling()) ||\r\n            (_party == seller && isSellerSelling());\r\n    }\r\n\r\n    /**\r\n     * @dev Check if the given address is one of the 2 parties of the contract.\r\n     * @param _party Address to check\r\n     * @return true if _party is either the buyer or seller.\r\n     */\r\n    function isContractParty(address _party) public view returns (bool) {\r\n        return _party == buyer || _party == seller;\r\n    }\r\n\r\n    /**\r\n     * @dev Create a new CFDinstance specifying the terms of the contract.\r\n     *\r\n     * Fee of 0.3% of the notional is taken.\r\n     *\r\n     * Therefore the intial deposit is _value minus these fees.\r\n     *\r\n     * @param _registryAddr Registry contract address\r\n     * @param _cfdRegistryAddr CFD Registry contract address\r\n     * @param _feedsAddr Feeds address\r\n     * @param _partyAddr Address of the party creating the contract\r\n     * @param _marketId Contract is for prices on this market\r\n     * @param _strikePrice Agreed initial price for the contract (compatible\r\n                with Feeds stored price - see Feeds.decimals() adjustment)\r\n     * @param _notionalAmountDai Contract amount\r\n     * @param _isBuyer Flag indicating if the contract creator wants to take the\r\n     *            buyer (true) or the seller side (false).\r\n     */\r\n    function create(\r\n        address _registryAddr,\r\n        address _cfdRegistryAddr,\r\n        address _feedsAddr,\r\n        address _partyAddr, // msg.sender calling the Factory\r\n        bytes32 _marketId,\r\n        uint _strikePrice,\r\n        uint _notionalAmountDai,\r\n        bool _isBuyer\r\n    )\r\n        public\r\n        pre_cond(_notionalAmountDai >= MINIMUM_NOTIONAL_AMOUNT_DAI, REASON_NOTIONAL_TOO_LOW)\r\n    {\r\n        registry = Registry(_registryAddr);\r\n        uint daiBalance = registry.getDAI().balanceOf(this);\r\n        uint fees = ContractForDifferenceLibrary.creatorFee(_notionalAmountDai);\r\n        if (daiBalance <= fees)\r\n            revert(REASON_FEES_NOT_ENOUGH);\r\n\r\n        uint collateralSent = daiBalance - fees;\r\n        if (!ContractForDifferenceLibrary.collateralInRange(_notionalAmountDai, collateralSent))\r\n            revert(REASON_COLLATERAL_RANGE_FAILED);\r\n\r\n        if (_isBuyer) {\r\n            buyer = _partyAddr;\r\n            buyerDepositBalance = collateralSent;\r\n        } else {\r\n            seller = _partyAddr;\r\n            sellerDepositBalance = collateralSent;\r\n        }\r\n\r\n        market = _marketId;\r\n        notionalAmountDai = _notionalAmountDai;\r\n        buyerInitialNotional = _notionalAmountDai;\r\n        sellerInitialNotional = _notionalAmountDai;\r\n\r\n        strikePrice = _strikePrice;\r\n        buyerInitialStrikePrice = _strikePrice;\r\n        sellerInitialStrikePrice = _strikePrice;\r\n\r\n        cfdRegistryAddr = _cfdRegistryAddr;\r\n        feedsAddr = _feedsAddr;\r\n\r\n        emit LogCFDCreated(\r\n            _partyAddr,\r\n            market,\r\n            notionalAmountDai,\r\n            daiBalance\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Create a new CFDinstance from a previous CFD instance. This is part\r\n     *      of the upgrade process (see CFD.upgrade()).\r\n     *\r\n     * @param _cfdAddr Address of the existing / old CFD\r\n     * @param _registryAddr Address of Registry contract\r\n     * @param _cfdRegistryAddr Address of CFDRegistry contract\r\n     * @param _feedsAddr Address to send fees to\r\n     */\r\n    function createByUpgrade(\r\n        address _cfdAddr,\r\n        address _registryAddr,\r\n        address _cfdRegistryAddr,\r\n        address _feedsAddr\r\n    )\r\n        public\r\n    {\r\n        ContractForDifference oldCfd = ContractForDifference(_cfdAddr);\r\n\r\n        market = oldCfd.market();\r\n        notionalAmountDai = oldCfd.notionalAmountDai();\r\n        strikePrice = oldCfd.strikePrice();\r\n        buyer = oldCfd.buyer();\r\n        seller = oldCfd.seller();\r\n\r\n        buyerDepositBalance = oldCfd.buyerDepositBalance();\r\n        buyerInitialNotional = oldCfd.buyerInitialNotional();\r\n        buyerInitialStrikePrice = oldCfd.buyerInitialStrikePrice();\r\n\r\n        sellerDepositBalance = oldCfd.sellerDepositBalance();\r\n        sellerInitialNotional = oldCfd.sellerInitialNotional();\r\n        sellerInitialStrikePrice = oldCfd.sellerInitialStrikePrice();\r\n\r\n        cfdRegistryAddr = _cfdRegistryAddr;\r\n        registry = Registry(_registryAddr);\r\n        feedsAddr = _feedsAddr;\r\n\r\n        initiated = true;\r\n\r\n        ContractForDifferenceRegistry(cfdRegistryAddr).registerParty(seller);\r\n    }\r\n\r\n    /**\r\n     * Returns an array with all the attributes of the contract\r\n     * (Had to split in 3 functions because of the stack limit)\r\n     * Max number of return values == 8\r\n     */\r\n    function getCfdAttributes()\r\n        public\r\n        view\r\n        returns (address, address, bytes32, uint, uint, bool, bool, Status)\r\n    {\r\n        return (\r\n            buyer,\r\n            seller,\r\n            market,\r\n            strikePrice,\r\n            notionalAmountDai,\r\n            buyerSelling,\r\n            sellerSelling,\r\n            status()\r\n        );\r\n    }\r\n    function getCfdAttributes2()\r\n        public\r\n        view\r\n        returns (uint, uint, uint, uint, uint, uint, uint, uint)\r\n    {\r\n        return (\r\n            buyerInitialNotional,\r\n            sellerInitialNotional,\r\n            buyerDepositBalance,\r\n            sellerDepositBalance,\r\n            buyerSaleStrikePrice,\r\n            sellerSaleStrikePrice,\r\n            buyerInitialStrikePrice,\r\n            sellerInitialStrikePrice\r\n        );\r\n    }\r\n    function getCfdAttributes3()\r\n        public\r\n        view\r\n        returns (bool, address)\r\n    {\r\n        return (\r\n            terminated,\r\n            upgradeCalledBy\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Counterparty deposits their funds into the contract thereby joining\r\n     * and initiating the contract.\r\n     *\r\n     * Fee of 0.5% of the notional is taken.\r\n     *\r\n     * Therefore the intial deposit is _value minus these fees.\r\n     */\r\n    function deposit(uint _value)\r\n        external\r\n        pre_cond(initiated == false, REASON_MUST_NOT_BE_INITIATED)\r\n        pre_cond(closed == false, REASON_MUST_NOT_BE_CLOSED) // cancelNew has not been called\r\n        pre_cond(isContractParty(msg.sender) == false, REASON_MUST_NOT_BE_PARTY) // reject contract creator depositing\r\n    {\r\n        uint joinerFees = ContractForDifferenceLibrary.joinerFee(notionalAmountDai);\r\n        if (_value <= joinerFees)\r\n            revert(REASON_FEES_NOT_ENOUGH);\r\n\r\n        uint collateralSent = _value - joinerFees;\r\n        if (!ContractForDifferenceLibrary.collateralInRange(notionalAmountDai, collateralSent))\r\n            revert(REASON_COLLATERAL_RANGE_FAILED);\r\n\r\n        daiClaim(_value);\r\n        daiTransferToFees(\r\n            joinerFees + ContractForDifferenceLibrary.creatorFee(notionalAmountDai)\r\n        );\r\n\r\n        if (buyer == 0x0) {\r\n            buyer = msg.sender;\r\n            buyerDepositBalance = collateralSent;\r\n        } else {\r\n            seller = msg.sender;\r\n            sellerDepositBalance = collateralSent;\r\n        }\r\n\r\n        initiated = true;\r\n        ContractForDifferenceRegistry(cfdRegistryAddr).registerParty(msg.sender);\r\n        emit LogCFDInitiated(\r\n            msg.sender,\r\n            _value,\r\n            buyer,\r\n            seller,\r\n            market,\r\n            notionalAmountDai,\r\n            strikePrice,\r\n            buyerDepositBalance,\r\n            sellerDepositBalance\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Cancels a newly created contract refunding the balance to the party\r\n     *      that created the contract. This can only be called before a contract\r\n     *      is initiated. ie. between the create() and deposit() calls.\r\n     */\r\n    function cancelNew()\r\n        external\r\n        pre_cond(initiated == false, REASON_MUST_NOT_BE_INITIATED)\r\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\r\n    {\r\n        uint amountSent = registry.getDAI().balanceOf(this);\r\n        daiTransfer(msg.sender, amountSent);\r\n        emit LogCFDTransferFunds(msg.sender, amountSent);\r\n        closed = true;\r\n        emit LogCFDCanceledNew(msg.sender, amountSent, market);\r\n    }\r\n\r\n    /**\r\n     * @dev Party adds more funds to the contract thereby increasing their\r\n     *      deposit balance.\r\n     * @param _value DAI amount\r\n     */\r\n    function topup(uint _value)\r\n        external\r\n        pre_cond(_value >= 1, REASON_AMOUNT_NOT_ENOUGH)\r\n        pre_cond(initiated == true, REASON_MUST_BE_INITIATED)\r\n        pre_cond(closed == false, REASON_MUST_NOT_BE_CLOSED)\r\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\r\n        pre_cond(isSelling(msg.sender) == false, REASON_MUST_NOT_BE_SELLER)\r\n    {\r\n        bool isBuyer = msg.sender == buyer;\r\n        uint newDepositBalance = (isBuyer ? \r\n            buyerDepositBalance : \r\n            sellerDepositBalance\r\n        ).add(_value);\r\n\r\n        // check topup doesn't make collateral exceed the maximum\r\n        if (!ContractForDifferenceLibrary.collateralInRange(notionalAmountDai, newDepositBalance))\r\n            revert(REASON_COLLATERAL_RANGE_FAILED);\r\n\r\n        daiClaim(_value);\r\n\r\n        if (isBuyer) {\r\n            buyerDepositBalance = newDepositBalance;\r\n        } else {\r\n            sellerDepositBalance = newDepositBalance;\r\n        }\r\n\r\n        emit LogCFDPartyBalanceUpdate(msg.sender, _value, false, newDepositBalance, market);\r\n    }\r\n\r\n    /**\r\n     * @dev Party withdraws funds from the contract.\r\n     *      They can only withdraw down to an amount that leaves the collateral\r\n     *      to notional difference at 20% or more.\r\n     * @param _withdrawAmount Amount to withdraw from the deposits balance.\r\n     */\r\n    function withdraw(uint _withdrawAmount)\r\n        external\r\n        assertWithdrawPreCond(_withdrawAmount)\r\n    {\r\n        bool isBuyer = msg.sender == buyer;\r\n        uint currentDepositBal = isBuyer ? buyerDepositBalance : sellerDepositBalance;\r\n\r\n        // first simple check that can't withdraw more then deposited\r\n        if (_withdrawAmount > currentDepositBal)\r\n            revert(REASON_WITHDRAW_NOT_ENOUGH);\r\n\r\n        // second a more precise check that the collateral at new balance will remain above the min\r\n        uint newDepositBal = currentDepositBal - _withdrawAmount;\r\n        uint marketPrice = latestPrice();\r\n        if (!marketPriceInRange(\r\n            marketPrice,\r\n            isBuyer ? newDepositBal : buyerDepositBalance,\r\n            isBuyer ? sellerDepositBalance : newDepositBal,\r\n            strikePrice // unchanged on withdraw\r\n        )) {\r\n            revert(REASON_MARKET_PRICE_RANGE_FAILED);\r\n        }\r\n\r\n        uint collateral = ContractForDifferenceLibrary.calculateCollateralAmount(\r\n            strikePrice,\r\n            marketPrice,\r\n            notionalAmountDai,\r\n            newDepositBal,\r\n            isBuyer\r\n        );\r\n\r\n        if (!ContractForDifferenceLibrary.collateralInRange(notionalAmountDai, collateral)) {\r\n            revert(REASON_COLLATERAL_RANGE_FAILED);\r\n        }\r\n\r\n        daiTransfer(msg.sender, _withdrawAmount);\r\n        emit LogCFDTransferFunds(msg.sender, _withdrawAmount);\r\n\r\n        if (isBuyer) {\r\n            buyerDepositBalance = newDepositBal;\r\n        } else {\r\n            sellerDepositBalance = newDepositBal;\r\n        }\r\n\r\n        emit LogCFDPartyBalanceUpdate(msg.sender, _withdrawAmount, true, newDepositBal, market);\r\n    }\r\n\r\n    /* NOTE: Split off into modifier to work around 'stack too deep' error */\r\n    modifier assertWithdrawPreCond(uint _withdrawAmount) \r\n    {\r\n        require(_withdrawAmount >= 1, REASON_WITHDRAW_NOT_ENOUGH);\r\n        require(initiated == true, REASON_MUST_BE_INITIATED);\r\n        require(closed == false, REASON_MUST_NOT_BE_CLOSED);\r\n        require(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES);\r\n        require(isSelling(msg.sender) == false, REASON_MUST_NOT_BE_SELLER);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Parties can transfer contract ownership to another address by\r\n     *      calling this function.\r\n     * @param _newAddress Addreess of the new party to swap in.\r\n     */\r\n    function transferPosition(address _newAddress)\r\n        external\r\n        pre_cond(closed == false, REASON_MUST_NOT_BE_CLOSED)\r\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\r\n        pre_cond(isContractParty(_newAddress) == false, REASON_MUST_NOT_BE_PARTY)\r\n        pre_cond(isSelling(msg.sender) == false, REASON_MUST_NOT_BE_SELLER)\r\n    {\r\n        if (msg.sender == buyer) buyer = _newAddress;\r\n        else if (msg.sender == seller) seller = _newAddress;\r\n        else if (msg.sender == upgradeCalledBy) upgradeCalledBy = 0x0;\r\n        ContractForDifferenceRegistry(cfdRegistryAddr).registerParty(_newAddress);\r\n        emit LogCFDTransferPosition(msg.sender, _newAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev Position in a contract can be sold to another party. This function\r\n     *      makes the callers side available for sale. A party can buy the side\r\n     *      with the buy function.\r\n     * @param _desiredStrikePrice Sellers desired sell strike price\r\n     * @param _timeLimit Sale available until this time in UNIX epoch seconds\r\n     *                  (< now for no limit)\r\n     */\r\n    function sellPrepare(uint _desiredStrikePrice, uint _timeLimit)\r\n        external\r\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\r\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\r\n        // reject already marked selling by the caller\r\n        pre_cond(isSelling(msg.sender) == false, REASON_MUST_NOT_BE_SELLER)\r\n        pre_cond(_desiredStrikePrice > 0, REASON_MUST_BE_POSITIVE_PRICE)\r\n    {\r\n        // mark side on sale\r\n        uint timeLimit = timeLimitFutureOrZero(_timeLimit);\r\n        if (msg.sender == buyer) {\r\n            buyerSelling = true;\r\n            buyerSaleStrikePrice = _desiredStrikePrice;\r\n            buyerSaleTimeLimit = timeLimit;\r\n        } else if (msg.sender == seller) {\r\n            sellerSelling = true;\r\n            sellerSaleStrikePrice = _desiredStrikePrice;\r\n            sellerSaleTimeLimit = timeLimit;\r\n        }\r\n\r\n        ContractForDifferenceRegistry(cfdRegistryAddr).registerSale(msg.sender);\r\n        emit LogCFDSale(\r\n            msg.sender,\r\n            _desiredStrikePrice,\r\n            timeLimit\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Seller can update the price on the sale.\r\n     */\r\n    function sellUpdate(\r\n        uint _newPrice\r\n    )\r\n        external\r\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\r\n        pre_cond(isSelling(msg.sender), REASON_MUST_BE_SELLER)\r\n        pre_cond(_newPrice > 0, REASON_MUST_BE_POSITIVE_PRICE)\r\n    {\r\n        if (msg.sender == buyer) {\r\n            buyerSaleStrikePrice = _newPrice;\r\n        } else if (msg.sender == seller) {\r\n            sellerSaleStrikePrice = _newPrice;\r\n        }\r\n        emit LogCFDSaleUpdated(msg.sender, _newPrice);\r\n    }\r\n\r\n    /**\r\n     * @dev Party can update the strike price of an non-initialized contract\r\n     */\r\n    function changeStrikePrice(\r\n        uint _newStrikePrice\r\n    )\r\n        external\r\n        pre_cond(initiated == false, REASON_MUST_NOT_BE_INITIATED)\r\n        pre_cond(closed == false, REASON_MUST_NOT_BE_CLOSED)\r\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\r\n        pre_cond(_newStrikePrice > 0, REASON_MUST_BE_POSITIVE_PRICE)\r\n    {\r\n        strikePrice = _newStrikePrice;\r\n        buyerInitialStrikePrice = _newStrikePrice;\r\n        sellerInitialStrikePrice = _newStrikePrice;\r\n        emit LogCFDStrikePriceUpdated(msg.sender, _newStrikePrice);\r\n    }\r\n\r\n    /**\r\n     * @dev Cancel the for sale status setup by sellPrepare()\r\n     */\r\n    function sellCancel()\r\n        external\r\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\r\n        pre_cond(isSelling(msg.sender), REASON_MUST_BE_SELLER)\r\n    {\r\n        clearSale(msg.sender == buyer);\r\n        emit LogCFDSaleCancelled(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Buy the side in the contract that is for sale.\r\n     *\r\n     * Fee of 0.5% of the notional is taken.\r\n     *\r\n     * @param _buyBuyerSide Buying the buyer side or the seller side?\r\n     * @param _value DAI amount\r\n     */\r\n    function buy(bool _buyBuyerSide, uint _value)\r\n        external\r\n        assertBuyPreCond(_buyBuyerSide)\r\n    {\r\n        uint fees = ContractForDifferenceLibrary.joinerFee(notionalAmountDai);\r\n        if (_value <= fees)\r\n            revert(REASON_FEES_NOT_ENOUGH);\r\n\r\n        // check sent collateral falls in the allowable range\r\n        uint collateralSent = _value.sub(fees);\r\n        if (!ContractForDifferenceLibrary.collateralInRange(notionalAmountDai, collateralSent))\r\n            revert(REASON_COLLATERAL_RANGE_FAILED);\r\n\r\n        uint marketPrice = latestPrice();\r\n        uint newStrikePrice = _buyBuyerSide ?\r\n            buyerSaleStrikePrice :\r\n            sellerSaleStrikePrice;\r\n\r\n        // check new parameters fall in the allowable range\r\n        if (!marketPriceInRange(\r\n            marketPrice,\r\n            _buyBuyerSide ? collateralSent : buyerDepositBalance,\r\n            _buyBuyerSide ? sellerDepositBalance : collateralSent,\r\n            newStrikePrice // buying at this strike price\r\n        )) {\r\n            revert(REASON_MARKET_PRICE_RANGE_FAILED);\r\n        }\r\n\r\n        // move ownership of sent DAI to the CFD\r\n        daiClaim(_value);\r\n        daiTransferToFees(fees);\r\n\r\n        // transfer to selling party\r\n        address sellingParty = _buyBuyerSide ? buyer : seller;\r\n        uint sellingPartyCollateral = buyTransferFunds(\r\n            _buyBuyerSide,\r\n            newStrikePrice,\r\n            sellingParty\r\n        );\r\n\r\n        // set new party and balances\r\n        uint remainingPartyDeposits = registry.getDAI().\r\n            balanceOf(this).sub(collateralSent);\r\n\r\n        // new notional amount value\r\n        uint newNotional = ContractForDifferenceLibrary.calculateNewNotional(\r\n            notionalAmountDai,\r\n            strikePrice,\r\n            newStrikePrice\r\n        );\r\n\r\n        if (_buyBuyerSide) {\r\n            buyer = msg.sender;\r\n            buyerDepositBalance = collateralSent;\r\n            buyerInitialStrikePrice = newStrikePrice;\r\n            buyerInitialNotional = newNotional;\r\n            sellerDepositBalance = remainingPartyDeposits;\r\n        } else {\r\n            seller = msg.sender;\r\n            sellerDepositBalance = collateralSent;\r\n            sellerInitialStrikePrice = newStrikePrice;\r\n            sellerInitialNotional = newNotional;\r\n            buyerDepositBalance = remainingPartyDeposits;\r\n        }\r\n\r\n        strikePrice = newStrikePrice;\r\n        notionalAmountDai = newNotional;\r\n\r\n        clearSale(_buyBuyerSide);\r\n\r\n        // clean up upgradeCalledBy if the departing party had set that\r\n        if (upgradeCalledBy == sellingParty) {\r\n            upgradeCalledBy = 0x0;\r\n        }\r\n\r\n        ContractForDifferenceRegistry(cfdRegistryAddr).registerParty(msg.sender);\r\n        emit LogCFDSold(msg.sender, sellingParty, newNotional, sellingPartyCollateral, _value, market);\r\n    }\r\n\r\n    /* NOTE: Split off into modifier to work around 'stack too deep' error */\r\n    modifier assertBuyPreCond(bool _buyBuyerSide) \r\n    {\r\n        require(isActive(), REASON_MUST_BE_ACTIVE);\r\n        require(isSelling(_buyBuyerSide ? buyer : seller), REASON_MUST_BE_ON_SALE);\r\n        require(isContractParty(msg.sender) == false, REASON_MUST_NOT_BE_PARTY);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Does all transfers of funds related to the buy().\r\n     *\r\n     * Transfer logic split off in seperate function ONLY to workaround\r\n     * 'Stack too deep' limit.\r\n     */\r\n    function buyTransferFunds(\r\n        bool buyBuyerSide,\r\n        uint newStrikePrice,\r\n        address sellingParty\r\n    )\r\n        private\r\n        returns (uint sellingPartyCollateral)\r\n    {\r\n        // determine collateral amount to send to the selling party\r\n        sellingPartyCollateral = ContractForDifferenceLibrary.calculateCollateralAmount(\r\n            strikePrice,\r\n            newStrikePrice,\r\n            notionalAmountDai,\r\n            buyBuyerSide ? buyerDepositBalance : sellerDepositBalance,\r\n            buyBuyerSide\r\n        );\r\n\r\n        // send money to selling party\r\n        daiTransfer(sellingParty, sellingPartyCollateral);\r\n        emit LogCFDTransferFunds(sellingParty, sellingPartyCollateral);\r\n    }\r\n\r\n    /**\r\n     * @dev Daemons will call this routine when the market price has moved\r\n     *      enough that the closeRatio for this contract has been reached.\r\n     *      It can actually be called by anyone who is willing to pay the gas\r\n     *      for the liquidate. But if the market has moved past the liquidate\r\n     *      threshold the call will be rejected.\r\n     *\r\n     * This will disolve the contract and return each parties balance of\r\n     * collateral.\r\n     */\r\n    function liquidate()\r\n        external\r\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\r\n    {\r\n        uint marketPrice = latestPrice();\r\n\r\n        // #11 double check the 5% threshold was crossed, if not then REJECT\r\n        // (can only liquidate if out of range)\r\n        require(\r\n            !marketPriceInRange(\r\n                marketPrice,\r\n                buyerDepositBalance,\r\n                sellerDepositBalance,\r\n                strikePrice\r\n            ), \r\n            \"Liquidate threshold not yet reached\"\r\n        );\r\n\r\n        // fetch one of the cutoffs to determine which is the winner\r\n        uint buyerCutOff = ContractForDifferenceLibrary.cutOffPrice(\r\n            notionalAmountDai,\r\n            buyerDepositBalance,\r\n            strikePrice,\r\n            true\r\n        );\r\n\r\n        // if buyer cutoff still in range then buyer wins, otherwise seller\r\n        bool winnerIsBuyer = marketPrice > buyerCutOff;\r\n        address winner = winnerIsBuyer ? buyer : seller;\r\n\r\n        // winner takes all\r\n        uint remaining = registry.getDAI().balanceOf(this);\r\n        daiTransfer(winner, remaining);\r\n        emit LogCFDTransferFunds(winner, remaining);\r\n\r\n        closed = true;\r\n\r\n        emit LogCFDClosed(\r\n            winner,\r\n            winnerIsBuyer ? remaining : 0,\r\n            winnerIsBuyer ? 0 : remaining,\r\n            market\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Force terminate executed by one party who will penalised 5% of their\r\n     * collateral. Then penalty will be sent to the counterparty.\r\n     */\r\n    function forceTerminate()\r\n        external\r\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\r\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\r\n    {\r\n        uint marketPrice = latestPrice();\r\n        bool forcingPartyIsBuyer = msg.sender == buyer;\r\n\r\n        uint buyerCollateral = ContractForDifferenceLibrary.calculateCollateralAmount(\r\n            strikePrice,\r\n            marketPrice,\r\n            notionalAmountDai,\r\n            buyerDepositBalance,\r\n            true\r\n        );\r\n        uint sellerCollateral = ContractForDifferenceLibrary.calculateCollateralAmount(\r\n            strikePrice,\r\n            marketPrice,\r\n            notionalAmountDai,\r\n            sellerDepositBalance,\r\n            false\r\n        );\r\n\r\n        //\r\n        // calculate and check the remainder - it should be equal to zero\r\n        //\r\n        // if not expected log the event and transfer the remainder to fees - it\r\n        //     will be sorted out manually\r\n        //\r\n        uint balanceRemainder = registry.getDAI().\r\n            balanceOf(this).\r\n            sub(buyerCollateral).\r\n            sub(sellerCollateral);\r\n        if (balanceRemainder != 0) {\r\n            emit LogCFDRemainingBalanceUnexpected(balanceRemainder);\r\n        }\r\n        daiTransferToFees(balanceRemainder);\r\n\r\n        // penalise the force terminator 5% and give it to the counterparty\r\n        uint penalty = ContractForDifferenceLibrary.percentOf(\r\n            forcingPartyIsBuyer ? buyerCollateral : sellerCollateral,\r\n            FORCE_TERMINATE_PENALTY_PERCENT\r\n        );\r\n        if (forcingPartyIsBuyer) {\r\n            buyerCollateral = buyerCollateral.sub(penalty);\r\n            sellerCollateral = sellerCollateral.add(penalty);\r\n        } else {\r\n            buyerCollateral = buyerCollateral.add(penalty);\r\n            sellerCollateral = sellerCollateral.sub(penalty);\r\n        }\r\n\r\n        // Send collateral amounts back each party.\r\n        daiTransfer(buyer, buyerCollateral);\r\n        emit LogCFDTransferFunds(buyer, buyerCollateral);\r\n        daiTransfer(seller, sellerCollateral);\r\n        emit LogCFDTransferFunds(seller, sellerCollateral);\r\n\r\n        terminated = true;\r\n        closed = true;\r\n\r\n        if (forcingPartyIsBuyer)\r\n            emit LogCFDForceTerminated(buyer, buyerCollateral, seller, sellerCollateral, market);\r\n        else\r\n            emit LogCFDForceTerminated(seller, sellerCollateral, buyer, buyerCollateral, market);\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrade contract to a new version. This involves creating a new CFD\r\n     *      at the latest contract set - transferring over all properties and\r\n     *      value from this one to the new one.\r\n     *      An upgrade requires a call to this function from both parties. Then\r\n     *      upgrade will happen when the second party makes the call.\r\n     */\r\n    function upgrade()\r\n        external\r\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\r\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\r\n        pre_cond(isSelling(msg.sender) == false, REASON_MUST_NOT_BE_SELLER)\r\n        pre_cond(msg.sender != upgradeCalledBy, REASON_UPGRADE_ALREADY_SET)\r\n        pre_cond(registry.allCFDs(this) != registry.getCFDFactoryLatest(), REASON_UPGRADE_ALREADY_LATEST)\r\n    {\r\n        // 1st call to initiate upgrade process\r\n        if (upgradeCalledBy == 0x0) {\r\n            upgradeCalledBy = msg.sender;\r\n            return;\r\n        }\r\n\r\n        // if here then then this is the 2nd call, invoked by the opposite, so\r\n        // kick off the upgrade process\r\n        upgradeable = true;\r\n        address cfdFactoryLatest = registry.getCFDFactoryLatest();\r\n        address newCfd = ContractForDifferenceFactory(cfdFactoryLatest).\r\n            createByUpgrade();\r\n        daiTransfer(newCfd, registry.getDAI().balanceOf(this));\r\n        upgradeable = false;\r\n        closed = true;\r\n\r\n        emit LogCFDUpgraded(newCfd);\r\n    }\r\n\r\n    /**\r\n     * @dev Derive status from the state variables.\r\n     * @return Status reflecting the current state.\r\n     */\r\n    function status()\r\n        public\r\n        view\r\n        returns (Status)\r\n    {\r\n        if (closed == true)\r\n            return Status.CLOSED;\r\n        else if (initiated == false)\r\n            return Status.CREATED;\r\n        else if (isBuyerSelling() || isSellerSelling())\r\n            return Status.SALE;\r\n        else\r\n            return Status.INITIATED;\r\n    }\r\n\r\n    /**\r\n     * Get the latest read for the market of this CFD.\r\n     */\r\n    function latestPrice()\r\n        internal\r\n        view\r\n        returns (uint price)\r\n    {\r\n        uint marketPrice;\r\n        (marketPrice, ) = Feeds(feedsAddr).read(market);\r\n        return marketPrice;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if given parameters and given market price result in a price\r\n     *      inside an allowable range. This range is defined by the ContractForDifferenceLibrary.cutOffPrice\r\n     *      function formulas. The idea is that as parameters change - leverage,\r\n     *      market price etc., we must check the change doesn't result in a\r\n     *      liquidation event due to too little collateral.\r\n     *\r\n     * @param _marketPrice Current market price\r\n     * @return true if in range; false if not\r\n     */\r\n\r\n    function marketPriceInRange(\r\n        uint _marketPrice,\r\n        uint _buyerDepositBalance,\r\n        uint _sellerDepositBalance,\r\n        uint _strikePrice\r\n    )\r\n        public\r\n        view\r\n        returns (bool inRange)\r\n    {\r\n        uint buyerCutOff = ContractForDifferenceLibrary.cutOffPrice(\r\n            notionalAmountDai,\r\n            _buyerDepositBalance,\r\n            _strikePrice,\r\n            true\r\n        );\r\n        uint sellerCutOff = ContractForDifferenceLibrary.cutOffPrice(\r\n            notionalAmountDai,\r\n            _sellerDepositBalance,\r\n            _strikePrice,\r\n            false\r\n        );\r\n        inRange = _marketPrice > buyerCutOff && _marketPrice < sellerCutOff;\r\n    }\r\n\r\n   /**\r\n     * @dev Calculate new notional amount after a side has been sold at a new\r\n     *      strike price.\r\n     *\r\n     * Formula is:\r\n     *  N2 = N1 * S2 / S1\r\n     * Where:\r\n     *  N1 = previous notional\r\n     *  S1 = previous strike price\r\n     *  S2 = sale strike price\r\n     *\r\n     * @param _oldNotional Existing notional.\r\n     * @param _oldStrikePrice Existing strike price.\r\n     * @param _newStrikePrice New / Sale strike price.\r\n     * @return newNotional Result of the calculation.\r\n     */\r\n    function calculateNewNotional(\r\n        uint _oldNotional,\r\n        uint _oldStrikePrice,\r\n        uint _newStrikePrice\r\n    )\r\n        public\r\n        pure\r\n        returns (uint newNotional)\r\n    {\r\n        newNotional = ContractForDifferenceLibrary.calculateNewNotional(\r\n            _oldNotional,\r\n            _oldStrikePrice,\r\n            _newStrikePrice\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate the collateral amount for one party given the current\r\n     *      market price and original strike price, notional amount and the\r\n     *      amount the party has deposited into the contract.\r\n     *\r\n     * @param _marketPrice Current market price\r\n     * @param _strikePrice CFD strike price\r\n     * @param _notionalAmount CFD notional amount\r\n     * @param _depositBalance Balances of deposits into the contract\r\n     * @param _isBuyer Buyer or Seller / Long or short party?\r\n     *\r\n     * @return collateral Amount of collateral for the party\r\n     */\r\n    function calculateCollateralAmount(\r\n        uint _strikePrice,\r\n        uint _marketPrice,\r\n        uint _notionalAmount,\r\n        uint _depositBalance,\r\n        bool _isBuyer\r\n    )\r\n        public\r\n        pure\r\n        returns (uint collateral)\r\n    {\r\n        collateral = ContractForDifferenceLibrary.calculateCollateralAmount(\r\n            _strikePrice,\r\n            _marketPrice,\r\n            _notionalAmount,\r\n            _depositBalance,\r\n            _isBuyer\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate the cut off price for buyer or seller.\r\n     *\r\n     * This is the price that if passed would raise a liquidation event.\r\n     *\r\n     * Base Formulas are:\r\n     *     Buyer:  1.05 * S - depositBalanceLong  * S / N\r\n     *     Seller: 0.95 * S + depositBalanceShort * S / N\r\n     *\r\n     * However for Solidity we need to adjust parts by FACTOR_UINT to ensure\r\n     * no fractions.\r\n     *\r\n     * @param _notionalAmountDai Contract notional amount\r\n     * @param _depositBalance Balance of deposits for one party\r\n     *\r\n     * @return cut off price\r\n     */\r\n    function cutOffPrice(\r\n        uint _notionalAmountDai,\r\n        uint _depositBalance,\r\n        uint _strikePrice,\r\n        bool _calcForBuyerSide\r\n    )\r\n        public\r\n        pure\r\n        returns (uint price)\r\n    {\r\n        price = ContractForDifferenceLibrary.cutOffPrice(\r\n            _notionalAmountDai,\r\n            _depositBalance,\r\n            _strikePrice,\r\n            _calcForBuyerSide\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Creator fee - 0.3% of notional.\r\n     */\r\n    function creatorFee(uint _notional) public pure returns (uint fee) {\r\n        fee = ContractForDifferenceLibrary.creatorFee(_notional);\r\n    }\r\n\r\n    /**\r\n     * Joiner (deposit or buy) percentage fee - 0.5% of notional.\r\n     */\r\n    function joinerFee(uint _notional) public pure returns (uint fee) {\r\n        fee = ContractForDifferenceLibrary.joinerFee(_notional);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate the change in contract value based on the price change.\r\n     * @param _currentPrice Current market price\r\n     */\r\n    function changeInDai(\r\n        uint _strikePrice,\r\n        uint _currentPrice,\r\n        uint _notionalAmount\r\n    )\r\n        public\r\n        pure\r\n        returns (uint change)\r\n    {\r\n        change = ContractForDifferenceLibrary.changeInDai(\r\n            _strikePrice,\r\n            _currentPrice,\r\n            _notionalAmount\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Return a percentage change comparing a value with a new value.\r\n     * @param _value The existing value to compare against\r\n     * @param _newValue The new value to compare the change against\r\n     * @return Percentage change (eg. _value = 100, _newValue = 90 then return 10)\r\n     */\r\n    function percentChange(uint _value, uint _newValue)\r\n        public\r\n        pure\r\n        returns (uint percent)\r\n    {\r\n        percent = ContractForDifferenceLibrary.percentChange(_value, _newValue);\r\n    }\r\n\r\n    /**\r\n     * @dev Return a percentage of a given amount.\r\n     * @param _amount Amount to calculate the percentage of\r\n     * @param _percent Percent amount (1 - 100)\r\n     */\r\n    function percentOf(uint _amount, uint _percent)\r\n        public\r\n        pure\r\n        returns (uint adjusted)\r\n    {\r\n        adjusted = ContractForDifferenceLibrary.percentOf(_amount, _percent);\r\n    }\r\n\r\n    /**\r\n     * Utility that given a time limit will preverve it if in the future OR\r\n     * set it to 0 if it's in the present or past.\r\n     */\r\n    function timeLimitFutureOrZero(\r\n        uint _timeLimit\r\n    )\r\n        private\r\n        view // not pure because of 'now'\r\n        returns(uint timeLimit)\r\n    {\r\n        timeLimit = (_timeLimit > now) ? _timeLimit : 0;\r\n    }\r\n\r\n    /**\r\n     * Clear all sale related state.\r\n     */\r\n    function clearSale(bool _clearBuyerSide) private {\r\n        if (_clearBuyerSide) {\r\n            buyerSaleStrikePrice = 0;\r\n            buyerSaleTimeLimit = 0;\r\n            buyerSelling = false;\r\n        } else {\r\n            sellerSaleStrikePrice = 0;\r\n            sellerSaleTimeLimit = 0;\r\n            sellerSelling = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Transfer DAI to an address.\r\n     */\r\n    function daiTransfer(address _to, uint _value) private {\r\n        require(\r\n            registry.getDAI().transfer(_to, _value),\r\n            REASON_DAI_TRANSFER_FAILED\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Transfer DAI to the fees address.\r\n     */\r\n    function daiTransferToFees(uint _value) private {\r\n        daiTransfer(registry.getFees(), _value);\r\n    }\r\n\r\n    /**\r\n     * Claim DAI - ie. move approved DAI to this CFD contract.\r\n     */\r\n    function daiClaim(uint _value) private {\r\n        require(\r\n            registry.getDAI().transferFrom(msg.sender, this, _value),\r\n            REASON_DAI_TRANSFER_FAILED\r\n        );\r\n    }\r\n\r\n}\r\n",
  "sourcePath": "D:\\Users\\Julien\\Desktop\\Work\\0xFutures\\protocol\\contracts\\cfd\\ContractForDifference.sol",
  "compiler": {
    "name": "solc",
    "version": "0.4.25+commit.59dbf8f1.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "2.0.2",
  "updatedAt": "2019-02-16T16:52:04.977Z"
}