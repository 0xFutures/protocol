{
  "contractName": "ContractForDifference",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "notionalAmountDai",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "seller",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "feedsAddr",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "terminated",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "FORCE_TERMINATE_PENALTY_PERCENT",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerSaleStrikePrice",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerInitialNotional",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerDepositBalance",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "upgradeCalledBy",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "upgradeable",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "MINIMUM_NOTIONAL_AMOUNT_DAI",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "closed",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerSaleTimeLimit",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerInitialStrikePrice",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyer",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerInitialNotional",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerSaleStrikePrice",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "market",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "cfdRegistryAddr",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerDepositBalance",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "initiated",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerSelling",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "strikePrice",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerInitialStrikePrice",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerSaleTimeLimit",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerSelling",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "notionalAmountDai",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "deposit",
          "type": "uint256"
        }
      ],
      "name": "LogCFDCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "joiner",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amountSent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "notionalAmountDai",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "strikePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "buyerDepositBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "sellerDepositBalance",
          "type": "uint256"
        }
      ],
      "name": "LogCFDInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "LogCFDTransferPosition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        }
      ],
      "name": "LogCFDCanceledNew",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "newStrikePrice",
          "type": "uint256"
        }
      ],
      "name": "LogCFDStrikePriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "saleStrikePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "timeLimit",
          "type": "uint256"
        }
      ],
      "name": "LogCFDSale",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        }
      ],
      "name": "LogCFDSaleCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "LogCFDSaleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "newNotional",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "sellerAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "buyerDeposit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        }
      ],
      "name": "LogCFDSold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "isWithdraw",
          "type": "bool"
        },
        {
          "indexed": false,
          "name": "newBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        }
      ],
      "name": "LogCFDPartyBalanceUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LogCFDTransferFunds",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "buyerCollateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "sellerCollateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        }
      ],
      "name": "LogCFDClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "terminator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "terminatorAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "otherParty",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "otherPartyAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        }
      ],
      "name": "LogCFDForceTerminated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "newCFD",
          "type": "address"
        }
      ],
      "name": "LogCFDUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "remainder",
          "type": "uint256"
        }
      ],
      "name": "LogCFDRemainingBalanceUnexpected",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isActive",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isBuyerSelling",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isSellerSelling",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_party",
          "type": "address"
        }
      ],
      "name": "isSelling",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_party",
          "type": "address"
        }
      ],
      "name": "isContractParty",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_registryAddr",
          "type": "address"
        },
        {
          "name": "_cfdRegistryAddr",
          "type": "address"
        },
        {
          "name": "_feedsAddr",
          "type": "address"
        },
        {
          "name": "_partyAddr",
          "type": "address"
        },
        {
          "name": "_marketId",
          "type": "bytes32"
        },
        {
          "name": "_strikePrice",
          "type": "uint256"
        },
        {
          "name": "_notionalAmountDai",
          "type": "uint256"
        },
        {
          "name": "_isBuyer",
          "type": "bool"
        }
      ],
      "name": "createNew",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_cfdAddr",
          "type": "address"
        },
        {
          "name": "_registryAddr",
          "type": "address"
        },
        {
          "name": "_cfdRegistryAddr",
          "type": "address"
        },
        {
          "name": "_feedsAddr",
          "type": "address"
        }
      ],
      "name": "createByUpgrade",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCfdAttributes",
      "outputs": [
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "bytes32"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "bool"
        },
        {
          "name": "",
          "type": "bool"
        },
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCfdAttributes2",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCfdAttributes3",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        },
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_collateral",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "cancelNew",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "topup",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_newAddress",
          "type": "address"
        }
      ],
      "name": "transferPosition",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_desiredStrikePrice",
          "type": "uint256"
        },
        {
          "name": "_timeLimit",
          "type": "uint256"
        }
      ],
      "name": "sellPrepare",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_newPrice",
          "type": "uint256"
        }
      ],
      "name": "sellUpdate",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_newStrikePrice",
          "type": "uint256"
        }
      ],
      "name": "changeStrikePrice",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "sellCancel",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_buyBuyerSide",
          "type": "bool"
        },
        {
          "name": "_collateral",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "liquidate",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "forceTerminate",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "upgrade",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "status",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_marketPrice",
          "type": "uint256"
        },
        {
          "name": "_buyerDepositBalance",
          "type": "uint256"
        },
        {
          "name": "_sellerDepositBalance",
          "type": "uint256"
        },
        {
          "name": "_strikePrice",
          "type": "uint256"
        }
      ],
      "name": "marketPriceInRange",
      "outputs": [
        {
          "name": "inRange",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_oldNotional",
          "type": "uint256"
        },
        {
          "name": "_oldStrikePrice",
          "type": "uint256"
        },
        {
          "name": "_newStrikePrice",
          "type": "uint256"
        }
      ],
      "name": "calculateNewNotional",
      "outputs": [
        {
          "name": "newNotional",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_strikePrice",
          "type": "uint256"
        },
        {
          "name": "_marketPrice",
          "type": "uint256"
        },
        {
          "name": "_notionalAmount",
          "type": "uint256"
        },
        {
          "name": "_depositBalance",
          "type": "uint256"
        },
        {
          "name": "_isBuyer",
          "type": "bool"
        }
      ],
      "name": "calculateCollateralAmount",
      "outputs": [
        {
          "name": "collateral",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_notionalAmountDai",
          "type": "uint256"
        },
        {
          "name": "_depositBalance",
          "type": "uint256"
        },
        {
          "name": "_strikePrice",
          "type": "uint256"
        },
        {
          "name": "_calcForBuyerSide",
          "type": "bool"
        }
      ],
      "name": "cutOffPrice",
      "outputs": [
        {
          "name": "price",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_strikePrice",
          "type": "uint256"
        },
        {
          "name": "_currentPrice",
          "type": "uint256"
        },
        {
          "name": "_notionalAmount",
          "type": "uint256"
        }
      ],
      "name": "changeInDai",
      "outputs": [
        {
          "name": "change",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_value",
          "type": "uint256"
        },
        {
          "name": "_newValue",
          "type": "uint256"
        }
      ],
      "name": "percentChange",
      "outputs": [
        {
          "name": "percent",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_amount",
          "type": "uint256"
        },
        {
          "name": "_percent",
          "type": "uint256"
        }
      ],
      "name": "percentOf",
      "outputs": [
        {
          "name": "adjusted",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.6+commit.b259423e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"notionalAmountDai\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feedsAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_strikePrice\",\"type\":\"uint256\"},{\"name\":\"_currentPrice\",\"type\":\"uint256\"},{\"name\":\"_notionalAmount\",\"type\":\"uint256\"}],\"name\":\"changeInDai\",\"outputs\":[{\"name\":\"change\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"terminated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"sellUpdate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FORCE_TERMINATE_PENALTY_PERCENT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyerSaleStrikePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellerInitialNotional\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_cfdAddr\",\"type\":\"address\"},{\"name\":\"_registryAddr\",\"type\":\"address\"},{\"name\":\"_cfdRegistryAddr\",\"type\":\"address\"},{\"name\":\"_feedsAddr\",\"type\":\"address\"}],\"name\":\"createByUpgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"liquidate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCfdAttributes2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellerDepositBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_oldNotional\",\"type\":\"uint256\"},{\"name\":\"_oldStrikePrice\",\"type\":\"uint256\"},{\"name\":\"_newStrikePrice\",\"type\":\"uint256\"}],\"name\":\"calculateNewNotional\",\"outputs\":[{\"name\":\"newNotional\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"topup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeCalledBy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_notionalAmountDai\",\"type\":\"uint256\"},{\"name\":\"_depositBalance\",\"type\":\"uint256\"},{\"name\":\"_strikePrice\",\"type\":\"uint256\"},{\"name\":\"_calcForBuyerSide\",\"type\":\"bool\"}],\"name\":\"cutOffPrice\",\"outputs\":[{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isSellerSelling\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINIMUM_NOTIONAL_AMOUNT_DAI\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelNew\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_party\",\"type\":\"address\"}],\"name\":\"isContractParty\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_strikePrice\",\"type\":\"uint256\"},{\"name\":\"_marketPrice\",\"type\":\"uint256\"},{\"name\":\"_notionalAmount\",\"type\":\"uint256\"},{\"name\":\"_depositBalance\",\"type\":\"uint256\"},{\"name\":\"_isBuyer\",\"type\":\"bool\"}],\"name\":\"calculateCollateralAmount\",\"outputs\":[{\"name\":\"collateral\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"transferPosition\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyerSaleTimeLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellerInitialStrikePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newStrikePrice\",\"type\":\"uint256\"}],\"name\":\"changeStrikePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyerInitialNotional\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellerSaleStrikePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_marketPrice\",\"type\":\"uint256\"},{\"name\":\"_buyerDepositBalance\",\"type\":\"uint256\"},{\"name\":\"_sellerDepositBalance\",\"type\":\"uint256\"},{\"name\":\"_strikePrice\",\"type\":\"uint256\"}],\"name\":\"marketPriceInRange\",\"outputs\":[{\"name\":\"inRange\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCfdAttributes3\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"market\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_desiredStrikePrice\",\"type\":\"uint256\"},{\"name\":\"_timeLimit\",\"type\":\"uint256\"}],\"name\":\"sellPrepare\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_registryAddr\",\"type\":\"address\"},{\"name\":\"_cfdRegistryAddr\",\"type\":\"address\"},{\"name\":\"_feedsAddr\",\"type\":\"address\"},{\"name\":\"_partyAddr\",\"type\":\"address\"},{\"name\":\"_marketId\",\"type\":\"bytes32\"},{\"name\":\"_strikePrice\",\"type\":\"uint256\"},{\"name\":\"_notionalAmountDai\",\"type\":\"uint256\"},{\"name\":\"_isBuyer\",\"type\":\"bool\"}],\"name\":\"createNew\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"forceTerminate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cfdRegistryAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isBuyerSelling\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"percentChange\",\"outputs\":[{\"name\":\"percent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyerDepositBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initiated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"percentOf\",\"outputs\":[{\"name\":\"adjusted\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyerSelling\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_collateral\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCfdAttributes\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"strikePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyerInitialStrikePrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_party\",\"type\":\"address\"}],\"name\":\"isSelling\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellerSaleTimeLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_buyBuyerSide\",\"type\":\"bool\"},{\"name\":\"_collateral\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sellCancel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellerSelling\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"market\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"notionalAmountDai\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"deposit\",\"type\":\"uint256\"}],\"name\":\"LogCFDCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"joiner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountSent\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"market\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"notionalAmountDai\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"buyerDepositBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sellerDepositBalance\",\"type\":\"uint256\"}],\"name\":\"LogCFDInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"LogCFDTransferPosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"party\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"market\",\"type\":\"bytes32\"}],\"name\":\"LogCFDCanceledNew\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"party\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newStrikePrice\",\"type\":\"uint256\"}],\"name\":\"LogCFDStrikePriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"party\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"saleStrikePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"timeLimit\",\"type\":\"uint256\"}],\"name\":\"LogCFDSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"party\",\"type\":\"address\"}],\"name\":\"LogCFDSaleCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"party\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"LogCFDSaleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"newNotional\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sellerAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"buyerDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"market\",\"type\":\"bytes32\"}],\"name\":\"LogCFDSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"party\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isWithdraw\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"newBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"market\",\"type\":\"bytes32\"}],\"name\":\"LogCFDPartyBalanceUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogCFDTransferFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"buyerCollateral\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"sellerCollateral\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"market\",\"type\":\"bytes32\"}],\"name\":\"LogCFDClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"terminator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"terminatorAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"otherParty\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"otherPartyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"market\",\"type\":\"bytes32\"}],\"name\":\"LogCFDForceTerminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newCFD\",\"type\":\"address\"}],\"name\":\"LogCFDUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"remainder\",\"type\":\"uint256\"}],\"name\":\"LogCFDRemainingBalanceUnexpected\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"buy(bool,uint256)\":{\"details\":\"Buy the side in the contract that is for sale.\",\"params\":{\"_buyBuyerSide\":\"Buying the buyer side or the seller side?\",\"_collateral\":\"DAI amount\"}},\"calculateCollateralAmount(uint256,uint256,uint256,uint256,bool)\":{\"details\":\"Calculate the collateral amount for one party given the current     market price and original strike price, notional amount and the     amount the party has deposited into the contract.\",\"params\":{\"_depositBalance\":\"Balances of deposits into the contract\",\"_isBuyer\":\"Buyer or Seller / Long or short party?\",\"_marketPrice\":\"Current market price\",\"_notionalAmount\":\"CFD notional amount\",\"_strikePrice\":\"CFD strike price\"},\"return\":\"collateral Amount of collateral for the party\"},\"calculateNewNotional(uint256,uint256,uint256)\":{\"details\":\"Calculate new notional amount after a side has been sold at a new     strike price.     * Formula is: N2 = N1 * S2 / S1 Where: N1 = previous notional S1 = previous strike price S2 = sale strike price\",\"params\":{\"_newStrikePrice\":\"New / Sale strike price.\",\"_oldNotional\":\"Existing notional.\",\"_oldStrikePrice\":\"Existing strike price.\"},\"return\":\"newNotional Result of the calculation.\"},\"cancelNew()\":{\"details\":\"Cancels a newly created contract refunding the balance to the party     that created the contract. This can only be called before a contract     is initiated. ie. between the createNew() and deposit() calls.\"},\"changeInDai(uint256,uint256,uint256)\":{\"details\":\"Calculate the change in contract value based on the price change.\",\"params\":{\"_currentPrice\":\"Current market price\"}},\"changeStrikePrice(uint256)\":{\"details\":\"Party can update the strike price of an non-initialized contract\"},\"createByUpgrade(address,address,address,address)\":{\"details\":\"Create a new CFDinstance from a previous CFD instance. This is part     of the upgrade process (see CFD.upgrade()).\",\"params\":{\"_cfdAddr\":\"Address of the existing / old CFD\",\"_cfdRegistryAddr\":\"Address of CFDRegistry contract\",\"_feedsAddr\":\"Address of Feeds contract\",\"_registryAddr\":\"Address of Registry contract\"}},\"createNew(address,address,address,address,bytes32,uint256,uint256,bool)\":{\"details\":\"Create a new CFDinstance specifying the terms of the contract.\",\"params\":{\"_cfdRegistryAddr\":\"CFD Registry contract address\",\"_feedsAddr\":\"Feeds address\",\"_isBuyer\":\"Flag indicating if the contract creator wants to take the           buyer (true) or the seller side (false).\",\"_marketId\":\"Contract is for prices on this market\",\"_notionalAmountDai\":\"Contract amount\",\"_partyAddr\":\"Address of the party creating the contract\",\"_registryAddr\":\"Registry contract address\",\"_strikePrice\":\"Strike price\"}},\"cutOffPrice(uint256,uint256,uint256,bool)\":{\"details\":\"Calculate the cut off price for buyer or seller.     * This is the price that if passed would raise a liquidation event.     * Base Formulas are:    Buyer:  1.05 * S - depositBalanceLong  * S / N    Seller: 0.95 * S + depositBalanceShort * S / N     * However for Solidity we need to adjust parts by FACTOR_UINT to ensure no fractions.\",\"params\":{\"_depositBalance\":\"Balance of deposits for one party\",\"_notionalAmountDai\":\"Contract notional amount\"},\"return\":\"cut off price\"},\"deposit(uint256)\":{\"details\":\"Counterparty deposits their funds into the contract thereby joining and initiating the contract.\"},\"isActive()\":{\"details\":\"Contract has been initiated (has 2 parties) and not yet terminated.\",\"return\":\"true if contract is active\"},\"isBuyerSelling()\":{\"details\":\"Is buyer / long party selling.\",\"return\":\"true if buyer has side up for sale\"},\"isContractParty(address)\":{\"details\":\"Check if the given address is one of the 2 parties of the contract.\",\"params\":{\"_party\":\"Address to check\"},\"return\":\"true if _party is either the buyer or seller.\"},\"isSellerSelling()\":{\"details\":\"Is seller / short party selling.\",\"return\":\"true if seller has side up for sale\"},\"isSelling(address)\":{\"details\":\"If the given party is selling one side of the contract.\",\"return\":\"true if the given party is selling\"},\"liquidate()\":{\"details\":\"This will disolve the contract and return each parties balance of collateral.\"},\"marketPriceInRange(uint256,uint256,uint256,uint256)\":{\"details\":\"Checks if given parameters and given market price result in a price     inside an allowable range. This range is defined by the ContractForDifferenceLibrary.cutOffPrice     function formulas. The idea is that as parameters change - leverage,     market price etc., we must check the change doesn't result in a     liquidation event due to too little collateral.\",\"params\":{\"_marketPrice\":\"Current market price\"},\"return\":\"true if in range; false if not\"},\"percentChange(uint256,uint256)\":{\"details\":\"Return a percentage change comparing a value with a new value.\",\"params\":{\"_newValue\":\"The new value to compare the change against\",\"_value\":\"The existing value to compare against\"},\"return\":\"Percentage change (eg. _value = 100, _newValue = 90 then return 10)\"},\"percentOf(uint256,uint256)\":{\"details\":\"Return a percentage of a given amount.\",\"params\":{\"_amount\":\"Amount to calculate the percentage of\",\"_percent\":\"Percent amount (1 - 100)\"}},\"sellCancel()\":{\"details\":\"Cancel the for sale status setup by sellPrepare()\"},\"sellPrepare(uint256,uint256)\":{\"details\":\"Position in a contract can be sold to another party. This function     makes the callers side available for sale. A party can buy the side     with the buy function.\",\"params\":{\"_desiredStrikePrice\":\"Sellers desired sell strike price\",\"_timeLimit\":\"Sale available until this time in UNIX epoch seconds                 (< now for no limit)\"}},\"sellUpdate(uint256)\":{\"details\":\"Seller can update the price on the sale.\"},\"status()\":{\"details\":\"Derive status from the state variables.\",\"return\":\"Status reflecting the current state.\"},\"topup(uint256)\":{\"details\":\"Party adds more funds to the contract thereby increasing their     deposit balance.\",\"params\":{\"_value\":\"DAI amount\"}},\"transferPosition(address)\":{\"details\":\"Parties can transfer contract ownership to another address by     calling this function.\",\"params\":{\"_newAddress\":\"Addreess of the new party to swap in.\"}},\"upgrade()\":{\"details\":\"Upgrade contract to a new version. This involves creating a new CFD     at the latest contract set - transferring over all properties and     value from this one to the new one.     An upgrade requires a call to this function from both parties. Then     upgrade will happen when the second party makes the call.\"},\"withdraw(uint256)\":{\"details\":\"Party withdraws funds from the contract.     They can only withdraw down to an amount that leaves the collateral     to notional difference at 20% or more.\",\"params\":{\"_withdrawAmount\":\"Amount to withdraw from the deposits balance.\"}}},\"title\":\"Contract for difference * Contract for difference for a given market between a \\\"buyer\\\" (long position) and \\\"seller\\\" (short position).\"},\"userdoc\":{\"methods\":{\"forceTerminate()\":{\"notice\":\"Force terminate executed by one party who will penalised 5% of their collateral. Then penalty will be sent to the counterparty.\"},\"getCfdAttributes()\":{\"notice\":\"Returns an array with all the attributes of the contract (Had to split in 3 functions because of the stack limit) Max number of return values == 8\"},\"liquidate()\":{\"notice\":\"Daemons will call this routine when the market price has moved enough that the closeRatio for this contract has been reached. It can actually be called by anyone who is willing to pay the gas for the liquidate.     * If the market has not moved past the liquidate threshold the call will be rejected.\"}}}},\"settings\":{\"compilationTarget\":{\"/home/julien/0xFutures/protocol-master/contracts/cfd/ContractForDifference.sol\":\"ContractForDifference\"},\"evmVersion\":\"constantinople\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/home/julien/0xFutures/protocol-master/contracts/DBC.sol\":{\"keccak256\":\"0xc9c8bf071e0f5bff796bfde919237f33136d8c18a89dec61a52a0391fc76c256\",\"urls\":[\"bzzr://b44dfa0ecd91495eb61d07322588ebc1ea50fadd8bc22464e94c3d070a6b6ea1\"]},\"/home/julien/0xFutures/protocol-master/contracts/ForwardFactory.sol\":{\"keccak256\":\"0x658664b425aa52f40007ac2f1be1a1da9ec2239c4a42c3864b5cac108f002e0c\",\"urls\":[\"bzzr://6514d98ab20cd063f94b0d29810df5d212dd80dd09471f24de909f4fb07c6f36\"]},\"/home/julien/0xFutures/protocol-master/contracts/Registry.sol\":{\"keccak256\":\"0x0986731682c3e9c4285e19fce2168034132597a8a426d70464b938faf3afb712\",\"urls\":[\"bzzr://cf6d6ba19a296b6852d2172a35acf18859d7e5d458d55fa9b3c2af91f93e734c\"]},\"/home/julien/0xFutures/protocol-master/contracts/cfd/ContractForDifference.sol\":{\"keccak256\":\"0xc041ca645e87dbca9ef6d53b9ea4658ad2df684bb063811b0f0581b03861f4b5\",\"urls\":[\"bzzr://27707404f5851509b53c014c4b701a515e5ad96afee09815e8739c1455bcd0b2\"]},\"/home/julien/0xFutures/protocol-master/contracts/cfd/ContractForDifferenceFactory.sol\":{\"keccak256\":\"0xb93056899dc37d3eb4c3ed027089824eacb68c92f58266c417ad6e43d3c64aa2\",\"urls\":[\"bzzr://534f9e827fd8c1f362381dafde341539e5bdf12dea9d1c60d67f04befd8eaf25\"]},\"/home/julien/0xFutures/protocol-master/contracts/cfd/ContractForDifferenceLibrary.sol\":{\"keccak256\":\"0x7d8b4fae4675864c273b85f2b8a7ed8bc8f504b49f2955b0f69b694c30ec2771\",\"urls\":[\"bzzr://47e963e227389af89263baa271e1ec5c54c192883ec2697801807c3827110952\"]},\"/home/julien/0xFutures/protocol-master/contracts/cfd/ContractForDifferenceRegistry.sol\":{\"keccak256\":\"0x95e4f89bfe51d9891bacc827672920154e2ed3987907acc99e9b42b75267063f\",\"urls\":[\"bzzr://af86789feedb2e75d3cc5620db2f00b19d255b00b5586f3a9fb6ca0cff1219f6\"]},\"/home/julien/0xFutures/protocol-master/contracts/dappsys/proxy.sol\":{\"keccak256\":\"0xefd635b916e651d7387fccc160bee8ccf5b762be676f085763cd5d6b0a2b1f43\",\"urls\":[\"bzzr://86c89f916c5d48d60e405a2a1031628e4ac700e40e092b4a4259258a08823323\"]},\"/home/julien/0xFutures/protocol-master/contracts/feeds/PriceFeeds.sol\":{\"keccak256\":\"0x5ad3a6c629e76f46ec7ddea114cfcf0e1c52634c781b649e9379e30e2a9a61e8\",\"urls\":[\"bzzr://c75cbead25acede9b84b8bfe2931123261330773d91a13be0c1aa72049c4d26a\"]},\"/home/julien/0xFutures/protocol-master/contracts/feeds/PriceFeedsExternal.sol\":{\"keccak256\":\"0x374448d9bd3cd9d4d6def94590d3d43fd5b8084422aadc78b46db3d4f21b6edd\",\"urls\":[\"bzzr://a199b155f1e17b792066dc195376ebc3c0a7a886997f751ba312a9e98d1feef9\"]},\"/home/julien/0xFutures/protocol-master/contracts/feeds/PriceFeedsInternal.sol\":{\"keccak256\":\"0x73a923b47d0ef1f81948e6e24b94ca6b27a5b704c5aa3bd79559697cc8c3e11e\",\"urls\":[\"bzzr://6772987070a1b03eafefba2b04ffa09acbbd7f144edb2aac5b75bc5785e9ecbe\"]},\"openzeppelin-solidity/contracts/math/SafeMath.sol\":{\"keccak256\":\"0x965012d27b4262d7a41f5028cbb30c51ebd9ecd4be8fb30380aaa7a3c64fbc8b\",\"urls\":[\"bzzr://41ca38f6b0fa4b77b0feec43e422cfbec48b7eb38a41edf0b85c77e8d9a296b1\"]},\"openzeppelin-solidity/contracts/ownership/Ownable.sol\":{\"keccak256\":\"0x980de387a1a020a498f53d00f89fecebb12c949a17e8f160093c0303ede2b786\",\"urls\":[\"bzzr://08894efa2a557982070beda6a81a032407e70532d24bdafe80d39660c74904d9\"]},\"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xba431353cb4fe70777ac026231eb5468e41aa1e81240a2b8136917acc5fff4dc\",\"urls\":[\"bzzr://80cd02a56e6e33504318124d0d645c82e615cc8a4b5829cc9d82d17635c644c8\"]},\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x079c4e23ee448f529e43bfa3c4e8fb4be52cd0318ee923a276835bedf45b93d8\",\"urls\":[\"bzzr://48248e86f64407a95f241d6c5c8cfea6b4d4ebf4ebb467e5c98c8af3868fafe4\"]}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "sourceMap": "674:40359:4:-;;;5009:29;;;5411:43;;;;674:40359;5:2:-1;;;;30:1;27;20:12;5:2;674:40359:4;;;;;;;",
  "deployedSourceMapi;:::-;;;;;;;;;;;;;;;;4278:21;;;:::i;:::-;;;;-1:-1:-1;;;;;4278:21:4;;;;;;;;;;;;;;5497:24;;;:::i;38182:332::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;38182:332:4;;;;;;;;;;;;:::i;5076:22::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;20971:1152;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;20971:1152:4;;:::i;:::-;;4035:56;;;:::i;4795:32::-;;;:::i;33336:354::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4440:33;;;:::i;5730:107::-;;;:::i;9474:1542::-;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;;;;;;9474:1542:4;;;;;;;;;;;;;;;;;;;;;;;;:::i;27639:1352::-;;;:::i;11571:440::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4756:32;;;:::i;15669:1667::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;15669:1667:4;;:::i;35630:364::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;35630:364:4;;;;;;;;;;;;:::i;14325:1062::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;14325:1062:4;;:::i;5411:43::-;;;:::i;37630:403::-;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;37630:403:4;;;;;;;;;;;;;;;;;;;:::i;5251:31::-;;;:::i;6228:162::-;;;:::i;4097:59::-;;;:::i;13715:452::-;;;:::i;6909:127::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;6909:127:4;-1:-1:-1;;;;;6909:127:4;;:::i;5044:26::-;;;:::i;36578:470::-;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;36578:470:4;;;;;;;;;;;;;;;;;;;;;;;;:::i;18032:708::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;18032:708:4;-1:-1:-1;;;;;18032:708:4;;:::i;4833:30::-;;;:::i;4602:36::-;;;:::i;22222:574::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;22222:574:4;;:::i;4218:20::-;;;:::i;4402:32::-;;;:::i;4870:33::-;;;:::i;34442:685::-;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;34442:685:4;;;;;;;;;;;;;;;;;:::i;5528:24::-;;;:::i;12016:180::-;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;12016:180:4;;;;;;;;;;;;;;;;4339:21;;;:::i;19147:1749::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;19147:1749:4;;;;;;;:::i;7653:1428::-;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;;;;;;7653:1428:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;29155:2592::-;;;:::i;5461:30::-;;;:::i;5952:158::-;;;:::i;38821:203::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;38821:203:4;;;;;;;:::i;4719:31::-;;;:::i;5009:29::-;;;:::i;39205:197::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;39205:197:4;;;;;;;:::i;4947:24::-;;;:::i;12334:1123::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;12334:1123:4;;:::i;11206:360::-;;;:::i;:::-;;;;-1:-1:-1;;;;;11206:360:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4532:23;;;:::i;4561:35::-;;;:::i;6530:178::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;6530:178:4;-1:-1:-1;;;;;6530:178:4;;:::i;32125:1085::-;;;:::i;4909:31::-;;;:::i;23326:2575::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;23326:2575:4;;;;;;;;;:::i;22880:251::-;;;:::i;4977:25::-;;;:::i;4367:29::-;;;;:::o;4278:21::-;;;-1:-1:-1;;;;;4278:21:4;;:::o;5497:24::-;;;-1:-1:-1;;;;;5497:24:4;;:::o;38182:332::-;38339:11;38375:132;38429:12;38455:13;38482:15;38375:40;:132::i;:::-;38366:141;38182:332;-1:-1:-1;;;;38182:332:4:o;5076:22::-;;;;;;;;;:::o;20971:1152::-;21055:10;:8;:10::i;:::-;21067:21;;;;;;;;;;;;-1:-1:-1;;;;;21067:21:4;;;;;293:9:0;285:26;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21107:21:4;21117:10;21107:9;:21::i;:::-;21130;;;;;;;;;;;;;;;;;;293:9:0;285:26;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;21182:1:4;21170:9;:13;21185:29;;;;;;;;;;;;;-1:-1:-1;;;;;21185:29:4;;;293:9:0;304:6;285:26;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;21264:12:4;21294:5;;-1:-1:-1;;;;;21294:5:4;21280:10;:19;21279:36;;21310:5;21279:36;;;21303:4;21279:36;21264:51;;21325:11;21339:246;21393:17;;21425:7;21424:54;;21458:20;;21424:54;;;21436:19;;21424:54;21493:7;21492:62;;21530:24;;21492:62;;;21504:23;;21492:62;21568:7;21339:40;:246::i;:::-;21614:5;;21325:260;;-1:-1:-1;;;;;;21614:5:4;21600:10;:19;21596:466;;;21724:6;21712:9;:18;21732:31;;;;;;;;;;;;;;;;;21704:60;;;;;-1:-1:-1;;;;;21704:60:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;21704:60:4;-1:-1:-1;21778:20:4;:32;;;21596:466;;;21845:6;;-1:-1:-1;;;;;21845:6:4;21831:10;:20;21827:235;;;21964:6;21952:9;:18;21972:31;;;;;;;;;;;;;;;;;21944:60;;;;;-1:-1:-1;;;;;21944:60:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;21944:60:4;-1:-1:-1;22018:21:4;:33;;;21827:235;22076:40;;;22094:10;22076:40;;;;;;;;;;;;;;;;;;;;;321:1:0;;;;;;20971:1152:4;;;:::o;4035:56::-;4090:1;4035:56;:::o;4795:32::-;;;;:::o;33336:354::-;33425:6;;33399;;33425;;;;;:14;;33435:4;33425:14;33421:262;;;-1:-1:-1;33460:13:4;33453:20;;33421:262;33492:9;;;;;;;33488:195;;-1:-1:-1;33531:14:4;33524:21;;33488:195;33564:16;:14;:16::i;:::-;:37;;;;33584:17;:15;:17::i;:::-;33560:123;;;-1:-1:-1;33622:11:4;33615:18;;33560:123;-1:-1:-1;33667:16:4;33560:123;33336:354;:::o;4440:33::-;;;;:::o;5730:107::-;5794:9;;5771:4;;5794:9;;;;;:17;;5807:4;5794:17;:36;;;;-1:-1:-1;5815:6:4;;;;;;;:15;5794:36;5787:43;;5730:107;:::o;9474:1542::-;10131:28;10184:8;10131:62;;10213:6;-1:-1:-1;;;;;10213:13:4;;:15;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10213:15:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10213:15:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10213:15:4;10204:6;:24;10258:26;;;-1:-1:-1;;;;;10258:26:4;;;;-1:-1:-1;;;;;10258:24:4;;;;;:26;;;;;10213:15;;10258:26;;;;;;;:24;:26;;;5:2:-1;;;;30:1;27;20:12;5:2;10258:26:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10258:26:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10258:26:4;10238:17;:46;10308:20;;;-1:-1:-1;;;;;10308:20:4;;;;-1:-1:-1;;;;;10308:18:4;;;;;:20;;;;;10258:26;;10308:20;;;;;;;:18;:20;;;5:2:-1;;;;30:1;27;20:12;5:2;10308:20:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10308:20:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10308:20:4;10294:11;:34;10346:14;;;-1:-1:-1;;;;;10346:14:4;;;;-1:-1:-1;;;;;10346:12:4;;;;;:14;;;;;10308:20;;10346:14;;;;;;;:12;:14;;;5:2:-1;;;;30:1;27;20:12;5:2;10346:14:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10346:14:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10346:14:4;10338:5;:22;;-1:-1:-1;;;;;;10338:22:4;-1:-1:-1;;;;;10338:22:4;;;;;;10379:15;;;-1:-1:-1;;;;;10379:15:4;;;;:13;;;;;;:15;;;;;10346:14;;10379:15;;;;;;;;:13;:15;;;5:2:-1;;;;30:1;27;20:12;5:2;10379:15:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10379:15:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10379:15:4;10370:6;:24;;-1:-1:-1;;;;;;10370:24:4;-1:-1:-1;;;;;10370:24:4;;;;;;10427:28;;;-1:-1:-1;;;;;10427:28:4;;;;:26;;;;;;:28;;;;;10379:15;;10427:28;;;;;;;;:26;:28;;;5:2:-1;;;;30:1;27;20:12;5:2;10427:28:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10427:28:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10427:28:4;10405:19;:50;10488:29;;;-1:-1:-1;;;;;10488:29:4;;;;-1:-1:-1;;;;;10488:27:4;;;;;:29;;;;;10427:28;;10488:29;;;;;;;:27;:29;;;5:2:-1;;;;30:1;27;20:12;5:2;10488:29:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10488:29:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10488:29:4;10465:20;:52;;;10553:32;;;-1:-1:-1;;;;;10553:32:4;;;;-1:-1:-1;;;;;10553:30:4;;;;;:32;;;;10488:29;;10553:32;;;;;;;:30;:32;;;5:2:-1;;;;30:1;27;20:12;5:2;10553:32:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10553:32:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10553:32:4;10527:23;:58;10619:29;;;-1:-1:-1;;;;;10619:29:4;;;;-1:-1:-1;;;;;10619:27:4;;;;;:29;;;;;10553:32;;10619:29;;;;;;;:27;:29;;;5:2:-1;;;;30:1;27;20:12;5:2;10619:29:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10619:29:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10619:29:4;10596:20;:52;10682:30;;;-1:-1:-1;;;;;10682:30:4;;;;-1:-1:-1;;;;;10682:28:4;;;;;:30;;;;;10619:29;;10682:30;;;;;;;:28;:30;;;5:2:-1;;;;30:1;27;20:12;5:2;10682:30:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10682:30:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10682:30:4;10658:21;:54;10749:33;;;-1:-1:-1;;;;;10749:33:4;;;;-1:-1:-1;;;;;10749:31:4;;;;;:33;;;;;10682:30;;10749:33;;;;;;;:31;:33;;;5:2:-1;;;;30:1;27;20:12;5:2;10749:33:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10749:33:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10749:33:4;10722:24;:60;10793:15;:34;;-1:-1:-1;;;;;10793:34:4;;;-1:-1:-1;;;;;;10793:34:4;;;;;;;;10837:8;:34;;;;;;;;;;;10881:9;:22;;;;;;;;;;;;;;10914:9;:16;;-1:-1:-1;;10914:16:4;;;;;10793:34;11002:6;10941:68;;;-1:-1:-1;;;;;10941:68:4;;11002:6;;;10941:68;;;;;10971:15;;;;;10941:60;;:68;;;;;10793:15;;10941:68;;;;;;;;10793:15;10971;10941:68;;;5:2:-1;;;;30:1;27;20:12;5:2;10941:68:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10941:68:4;;;;9474:1542;;;;;:::o;27639:1352::-;27694:10;:8;:10::i;:::-;27706:21;;;;;;;;;;;;-1:-1:-1;;;;;27706:21:4;;;;;293:9:0;285:26;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;27743:16:4;27762:13;:11;:13::i;:::-;27743:32;;27933:165;27969:11;27998:19;;28035:20;;28073:11;;27933:18;:165::i;:::-;27932:166;27911:248;;;;-1:-1:-1;;;;;27911:248:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;28239:16;28258:157;28312:17;;28343:19;;28376:11;;28401:4;28258:40;:157::i;:::-;28239:176;-1:-1:-1;28523:25:4;;;28502:18;28523:25;28575:30;;28599:6;;-1:-1:-1;;;;;28599:6:4;28575:30;;;28591:5;;-1:-1:-1;;;;;28591:5:4;28575:30;28558:47;;28644:14;28661:8;;;;;;;;;-1:-1:-1;;;;;28661:8:4;-1:-1:-1;;;;;28661:15:4;;:17;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;28661:17:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;28661:17:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;28661:17:4;:42;;;-1:-1:-1;;;;;28661:42:4;;28697:4;28661:42;;;;;;-1:-1:-1;;;;;28661:27:4;;;;;;:42;;;;;:17;;:42;;;;;;;;:27;:42;;;5:2:-1;;;;30:1;27;20:12;5:2;28661:42:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;28661:42:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;28661:42:4;;-1:-1:-1;28713:30:4;28725:6;28661:42;28713:11;:30::i;:::-;28758:38;;;-1:-1:-1;;;;;28758:38:4;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;28758:38:4;;;;;;;;;;28807:6;:13;;-1:-1:-1;;28807:13:4;;;;;28836:148;28862:6;28882:13;:29;;28910:1;28882:29;;;28898:9;28882:29;28925:13;:29;;28945:9;28925:29;;;28941:1;28925:29;28968:6;;28836:148;;;-1:-1:-1;;;;;28836:148:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;321:1:0;;;;;27639:1352:4;;:::o;11571:440::-;11728:20;;11762:21;;11797:19;;11830:20;;11864;;11898:21;;11933:23;;11970:24;;11571:440;;;;;;;;:::o;4756:32::-;;;;:::o;15669:1667::-;15756:15;17514:1;17495:15;:20;;17517:26;;;;;;;;;;;;;;;;;17487:57;;;;;-1:-1:-1;;;;;17487:57:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;17487:57:4;-1:-1:-1;17562:9:4;;17581:24;;;;;;;;;;;;-1:-1:-1;;;;;17581:24:4;;;;;17562:9;;;;;:17;;17575:4;17562:17;17554:52;;;;-1:-1:-1;;;;;17554:52:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;17554:52:4;-1:-1:-1;17624:6:4;;17641:25;;;;;;;;;;;;-1:-1:-1;;;;;17641:25:4;;;;;17624:6;;;;;:15;17616:51;;;;-1:-1:-1;;;;;17616:51:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;17616:51:4;;17685:27;17701:10;17685:15;:27::i;:::-;17714:28;;;;;;;;;;;;;;;;;17677:66;;;;;-1:-1:-1;;;;;17677:66:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;17677:66:4;;17761:21;17771:10;17761:9;:21::i;:::-;17793:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;17793:25:4;;;;;17761:30;17753:66;;;;-1:-1:-1;;;;;17753:66:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;17753:66:4;-1:-1:-1;15787:12:4;15816:5;;-1:-1:-1;;;;;15816:5:4;15802:10;:19;;;15856:52;;15888:20;;15856:52;;;15866:19;;15856:52;15831:77;;16011:17;15993:15;:35;15989:87;;;16049:26;;;;;;;;;;;;;;;;;16042:34;;-1:-1:-1;;;;;16042:34:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;15989:87:4;16208:35;;;16187:18;16272:13;:11;:13::i;:::-;16253:32;;16300:222;16332:11;16357:7;:45;;16383:19;;16357:45;;;16367:13;16357:45;16416:7;:46;;16449:13;16416:46;;;16426:20;;16416:46;16476:11;;16300:18;:222::i;:::-;16295:294;;16545:32;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;16545:32:4;;;;;;;16538:40;;-1:-1:-1;;;;;16538:40:4;;;;;;;;;;;;;;;;16545:32;;16538:40;;;;;;;;16545:32;16538:40;;16545:32;-1:-1:-1;27:10;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;16295:294:4;16599:15;16617:193;16685:11;;16710;16735:17;;16766:13;16793:7;16617:54;:193::i;:::-;16599:211;;16826:77;16873:17;;16892:10;16826:46;:77::i;:::-;16821:147;;16926:30;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;16926:30:4;;;;;;;16919:38;;-1:-1:-1;;;;;16919:38:4;;;;;;;;;;;;;;;;16926:30;;16919:38;;;;;;;;16926:30;16919:38;;16926:30;-1:-1:-1;27:10;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;16821:147:4;16978:40;16990:10;17002:15;16978:11;:40::i;:::-;17033:48;;;17053:10;17033:48;;;;;;;;;;-1:-1:-1;;;;;;;;;;;17033:48:4;;;;;;;;;;17096:7;17092:140;;;17119:19;:35;;;17092:140;;;17185:20;:36;;;17092:140;17322:6;;17247:82;;;17272:10;17247:82;;;;;;;;17301:4;17247:82;;;;;;;;;;;;;;;;;;;;;;;;;;;17829:1;;;;;15669:1667;;:::o;35630:364::-;35798:16;35844:143;35907:12;35933:15;35962;35844:49;:143::i;14325:1062::-;14397:1;14387:6;:11;;14400:24;;;;;;;;;;;;;;;;;293:9:0;304:6;285:26;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;14443:9:4;;;;;;;;;;;:17;;14456:4;14443:17;;;14462:24;;;;;;;;;;;;;-1:-1:-1;;;;;14462:24:4;;;293:9:0;304:6;285:26;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;14505:6:4;;14522:25;;;;;;;;;;;;-1:-1:-1;;;;;14522:25:4;;;;14505:6;;;;;;:15;;14522:25;14505:15;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;14566:27:4;14582:10;14566:15;:27::i;:::-;14595:28;;;;;;;;;;;;;;;;;304:6:0;293:9;285:26;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;14642:21:4;14652:10;14642:9;:21::i;:::-;14674:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;14674:25:4;;;;14642:30;;;14674:25;14642:30;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;14715:12:4;14744:5;;-1:-1:-1;;;;;14744:5:4;14730:10;:19;;14784:99;14876:6;14730:19;14785:76;;14841:20;;14785:76;;;14807:19;;14785:76;14784:91;:99;:91;:99;:::i;:::-;14759:124;;14965:84;15012:17;;15031;14965:46;:84::i;:::-;14960:141;;15070:30;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;15070:30:4;;;;;;;15063:38;;-1:-1:-1;;;;;15063:38:4;;;;;;;;;;;;;;;;15070:30;;15063:38;;;;;;;;15070:30;15063:38;;15070:30;-1:-1:-1;27:10;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;14960:141:4;15112:16;15121:6;15112:8;:16::i;:::-;15143:7;15139:148;;;15166:19;:39;;;15139:148;;;15236:20;:40;;;15139:148;15302:78;15327:10;15339:6;15347:5;15354:17;15373:6;;15302:78;;;;-1:-1:-1;;;;;15302:78:4;-1:-1:-1;;;;;15302:78:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;321:1:0;;;;;;;;;;14325:1062:4;;;:::o;5411:43::-;;;-1:-1:-1;;;5411:43:4;;-1:-1:-1;;;;;5411:43:4;;:::o;37630:403::-;37824:10;37858:168;37912:18;37944:15;37973:12;37999:17;37858:40;:168::i;:::-;37850:176;37630:403;-1:-1:-1;;;;;37630:403:4:o;5251:31::-;;;;;;;;;:::o;6228:162::-;6299:13;;6276:4;;6299:13;;;;;:84;;;;-1:-1:-1;6329:19:4;;:24;;:53;;-1:-1:-1;;6363:19:4;;6357:3;:25;;6228:162::o;4097:59::-;4148:8;4097:59;:::o;13715:452::-;13770:9;;13790:28;;;;;;;;;;;;-1:-1:-1;;;;;13790:28:4;;;;13770:9;;;;;;:18;;13790:28;13770:18;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;13837:27:4;13853:10;13837:15;:27::i;:::-;13866:28;;;;;;;;;;;;;;;;;304:6:0;293:9;285:26;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;13928:8:4;;:17;;;-1:-1:-1;;;;;13928:17:4;;;;13910:15;;-1:-1:-1;;;;;13928:8:4;;:15;;:17;;;;;;;;;;;;;;:8;:17;;;5:2:-1;;;;30:1;27;20:12;5:2;13928:17:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;13928:17:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;13928:17:4;:42;;;-1:-1:-1;;;;;13928:42:4;;13964:4;13928:42;;;;;;-1:-1:-1;;;;;13928:27:4;;;;;;:42;;;;;:17;;:42;;;;;;;;:27;:42;;;5:2:-1;;;;30:1;27;20:12;5:2;13928:42:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;13928:42:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;13928:42:4;;-1:-1:-1;13980:35:4;13992:10;13928:42;13980:11;:35::i;:::-;14030:43;;;14050:10;14030:43;;;;;;;;;;-1:-1:-1;;;;;;;;;;;14030:43:4;;;;;;;;;;14083:6;:13;;-1:-1:-1;;14083:13:4;;;;;14153:6;;14111:49;;;14129:10;14111:49;;;;;;;;;;;;;;;;;;;;;;;;;321:1:0;;;13715:452:4;;:::o;6909:127::-;6971:4;7004:5;;-1:-1:-1;;;;;6994:15:4;;;7004:5;;6994:15;;:35;;-1:-1:-1;7023:6:4;;-1:-1:-1;;;;;7013:16:4;;;7023:6;;7013:16;6994:35;6987:42;6909:127;-1:-1:-1;;6909:127:4:o;5044:26::-;;;;;;;;;:::o;36578:470::-;36801:15;36845:196;36913:12;36939;36965:15;36994;37023:8;36845:54;:196::i;:::-;36832:209;36578:470;-1:-1:-1;;;;;;36578:470:4:o;18032:708::-;18113:6;;18130:25;;;;;;;;;;;;-1:-1:-1;;;;;18130:25:4;;;;18113:6;;;;;;:15;;18130:25;18113:15;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;18174:27:4;18190:10;18174:15;:27::i;:::-;18203:28;;;;;;;;;;;;;;;;;304:6:0;293:9;285:26;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;18250:28:4;18266:11;18250:15;:28::i;:::-;18289:24;;;;;;;;;;;;;;;;;18250:37;;;18289:24;18250:37;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;18332:21:4;18342:10;18332:9;:21::i;:::-;18364:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;18364:25:4;;;;18332:30;;;18364:25;18332:30;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;18423:5:4;;-1:-1:-1;;;;;18423:5:4;18409:10;:19;18405:183;;;18430:5;:19;;-1:-1:-1;;;;;;18430:19:4;-1:-1:-1;;;;;18430:19:4;;;;;18405:183;;;18482:6;;-1:-1:-1;;;;;18482:6:4;18468:10;:20;18464:124;;;18490:6;:20;;-1:-1:-1;;;;;;18490:20:4;-1:-1:-1;;;;;18490:20:4;;;;;18464:124;;;18543:15;;-1:-1:-1;;;18543:15:4;;-1:-1:-1;;;;;18543:15:4;18529:10;:29;18525:63;;;18560:15;:28;;-1:-1:-1;;;;;;;;18560:28:4;;;18525:63;18628:15;;18598:73;;;-1:-1:-1;;;;;18598:73:4;;-1:-1:-1;;;;;18598:73:4;;;;;;;;;18628:15;;;;;18598:60;;:73;;;;;18628:15;;18598:73;;;;;;;18628:15;;18598:73;;;5:2:-1;;;;30:1;27;20:12;5:2;18598:73:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;18686:47:4;;;18709:10;18686:47;;-1:-1:-1;;;;;18686:47:4;;;;;;;;;;-1:-1:-1;18686:47:4;;;;;;;;-1:-1:-1;18686:47:4;321:1:0;;;;;;18032:708:4;;;:::o;4833:30::-;;;;:::o;4602:36::-;;;;:::o;22222:574::-;22319:9;;22339:28;;;;;;;;;;;;-1:-1:-1;;;;;22339:28:4;;;;22319:9;;;;;;:18;;22339:28;22319:18;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;22386:6:4;;22403:25;;;;;;;;;;;;-1:-1:-1;;;;;22403:25:4;;;;22386:6;;;;;;:15;;22403:25;22386:15;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;22447:27:4;22463:10;22447:15;:27::i;:::-;22476:28;;;;;;;;;;;;;;;;;304:6:0;293:9;285:26;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;22541:1:4;22523:15;:19;22544:29;;;;;;;;;;;;;-1:-1:-1;;;;;22544:29:4;;;293:9:0;304:6;285:26;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;22589:11:4;:29;;;22628:23;:41;;;22679:24;:42;;;22736:53;;;22761:10;22736:53;;;;;;;;;;;;;;;;;;;;;321:1:0;;;;;;22222:574:4;;;:::o;4218:20::-;;;-1:-1:-1;;;;;4218:20:4;;:::o;4402:32::-;;;;:::o;4870:33::-;;;;:::o;34442:685::-;34646:12;34674:16;34693:159;34747:17;;34778:20;34812:12;34838:4;34693:40;:159::i;:::-;34674:178;;34862:17;34882:161;34936:17;;34967:21;35002:12;35028:5;34882:40;:161::i;:::-;34862:181;;35078:11;35063:12;:26;:57;;;;;35108:12;35093;:27;35063:57;35053:67;34442:685;-1:-1:-1;;;;;;;34442:685:4:o;5528:24::-;;;-1:-1:-1;;;;;5528:24:4;;:::o;12016:180::-;12140:10;;;;;;;;-1:-1:-1;;;12164:15:4;;;-1:-1:-1;;;;;12164:15:4;;12016:180::o;4339:21::-;;;;:::o;19147:1749::-;19245:27;19261:10;19245:15;:27::i;:::-;19274:28;;;;;;;;;;;;;;;;;304:6:0;293:9;285:26;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;19321:10:4;:8;:10::i;:::-;19333:21;;;;;;;;;;;;-1:-1:-1;;;;;19333:21:4;;;;;293:9:0;285:26;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;19428:21:4;19438:10;19428:9;:21::i;:::-;19460:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;19460:25:4;;;;19428:30;;;19460:25;19428:30;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;19526:1:4;19504:19;:23;19529:29;;;;;;;;;;;;;-1:-1:-1;;;;;19529:29:4;;;293:9:0;304:6;285:26;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;19608:12:4;19638:5;;-1:-1:-1;;;;;19638:5:4;19624:10;:19;19623:36;;19654:5;19623:36;;;19647:4;19623:36;19608:51;;19669:11;19683:246;19737:17;;19769:7;19768:54;;19802:20;;19768:54;;19683:246;19669:260;;19969:14;19986:33;20008:10;19986:21;:33::i;:::-;20047:5;;19969:50;;-1:-1:-1;;;;;;20047:5:4;20033:10;:19;20029:664;;;20168:6;20146:19;:28;20176:31;;;;;;;;;;;;;;;;;20138:70;;;;;-1:-1:-1;;;;;20138:70:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;20138:70:4;-1:-1:-1;20222:12:4;:19;;-1:-1:-1;;20222:19:4;20237:4;20222:19;;;20255:20;:42;;;20311:18;:30;;;20029:664;;;20376:6;;-1:-1:-1;;;;;20376:6:4;20362:10;:20;20358:335;;;20506:6;20484:19;:28;20514:31;;;;;;;;;;;;;;;;;20476:70;;;;;-1:-1:-1;;;;;20476:70:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;20476:70:4;-1:-1:-1;20560:13:4;:20;;-1:-1:-1;;20560:20:4;;;;;20594:21;:43;;;20651:19;:31;;;20358:335;20733:15;;20703:71;;;-1:-1:-1;;;;;20703:71:4;;20763:10;20703:71;;;;;;-1:-1:-1;;;;;20733:15:4;;;;20703:59;;:71;;;;;20733:15;;20703:71;;;;;;;;20733:15;;20703:71;;;5:2:-1;;;;30:1;27;20:12;5:2;20703:71:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;20703:71:4;;;;20789:100;20813:10;20837:19;20870:9;20789:100;;;;-1:-1:-1;;;;;20789:100:4;-1:-1:-1;;;;;20789:100:4;;;;;;;;;;;;;;;;;;;;;;;;;;;321:1:0;;;;;;;;;19147:1749:4;;;;:::o;7653:1428::-;4148:8;7975:18;:49;;8026:23;;;;;;;;;;;;;;;;;293:9:0;304:6;285:26;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;8065:8:4;:34;;-1:-1:-1;;;;;;8065:34:4;-1:-1:-1;;;;;8065:34:4;;;;;;;;;;;8131:17;;;-1:-1:-1;;;;;8131:17:4;;;;-1:-1:-1;;8131:8:4;;;;:15;;:17;;;;;;;;;;;;;;;:8;:17;;;5:2:-1;;;;30:1;27;20:12;5:2;8131:17:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8131:17:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;8131:17:4;:42;;;-1:-1:-1;;;;;8131:42:4;;8167:4;8131:42;;;;;;-1:-1:-1;;;;;8131:27:4;;;;;;:42;;;;;:17;;:42;;;;;;;;:27;:42;;;5:2:-1;;;;30:1;27;20:12;5:2;8131:42:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8131:42:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;8131:42:4;;-1:-1:-1;8189:82:4;8236:18;8131:42;8189:46;:82::i;:::-;8184:139;;8292:30;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;8292:30:4;;;;;;;8285:38;;-1:-1:-1;;;;;8285:38:4;;;;;;;;;;;;;;;;8292:30;;8285:38;;;;;;;;8292:30;8285:38;;8292:30;-1:-1:-1;27:10;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;8184:139:4;8338:8;8334:208;;;8362:5;:18;;-1:-1:-1;;;;;;8362:18:4;-1:-1:-1;;;;;8362:18:4;;;;;8394:19;:36;;;8334:208;;;8461:6;:19;;-1:-1:-1;;;;;;8461:19:4;-1:-1:-1;;;;;8461:19:4;;;;;8494:20;:37;;;8334:208;8552:6;:18;;;8580:17;:38;;;8628:20;:41;;;8679:21;:42;;;8732:11;:26;;;8768:23;:38;;;8816:24;:39;;;8866:15;:34;;-1:-1:-1;;;;;8866:34:4;;;-1:-1:-1;;;;;;8866:34:4;;;;;;;8910:9;:22;;;;;;;;;;;;;8948:126;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;321:1:0;7653:1428:4;;;;;;;;;;:::o;29155:2592::-;29215:10;:8;:10::i;:::-;29227:21;;;;;;;;;;;;-1:-1:-1;;;;;29227:21:4;;;;;293:9:0;285:26;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;29267:27:4;29283:10;29267:15;:27::i;:::-;29296:28;;;;;;;;;;;;;;;;;304:6:0;293:9;285:26;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;29340:16:4;29359:13;:11;:13::i;:::-;29382:24;29423:5;;29530:11;;29580:17;;29611:19;;29340:32;;-1:-1:-1;;;;;;29423:5:4;;;29409:10;:19;;29462:196;;29340:32;;29423:5;29462:54;:196::i;:::-;29439:219;;29668:21;29692:198;29760:11;;29785;29810:17;;29841:20;;29875:5;29692:54;:198::i;:::-;29668:222;;30145:21;30169:124;30276:16;30169:89;30242:15;30169:8;;;;;;;;;-1:-1:-1;;;;;30169:8:4;-1:-1:-1;;;;;30169:15:4;;:17;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;30169:17:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;30169:17:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;30169:17:4;:55;;;-1:-1:-1;;;;;30169:55:4;;30218:4;30169:55;;;;;;-1:-1:-1;;;;;30169:40:4;;;;;;:55;;;;;:17;;:55;;;;;;;;:40;:55;;;5:2:-1;;;;30:1;27;20:12;5:2;30169:55:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;30169:55:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;30169:55:4;;:89;:72;:89;:::i;:::-;:106;:124;:106;:124;:::i;:::-;30145:148;-1:-1:-1;30307:21:4;;30303:107;;30349:50;;;;;;;;;;;;;;;;;30303:107;30577:8;;:16;;;-1:-1:-1;;;;;30577:16:4;;;;30565:47;;-1:-1:-1;;;;;30577:8:4;;:14;;:16;;;;;;;;;;;;;;:8;:16;;;5:2:-1;;;;30:1;27;20:12;5:2;30577:16:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;30577:16:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;30577:16:4;30595;30565:11;:47::i;:::-;30699:12;30714:163;30766:19;:56;;30806:16;30766:56;;;30788:15;30766:56;4090:1;30714:38;:163::i;:::-;30699:178;;30891:19;30887:297;;;30944:28;:15;30964:7;30944:28;:19;:28;:::i;:::-;30926:46;-1:-1:-1;31005:29:4;:16;31026:7;31005:29;:20;:29;:::i;:::-;30986:48;;30887:297;;;31083:28;:15;31103:7;31083:28;:19;:28;:::i;:::-;31065:46;-1:-1:-1;31144:29:4;:16;31165:7;31144:29;:20;:29;:::i;:::-;31125:48;;30887:297;31258:5;;31246:35;;-1:-1:-1;;;;;31258:5:4;31265:15;31246:11;:35::i;:::-;31316:5;;31296:43;;;-1:-1:-1;;;;;31316:5:4;;;31296:43;;;;;;;;;;-1:-1:-1;;;;;;;;;;;31296:43:4;;;;;;;;;31361:6;;31349:37;;-1:-1:-1;;;;;31361:6:4;31369:16;31349:11;:37::i;:::-;31421:6;;31401:45;;;-1:-1:-1;;;;;31421:6:4;;;31401:45;;;;;;;;;;-1:-1:-1;;;;;;;;;;;31401:45:4;;;;;;;;;31457:10;:17;;-1:-1:-1;;;;31457:17:4;;;;;31484:13;;;;;31508:232;;;;31572:5;;;31596:6;31622;;31550:79;;;-1:-1:-1;;;;;31572:5:4;;;31550:79;;;;;;;;31596:6;;;;31550:79;;;;;;;;;;;;;;;;;;;;;;;;;31508:232;;;31683:6;;;31709:5;31733:6;;31661:79;;;-1:-1:-1;;;;;31683:6:4;;;31661:79;;;;;;;;31709:5;;;;31661:79;;;;;;;;;;;;;;;;;;;;;;;;;31508:232;321:1:0;;;;;;;;29155:2592:4;;:::o;5461:30::-;;;-1:-1:-1;;;;;5461:30:4;;:::o;5952:158::-;6022:12;;5999:4;;6022:12;;:81;;;;-1:-1:-1;6051:18:4;;:23;;:51;;-1:-1:-1;;6084:18:4;;6078:3;:24;;5952:158::o;38821:203::-;38918:12;38956:61;38999:6;39007:9;38956:42;:61::i;:::-;38946:71;38821:203;-1:-1:-1;;;38821:203:4:o;4719:31::-;;;;:::o;5009:29::-;;;;;;;;;:::o;39205:197::-;39298:13;39338:57;39377:7;39386:8;39338:38;:57::i;4947:24::-;;;;;;:::o;12334:1123::-;12403:9;;12423:28;;;;;;;;;;;;-1:-1:-1;;;;;12423:28:4;;;;12403:9;;;;;;:18;;12423:28;12403:18;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;12470:6:4;;12487:25;;;;;;;;;;;;-1:-1:-1;;;;;12487:25:4;;;;12470:6;;;;;;:15;;12487:25;12470:15;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;12564:27:4;12580:10;12564:15;:27::i;:::-;12602:24;;;;;;;;;;;;;;;;;12564:36;;;12602:24;12564:36;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;12685:78:4;12732:17;;12751:11;12685:46;:78::i;:::-;12680:135;;12784:30;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;12784:30:4;;;;;;;12777:38;;-1:-1:-1;;;;;12777:38:4;;;;;;;;;;;;;;;;12784:30;;12777:38;;;;;;;;12784:30;12777:38;;12784:30;-1:-1:-1;27:10;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;12680:135:4;12826:21;12835:11;12826:8;:21::i;:::-;12879:1;12862:5;-1:-1:-1;;;;;12862:5:4;12858:213;;12897:5;:18;;-1:-1:-1;;;;;;12897:18:4;12905:10;12897:18;;;12929:19;:33;;;12858:213;;;12993:6;:19;;-1:-1:-1;;;;;;12993:19:4;13002:10;12993:19;;;13026:20;:34;;;12858:213;13081:9;:16;;-1:-1:-1;;13081:16:4;;;;;13137:15;;13107:72;;;-1:-1:-1;;;;;13107:72:4;;13168:10;13107:72;;;;;;-1:-1:-1;;;;;13137:15:4;;;;13107:60;;:72;;;;;13081:16;;13107:72;;;;;;;;13081:16;13137:15;13107:72;;;5:2:-1;;;;30:1;27;20:12;5:2;13107:72:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;13107:72:4;;;;13194:256;13223:10;13247:11;13272:5;;;;;;;;;-1:-1:-1;;;;;13272:5:4;13291:6;;;;;;;;;-1:-1:-1;;;;;13291:6:4;13311;;13331:17;;13362:11;;13387:19;;13420:20;;13194:256;;;;-1:-1:-1;;;;;13194:256:4;-1:-1:-1;;;;;13194:256:4;;;;;;;;;;;-1:-1:-1;;;;;13194:256:4;-1:-1:-1;;;;;13194:256:4;;;;;;-1:-1:-1;;;;;13194:256:4;-1:-1:-1;;;;;13194:256:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;321:1:0;;;;12334:1123:4;;;:::o;11206:360::-;11279:7;11373:5;;;11392:6;11412;;11432:11;;11457:17;;11488:12;;11279:7;;;;;;;;;;;;;;-1:-1:-1;;;;;11373:5:4;;;;11392:6;;11412;11432:11;11457:17;11488:12;;;;;11373:5;11514:13;;;11541:8;:6;:8::i;:::-;11352:207;;;;-1:-1:-1;11352:207:4;;-1:-1:-1;11352:207:4;;-1:-1:-1;11352:207:4;-1:-1:-1;11352:207:4;-1:-1:-1;11352:207:4;-1:-1:-1;11352:207:4;;-1:-1:-1;11206:360:4;-1:-1:-1;11206:360:4:o;4532:23::-;;;;:::o;4561:35::-;;;;:::o;6530:178::-;6586:4;6620:5;;-1:-1:-1;;;;;6610:15:4;;;6620:5;;6610:15;:35;;;;;6629:16;:14;:16::i;:::-;6609:92;;;-1:-1:-1;6673:6:4;;-1:-1:-1;;;;;6663:16:4;;;6673:6;;6663:16;:37;;;;;6683:17;:15;:17::i;32125:1085::-;32178:27;32194:10;32178:15;:27::i;:::-;32207:28;;;;;;;;;;;;;;;;;304:6:0;293:9;285:26;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;32254:10:4;:8;:10::i;:::-;32266:21;;;;;;;;;;;;-1:-1:-1;;;;;32266:21:4;;;;;293:9:0;285:26;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;32306:21:4;32316:10;32306:9;:21::i;:::-;32338:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;32338:25:4;;;;32306:30;;;32338:25;32306:30;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;32396:15:4;;32413:26;;;;;;;;;;;;;;;;;-1:-1:-1;;;32396:15:4;;;-1:-1:-1;;;;;32396:15:4;32382:10;:29;;;32413:26;32382:29;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;32493:8:4;;;;;;;;;-1:-1:-1;;;;;32493:8:4;-1:-1:-1;;;;;32493:28:4;;:30;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;32493:30:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;32493:30:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;32493:30:4;32458:8;;:31;;;-1:-1:-1;;;;;32458:31:4;;32483:4;32458:31;;;;;;-1:-1:-1;;;;;32458:65:4;;;;:8;;;;:16;;:31;;;;;32493:30;;32458:31;;;;;;;;:8;:31;;;5:2:-1;;;;30:1;27;20:12;5:2;32458:31:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;32458:31:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;32458:31:4;32525:29;;;;;;;;;;;;;32458:31;32525:29;;;-1:-1:-1;;;;;32458:65:4;;;;;;;;;32525:29;32458:65;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;32622:15:4;;-1:-1:-1;;;32622:15:4;;-1:-1:-1;;;;;32622:15:4;32618:108;;32667:15;:28;;-1:-1:-1;;;;;;;;32667:28:4;32685:10;-1:-1:-1;;;32667:28:4;;;;32709:7;;32618:108;32855:11;:18;;-1:-1:-1;;32855:18:4;;;;;32910:8;;:30;;;-1:-1:-1;;;;;32910:30:4;;;;32855:18;;-1:-1:-1;;;;;32910:8:4;;:28;;:30;;;;;;;;;;;;;;:8;:30;;;5:2:-1;;;;30:1;27;20:12;5:2;32910:30:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;32910:30:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;32910:30:4;32975:64;;;-1:-1:-1;;;;;32975:64:4;;;;32910:30;;-1:-1:-1;32950:14:4;;-1:-1:-1;;;;;32975:62:4;;;;;:64;;;;;32910:30;;32975:64;;;;;;;32950:14;32975:62;:64;;;5:2:-1;;;;30:1;27;20:12;5:2;32975:64:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;32975:64:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;32975:64:4;33070:8;;:17;;;-1:-1:-1;;;;;33070:17:4;;;;32975:64;;-1:-1:-1;33050:63:4;;32975:64;;-1:-1:-1;;;;;33070:8:4;;:15;;:17;;;;;32975:64;;33070:17;;;;;;;:8;:17;;;5:2:-1;;;;30:1;27;20:12;5:2;33070:17:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;33070:17:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;33070:17:4;:42;;;-1:-1:-1;;;;;33070:42:4;;33106:4;33070:42;;;;;;-1:-1:-1;;;;;33070:27:4;;;;;;:42;;;;;:17;;:42;;;;;;;;:27;:42;;;5:2:-1;;;;30:1;27;20:12;5:2;33070:42:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;33070:42:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;33070:42:4;33050:11;:63::i;:::-;33123:11;:19;;-1:-1:-1;;33152:13:4;;;;;33181:22;;;-1:-1:-1;;;;;33181:22:4;;;;;;;;;;;;;;;321:1:0;;;;;;;;;;32125:1085:4;;:::o;4909:31::-;;;;:::o;23326:2575::-;23419:13;26053:10;:8;:10::i;:::-;26065:21;;;;;;;;;;;;;-1:-1:-1;;;;;26065:21:4;;;26045:42;;;;;-1:-1:-1;;;;;26045:42:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;26045:42:4;;26105:41;26115:13;:30;;26139:6;;-1:-1:-1;;;;;26139:6:4;26115:30;;;26131:5;;-1:-1:-1;;;;;26131:5:4;26115:30;26105:9;:41::i;:::-;26148:22;;;;;;;;;;;;;;;;;26097:74;;;;;-1:-1:-1;;;;;26097:74:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;26097:74:4;;26189:27;26205:10;26189:15;:27::i;:::-;26227:24;;;;;;;;;;;;;;;;;;26189:36;26181:71;;;;-1:-1:-1;;;;;26181:71:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;26181:71:4;;23515:78;23562:17;;23581:11;23515:46;:78::i;:::-;23510:135;;23614:30;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;23614:30:4;;;;;;;23607:38;;-1:-1:-1;;;;;23607:38:4;;;;;;;;;;;;;;;;23614:30;;23607:38;;;;;;;;23614:30;23607:38;;23614:30;-1:-1:-1;27:10;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;23510:135:4;23656:16;23675:13;:11;:13::i;:::-;23656:32;;23698:19;23720:13;:84;;23783:21;;23720:84;;;23748:20;;23720:84;23698:106;;23880:239;23912:11;23937:13;:49;;23967:19;;23937:49;;;23953:11;23937:49;24000:13;:50;;24039:11;24000:50;;;24016:20;;24000:50;24064:14;23880:18;:239::i;:::-;23875:311;;24142:32;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;24142:32:4;;;;;;;24135:40;;-1:-1:-1;;;;;24135:40:4;;;;;;;;;;;;;;;;24142:32;;24135:40;;;;;;;;24142:32;24135:40;;24142:32;-1:-1:-1;27:10;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;23875:311:4;24245:21;24254:11;24245:8;:21::i;:::-;24314:20;24337:13;:30;;24361:6;;-1:-1:-1;;;;;24361:6:4;24337:30;;;24353:5;;-1:-1:-1;;;;;24353:5:4;24337:30;24314:53;;24377:27;24407:107;24437:13;24464:14;24492:12;24407:16;:107::i;:::-;24377:137;;24563:27;24593:72;24653:11;24593:8;;;;;;;;;-1:-1:-1;;;;;24593:8:4;-1:-1:-1;;;;;24593:15:4;;:17;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;24593:72:4;24563:102;;24713:16;24732:143;24795:17;;24826:11;;24851:14;24732:49;:143::i;:::-;24713:162;;24890:13;24886:530;;;24919:5;:18;;-1:-1:-1;;;;;;24919:18:4;24927:10;24919:18;;;24951:19;:33;;;24998:23;:40;;;25052:20;:34;;;25100:20;:45;;;24886:530;;;25176:6;:19;;-1:-1:-1;;;;;;25176:19:4;25185:10;25176:19;;;25209:20;:34;;;25257:24;:41;;;25312:21;:35;;;25361:19;:44;;;24886:530;25426:11;:28;;;25464:17;:31;;;25506:24;25516:13;25506:9;:24::i;:::-;25617:15;;-1:-1:-1;;;;;25617:31:4;;;-1:-1:-1;;;25617:15:4;;;;:31;25613:90;;;25664:15;:28;;-1:-1:-1;;;;;;;;25664:28:4;;;25613:90;25743:15;;25713:72;;;-1:-1:-1;;;;;25713:72:4;;25774:10;25713:72;;;;;;-1:-1:-1;;;;;25743:15:4;;;;25713:60;;:72;;;;;25743:15;;25713:72;;;;;;;;25743:15;;25713:72;;;5:2:-1;;;;30:1;27;20:12;5:2;25713:72:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;25887:6:4;;25800:94;;;25811:10;25800:94;;-1:-1:-1;;;;;25800:94:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;25800:94:4;;;;;;;-1:-1:-1;25800:94:4;26262:1;;;;;;23326:2575;;;:::o;22880:251::-;22936:10;:8;:10::i;:::-;22948:21;;;;;;;;;;;;-1:-1:-1;;;;;22948:21:4;;;;;293:9:0;285:26;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;22988:21:4;22998:10;22988:9;:21::i;:::-;23011;;;;;;;;;;;;;;;;;;293:9:0;285:26;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;23072:5:4;;23048:30;;-1:-1:-1;;;;;23072:5:4;23058:10;:19;23048:9;:30::i;:::-;23093:31;;;23113:10;23093:31;;;;;;;;;;;;;321:1:0;;22880:251:4;;:::o;4977:25::-;;;;;;;;;:::o;2186:316:6:-;2345:11;2372:18;2393:42;2407:12;2421:13;2393;:42::i;:::-;2372:63;;2454:41;2464:15;2481:13;2454:9;:41::i;5984:1083::-;6180:10;6267:24;6295:17;6294:96;;1134:24;6294:96;;;1054:25;6294:96;6267:123;-1:-1:-1;6400:22:6;355:8;6426:34;;;6425:50;6400:75;;6533:15;355:8;6614:18;355:8;6584:12;:26;6565:15;:46;:67;;;;;;6551:105;;;;;;6533:123;;6808:17;:51;;;;;6842:17;6829:10;:30;6808:51;6804:77;;;6880:1;6873:8;;;;;;;6804:77;6952:17;6951:109;;7050:10;7030:17;:30;6951:109;;;7005:10;6985:17;:30;6951:109;6943:117;5984:1083;-1:-1:-1;;;;;;;;5984:1083:6:o;33767:145:4:-;33882:9;;33898:6;;33871:34;;;-1:-1:-1;;;;;33871:34:4;;;;;;;;;;33837:10;;-1:-1:-1;;;;;33882:9:4;;33871:26;;:34;;;;;;;;;;;;;;33882:9;33871:34;;;5:2:-1;;;;30:1;27;20:12;5:2;33871:34:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;33871:34:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;33871:34:4;;33767:145;-1:-1:-1;33767:145:4:o;40220:533::-;40285:22;40418:3;40406:16;40388:34;;40442:14;40501;40470:8;;;;;;;;;-1:-1:-1;;;;;40470:8:4;-1:-1:-1;;;;;40470:25:4;;:27;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;40470:27:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;40470:27:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;40470:27:4;:45;40466:157;;;40556:3;-1:-1:-1;;;;;40540:27:4;;:29;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;40540:29:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;40540:29:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;40540:29:4;;-1:-1:-1;40466:157:4;;;-1:-1:-1;40609:3:4;40466:157;40654:8;;;;;;;;;-1:-1:-1;;;;;40654:8:4;-1:-1:-1;;;;;40654:15:4;;:17;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;40654:17:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;40654:17:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;40654:17:4;:42;;;-1:-1:-1;;;;;40654:42:4;;-1:-1:-1;;;;;40654:42:4;;;;;;;;;;;;;;;:26;;;;;;;:42;;;;;:17;;:42;;;;;;;-1:-1:-1;40654:26:4;:42;;;5:2:-1;;;;30:1;27;20:12;5:2;40654:42:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;40654:42:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;40654:42:4;40710:26;;;;;;;;;;;;;;40654:42;40710:26;;;40633:113;;;;;-1:-1:-1;;;;;40633:113:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;40633:113:4;;40220:533;;;;:::o;4096:972:6:-;4321:15;355:8;4656:33;;;;4712:12;;4747;;4782:15;;4321;;355:8;4712:12;4847:6;;;4846:21;;4712:12;4845:28;;;;;4840:1;:34;:47;;;;;;4826:84;;;;;;4809:101;;4920:17;4940:8;:42;;4972:10;4968:1;:14;4940:42;;;4955:10;4951:1;:14;4940:42;4920:62;;5017:1;5000:13;:18;;4993:26;;;;5047:13;4096:972;-1:-1:-1;;;;;;;;;;;4096:972:6:o;5074:327::-;5206:12;5256:54;5266:15;516:2;5256:9;:54::i;:::-;5245:7;:65;;5244:150;;;;;5339:54;5349:15;591:3;5339:9;:54::i;:::-;5328:7;:65;;5234:160;5074:327;-1:-1:-1;;;5074:327:6:o;1672:365::-;1842:16;355:8;1902:102;1973:15;1937:32;:15;355:8;1937:32;:19;:32;:::i;:::-;:52;;;;;1902:12;;1937:52;;1902:102;:16;:102;:::i;:::-;1888:142;;;;;;;1672:365;-1:-1:-1;;;;1672:365:6:o;1431:145:16:-;1489:7;1520:5;;;1543:6;;;;1535:15;;;;;40838:192:4;40908:8;;;;;;;;;-1:-1:-1;;;;;40908:8:4;-1:-1:-1;;;;;40908:15:4;;:17;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;40908:17:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;40908:17:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;40908:17:4;:65;;;-1:-1:-1;;;;;40908:65:4;;40939:10;40908:65;;;;40959:4;40908:65;;;;;;;;;;;;-1:-1:-1;;;;;40908:30:4;;;;;;:65;;;;;:17;;:65;;;;;;;;-1:-1:-1;40908:30:4;:65;;;5:2:-1;;;;30:1;27;20:12;5:2;40908:65:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;40908:65:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;40908:65:4;40987:26;;;;;;;;;;;;;;40908:65;40987:26;;;40887:136;;;;;-1:-1:-1;;;;;40887:136:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;40887:136:4;;40838:192;:::o;39551:220::-;39687:14;39743:3;39730:10;:16;39729:35;;39763:1;39729:35;;;-1:-1:-1;39750:10:4;39551:220::o;1205:145:16:-;1263:7;1295:1;1290;:6;;1282:15;;;;;;-1:-1:-1;1319:5:16;;;1205:145::o;3344:168:6:-;3502:3;3480:18;;3479:26;;3344:168::o;2809:354::-;2908:12;2950:9;2940:6;:19;2936:33;;;-1:-1:-1;2968:1:6;2961:8;;2936:33;2998:28;;;2979:16;3019:6;3069:3;3054:18;;3019:6;3053:34;;;;;3036:51;;3126:1;3113:10;:14;3112:43;;3145:10;3144:11;;3112:43;;26459:710:4;26610:27;26746:245;26814:11;;26839:14;26867:17;;26898:12;:57;;26935:20;;26898:57;;;26913:19;;26898:57;26969:12;26746:54;:245::i;:::-;26721:270;;27041:49;27053:12;27067:22;27041:11;:49::i;:::-;27105:57;;;-1:-1:-1;;;;;27105:57:4;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;27105:57:4;;;;;;;;;;26459:710;;;;;:::o;39830:333::-;39893:15;39889:268;;;39947:1;39924:20;:24;;;39962:18;:22;39998:12;:20;;-1:-1:-1;;39998:20:4;;;39889:268;;;40073:1;40049:21;:25;;;40088:19;:23;40125:13;:21;;-1:-1:-1;;40125:21:4;;;39889:268;39830:333;:::o;229:421:16:-;287:7;527:6;523:45;;-1:-1:-1;556:1:16;549:8;;523:45;590:5;;;594:1;590;:5;:1;613:5;;;;;:10;605:19;;;;",
  "source": "pragma solidity >=0.5.6 <0.6.0;\n\nimport \"openzeppelin-solidity/contracts/math/SafeMath.sol\";\nimport \"../DBC.sol\";\nimport \"../dappsys/proxy.sol\";\nimport \"../feeds/PriceFeeds.sol\";\nimport \"../Registry.sol\";\nimport \"./ContractForDifferenceFactory.sol\";\nimport \"./ContractForDifferenceRegistry.sol\";\nimport \"./ContractForDifferenceLibrary.sol\";\n\n\n/*\n * SOLIUM DISABLE:\n *\n *   security/no-block-members - we need to use 'now' in order to set a time\n *       limit.\n */\n\n /* solium-disable security/no-block-members */\n\n/**\n * @title Contract for difference\n *\n * Contract for difference for a given market between a\n * \"buyer\" (long position) and \"seller\" (short position).\n */\ncontract ContractForDifference is DBC {\n    using SafeMath for uint;\n\n    /*\n     * Events\n     */\n\n    event LogCFDCreated(\n        address creator,\n        bytes32 market,\n        uint notionalAmountDai,\n        uint deposit\n    );\n    event LogCFDInitiated(\n        address joiner,\n        uint amountSent,\n        address buyer,\n        address seller,\n        bytes32 market,\n        uint notionalAmountDai,\n        uint strikePrice,\n        uint buyerDepositBalance,\n        uint sellerDepositBalance\n    );\n    event LogCFDTransferPosition(address oldOwner, address newOwner);\n    event LogCFDCanceledNew(address party, uint amount, bytes32 market);\n    event LogCFDStrikePriceUpdated(address party, uint newStrikePrice);\n\n    event LogCFDSale(\n        address party,\n        uint saleStrikePrice,\n        uint timeLimit\n    );\n    event LogCFDSaleCancelled(address party);\n    event LogCFDSaleUpdated(address party, uint newPrice);\n    event LogCFDSold(address to, address by, uint newNotional, uint sellerAmount, uint buyerDeposit, bytes32 market);\n\n    event LogCFDPartyBalanceUpdate(address party, uint amount, bool isWithdraw, uint newBalance, bytes32 market);\n    event LogCFDTransferFunds(address receiver, uint amount);\n\n    event LogCFDClosed(address winner, uint buyerCollateral, uint sellerCollateral, bytes32 market);\n    event LogCFDForceTerminated(address terminator, uint terminatorAmount, address otherParty, uint otherPartyAmount, bytes32 market);\n    event LogCFDUpgraded(address newCFD);\n    event LogCFDRemainingBalanceUnexpected(uint remainder);\n\n    enum Status {\n        CREATED,\n        INITIATED,\n        SALE,\n        CLOSED\n    }\n\n    /*\n     * Constants\n     */\n\n    string constant REASON_NOTIONAL_TOO_LOW = \"Notional below minimum\";\n    string constant REASON_DAI_TRANSFER_FAILED = \"Failure transfering ownership of DAI tokens\";\n    string constant REASON_COLLATERAL_RANGE_FAILED = \"collateralInRange false\";\n    string constant REASON_MUST_NOT_BE_INITIATED = \"Must not be initiated\";\n    string constant REASON_MUST_NOT_BE_CLOSED = \"Must not be closed\";\n    string constant REASON_MUST_NOT_BE_PARTY = \"Contract party can't call this\";\n    string constant REASON_MUST_BE_INITIATED = \"Must be initiated\";\n    string constant REASON_MUST_BE_SELLER = \"msg.sender must be seller\";\n    string constant REASON_MUST_NOT_BE_SELLER = \"msg.sender must not be seller\";\n    string constant REASON_MUST_BE_ON_SALE = \"Must be on sale\";\n    string constant REASON_MUST_BE_POSITIVE_PRICE = \"Price must be > 0\";\n    string constant REASON_ONLY_CONTRACT_PARTIES = \"Only contract parties can do this\";\n    string constant REASON_MUST_BE_ACTIVE = \"Must be active\";\n    string constant REASON_MARKET_PRICE_RANGE_FAILED = \"collateralInRange false\";\n    string constant REASON_WITHDRAW_NOT_ENOUGH = \"Can't withdraw more then available\";\n    string constant REASON_AMOUNT_NOT_ENOUGH = \"Amount not enough\";\n    string constant REASON_UPGRADE_ALREADY_SET = \"msg.sender already called\";\n    string constant REASON_UPGRADE_ALREADY_LATEST = \"Already at latest version\";\n    string constant REASON_TRANSFER_TO_EXISTING_PARTY = \"Can't transfer to existing party\";\n    string constant REASON_MUST_BE_MORE_THAN_CUTOFF = \"Must be more than liquidation price\";\n    string constant REASON_MUST_BE_LESS_THAN_CUTOFF = \"Must be less than liquidation price\";\n\n    uint public constant FORCE_TERMINATE_PENALTY_PERCENT = 5;\n    uint public constant MINIMUM_NOTIONAL_AMOUNT_DAI = 1 * 1e18; // 1 DAI/1 USD\n\n\n    /*\n     * State variables\n     */\n\n    address public buyer;                           // long\n    address public seller;                          // short\n    bytes32 public market;\n\n    uint public notionalAmountDai;\n    uint public buyerInitialNotional;\n    uint public sellerInitialNotional;\n\n    // strike prices as prices stored in PriceFeeds\n    uint public strikePrice;\n    uint public buyerInitialStrikePrice;\n    uint public sellerInitialStrikePrice;\n\n    // balances of amounts actually deposited/withdrawn from the contract\n    uint public buyerDepositBalance;\n    uint public sellerDepositBalance;\n\n    uint public buyerSaleStrikePrice;\n    uint public buyerSaleTimeLimit;\n\n    uint public sellerSaleStrikePrice;\n    uint public sellerSaleTimeLimit;\n\n    bool public buyerSelling;\n    bool public sellerSelling;\n\n    bool public initiated = false;\n    bool public closed = false;\n    bool public terminated;\n\n    // set to true for a short period of time - when second party has called\n    // upgrade and upgrade has called the new factory to do the work\n    bool public upgradeable = false;\n\n    // set to first party that calls upgrade\n    // enables identification of who called and that it has been called once\n    address public upgradeCalledBy = address(0);\n\n    address public cfdRegistryAddr;\n    address public feedsAddr;\n\n    Registry public registry;\n\n    /*\n     * Functions\n     */\n\n    /**\n     * @dev Contract has been initiated (has 2 parties) and not yet terminated.\n     * @return true if contract is active\n     */\n    function isActive() public view returns (bool) {\n        return initiated == true && closed == false;\n    }\n\n    /**\n     * @dev Is buyer / long party selling.\n     * @return true if buyer has side up for sale\n     */\n    function isBuyerSelling() public view returns (bool) {\n        return buyerSelling &&\n            (buyerSaleTimeLimit == 0 || now < buyerSaleTimeLimit);\n    }\n\n    /**\n     * @dev Is seller / short party selling.\n     * @return true if seller has side up for sale\n     */\n    function isSellerSelling() public view returns (bool) {\n        return sellerSelling &&\n            (sellerSaleTimeLimit == 0 || now < sellerSaleTimeLimit);\n    }\n\n    /**\n     * @dev If the given party is selling one side of the contract.\n     * @return true if the given party is selling\n     */\n    function isSelling(address _party) public view returns (bool) {\n        return (_party == buyer && isBuyerSelling()) ||\n            (_party == seller && isSellerSelling());\n    }\n\n    /**\n     * @dev Check if the given address is one of the 2 parties of the contract.\n     * @param _party Address to check\n     * @return true if _party is either the buyer or seller.\n     */\n    function isContractParty(address _party) public view returns (bool) {\n        return _party == buyer || _party == seller;\n    }\n\n    /**\n     * @dev Create a new CFDinstance specifying the terms of the contract.\n     *\n     * @param _registryAddr Registry contract address\n     * @param _cfdRegistryAddr CFD Registry contract address\n     * @param _feedsAddr Feeds address\n     * @param _partyAddr Address of the party creating the contract\n     * @param _marketId Contract is for prices on this market\n     * @param _strikePrice Strike price\n     * @param _notionalAmountDai Contract amount\n     * @param _isBuyer Flag indicating if the contract creator wants to take the\n     *            buyer (true) or the seller side (false).\n     */\n    function createNew(\n        address _registryAddr,\n        address _cfdRegistryAddr,\n        address _feedsAddr,\n        address _partyAddr, // msg.sender calling the Factory\n        bytes32 _marketId,\n        uint _strikePrice,\n        uint _notionalAmountDai,\n        bool _isBuyer\n    )\n        public\n        pre_cond(_notionalAmountDai >= MINIMUM_NOTIONAL_AMOUNT_DAI, REASON_NOTIONAL_TOO_LOW)\n    {\n        registry = Registry(_registryAddr);\n        uint collateralSent = registry.getDAI().balanceOf(address(this));\n\n        if (!ContractForDifferenceLibrary.collateralInRange(_notionalAmountDai, collateralSent))\n            revert(REASON_COLLATERAL_RANGE_FAILED);\n\n        if (_isBuyer) {\n            buyer = _partyAddr;\n            buyerDepositBalance = collateralSent;\n        } else {\n            seller = _partyAddr;\n            sellerDepositBalance = collateralSent;\n        }\n\n        market = _marketId;\n        notionalAmountDai = _notionalAmountDai;\n        buyerInitialNotional = _notionalAmountDai;\n        sellerInitialNotional = _notionalAmountDai;\n\n        strikePrice = _strikePrice;\n        buyerInitialStrikePrice = _strikePrice;\n        sellerInitialStrikePrice = _strikePrice;\n\n        cfdRegistryAddr = _cfdRegistryAddr;\n        feedsAddr = _feedsAddr;\n\n        emit LogCFDCreated(\n            _partyAddr,\n            market,\n            notionalAmountDai,\n            collateralSent\n        );\n    }\n\n    /**\n     * @dev Create a new CFDinstance from a previous CFD instance. This is part\n     *      of the upgrade process (see CFD.upgrade()).\n     *\n     * @param _cfdAddr Address of the existing / old CFD\n     * @param _registryAddr Address of Registry contract\n     * @param _cfdRegistryAddr Address of CFDRegistry contract\n     * @param _feedsAddr Address of Feeds contract\n     */\n    function createByUpgrade(\n        address _cfdAddr,\n        address _registryAddr,\n        address _cfdRegistryAddr,\n        address _feedsAddr\n    )\n        // NOTE on security: any address can call this however if the CFD\n        // instance has not yet been added to the ContractForDifferentRegistry\n        // (which only ContractForDifferenceFactory can do) then this\n        // function will fail at registerParty() below.\n        // Of course someone can call this with a fake\n        // ContractForDifferenceRegistry but then nothing will touch\n        // or change the state of the 0xfutures set of deployed contracts.\n        public\n    {\n        ContractForDifference oldCfd = ContractForDifference(_cfdAddr);\n\n        market = oldCfd.market();\n        notionalAmountDai = oldCfd.notionalAmountDai();\n        strikePrice = oldCfd.strikePrice();\n        buyer = oldCfd.buyer();\n        seller = oldCfd.seller();\n\n        buyerDepositBalance = oldCfd.buyerDepositBalance();\n        buyerInitialNotional = oldCfd.buyerInitialNotional();\n        buyerInitialStrikePrice = oldCfd.buyerInitialStrikePrice();\n\n        sellerDepositBalance = oldCfd.sellerDepositBalance();\n        sellerInitialNotional = oldCfd.sellerInitialNotional();\n        sellerInitialStrikePrice = oldCfd.sellerInitialStrikePrice();\n\n        cfdRegistryAddr = _cfdRegistryAddr;\n        registry = Registry(_registryAddr);\n        feedsAddr = _feedsAddr;\n\n        initiated = true;\n\n        ContractForDifferenceRegistry(cfdRegistryAddr).registerParty(seller);\n    }\n\n    /**\n     * Returns an array with all the attributes of the contract\n     * (Had to split in 3 functions because of the stack limit)\n     * Max number of return values == 8\n     */\n    function getCfdAttributes()\n        public\n        view\n        returns (address, address, bytes32, uint, uint, bool, bool, Status)\n    {\n        return (\n            buyer,\n            seller,\n            market,\n            strikePrice,\n            notionalAmountDai,\n            buyerSelling,\n            sellerSelling,\n            status()\n        );\n    }\n    function getCfdAttributes2()\n        public\n        view\n        returns (uint, uint, uint, uint, uint, uint, uint, uint)\n    {\n        return (\n            buyerInitialNotional,\n            sellerInitialNotional,\n            buyerDepositBalance,\n            sellerDepositBalance,\n            buyerSaleStrikePrice,\n            sellerSaleStrikePrice,\n            buyerInitialStrikePrice,\n            sellerInitialStrikePrice\n        );\n    }\n    function getCfdAttributes3()\n        public\n        view\n        returns (bool, address)\n    {\n        return (\n            terminated,\n            upgradeCalledBy\n        );\n    }\n\n    /**\n     * @dev Counterparty deposits their funds into the contract thereby joining\n     * and initiating the contract.\n     */\n    function deposit(uint _collateral)\n        external\n        pre_cond(initiated == false, REASON_MUST_NOT_BE_INITIATED)\n        pre_cond(closed == false, REASON_MUST_NOT_BE_CLOSED) // cancelNew has not been called\n        pre_cond(isContractParty(msg.sender) == false, REASON_MUST_NOT_BE_PARTY) // reject contract creator depositing\n    {\n        if (!ContractForDifferenceLibrary.collateralInRange(notionalAmountDai, _collateral))\n            revert(REASON_COLLATERAL_RANGE_FAILED);\n\n        daiClaim(_collateral);\n\n        if (buyer == address(0)) {\n            buyer = msg.sender;\n            buyerDepositBalance = _collateral;\n        } else {\n            seller = msg.sender;\n            sellerDepositBalance = _collateral;\n        }\n\n        initiated = true;\n        ContractForDifferenceRegistry(cfdRegistryAddr).registerParty(msg.sender);\n        emit LogCFDInitiated(\n            msg.sender,\n            _collateral,\n            buyer,\n            seller,\n            market,\n            notionalAmountDai,\n            strikePrice,\n            buyerDepositBalance,\n            sellerDepositBalance\n        );\n    }\n\n    /**\n     * @dev Cancels a newly created contract refunding the balance to the party\n     *      that created the contract. This can only be called before a contract\n     *      is initiated. ie. between the createNew() and deposit() calls.\n     */\n    function cancelNew()\n        external\n        pre_cond(initiated == false, REASON_MUST_NOT_BE_INITIATED)\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\n    {\n        uint amountSent = registry.getDAI().balanceOf(address(this));\n        daiTransfer(msg.sender, amountSent);\n        emit LogCFDTransferFunds(msg.sender, amountSent);\n        closed = true;\n        emit LogCFDCanceledNew(msg.sender, amountSent, market);\n    }\n\n    /**\n     * @dev Party adds more funds to the contract thereby increasing their\n     *      deposit balance.\n     * @param _value DAI amount\n     */\n    function topup(uint _value)\n        external\n        pre_cond(_value >= 1, REASON_AMOUNT_NOT_ENOUGH)\n        pre_cond(initiated == true, REASON_MUST_BE_INITIATED)\n        pre_cond(closed == false, REASON_MUST_NOT_BE_CLOSED)\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\n        pre_cond(isSelling(msg.sender) == false, REASON_MUST_NOT_BE_SELLER)\n    {\n        bool isBuyer = msg.sender == buyer;\n        uint newDepositBalance = (isBuyer ?\n            buyerDepositBalance :\n            sellerDepositBalance\n        ).add(_value);\n\n        // check topup doesn't make collateral exceed the maximum\n        if (!ContractForDifferenceLibrary.collateralInRange(notionalAmountDai, newDepositBalance))\n            revert(REASON_COLLATERAL_RANGE_FAILED);\n\n        daiClaim(_value);\n\n        if (isBuyer) {\n            buyerDepositBalance = newDepositBalance;\n        } else {\n            sellerDepositBalance = newDepositBalance;\n        }\n\n        emit LogCFDPartyBalanceUpdate(msg.sender, _value, false, newDepositBalance, market);\n    }\n\n    /**\n     * @dev Party withdraws funds from the contract.\n     *      They can only withdraw down to an amount that leaves the collateral\n     *      to notional difference at 20% or more.\n     * @param _withdrawAmount Amount to withdraw from the deposits balance.\n     */\n    function withdraw(uint _withdrawAmount)\n        external\n        assertWithdrawPreCond(_withdrawAmount)\n    {\n        bool isBuyer = msg.sender == buyer;\n        uint currentDepositBal = isBuyer ? buyerDepositBalance : sellerDepositBalance;\n\n        // first simple check that can't withdraw more then deposited\n        if (_withdrawAmount > currentDepositBal)\n            revert(REASON_WITHDRAW_NOT_ENOUGH);\n\n        // second a more precise check that the collateral at new balance will remain above the min\n        uint newDepositBal = currentDepositBal - _withdrawAmount;\n        uint marketPrice = latestPrice();\n        if (!marketPriceInRange(\n            marketPrice,\n            isBuyer ? newDepositBal : buyerDepositBalance,\n            isBuyer ? sellerDepositBalance : newDepositBal,\n            strikePrice // unchanged on withdraw\n        )) {\n            revert(REASON_MARKET_PRICE_RANGE_FAILED);\n        }\n\n        uint collateral = ContractForDifferenceLibrary.calculateCollateralAmount(\n            strikePrice,\n            marketPrice,\n            notionalAmountDai,\n            newDepositBal,\n            isBuyer\n        );\n\n        if (!ContractForDifferenceLibrary.collateralInRange(notionalAmountDai, collateral)) {\n            revert(REASON_COLLATERAL_RANGE_FAILED);\n        }\n\n        daiTransfer(msg.sender, _withdrawAmount);\n        emit LogCFDTransferFunds(msg.sender, _withdrawAmount);\n\n        if (isBuyer) {\n            buyerDepositBalance = newDepositBal;\n        } else {\n            sellerDepositBalance = newDepositBal;\n        }\n\n        emit LogCFDPartyBalanceUpdate(msg.sender, _withdrawAmount, true, newDepositBal, market);\n    }\n\n    /* NOTE: Split off into modifier to work around 'stack too deep' error */\n    modifier assertWithdrawPreCond(uint _withdrawAmount)\n    {\n        require(_withdrawAmount >= 1, REASON_WITHDRAW_NOT_ENOUGH);\n        require(initiated == true, REASON_MUST_BE_INITIATED);\n        require(closed == false, REASON_MUST_NOT_BE_CLOSED);\n        require(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES);\n        require(isSelling(msg.sender) == false, REASON_MUST_NOT_BE_SELLER);\n        _;\n    }\n\n    /**\n     * @dev Parties can transfer contract ownership to another address by\n     *      calling this function.\n     * @param _newAddress Addreess of the new party to swap in.\n     */\n    function transferPosition(address _newAddress)\n        external\n        pre_cond(closed == false, REASON_MUST_NOT_BE_CLOSED)\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\n        pre_cond(isContractParty(_newAddress) == false, REASON_MUST_NOT_BE_PARTY)\n        pre_cond(isSelling(msg.sender) == false, REASON_MUST_NOT_BE_SELLER)\n    {\n        if (msg.sender == buyer) buyer = _newAddress;\n        else if (msg.sender == seller) seller = _newAddress;\n        else if (msg.sender == upgradeCalledBy) upgradeCalledBy = address(0);\n        ContractForDifferenceRegistry(cfdRegistryAddr).registerParty(_newAddress);\n        emit LogCFDTransferPosition(msg.sender, _newAddress);\n    }\n\n    /**\n     * @dev Position in a contract can be sold to another party. This function\n     *      makes the callers side available for sale. A party can buy the side\n     *      with the buy function.\n     * @param _desiredStrikePrice Sellers desired sell strike price\n     * @param _timeLimit Sale available until this time in UNIX epoch seconds\n     *                  (< now for no limit)\n     */\n    function sellPrepare(uint _desiredStrikePrice, uint _timeLimit)\n        external\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\n        // reject already marked selling by the caller\n        pre_cond(isSelling(msg.sender) == false, REASON_MUST_NOT_BE_SELLER)\n        pre_cond(_desiredStrikePrice > 0, REASON_MUST_BE_POSITIVE_PRICE)\n    {\n        // calculate cutoff price\n        bool isBuyer = (msg.sender == buyer) ? true : false;\n        uint cutOff = ContractForDifferenceLibrary.cutOffPrice(\n            notionalAmountDai,\n            (isBuyer) ? buyerDepositBalance : sellerDepositBalance,\n            (isBuyer) ? buyerInitialStrikePrice : sellerInitialStrikePrice,\n            isBuyer\n        );\n\n        // mark side on sale\n        uint timeLimit = timeLimitFutureOrZero(_timeLimit);\n        if (msg.sender == buyer) {\n            // check sale strike price is not below liquidation price\n            require(_desiredStrikePrice > cutOff, REASON_MUST_BE_MORE_THAN_CUTOFF);\n            buyerSelling = true;\n            buyerSaleStrikePrice = _desiredStrikePrice;\n            buyerSaleTimeLimit = timeLimit;\n        } else if (msg.sender == seller) {\n            // check sale strike price is not already above liquidation price\n            require(_desiredStrikePrice < cutOff, REASON_MUST_BE_LESS_THAN_CUTOFF);\n            sellerSelling = true;\n            sellerSaleStrikePrice = _desiredStrikePrice;\n            sellerSaleTimeLimit = timeLimit;\n        }\n\n        ContractForDifferenceRegistry(cfdRegistryAddr).registerSale(msg.sender);\n        emit LogCFDSale(\n            msg.sender,\n            _desiredStrikePrice,\n            timeLimit\n        );\n    }\n\n    /**\n     * @dev Seller can update the price on the sale.\n     */\n    function sellUpdate(\n        uint _newPrice\n    )\n        external\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\n        pre_cond(isSelling(msg.sender), REASON_MUST_BE_SELLER)\n        pre_cond(_newPrice > 0, REASON_MUST_BE_POSITIVE_PRICE)\n    {\n        // calculate cutoff price\n        bool isBuyer = (msg.sender == buyer) ? true : false;\n        uint cutOff = ContractForDifferenceLibrary.cutOffPrice(\n            notionalAmountDai,\n            (isBuyer) ? buyerDepositBalance : sellerDepositBalance,\n            (isBuyer) ? buyerInitialStrikePrice : sellerInitialStrikePrice,\n            isBuyer\n        );\n\n        if (msg.sender == buyer) {\n            // check new strike price is not below liquidation price\n            require(_newPrice > cutOff, REASON_MUST_BE_MORE_THAN_CUTOFF);\n            buyerSaleStrikePrice = _newPrice;\n        } else if (msg.sender == seller) {\n            // check new strike price is not already above liquidation price\n            require(_newPrice < cutOff, REASON_MUST_BE_LESS_THAN_CUTOFF);\n            sellerSaleStrikePrice = _newPrice;\n        }\n        emit LogCFDSaleUpdated(msg.sender, _newPrice);\n    }\n\n    /**\n     * @dev Party can update the strike price of an non-initialized contract\n     */\n    function changeStrikePrice(\n        uint _newStrikePrice\n    )\n        external\n        pre_cond(initiated == false, REASON_MUST_NOT_BE_INITIATED)\n        pre_cond(closed == false, REASON_MUST_NOT_BE_CLOSED)\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\n        pre_cond(_newStrikePrice > 0, REASON_MUST_BE_POSITIVE_PRICE)\n    {\n        strikePrice = _newStrikePrice;\n        buyerInitialStrikePrice = _newStrikePrice;\n        sellerInitialStrikePrice = _newStrikePrice;\n        emit LogCFDStrikePriceUpdated(msg.sender, _newStrikePrice);\n    }\n\n    /**\n     * @dev Cancel the for sale status setup by sellPrepare()\n     */\n    function sellCancel()\n        external\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\n        pre_cond(isSelling(msg.sender), REASON_MUST_BE_SELLER)\n    {\n        clearSale(msg.sender == buyer);\n        emit LogCFDSaleCancelled(msg.sender);\n    }\n\n    /**\n     * @dev Buy the side in the contract that is for sale.\n     *\n     * @param _buyBuyerSide Buying the buyer side or the seller side?\n     * @param _collateral DAI amount\n     */\n    function buy(bool _buyBuyerSide, uint _collateral)\n        external\n        assertBuyPreCond(_buyBuyerSide)\n    {\n        // check sent collateral falls in the allowable range\n        if (!ContractForDifferenceLibrary.collateralInRange(notionalAmountDai, _collateral))\n            revert(REASON_COLLATERAL_RANGE_FAILED);\n\n        uint marketPrice = latestPrice();\n        uint newStrikePrice = _buyBuyerSide ?\n            buyerSaleStrikePrice :\n            sellerSaleStrikePrice;\n\n        // check new parameters fall in the allowable range\n        if (!marketPriceInRange(\n            marketPrice,\n            _buyBuyerSide ? _collateral : buyerDepositBalance,\n            _buyBuyerSide ? sellerDepositBalance : _collateral,\n            newStrikePrice // buying at this strike price\n        )) {\n            revert(REASON_MARKET_PRICE_RANGE_FAILED);\n        }\n\n        // move ownership of sent DAI to the CFD\n        daiClaim(_collateral);\n\n        // transfer to selling party\n        address sellingParty = _buyBuyerSide ? buyer : seller;\n        uint sellingPartyCollateral = buyTransferFunds(\n            _buyBuyerSide,\n            newStrikePrice,\n            sellingParty\n        );\n\n        // set new party and balances\n        uint remainingPartyDeposits = registry.getDAI().\n            balanceOf(address(this)).sub(_collateral);\n\n        // new notional amount value\n        uint newNotional = ContractForDifferenceLibrary.calculateNewNotional(\n            notionalAmountDai,\n            strikePrice,\n            newStrikePrice\n        );\n\n        if (_buyBuyerSide) {\n            buyer = msg.sender;\n            buyerDepositBalance = _collateral;\n            buyerInitialStrikePrice = newStrikePrice;\n            buyerInitialNotional = newNotional;\n            sellerDepositBalance = remainingPartyDeposits;\n        } else {\n            seller = msg.sender;\n            sellerDepositBalance = _collateral;\n            sellerInitialStrikePrice = newStrikePrice;\n            sellerInitialNotional = newNotional;\n            buyerDepositBalance = remainingPartyDeposits;\n        }\n\n        strikePrice = newStrikePrice;\n        notionalAmountDai = newNotional;\n\n        clearSale(_buyBuyerSide);\n\n        // clean up upgradeCalledBy if the departing party had set that\n        if (upgradeCalledBy == sellingParty) {\n            upgradeCalledBy = address(0);\n        }\n\n        ContractForDifferenceRegistry(cfdRegistryAddr).registerParty(msg.sender);\n        emit LogCFDSold(msg.sender, sellingParty, newNotional, sellingPartyCollateral, _collateral, market);\n    }\n\n    /* NOTE: Split off into modifier to work around 'stack too deep' error */\n    modifier assertBuyPreCond(bool _buyBuyerSide)\n    {\n        require(isActive(), REASON_MUST_BE_ACTIVE);\n        require(isSelling(_buyBuyerSide ? buyer : seller), REASON_MUST_BE_ON_SALE);\n        require(isContractParty(msg.sender) == false, REASON_MUST_NOT_BE_PARTY);\n        _;\n    }\n\n    /**\n     * Does all transfers of funds related to the buy().\n     *\n     * Transfer logic split off in seperate function ONLY to workaround\n     * 'Stack too deep' limit.\n     */\n    function buyTransferFunds(\n        bool buyBuyerSide,\n        uint newStrikePrice,\n        address sellingParty\n    )\n        private\n        returns (uint sellingPartyCollateral)\n    {\n        // determine collateral amount to send to the selling party\n        sellingPartyCollateral = ContractForDifferenceLibrary.calculateCollateralAmount(\n            strikePrice,\n            newStrikePrice,\n            notionalAmountDai,\n            buyBuyerSide ? buyerDepositBalance : sellerDepositBalance,\n            buyBuyerSide\n        );\n\n        // send money to selling party\n        daiTransfer(sellingParty, sellingPartyCollateral);\n        emit LogCFDTransferFunds(sellingParty, sellingPartyCollateral);\n    }\n\n    /**\n     * Daemons will call this routine when the market price has moved enough\n     * that the closeRatio for this contract has been reached. It can\n     * actually be called by anyone who is willing to pay the gas for the\n     * liquidate.\n     *\n     * If the market has not moved past the liquidate threshold the call\n     * will be rejected.\n     *\n     * @dev This will disolve the contract and return each parties balance of\n     * collateral.\n     */\n    function liquidate()\n        external\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\n    {\n        uint marketPrice = latestPrice();\n\n        // #11 double check the 5% threshold was crossed, if not then REJECT\n        // (can only liquidate if out of range)\n        require(\n            !marketPriceInRange(\n                marketPrice,\n                buyerDepositBalance,\n                sellerDepositBalance,\n                strikePrice\n            ),\n            \"Liquidate threshold not yet reached\"\n        );\n\n        // fetch one of the cutoffs to determine which is the winner\n        uint buyerCutOff = ContractForDifferenceLibrary.cutOffPrice(\n            notionalAmountDai,\n            buyerDepositBalance,\n            strikePrice,\n            true\n        );\n\n        // if buyer cutoff still in range then buyer wins, otherwise seller\n        bool winnerIsBuyer = marketPrice > buyerCutOff;\n        address winner = winnerIsBuyer ? buyer : seller;\n\n        // winner takes all\n        uint remaining = registry.getDAI().balanceOf(address(this));\n        daiTransfer(winner, remaining);\n        emit LogCFDTransferFunds(winner, remaining);\n\n        closed = true;\n\n        emit LogCFDClosed(\n            winner,\n            winnerIsBuyer ? remaining : 0,\n            winnerIsBuyer ? 0 : remaining,\n            market\n        );\n    }\n\n    /**\n     * Force terminate executed by one party who will penalised 5% of their\n     * collateral. Then penalty will be sent to the counterparty.\n     */\n    function forceTerminate()\n        external\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\n    {\n        uint marketPrice = latestPrice();\n        bool forcingPartyIsBuyer = msg.sender == buyer;\n\n        uint buyerCollateral = ContractForDifferenceLibrary.calculateCollateralAmount(\n            strikePrice,\n            marketPrice,\n            notionalAmountDai,\n            buyerDepositBalance,\n            true\n        );\n        uint sellerCollateral = ContractForDifferenceLibrary.calculateCollateralAmount(\n            strikePrice,\n            marketPrice,\n            notionalAmountDai,\n            sellerDepositBalance,\n            false\n        );\n\n        //\n        // calculate and check the remainder - it should be equal to zero\n        //\n        // if not expected log the event and transfer the remainder to the\n        //     owner account - it will be sorted out manually\n        //\n        uint balanceRemainder = registry.getDAI().\n            balanceOf(address(this)).\n            sub(buyerCollateral).\n            sub(sellerCollateral);\n        if (balanceRemainder != 0) {\n            emit LogCFDRemainingBalanceUnexpected(balanceRemainder);\n        }\n\n        // Transfer the remainder to the owner account. When balance unexpected\n        // is manually resolved the amount can be redistributed.\n        daiTransfer(registry.owner(), balanceRemainder);\n\n        // penalise the force terminator 5% and give it to the counterparty\n        uint penalty = ContractForDifferenceLibrary.percentOf(\n            forcingPartyIsBuyer ? buyerCollateral : sellerCollateral,\n            FORCE_TERMINATE_PENALTY_PERCENT\n        );\n        if (forcingPartyIsBuyer) {\n            buyerCollateral = buyerCollateral.sub(penalty);\n            sellerCollateral = sellerCollateral.add(penalty);\n        } else {\n            buyerCollateral = buyerCollateral.add(penalty);\n            sellerCollateral = sellerCollateral.sub(penalty);\n        }\n\n        // Send collateral amounts back each party.\n        daiTransfer(buyer, buyerCollateral);\n        emit LogCFDTransferFunds(buyer, buyerCollateral);\n        daiTransfer(seller, sellerCollateral);\n        emit LogCFDTransferFunds(seller, sellerCollateral);\n\n        terminated = true;\n        closed = true;\n\n        if (forcingPartyIsBuyer)\n            emit LogCFDForceTerminated(buyer, buyerCollateral, seller, sellerCollateral, market);\n        else\n            emit LogCFDForceTerminated(seller, sellerCollateral, buyer, buyerCollateral, market);\n    }\n\n    /**\n     * @dev Upgrade contract to a new version. This involves creating a new CFD\n     *      at the latest contract set - transferring over all properties and\n     *      value from this one to the new one.\n     *      An upgrade requires a call to this function from both parties. Then\n     *      upgrade will happen when the second party makes the call.\n     */\n    function upgrade()\n        external\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\n        pre_cond(isSelling(msg.sender) == false, REASON_MUST_NOT_BE_SELLER)\n        pre_cond(msg.sender != upgradeCalledBy, REASON_UPGRADE_ALREADY_SET)\n        pre_cond(registry.allCFDs(address(this)) != registry.getCFDFactoryLatest(), REASON_UPGRADE_ALREADY_LATEST)\n    {\n        // 1st call to initiate upgrade process\n        if (upgradeCalledBy == address(0)) {\n            upgradeCalledBy = msg.sender;\n            return;\n        }\n\n        // if here then then this is the 2nd call, invoked by the opposite, so\n        // kick off the upgrade process\n        upgradeable = true;\n        address cfdFactoryLatest = registry.getCFDFactoryLatest();\n        address newCfd = address(ContractForDifferenceFactory(cfdFactoryLatest).createByUpgrade());\n        daiTransfer(newCfd, registry.getDAI().balanceOf(address(this)));\n        upgradeable = false;\n        closed = true;\n\n        emit LogCFDUpgraded(newCfd);\n    }\n\n    /**\n     * @dev Derive status from the state variables.\n     * @return Status reflecting the current state.\n     */\n    function status()\n        public\n        view\n        returns (Status)\n    {\n        if (closed == true)\n            return Status.CLOSED;\n        else if (initiated == false)\n            return Status.CREATED;\n        else if (isBuyerSelling() || isSellerSelling())\n            return Status.SALE;\n        else\n            return Status.INITIATED;\n    }\n\n    /**\n     * Get the latest read for the market of this CFD.\n     */\n    function latestPrice()\n        internal\n        view\n        returns (uint price)\n    {\n        price = PriceFeeds(feedsAddr).read(market);\n    }\n\n    /**\n     * @dev Checks if given parameters and given market price result in a price\n     *      inside an allowable range. This range is defined by the ContractForDifferenceLibrary.cutOffPrice\n     *      function formulas. The idea is that as parameters change - leverage,\n     *      market price etc., we must check the change doesn't result in a\n     *      liquidation event due to too little collateral.\n     *\n     * @param _marketPrice Current market price\n     * @return true if in range; false if not\n     */\n\n    function marketPriceInRange(\n        uint _marketPrice,\n        uint _buyerDepositBalance,\n        uint _sellerDepositBalance,\n        uint _strikePrice\n    )\n        public\n        view\n        returns (bool inRange)\n    {\n        uint buyerCutOff = ContractForDifferenceLibrary.cutOffPrice(\n            notionalAmountDai,\n            _buyerDepositBalance,\n            _strikePrice,\n            true\n        );\n        uint sellerCutOff = ContractForDifferenceLibrary.cutOffPrice(\n            notionalAmountDai,\n            _sellerDepositBalance,\n            _strikePrice,\n            false\n        );\n        inRange = _marketPrice > buyerCutOff && _marketPrice < sellerCutOff;\n    }\n\n   /**\n     * @dev Calculate new notional amount after a side has been sold at a new\n     *      strike price.\n     *\n     * Formula is:\n     *  N2 = N1 * S2 / S1\n     * Where:\n     *  N1 = previous notional\n     *  S1 = previous strike price\n     *  S2 = sale strike price\n     *\n     * @param _oldNotional Existing notional.\n     * @param _oldStrikePrice Existing strike price.\n     * @param _newStrikePrice New / Sale strike price.\n     * @return newNotional Result of the calculation.\n     */\n    function calculateNewNotional(\n        uint _oldNotional,\n        uint _oldStrikePrice,\n        uint _newStrikePrice\n    )\n        public\n        pure\n        returns (uint newNotional)\n    {\n        newNotional = ContractForDifferenceLibrary.calculateNewNotional(\n            _oldNotional,\n            _oldStrikePrice,\n            _newStrikePrice\n        );\n    }\n\n    /**\n     * @dev Calculate the collateral amount for one party given the current\n     *      market price and original strike price, notional amount and the\n     *      amount the party has deposited into the contract.\n     *\n     * @param _marketPrice Current market price\n     * @param _strikePrice CFD strike price\n     * @param _notionalAmount CFD notional amount\n     * @param _depositBalance Balances of deposits into the contract\n     * @param _isBuyer Buyer or Seller / Long or short party?\n     *\n     * @return collateral Amount of collateral for the party\n     */\n    function calculateCollateralAmount(\n        uint _strikePrice,\n        uint _marketPrice,\n        uint _notionalAmount,\n        uint _depositBalance,\n        bool _isBuyer\n    )\n        public\n        pure\n        returns (uint collateral)\n    {\n        collateral = ContractForDifferenceLibrary.calculateCollateralAmount(\n            _strikePrice,\n            _marketPrice,\n            _notionalAmount,\n            _depositBalance,\n            _isBuyer\n        );\n    }\n\n    /**\n     * @dev Calculate the cut off price for buyer or seller.\n     *\n     * This is the price that if passed would raise a liquidation event.\n     *\n     * Base Formulas are:\n     *     Buyer:  1.05 * S - depositBalanceLong  * S / N\n     *     Seller: 0.95 * S + depositBalanceShort * S / N\n     *\n     * However for Solidity we need to adjust parts by FACTOR_UINT to ensure\n     * no fractions.\n     *\n     * @param _notionalAmountDai Contract notional amount\n     * @param _depositBalance Balance of deposits for one party\n     *\n     * @return cut off price\n     */\n    function cutOffPrice(\n        uint _notionalAmountDai,\n        uint _depositBalance,\n        uint _strikePrice,\n        bool _calcForBuyerSide\n    )\n        public\n        pure\n        returns (uint price)\n    {\n        price = ContractForDifferenceLibrary.cutOffPrice(\n            _notionalAmountDai,\n            _depositBalance,\n            _strikePrice,\n            _calcForBuyerSide\n        );\n    }\n\n    /**\n     * @dev Calculate the change in contract value based on the price change.\n     * @param _currentPrice Current market price\n     */\n    function changeInDai(\n        uint _strikePrice,\n        uint _currentPrice,\n        uint _notionalAmount\n    )\n        public\n        pure\n        returns (uint change)\n    {\n        change = ContractForDifferenceLibrary.changeInDai(\n            _strikePrice,\n            _currentPrice,\n            _notionalAmount\n        );\n    }\n\n    /**\n     * @dev Return a percentage change comparing a value with a new value.\n     * @param _value The existing value to compare against\n     * @param _newValue The new value to compare the change against\n     * @return Percentage change (eg. _value = 100, _newValue = 90 then return 10)\n     */\n    function percentChange(uint _value, uint _newValue)\n        public\n        pure\n        returns (uint percent)\n    {\n        percent = ContractForDifferenceLibrary.percentChange(_value, _newValue);\n    }\n\n    /**\n     * @dev Return a percentage of a given amount.\n     * @param _amount Amount to calculate the percentage of\n     * @param _percent Percent amount (1 - 100)\n     */\n    function percentOf(uint _amount, uint _percent)\n        public\n        pure\n        returns (uint adjusted)\n    {\n        adjusted = ContractForDifferenceLibrary.percentOf(_amount, _percent);\n    }\n\n    /**\n     * Utility that given a time limit will preverve it if in the future OR\n     * set it to 0 if it's in the present or past.\n     */\n    function timeLimitFutureOrZero(\n        uint _timeLimit\n    )\n        private\n        view // not pure because of 'now'\n        returns(uint timeLimit)\n    {\n        timeLimit = (_timeLimit > now) ? _timeLimit : 0;\n    }\n\n    /**\n     * Clear all sale related state.\n     */\n    function clearSale(bool _clearBuyerSide) private {\n        if (_clearBuyerSide) {\n            buyerSaleStrikePrice = 0;\n            buyerSaleTimeLimit = 0;\n            buyerSelling = false;\n        } else {\n            sellerSaleStrikePrice = 0;\n            sellerSaleTimeLimit = 0;\n            sellerSelling = false;\n        }\n    }\n\n    /**\n     * Transfer DAI to an address.\n     */\n    function daiTransfer(address _to, uint _value) private {\n        bytes32 toAddrCodeHash;\n        /* solium-disable security/no-inline-assembly */\n        assembly {\n\t\t\ttoAddrCodeHash := extcodehash(_to)\n        }\n\n        address toAddr;\n        if (registry.getProxyCodeHash() == toAddrCodeHash) {\n            toAddr = DSProxy(address(_to)).owner();\n        } else {\n            toAddr = _to;\n        }\n\n        require(\n            registry.getDAI().transfer(toAddr, _value),\n            REASON_DAI_TRANSFER_FAILED\n        );\n    }\n\n    /**\n     * Claim DAI - ie. move approved DAI to this CFD contract.\n     */\n    function daiClaim(uint _value) private {\n        require(\n            registry.getDAI().transferFrom(msg.sender, address(this), _value),\n            REASON_DAI_TRANSFER_FAILED\n        );\n    }\n\n}\n",
  "sourcePath": "/home/julien/0xFutures/protocol-master/contracts/cfd/ContractForDifference.sol",
  "compiler": {
    "name": "solc",
    "version": "0.5.6+commit.b259423e.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.8",
  "updatedAt": "2019-05-28T08:21:29.099Z",
  "devdoc": {
    "methods": {
      "buy(bool,uint256)": {
        "details": "Buy the side in the contract that is for sale.",
        "params": {
          "_buyBuyerSide": "Buying the buyer side or the seller side?",
          "_collateral": "DAI amount"
        }
      },
      "calculateCollateralAmount(uint256,uint256,uint256,uint256,bool)": {
        "details": "Calculate the collateral amount for one party given the current     market price and original strike price, notional amount and the     amount the party has deposited into the contract.",
        "params": {
          "_depositBalance": "Balances of deposits into the contract",
          "_isBuyer": "Buyer or Seller / Long or short party?",
          "_marketPrice": "Current market price",
          "_notionalAmount": "CFD notional amount",
          "_strikePrice": "CFD strike price"
        },
        "return": "collateral Amount of collateral for the party"
      },
      "calculateNewNotional(uint256,uint256,uint256)": {
        "details": "Calculate new notional amount after a side has been sold at a new     strike price.     * Formula is: N2 = N1 * S2 / S1 Where: N1 = previous notional S1 = previous strike price S2 = sale strike price",
        "params": {
          "_newStrikePrice": "New / Sale strike price.",
          "_oldNotional": "Existing notional.",
          "_oldStrikePrice": "Existing strike price."
        },
        "return": "newNotional Result of the calculation."
      },
      "cancelNew()": {
        "details": "Cancels a newly created contract refunding the balance to the party     that created the contract. This can only be called before a contract     is initiated. ie. between the createNew() and deposit() calls."
      },
      "changeInDai(uint256,uint256,uint256)": {
        "details": "Calculate the change in contract value based on the price change.",
        "params": {
          "_currentPrice": "Current market price"
        }
      },
      "changeStrikePrice(uint256)": {
        "details": "Party can update the strike price of an non-initialized contract"
      },
      "createByUpgrade(address,address,address,address)": {
        "details": "Create a new CFDinstance from a previous CFD instance. This is part     of the upgrade process (see CFD.upgrade()).",
        "params": {
          "_cfdAddr": "Address of the existing / old CFD",
          "_cfdRegistryAddr": "Address of CFDRegistry contract",
          "_feedsAddr": "Address of Feeds contract",
          "_registryAddr": "Address of Registry contract"
        }
      },
      "createNew(address,address,address,address,bytes32,uint256,uint256,bool)": {
        "details": "Create a new CFDinstance specifying the terms of the contract.",
        "params": {
          "_cfdRegistryAddr": "CFD Registry contract address",
          "_feedsAddr": "Feeds address",
          "_isBuyer": "Flag indicating if the contract creator wants to take the           buyer (true) or the seller side (false).",
          "_marketId": "Contract is for prices on this market",
          "_notionalAmountDai": "Contract amount",
          "_partyAddr": "Address of the party creating the contract",
          "_registryAddr": "Registry contract address",
          "_strikePrice": "Strike price"
        }
      },
      "cutOffPrice(uint256,uint256,uint256,bool)": {
        "details": "Calculate the cut off price for buyer or seller.     * This is the price that if passed would raise a liquidation event.     * Base Formulas are:    Buyer:  1.05 * S - depositBalanceLong  * S / N    Seller: 0.95 * S + depositBalanceShort * S / N     * However for Solidity we need to adjust parts by FACTOR_UINT to ensure no fractions.",
        "params": {
          "_depositBalance": "Balance of deposits for one party",
          "_notionalAmountDai": "Contract notional amount"
        },
        "return": "cut off price"
      },
      "deposit(uint256)": {
        "details": "Counterparty deposits their funds into the contract thereby joining and initiating the contract."
      },
      "isActive()": {
        "details": "Contract has been initiated (has 2 parties) and not yet terminated.",
        "return": "true if contract is active"
      },
      "isBuyerSelling()": {
        "details": "Is buyer / long party selling.",
        "return": "true if buyer has side up for sale"
      },
      "isContractParty(address)": {
        "details": "Check if the given address is one of the 2 parties of the contract.",
        "params": {
          "_party": "Address to check"
        },
        "return": "true if _party is either the buyer or seller."
      },
      "isSellerSelling()": {
        "details": "Is seller / short party selling.",
        "return": "true if seller has side up for sale"
      },
      "isSelling(address)": {
        "details": "If the given party is selling one side of the contract.",
        "return": "true if the given party is selling"
      },
      "liquidate()": {
        "details": "This will disolve the contract and return each parties balance of collateral."
      },
      "marketPriceInRange(uint256,uint256,uint256,uint256)": {
        "details": "Checks if given parameters and given market price result in a price     inside an allowable range. This range is defined by the ContractForDifferenceLibrary.cutOffPrice     function formulas. The idea is that as parameters change - leverage,     market price etc., we must check the change doesn't result in a     liquidation event due to too little collateral.",
        "params": {
          "_marketPrice": "Current market price"
        },
        "return": "true if in range; false if not"
      },
      "percentChange(uint256,uint256)": {
        "details": "Return a percentage change comparing a value with a new value.",
        "params": {
          "_newValue": "The new value to compare the change against",
          "_value": "The existing value to compare against"
        },
        "return": "Percentage change (eg. _value = 100, _newValue = 90 then return 10)"
      },
      "percentOf(uint256,uint256)": {
        "details": "Return a percentage of a given amount.",
        "params": {
          "_amount": "Amount to calculate the percentage of",
          "_percent": "Percent amount (1 - 100)"
        }
      },
      "sellCancel()": {
        "details": "Cancel the for sale status setup by sellPrepare()"
      },
      "sellPrepare(uint256,uint256)": {
        "details": "Position in a contract can be sold to another party. This function     makes the callers side available for sale. A party can buy the side     with the buy function.",
        "params": {
          "_desiredStrikePrice": "Sellers desired sell strike price",
          "_timeLimit": "Sale available until this time in UNIX epoch seconds                 (< now for no limit)"
        }
      },
      "sellUpdate(uint256)": {
        "details": "Seller can update the price on the sale."
      },
      "status()": {
        "details": "Derive status from the state variables.",
        "return": "Status reflecting the current state."
      },
      "topup(uint256)": {
        "details": "Party adds more funds to the contract thereby increasing their     deposit balance.",
        "params": {
          "_value": "DAI amount"
        }
      },
      "transferPosition(address)": {
        "details": "Parties can transfer contract ownership to another address by     calling this function.",
        "params": {
          "_newAddress": "Addreess of the new party to swap in."
        }
      },
      "upgrade()": {
        "details": "Upgrade contract to a new version. This involves creating a new CFD     at the latest contract set - transferring over all properties and     value from this one to the new one.     An upgrade requires a call to this function from both parties. Then     upgrade will happen when the second party makes the call."
      },
      "withdraw(uint256)": {
        "details": "Party withdraws funds from the contract.     They can only withdraw down to an amount that leaves the collateral     to notional difference at 20% or more.",
        "params": {
          "_withdrawAmount": "Amount to withdraw from the deposits balance."
        }
      }
    },
    "title": "Contract for difference * Contract for difference for a given market between a \"buyer\" (long position) and \"seller\" (short position)."
  },
  "userdoc": {
    "methods": {
      "forceTerminate()": {
        "notice": "Force terminate executed by one party who will penalised 5% of their collateral. Then penalty will be sent to the counterparty."
      },
      "getCfdAttributes()": {
        "notice": "Returns an array with all the attributes of the contract (Had to split in 3 functions because of the stack limit) Max number of return values == 8"
      },
      "liquidate()": {
        "notice": "Daemons will call this routine when the market price has moved enough that the closeRatio for this contract has been reached. It can actually be called by anyone who is willing to pay the gas for the liquidate.     * If the market has not moved past the liquidate threshold the call will be rejected."
      }
    }
  }
}