{
  "contractName": "ContractForDifference",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "notionalAmountDai",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "seller",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "feedsAddr",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "terminated",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "FORCE_TERMINATE_PENALTY_PERCENT",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerSaleStrikePrice",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerInitialNotional",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerDepositBalance",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "upgradeCalledBy",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "upgradeable",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "MINIMUM_NOTIONAL_AMOUNT_DAI",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "closed",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerSaleTimeLimit",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerInitialStrikePrice",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyer",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerInitialNotional",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerSaleStrikePrice",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "market",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "cfdRegistryAddr",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerDepositBalance",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "initiated",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerSelling",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "strikePrice",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerInitialStrikePrice",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerSaleTimeLimit",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerSelling",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "notionalAmountDai",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "deposit",
          "type": "uint256"
        }
      ],
      "name": "LogCFDCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "joiner",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amountSent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "notionalAmountDai",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "strikePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "buyerDepositBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "sellerDepositBalance",
          "type": "uint256"
        }
      ],
      "name": "LogCFDInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "LogCFDTransferPosition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        }
      ],
      "name": "LogCFDCanceledNew",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "newStrikePrice",
          "type": "uint256"
        }
      ],
      "name": "LogCFDStrikePriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "saleStrikePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "timeLimit",
          "type": "uint256"
        }
      ],
      "name": "LogCFDSale",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        }
      ],
      "name": "LogCFDSaleCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "LogCFDSaleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "newNotional",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "sellerAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "buyerDeposit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        }
      ],
      "name": "LogCFDSold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "isWithdraw",
          "type": "bool"
        },
        {
          "indexed": false,
          "name": "newBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        }
      ],
      "name": "LogCFDPartyBalanceUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LogCFDTransferFunds",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "buyerCollateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "sellerCollateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        }
      ],
      "name": "LogCFDClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "terminator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "terminatorAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "otherParty",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "otherPartyAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        }
      ],
      "name": "LogCFDForceTerminated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "newCFD",
          "type": "address"
        }
      ],
      "name": "LogCFDUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "remainder",
          "type": "uint256"
        }
      ],
      "name": "LogCFDRemainingBalanceUnexpected",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isActive",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isBuyerSelling",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isSellerSelling",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_party",
          "type": "address"
        }
      ],
      "name": "isSelling",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_party",
          "type": "address"
        }
      ],
      "name": "isContractParty",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_registryAddr",
          "type": "address"
        },
        {
          "name": "_cfdRegistryAddr",
          "type": "address"
        },
        {
          "name": "_feedsAddr",
          "type": "address"
        },
        {
          "name": "_partyAddr",
          "type": "address"
        },
        {
          "name": "_marketId",
          "type": "bytes32"
        },
        {
          "name": "_strikePrice",
          "type": "uint256"
        },
        {
          "name": "_notionalAmountDai",
          "type": "uint256"
        },
        {
          "name": "_isBuyer",
          "type": "bool"
        }
      ],
      "name": "create",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_cfdAddr",
          "type": "address"
        },
        {
          "name": "_registryAddr",
          "type": "address"
        },
        {
          "name": "_cfdRegistryAddr",
          "type": "address"
        },
        {
          "name": "_feedsAddr",
          "type": "address"
        }
      ],
      "name": "createByUpgrade",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCfdAttributes",
      "outputs": [
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "bytes32"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "bool"
        },
        {
          "name": "",
          "type": "bool"
        },
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCfdAttributes2",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCfdAttributes3",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        },
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "cancelNew",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "topup",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_newAddress",
          "type": "address"
        }
      ],
      "name": "transferPosition",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_desiredStrikePrice",
          "type": "uint256"
        },
        {
          "name": "_timeLimit",
          "type": "uint256"
        }
      ],
      "name": "sellPrepare",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_newPrice",
          "type": "uint256"
        }
      ],
      "name": "sellUpdate",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_newStrikePrice",
          "type": "uint256"
        }
      ],
      "name": "changeStrikePrice",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "sellCancel",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_buyBuyerSide",
          "type": "bool"
        },
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "liquidate",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "forceTerminate",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "upgrade",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "status",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_marketPrice",
          "type": "uint256"
        },
        {
          "name": "_buyerDepositBalance",
          "type": "uint256"
        },
        {
          "name": "_sellerDepositBalance",
          "type": "uint256"
        },
        {
          "name": "_strikePrice",
          "type": "uint256"
        }
      ],
      "name": "marketPriceInRange",
      "outputs": [
        {
          "name": "inRange",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_oldNotional",
          "type": "uint256"
        },
        {
          "name": "_oldStrikePrice",
          "type": "uint256"
        },
        {
          "name": "_newStrikePrice",
          "type": "uint256"
        }
      ],
      "name": "calculateNewNotional",
      "outputs": [
        {
          "name": "newNotional",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_strikePrice",
          "type": "uint256"
        },
        {
          "name": "_marketPrice",
          "type": "uint256"
        },
        {
          "name": "_notionalAmount",
          "type": "uint256"
        },
        {
          "name": "_depositBalance",
          "type": "uint256"
        },
        {
          "name": "_isBuyer",
          "type": "bool"
        }
      ],
      "name": "calculateCollateralAmount",
      "outputs": [
        {
          "name": "collateral",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_notionalAmountDai",
          "type": "uint256"
        },
        {
          "name": "_depositBalance",
          "type": "uint256"
        },
        {
          "name": "_strikePrice",
          "type": "uint256"
        },
        {
          "name": "_calcForBuyerSide",
          "type": "bool"
        }
      ],
      "name": "cutOffPrice",
      "outputs": [
        {
          "name": "price",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_notional",
          "type": "uint256"
        }
      ],
      "name": "creatorFee",
      "outputs": [
        {
          "name": "fee",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_notional",
          "type": "uint256"
        }
      ],
      "name": "joinerFee",
      "outputs": [
        {
          "name": "fee",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_strikePrice",
          "type": "uint256"
        },
        {
          "name": "_currentPrice",
          "type": "uint256"
        },
        {
          "name": "_notionalAmount",
          "type": "uint256"
        }
      ],
      "name": "changeInDai",
      "outputs": [
        {
          "name": "change",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_value",
          "type": "uint256"
        },
        {
          "name": "_newValue",
          "type": "uint256"
        }
      ],
      "name": "percentChange",
      "outputs": [
        {
          "name": "percent",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_amount",
          "type": "uint256"
        },
        {
          "name": "_percent",
          "type": "uint256"
        }
      ],
      "name": "percentOf",
      "outputs": [
        {
          "name": "adjusted",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "bytecode": "0x6080604052600f80547fffffffffffff000000000000000000000000000000000000000000ff0000ffff16905534801561003857600080fd5b506152ff806100486000396000f3006080604052600436106102b05763ffffffff60e060020a600035041663037b9c1781146102b557806308551a53146102dc5780630a10ff5f1461030d5780630c247fdb14610322578063194307bf146103405780631a9fddf2146103695780631bcccdf7146103835780631bdfca0114610398578063200d2ed2146103ad57806322e20d2a146103e657806322f3e2d4146103fb5780632802759b1461041057806328a07025146104435780632a6d096f146104585780632d4dce7d146104ae5780632e1a7d4d146104c35780632f301a78146104db57806330db555f146104f9578063333c9dda14610511578063393d85331461052657806341c20c8e1461054957806346f33a6d1461055e57806348ddb0dd14610573578063497b13d3146105885780635407baea1461059d578063597e1fb5146105be5780635df0d4cd146105d35780635dfa360a146106145780635e24e35d1461063a5780636182fab31461065b5780636a8100b2146106705780637028875e146106855780637150d8ae1461069d5780637185b30c146106b257806378561939146106c757806378c3829b146106dc5780637af5cde9146106f45780637b103999146107155780637d21f9501461072a57806380f5560514610762578063818197ea146107775780638505571e1461079257806393a96512146107aa57806398074eb4146107bf57806398531f28146107d45780639c03d24a146107e95780639dec1430146108045780639f11853614610819578063a6f408211461082e578063ae3cde5914610849578063b6b55f251461085e578063c2ef94f614610876578063c52987cf146108f2578063c93c88d714610907578063d525be321461091c578063d55ec6971461093d578063df0fdcdc14610952578063e24c469b14610967578063f797efda14610984578063fe2e569914610999575b600080fd5b3480156102c157600080fd5b506102ca6109ae565b60408051918252519081900360200190f35b3480156102e857600080fd5b506102f16109b4565b60408051600160a060020a039092168252519081900360200190f35b34801561031957600080fd5b506102f16109c3565b34801561032e57600080fd5b506102ca6004356024356044356109d2565b34801561034c57600080fd5b506103556109e7565b604080519115158252519081900360200190f35b34801561037557600080fd5b506103816004356109f8565b005b34801561038f57600080fd5b506102ca610c48565b3480156103a457600080fd5b506102ca610c4d565b3480156103b957600080fd5b506103c2610c53565b604051808260038111156103d257fe5b60ff16815260200191505060405180910390f35b3480156103f257600080fd5b506102ca610cb9565b34801561040757600080fd5b50610355610cbf565b34801561041c57600080fd5b50610381600160a060020a0360043581169060243581169060443581169060643516610cee565b34801561044f57600080fd5b5061038161138a565b34801561046457600080fd5b5061046d6116a4565b604080519889526020890197909752878701959095526060870193909352608086019190915260a085015260c084015260e083015251908190036101000190f35b3480156104ba57600080fd5b506102ca6116c6565b3480156104cf57600080fd5b506103816004356116cc565b3480156104e757600080fd5b506102ca600435602435604435611c57565b34801561050557600080fd5b50610381600435611c64565b34801561051d57600080fd5b506102f1612078565b34801561053257600080fd5b506102ca6004356024356044356064351515612091565b34801561055557600080fd5b506103556120a8565b34801561056a57600080fd5b506103556120ba565b34801561057f57600080fd5b506102ca6120e2565b34801561059457600080fd5b506103816120ee565b3480156105a957600080fd5b50610355600160a060020a036004351661239b565b3480156105ca57600080fd5b506103556123cb565b3480156105df57600080fd5b50610381600160a060020a036004358116906024358116906044358116906064351660843560a43560c43560e43515156123db565b34801561062057600080fd5b506102ca6004356024356044356064356084351515612797565b34801561064657600080fd5b50610381600160a060020a03600435166127b0565b34801561066757600080fd5b506102ca612b34565b34801561067c57600080fd5b506102ca612b3a565b34801561069157600080fd5b50610381600435612b40565b3480156106a957600080fd5b506102f1612dc9565b3480156106be57600080fd5b506102ca612dd8565b3480156106d357600080fd5b506102ca612dde565b3480156106e857600080fd5b506102ca600435612de4565b34801561070057600080fd5b50610355600435602435604435606435612def565b34801561072157600080fd5b506102f1612e2f565b34801561073657600080fd5b5061073f612e3e565b604080519215158352600160a060020a0390911660208301528051918290030190f35b34801561076e57600080fd5b506102ca612e64565b34801561078357600080fd5b50610381600435602435612e6a565b34801561079e57600080fd5b506102ca6004356131b8565b3480156107b657600080fd5b506103816131c3565b3480156107cb57600080fd5b506102f1613681565b3480156107e057600080fd5b50610355613690565b3480156107f557600080fd5b506102ca6004356024356136b3565b34801561081057600080fd5b506102ca6136c6565b34801561082557600080fd5b506103556136cc565b34801561083a57600080fd5b506102ca6004356024356136db565b34801561085557600080fd5b506103556136e7565b34801561086a57600080fd5b506103816004356136f0565b34801561088257600080fd5b5061088b613b82565b60408051600160a060020a03808b16825289166020820152908101879052606081018690526080810185905283151560a082015282151560c082015260e081018260038111156108d757fe5b60ff1681526020019850505050505050505060405180910390f35b3480156108fe57600080fd5b506102ca613be0565b34801561091357600080fd5b506102ca613be6565b34801561092857600080fd5b50610355600160a060020a0360043516613bec565b34801561094957600080fd5b50610381613c33565b34801561095e57600080fd5b506102ca6142f4565b34801561097357600080fd5b5061038160043515156024356142fa565b34801561099057600080fd5b506103816148cb565b3480156109a557600080fd5b50610355614a2a565b60035481565b600154600160a060020a031681565b601154600160a060020a031681565b60006109df848484614a38565b949350505050565b600f54640100000000900460ff1681565b610a00610cbf565b60408051808201909152600e8152600080516020615274833981519152602082015280821515610ab15760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610a76578181015183820152602001610a5e565b50505050905090810190601f168015610aa35780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50610abb33613bec565b60408051808201909152601981527f6d73672e73656e646572206d7573742062652073656c6c657200000000000000602082015280821515610b425760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a76578181015183820152602001610a5e565b5060408051808201909152601181527f5072696365206d757374206265203e2030000000000000000000000000000000602082015260008611908082610bcd5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a76578181015183820152602001610a5e565b50600054600160a060020a0316331415610beb57600b879055610c04565b600154600160a060020a0316331415610c0457600d8790555b604080513381526020810189905281517fbbee2154904c4910310beb779cb9f970f5faa539a34158662d3963477f19ce31929181900390910190a150505050505050565b600581565b600b5481565b600f546000906301000000900460ff16151560011415610c7557506003610cb6565b600f5462010000900460ff161515610c8f57506000610cb6565b610c97613690565b80610ca55750610ca56120ba565b15610cb257506002610cb6565b5060015b90565b60055481565b600f5460009062010000900460ff1615156001148015610ce95750600f546301000000900460ff16155b905090565b600084905080600160a060020a03166380f556056040518163ffffffff1660e060020a02815260040160206040518083038186803b158015610d2f57600080fd5b505afa158015610d43573d6000803e3d6000fd5b505050506040513d6020811015610d5957600080fd5b5051600255604080517f037b9c170000000000000000000000000000000000000000000000000000000081529051600160a060020a0383169163037b9c17916004808301926020929190829003018186803b158015610db757600080fd5b505afa158015610dcb573d6000803e3d6000fd5b505050506040513d6020811015610de157600080fd5b5051600355604080517fc52987cf0000000000000000000000000000000000000000000000000000000081529051600160a060020a0383169163c52987cf916004808301926020929190829003018186803b158015610e3f57600080fd5b505afa158015610e53573d6000803e3d6000fd5b505050506040513d6020811015610e6957600080fd5b5051600655604080517f7150d8ae0000000000000000000000000000000000000000000000000000000081529051600160a060020a03831691637150d8ae916004808301926020929190829003018186803b158015610ec757600080fd5b505afa158015610edb573d6000803e3d6000fd5b505050506040513d6020811015610ef157600080fd5b505160008054600160a060020a031916600160a060020a03928316179055604080517f08551a530000000000000000000000000000000000000000000000000000000081529051918316916308551a5391600480820192602092909190829003018186803b158015610f6257600080fd5b505afa158015610f76573d6000803e3d6000fd5b505050506040513d6020811015610f8c57600080fd5b505160018054600160a060020a031916600160a060020a03928316179055604080517f9dec1430000000000000000000000000000000000000000000000000000000008152905191831691639dec143091600480820192602092909190829003018186803b158015610ffd57600080fd5b505afa158015611011573d6000803e3d6000fd5b505050506040513d602081101561102757600080fd5b5051600955604080517f7185b30c0000000000000000000000000000000000000000000000000000000081529051600160a060020a03831691637185b30c916004808301926020929190829003018186803b15801561108557600080fd5b505afa158015611099573d6000803e3d6000fd5b505050506040513d60208110156110af57600080fd5b50516004908155604080517fc93c88d70000000000000000000000000000000000000000000000000000000081529051600160a060020a0384169263c93c88d792808201926020929091829003018186803b15801561110d57600080fd5b505afa158015611121573d6000803e3d6000fd5b505050506040513d602081101561113757600080fd5b5051600755604080517f2d4dce7d0000000000000000000000000000000000000000000000000000000081529051600160a060020a03831691632d4dce7d916004808301926020929190829003018186803b15801561119557600080fd5b505afa1580156111a9573d6000803e3d6000fd5b505050506040513d60208110156111bf57600080fd5b5051600a55604080517f22e20d2a0000000000000000000000000000000000000000000000000000000081529051600160a060020a038316916322e20d2a916004808301926020929190829003018186803b15801561121d57600080fd5b505afa158015611231573d6000803e3d6000fd5b505050506040513d602081101561124757600080fd5b5051600555604080517f6a8100b20000000000000000000000000000000000000000000000000000000081529051600160a060020a03831691636a8100b2916004808301926020929190829003018186803b1580156112a557600080fd5b505afa1580156112b9573d6000803e3d6000fd5b505050506040513d60208110156112cf57600080fd5b505160085560108054600160a060020a03808616600160a060020a031992831617928390556012805488831690841617905560118054868316931692909217909155600f805462ff00001916620100001790556001546040805160e160020a6340f46fd102815291831660048301525192909116916381e8dfa29160248082019260009290919082900301818387803b15801561136b57600080fd5b505af115801561137f573d6000803e3d6000fd5b505050505050505050565b600080600080600061139a610cbf565b60408051808201909152600e815260008051602061527483398151915260208201528082151561140f5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a76578181015183820152602001610a5e565b50611418614a51565b965061142c87600954600a54600654612def565b156114a7576040805160e560020a62461bcd02815260206004820152602360248201527f4c6971756964617465207468726573686f6c64206e6f7420796574207265616360448201527f6865640000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6114ba6003546009546006546001614aeb565b95508587119450846114d757600154600160a060020a03166114e4565b600054600160a060020a03165b9350601260009054906101000a9004600160a060020a0316600160a060020a0316638ef855686040518163ffffffff1660e060020a02815260040160206040518083038186803b15801561153757600080fd5b505afa15801561154b573d6000803e3d6000fd5b505050506040513d602081101561156157600080fd5b50516040805160e060020a6370a082310281523060048201529051600160a060020a03909216916370a0823191602480820192602092909190829003018186803b1580156115ae57600080fd5b505afa1580156115c2573d6000803e3d6000fd5b505050506040513d60208110156115d857600080fd5b505192506115e68484614b8a565b60408051600160a060020a0386168152602081018590528151600080516020615254833981519152929181900390910190a1600f805463ff000000191663010000001790557faa0254c6ef7b0f13349b08e091c677fb9d83e5829f3e697eee7127c0702292b3848661165957600061165b565b845b876116665785611669565b60005b60025460408051600160a060020a0390951685526020850193909352838301919091526060830152519081900360800190a150505050505050565b600454600554600954600a54600b54600d546007546008549091929394959697565b600a5481565b6000806000806000856001811015606060405190810160405280602281526020017f43616e2774207769746864726177206d6f7265207468656e20617661696c616281526020017f6c650000000000000000000000000000000000000000000000000000000000008152509015156117895760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a76578181015183820152602001610a5e565b50600f5460408051808201909152601181527f4d75737420626520696e6974696174656400000000000000000000000000000060208201529062010000900460ff16151560011461181f5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a76578181015183820152602001610a5e565b50600f5460408051808201909152601281526000805160206152348339815191526020820152906301000000900460ff16156118a05760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a76578181015183820152602001610a5e565b506118aa3361239b565b606060405190810160405280602181526020016000805160206152b4833981519152815260200160f860020a60730281525090151561192e5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a76578181015183820152602001610a5e565b5061193833613bec565b60408051808201909152601d8152600080516020615294833981519152602082015290156119ab5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a76578181015183820152602001610a5e565b50600054600160a060020a031633149550856119c957600a546119cd565b6009545b945084871115611a7a5760408051606081018252602281527f43616e2774207769746864726177206d6f7265207468656e20617661696c616260208083019182527f6c6500000000000000000000000000000000000000000000000000000000000083850152925160e560020a62461bcd02815260048101938452825160248201528251929392839260449092019190808383600083811015610a76578181015183820152602001610a5e565b8685039350611a87614a51565b9250611ab38387611a9a57600954611a9c565b855b88611aa75786611aab565b600a545b600654612def565b1515611b2457604080518082018252601781526000805160206152148339815191526020808301918252925160e560020a62461bcd02815260048101938452825160248201528251929392839260449092019190808383600083811015610a76578181015183820152602001610a5e565b611b3560065484600354878a614d52565b9150611b4360035483614dc2565b1515611bb457604080518082018252601781526000805160206152148339815191526020808301918252925160e560020a62461bcd02815260048101938452825160248201528251929392839260449092019190808383600083811015610a76578181015183820152602001610a5e565b611bbe3388614b8a565b60408051338152602081018990528151600080516020615254833981519152929181900390910190a18515611bf7576009849055611bfd565b600a8490555b60025460408051338152602081018a9052600181830152606081018790526080810192909252517fea455ea564b4652eabbfbcf652bb6439ed6f6edea8eb0525f2becb5aec40c8649181900360a00190a150505050505050565b60006109df848484614def565b60408051808201909152601181527f416d6f756e74206e6f7420656e6f756768000000000000000000000000000000602082015260009081906001841015908082611cf45760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a76578181015183820152602001610a5e565b50600f5460408051808201909152601181527f4d75737420626520696e6974696174656400000000000000000000000000000060208201526201000090910460ff161515600114908082611d8d5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a76578181015183820152602001610a5e565b50600f5460408051808201909152601281526000805160206152348339815191526020820152630100000090910460ff1615908082611e115760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a76578181015183820152602001610a5e565b50611e1b3361239b565b606060405190810160405280602181526020016000805160206152b4833981519152815260200160f860020a6073028152508181901515611ea15760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a76578181015183820152602001610a5e565b50611eab33613bec565b60408051808201909152601d815260008051602061529483398151915260208201529015908082611f215760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a76578181015183820152602001610a5e565b50600054600160a060020a031633149b50611f538d8d611f4357600a54611f47565b6009545b9063ffffffff614e3916565b9a50611f616003548c614dc2565b1515611fd257604080518082018252601781526000805160206152148339815191526020808301918252925160e560020a62461bcd02815260048101938452825160248201528251929392839260449092019190808383600083811015610a76578181015183820152602001610a5e565b611fdb8d614e46565b8b15611feb5760098b9055611ff1565b600a8b90555b7fea455ea564b4652eabbfbcf652bb6439ed6f6edea8eb0525f2becb5aec40c864338e60008e6002546040518086600160a060020a0316600160a060020a031681526020018581526020018415151515815260200183815260200182600019166000191681526020019550505050505060405180910390a150505050505050505050505050565b600f5466010000000000009004600160a060020a031681565b600061209f85858585614aeb565b95945050505050565b600f5465010000000000900460ff1681565b600f54600090610100900460ff168015610ce95750600e541580610ce9575050600e54421090565b670de0b6b3a764000081565b600f5460408051808201909152601581527f4d757374206e6f7420626520696e697469617465640000000000000000000000602082015260009162010000900460ff16159080826121845760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a76578181015183820152602001610a5e565b5061218e3361239b565b606060405190810160405280602181526020016000805160206152b4833981519152815260200160f860020a60730281525081819015156122145760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a76578181015183820152602001610a5e565b50601260009054906101000a9004600160a060020a0316600160a060020a0316638ef855686040518163ffffffff1660e060020a02815260040160206040518083038186803b15801561226657600080fd5b505afa15801561227a573d6000803e3d6000fd5b505050506040513d602081101561229057600080fd5b50516040805160e060020a6370a082310281523060048201529051600160a060020a03909216916370a0823191602480820192602092909190829003018186803b1580156122dd57600080fd5b505afa1580156122f1573d6000803e3d6000fd5b505050506040513d602081101561230757600080fd5b505194506123153386614b8a565b60408051338152602081018790528151600080516020615254833981519152929181900390910190a1600f805463ff00000019166301000000179055600254604080513381526020810188905280820192909252517f6407ec2a4ae9d6ab72d4d8edded079bc20dae08edf3fcedd15fa606583efd1449181900360600190a15050505050565b60008054600160a060020a03838116911614806123c55750600154600160a060020a038381169116145b92915050565b600f546301000000900460ff1681565b6000806000670de0b6b3a76400008510156040805190810160405280601681526020017f4e6f74696f6e616c2062656c6f77206d696e696d756d0000000000000000000081525081819015156124765760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a76578181015183820152602001610a5e565b508c601260006101000a815481600160a060020a030219169083600160a060020a03160217905550601260009054906101000a9004600160a060020a0316600160a060020a0316638ef855686040518163ffffffff1660e060020a02815260040160206040518083038186803b1580156124ef57600080fd5b505afa158015612503573d6000803e3d6000fd5b505050506040513d602081101561251957600080fd5b50516040805160e060020a6370a082310281523060048201529051600160a060020a03909216916370a0823191602480820192602092909190829003018186803b15801561256657600080fd5b505afa15801561257a573d6000803e3d6000fd5b505050506040513d602081101561259057600080fd5b5051945061259d87615011565b935083851161262357604080518082018252601d81527f4e6f7420656e6f7567682073656e7420746f20636f76657220666565730000006020808301918252925160e560020a62461bcd02815260048101938452825160248201528251929392839260449092019190808383600083811015610a76578181015183820152602001610a5e565b83850392506126328784614dc2565b15156126a357604080518082018252601781526000805160206152148339815191526020808301918252925160e560020a62461bcd02815260048101938452825160248201528251929392839260449092019190808383600083811015610a76578181015183820152602001610a5e565b85156126ce5760008054600160a060020a031916600160a060020a038c1617905560098390556126ef565b60018054600160a060020a031916600160a060020a038c16179055600a8390555b600289905560038790556004879055600587905560068890556007889055600888905560108054600160a060020a03808f16600160a060020a031992831617909255601180548e8416921691909117905560408051918c168252602082018b905281810189905260608201879052517f69d73ba3035242abcb4cbe9e73c2317a193d589f1ab392766a856075e4a5ea9d9181900360800190a150505050505050505050505050565b60006127a68686868686614d52565b9695505050505050565b600f5460408051808201909152601281526000805160206152348339815191526020820152630100000090910460ff16159080826128335760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a76578181015183820152602001610a5e565b5061283d3361239b565b606060405190810160405280602181526020016000805160206152b4833981519152815260200160f860020a60730281525081819015156128c35760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a76578181015183820152602001610a5e565b506128cd8561239b565b60408051808201909152601e81527f436f6e74726163742070617274792063616e27742063616c6c20746869730000602082015290159080826129555760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a76578181015183820152602001610a5e565b5061295f33613bec565b60408051808201909152601d8152600080516020615294833981519152602082015290159080826129d55760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a76578181015183820152602001610a5e565b50600054600160a060020a0316331415612a095760008054600160a060020a031916600160a060020a038b16179055612a7d565b600154600160a060020a0316331415612a3c5760018054600160a060020a031916600160a060020a038b16179055612a7d565b600f5466010000000000009004600160a060020a0316331415612a7d57600f805479ffffffffffffffffffffffffffffffffffffffff000000000000191690555b6010546040805160e160020a6340f46fd1028152600160a060020a038c81166004830152915191909216916381e8dfa291602480830192600092919082900301818387803b158015612ace57600080fd5b505af1158015612ae2573d6000803e3d6000fd5b505060408051338152600160a060020a038d16602082015281517fce6084c9f950738add8e5747a76463fe6d6652d782d26beabe2b69029391a5df9450908190039091019150a1505050505050505050565b600c5481565b60085481565b600f5460408051808201909152601581527f4d757374206e6f7420626520696e69746961746564000000000000000000000060208201526201000090910460ff1615908082612bd45760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a76578181015183820152602001610a5e565b50600f5460408051808201909152601281526000805160206152348339815191526020820152630100000090910460ff1615908082612c585760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a76578181015183820152602001610a5e565b50612c623361239b565b606060405190810160405280602181526020016000805160206152b4833981519152815260200160f860020a6073028152508181901515612ce85760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a76578181015183820152602001610a5e565b5060408051808201909152601181527f5072696365206d757374206265203e2030000000000000000000000000000000602082015260008811908082612d735760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a76578181015183820152602001610a5e565b5060068990556007899055600889905560408051338152602081018b905281517fe77dd1d532a40e832a7a0938f6bcc6e7724487734f75f6b1f84dfeddcc32c47c929181900390910190a1505050505050505050565b600054600160a060020a031681565b60045481565b600d5481565b60006123c582615011565b6000806000612e0360035487866001614aeb565b9150612e1460035486866000614aeb565b90508187118015612e2457508087105b979650505050505050565b601254600160a060020a031681565b600f54640100000000810460ff16916601000000000000909104600160a060020a031690565b60025481565b6000612e753361239b565b606060405190810160405280602181526020016000805160206152b4833981519152815260200160f860020a6073028152508181901515612efb5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a76578181015183820152602001610a5e565b50612f04610cbf565b60408051808201909152600e8152600080516020615274833981519152602082015280821515612f795760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a76578181015183820152602001610a5e565b50612f8333613bec565b60408051808201909152601d815260008051602061529483398151915260208201529015908082612ff95760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a76578181015183820152602001610a5e565b5060408051808201909152601181527f5072696365206d757374206265203e2030000000000000000000000000000000602082015260008a119080826130845760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a76578181015183820152602001610a5e565b5061308e8a615030565b600054909950600160a060020a03163314156130c057600f805460ff19166001179055600b8b9055600c8990556130ed565b600154600160a060020a03163314156130ed57600f805461ff001916610100179055600d8b9055600e8990555b601054604080517f62c597040000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a03909216916362c597049160248082019260009290919082900301818387803b15801561315257600080fd5b505af1158015613166573d6000803e3d6000fd5b505060408051338152602081018f90528082018d905290517fb5d6baf622d177db5af6d250d11c52507155dbc0359dd6ab5f7c65ca36c4ffc19350908190036060019150a15050505050505050505050565b60006123c582615044565b6000806000806000806131d4610cbf565b60408051808201909152600e81526000805160206152748339815191526020820152808215156132495760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a76578181015183820152602001610a5e565b506132533361239b565b606060405190810160405280602181526020016000805160206152b4833981519152815260200160f860020a60730281525081819015156132d95760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a76578181015183820152602001610a5e565b506132e2614a51565b600054600654600354600954939d50600160a060020a0390921633149b5061330f9290918d916001614d52565b97506133256006548b600354600a546000614d52565b965061343b8761342f8a601260009054906101000a9004600160a060020a0316600160a060020a0316638ef855686040518163ffffffff1660e060020a02815260040160206040518083038186803b15801561338057600080fd5b505afa158015613394573d6000803e3d6000fd5b505050506040513d60208110156133aa57600080fd5b50516040805160e060020a6370a082310281523060048201529051600160a060020a03909216916370a0823191602480820192602092909190829003018186803b1580156133f757600080fd5b505afa15801561340b573d6000803e3d6000fd5b505050506040513d602081101561342157600080fd5b50519063ffffffff61505316565b9063ffffffff61505316565b95508515613477576040805187815290517fec6a0b860bf684f74dbe39a6138edd92b8c04da302be601f5a4cfea6099b31aa9181900360200190a15b61348086615065565b6134978961348e5787613490565b885b60056150f9565b945088156134c8576134af888663ffffffff61505316565b97506134c1878663ffffffff614e3916565b96506134ed565b6134d8888663ffffffff614e3916565b97506134ea878663ffffffff61505316565b96505b60005461350390600160a060020a031689614b8a565b60005460408051600160a060020a039092168252602082018a905280516000805160206152548339815191529281900390910190a160015461354e90600160a060020a031688614b8a565b60015460408051600160a060020a0390921682526020820189905280516000805160206152548339815191529281900390910190a1600f805463ff0000001964ff00000000199091166401000000001716630100000017905588156136135760005460015460025460408051600160a060020a039485168152602081018d90529290931682840152606082018a9052608082015290517f81bf0ecca77d43968d8c2687fe97a6d65b62e33063055c15042f5d5fd63abe289181900360a00190a1613675565b60015460005460025460408051600160a060020a039485168152602081018c90529290931682840152606082018b9052608082015290517f81bf0ecca77d43968d8c2687fe97a6d65b62e33063055c15042f5d5fd63abe289181900360a00190a15b50505050505050505050565b601054600160a060020a031681565b600f5460009060ff168015610ce95750600c541580610ce9575050600c54421090565b60006136bf8383615101565b9392505050565b60095481565b600f5462010000900460ff1681565b60006136bf83836150f9565b600f5460ff1681565b600f5460408051808201909152601581527f4d757374206e6f7420626520696e697469617465640000000000000000000000602082015260009182916201000090910460ff16159080826137895760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a76578181015183820152602001610a5e565b50600f5460408051808201909152601281526000805160206152348339815191526020820152630100000090910460ff161590808261380d5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a76578181015183820152602001610a5e565b506138173361239b565b60408051808201909152601e81527f436f6e74726163742070617274792063616e27742063616c6c207468697300006020820152901590808261389f5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a76578181015183820152602001610a5e565b506138ab600354615044565b975087891161393157604080518082018252601d81527f4e6f7420656e6f7567682073656e7420746f20636f76657220666565730000006020808301918252925160e560020a62461bcd02815260048101938452825160248201528251929392839260449092019190808383600083811015610a76578181015183820152602001610a5e565b878903965061394260035488614dc2565b15156139b357604080518082018252601781526000805160206152148339815191526020808301918252925160e560020a62461bcd02815260048101938452825160248201528251929392839260449092019190808383600083811015610a76578181015183820152602001610a5e565b6139bc89614e46565b6139d16139ca600354615011565b8901615065565b600054600160a060020a031615156139ff5760008054600160a060020a031916331790556009879055613a17565b60018054600160a060020a03191633179055600a8790555b600f805462ff00001916620100001790556010546040805160e160020a6340f46fd10281523360048201529051600160a060020a03909216916381e8dfa29160248082019260009290919082900301818387803b158015613a7757600080fd5b505af1158015613a8b573d6000803e3d6000fd5b505050507f94bdcbfe1580a4a1b6292d3543b07391ef8e107a5168feefc7412f3da94ebe31338a6000809054906101000a9004600160a060020a0316600160009054906101000a9004600160a060020a0316600254600354600654600954600a54604051808a600160a060020a0316600160a060020a0316815260200189815260200188600160a060020a0316600160a060020a0316815260200187600160a060020a0316600160a060020a031681526020018660001916600019168152602001858152602001848152602001838152602001828152602001995050505050505050505060405180910390a1505050505050505050565b60008054600154600254600654600354600f548695869586958695869586958695600160a060020a0390811695169392919060ff80821691610100900416613bc8610c53565b969f959e50939c50919a509850965094509092509050565b60065481565b60075481565b60008054600160a060020a038381169116148015613c0d5750613c0d613690565b806123c55750600154600160a060020a0383811691161480156123c557506123c56120ba565b600080613c3f3361239b565b606060405190810160405280602181526020016000805160206152b4833981519152815260200160f860020a6073028152508181901515613cc55760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a76578181015183820152602001610a5e565b50613cce610cbf565b60408051808201909152600e8152600080516020615274833981519152602082015280821515613d435760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a76578181015183820152602001610a5e565b50613d4d33613bec565b60408051808201909152601d815260008051602061529483398151915260208201529015908082613dc35760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a76578181015183820152602001610a5e565b50600f5460408051808201909152601981527f6d73672e73656e64657220616c72656164792063616c6c65640000000000000060208201526601000000000000909104600160a060020a0316331415908082613e645760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a76578181015183820152602001610a5e565b50601260009054906101000a9004600160a060020a0316600160a060020a03166323ec7f2a6040518163ffffffff1660e060020a02815260040160206040518083038186803b158015613eb657600080fd5b505afa158015613eca573d6000803e3d6000fd5b505050506040513d6020811015613ee057600080fd5b5051601254604080517f0c5a95f80000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a039384169390921691630c5a95f891602480820192602092909190829003018186803b158015613f4a57600080fd5b505afa158015613f5e573d6000803e3d6000fd5b505050506040513d6020811015613f7457600080fd5b505160408051808201909152601981527f416c7265616479206174206c61746573742076657273696f6e000000000000006020820152600160a060020a03909116919091141590808261400c5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a76578181015183820152602001610a5e565b50600f5466010000000000009004600160a060020a0316151561405c57600f805479ffffffffffffffffffffffffffffffffffffffff0000000000001916336601000000000000021790556142e6565b600f805465ff0000000000191665010000000000179055601254604080517f23ec7f2a0000000000000000000000000000000000000000000000000000000081529051600160a060020a03909216916323ec7f2a91600480820192602092909190829003018186803b1580156140d157600080fd5b505afa1580156140e5573d6000803e3d6000fd5b505050506040513d60208110156140fb57600080fd5b5051604080517f165ae0fc0000000000000000000000000000000000000000000000000000000081529051919d50600160a060020a038e169163165ae0fc916004808201926020929091908290030181600087803b15801561415c57600080fd5b505af1158015614170573d6000803e3d6000fd5b505050506040513d602081101561418657600080fd5b5051601254604080517f8ef855680000000000000000000000000000000000000000000000000000000081529051929d50614294928e92600160a060020a031691638ef85568916004808301926020929190829003018186803b1580156141ec57600080fd5b505afa158015614200573d6000803e3d6000fd5b505050506040513d602081101561421657600080fd5b50516040805160e060020a6370a082310281523060048201529051600160a060020a03909216916370a0823191602480820192602092909190829003018186803b15801561426357600080fd5b505afa158015614277573d6000803e3d6000fd5b505050506040513d602081101561428d57600080fd5b5051614b8a565b600f805465ff00ff0000001916630100000017905560408051600160a060020a038d16815290517fbf44b7c20b944f553303a3ec7caff0a29f0378e297b7d9dc5b1267d359b7ea6c9181900360200190a15b505050505050505050505050565b600e5481565b6000806000806000806000808961430f610cbf565b60408051808201909152600e815260008051602061527483398151915260208201529015156143835760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a76578181015183820152602001610a5e565b506143af8161439d57600154600160a060020a03166143aa565b600054600160a060020a03165b613bec565b60408051808201909152600f81527f4d757374206265206f6e2073616c65000000000000000000000000000000000060208201529015156144355760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a76578181015183820152602001610a5e565b5061443f3361239b565b60408051808201909152601e81527f436f6e74726163742070617274792063616e27742063616c6c20746869730000602082015290156144c45760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a76578181015183820152602001610a5e565b506144d0600354615044565b9850888a1161455657604080518082018252601d81527f4e6f7420656e6f7567682073656e7420746f20636f76657220666565730000006020808301918252925160e560020a62461bcd02815260048101938452825160248201528251929392839260449092019190808383600083811015610a76578181015183820152602001610a5e565b6145668a8a63ffffffff61505316565b975061457460035489614dc2565b15156145e557604080518082018252601781526000805160206152148339815191526020808301918252925160e560020a62461bcd02815260048101938452825160248201528251929392839260449092019190808383600083811015610a76578181015183820152602001610a5e565b6145ed614a51565b96508a6145fc57600d54614600565b600b545b955061462a878c61461357600954614615565b895b8d614620578a614624565b600a545b89612def565b151561469b57604080518082018252601781526000805160206152148339815191526020808301918252925160e560020a62461bcd02815260048101938452825160248201528251929392839260449092019190808383600083811015610a76578181015183820152602001610a5e565b6146a48a614e46565b6146ad89615065565b8a6146c357600154600160a060020a03166146d0565b600054600160a060020a03165b94506146dd8b878761514b565b935061473488601260009054906101000a9004600160a060020a0316600160a060020a0316638ef855686040518163ffffffff1660e060020a02815260040160206040518083038186803b15801561338057600080fd5b925061474560035460065488614def565b91508a156147785760008054600160a060020a03191633179055600988905560078690556004829055600a83905561479f565b60018054600160a060020a03191633179055600a8890556008869055600582905560098390555b600686905560038290556147b28b6151b3565b600f54600160a060020a0386811666010000000000009092041614156147f657600f805479ffffffffffffffffffffffffffffffffffffffff000000000000191690555b6010546040805160e160020a6340f46fd10281523360048201529051600160a060020a03909216916381e8dfa29160248082019260009290919082900301818387803b15801561484557600080fd5b505af1158015614859573d6000803e3d6000fd5b505060025460408051338152600160a060020a038a16602082015280820187905260608101899052608081018f905260a0810192909252517fd356d730a2af36f9a0a6dfacdadfec02dd284bedaf298f1f5894a869abb3b63693509081900360c0019150a15050505050505050505050565b6148d3610cbf565b60408051808201909152600e81526000805160206152748339815191526020820152808215156149485760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a76578181015183820152602001610a5e565b5061495233613bec565b60408051808201909152601981527f6d73672e73656e646572206d7573742062652073656c6c6572000000000000006020820152808215156149d95760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a76578181015183820152602001610a5e565b506000546149f190600160a060020a031633146151b3565b6040805133815290517f82229214624615d3bbec967c7100737095261ce7b7cf043d442f92d635b737619181900360200190a150505050565b600f54610100900460ff1681565b600080614a458585615101565b905061209f83826150f9565b601154600254604080517f61da1439000000000000000000000000000000000000000000000000000000008152600481019290925280516000938493600160a060020a03909116926361da143992602480840193829003018186803b158015614ab957600080fd5b505afa158015614acd573d6000803e3d6000fd5b505050506040513d6040811015614ae357600080fd5b505192915050565b60008060008084614b055768052663ccab1e1c0000614b10565b6805b12aefafa80400005b925068056bc75e2d6310000086840204915068056bc75e2d631000008868056bc75e2d6310000088028902811515614b4457fe5b04811515614b4e57fe5b049050848015614b5d57508181115b15614b6b5760009350614b7f565b84614b7857808201614b7c565b8082035b93505b505050949350505050565b601260009054906101000a9004600160a060020a0316600160a060020a0316638ef855686040518163ffffffff1660e060020a02815260040160206040518083038186803b158015614bdb57600080fd5b505afa158015614bef573d6000803e3d6000fd5b505050506040513d6020811015614c0557600080fd5b5051604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a038581166004830152602482018590529151919092169163a9059cbb9160448083019260209291908290030181600087803b158015614c7357600080fd5b505af1158015614c87573d6000803e3d6000fd5b505050506040513d6020811015614c9d57600080fd5b505160408051606081018252602b81527f4661696c757265207472616e73666572696e67206f776e657273686970206f6660208201527f2044414920746f6b656e7300000000000000000000000000000000000000000091810191909152901515614d4d5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a76578181015183820152602001610a5e565b505050565b600068056bc75e2d63100000848102908790879086908590819080868087038202811515614d7c57fe5b058802811515614d8857fe5b05811515614d9257fe5b05915087614da257818303614da6565b8183015b90506000811215614db357fe5b9b9a5050505050505050505050565b6000614dcf8360146150f9565b82101580156136bf5750614de5836101f46150f9565b8211159392505050565b600068056bc75e2d63100000614e2784614e0f858463ffffffff6151ea16565b811515614e1857fe5b8791900463ffffffff6151ea16565b811515614e3057fe5b04949350505050565b818101828110156123c557fe5b601260009054906101000a9004600160a060020a0316600160a060020a0316638ef855686040518163ffffffff1660e060020a02815260040160206040518083038186803b158015614e9757600080fd5b505afa158015614eab573d6000803e3d6000fd5b505050506040513d6020811015614ec157600080fd5b5051604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018490529051600160a060020a03909216916323b872dd916064808201926020929091908290030181600087803b158015614f3357600080fd5b505af1158015614f47573d6000803e3d6000fd5b505050506040513d6020811015614f5d57600080fd5b505160408051606081018252602b81527f4661696c757265207472616e73666572696e67206f776e657273686970206f6660208201527f2044414920746f6b656e730000000000000000000000000000000000000000009181019190915290151561500d5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a76578181015183820152602001610a5e565b5050565b6000600a6150208360036150f9565b81151561502957fe5b0492915050565b60004282116150405760006123c5565b5090565b6000600a6150208360056150f9565b60008282111561505f57fe5b50900390565b601254604080517fdb8d55f100000000000000000000000000000000000000000000000000000000815290516150f692600160a060020a03169163db8d55f1916004808301926020929190829003018186803b1580156150c457600080fd5b505afa1580156150d8573d6000803e3d6000fd5b505050506040513d60208110156150ee57600080fd5b505182614b8a565b50565b606491020490565b6000806000838514156151175760009250615143565b8484039150848260640281151561512a57fe5b0590506000811361513e5780600003615140565b805b92505b505092915050565b600061516e600654846003548761516457600a54615168565b6009545b88614d52565b905061517a8282614b8a565b60408051600160a060020a0384168152602081018390528151600080516020615254833981519152929181900390910190a19392505050565b80156151d2576000600b819055600c55600f805460ff191690556150f6565b6000600d819055600e55600f805461ff001916905550565b60008215156151fb575060006123c5565b5081810281838281151561520b57fe5b04146123c557fe00636f6c6c61746572616c496e52616e67652066616c73650000000000000000004d757374206e6f7420626520636c6f7365640000000000000000000000000000ae0c91484288809ae2c2fb81551bd9d06d4d3bcbbce87f3c5a3d5775f299358b4d757374206265206163746976650000000000000000000000000000000000006d73672e73656e646572206d757374206e6f742062652073656c6c65720000004f6e6c7920636f6e747261637420706172746965732063616e20646f20746869a165627a7a723058202ecf5c92a2924e147bde601b4f2ad490186ca5b3e1b2d4f1df596c3bcb1449c60029",
  "deployedBytecode": "",
  "sourceMap": "657:39684:5:-;;;4907:29;;;5309:36;;;;5483:23;5:2:-1;;;;30:1;27;20:12;5:2;5483:23:5;657:39684;;;;;;",
  "deployedSourceMap": "657:39684:5:-;;;;;;;;;-1:-1:-1;;;657:39684:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4242:29;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4242:29:5;;;;;;;;;;;;;;;;;;;;4153:21;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4153:21:5;;;;;;;;-1:-1:-1;;;;;4153:21:5;;;;;;;;;;;;;;5388:24;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5388:24:5;;;;37683:332;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;37683:332:5;;;;;;;;;4974:22;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4974:22:5;;;;;;;;;;;;;;;;;;;;;;20581:492;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;20581:492:5;;;;;;;3910:56;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3910:56:5;;;;4693:32;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4693:32:5;;;;32351:354;;8:9:-1;5:2;;;30:1;27;20:12;5:2;32351:354:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4315:33;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4315:33:5;;;;5650:107;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5650:107:5;;;;9813:1064;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;9813:1064:5;-1:-1:-1;;;;;9813:1064:5;;;;;;;;;;;;;;;;;;;;26863:1344;;8:9:-1;5:2;;;30:1;27;20:12;5:2;26863:1344:5;;;;11432:440;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11432:440:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4654:32;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4654:32:5;;;;15967:1667;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;15967:1667:5;;;;;34704:364;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;34704:364:5;;;;;;;;;14621:1064;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;14621:1064:5;;;;;5309:36;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5309:36:5;;;;36704:403;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;36704:403:5;;;;;;;;;;;;;5149:31;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5149:31:5;;;;6148:162;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6148:162:5;;;;3972:59;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3972:59:5;;;;14020:443;;8:9:-1;5:2;;;30:1;27;20:12;5:2;14020:443:5;;;;6829:127;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;6829:127:5;-1:-1:-1;;;;;6829:127:5;;;;;4942:26;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4942:26:5;;;;7808:1614;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;7808:1614:5;-1:-1:-1;;;;;7808:1614:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;35652:470;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;35652:470:5;;;;;;;;;;;;;;;18331:701;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;18331:701:5;-1:-1:-1;;;;;18331:701:5;;;;;4731:30;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4731:30:5;;;;4500:36;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4500:36:5;;;;21172:574;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;21172:574:5;;;;;4093:20;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4093:20:5;;;;4277:32;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4277:32:5;;;;4768:33;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4768:33:5;;;;37168:140;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;37168:140:5;;;;;33516:685;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;33516:685:5;;;;;;;;;;;5419:24;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5419:24:5;;;;11877:180;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11877:180:5;;;;;;;;;;;;;-1:-1:-1;;;;;11877:180:5;;;;;;;;;;;;;;;;4214:21;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4214:21:5;;;;19439:1067;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;19439:1067:5;;;;;;;37396:138;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;37396:138:5;;;;;28371:2412;;8:9:-1;5:2;;;30:1;27;20:12;5:2;28371:2412:5;;;;5352:30;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5352:30:5;;;;5872:158;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5872:158:5;;;;38322:203;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;38322:203:5;;;;;;;4617:31;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4617:31:5;;;;4907:29;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4907:29:5;;;;38706:197;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;38706:197:5;;;;;;;4845:24;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4845:24:5;;;;12318:1447;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;12318:1447:5;;;;;11067:360;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11067:360:5;;;;;;;;-1:-1:-1;;;;;11067:360:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4430:23;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4430:23:5;;;;4459:35;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4459:35:5;;;;6450:178;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;6450:178:5;-1:-1:-1;;;;;6450:178:5;;;;;31161:1064;;8:9:-1;5:2;;;30:1;27;20:12;5:2;31161:1064:5;;;;4807:31;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4807:31:5;;;;22323:2795;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;22323:2795:5;;;;;;;;;21830:251;;8:9:-1;5:2;;;30:1;27;20:12;5:2;21830:251:5;;;;4875:25;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4875:25:5;;;;4242:29;;;;:::o;4153:21::-;;;-1:-1:-1;;;;;4153:21:5;;:::o;5388:24::-;;;-1:-1:-1;;;;;5388:24:5;;:::o;37683:332::-;37840:11;37876:132;37930:12;37956:13;37983:15;37876:40;:132::i;:::-;37867:141;37683:332;-1:-1:-1;;;;37683:332:5:o;4974:22::-;;;;;;;;;:::o;20581:492::-;20665:10;:8;:10::i;:::-;20677:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;20677:21:5;;;;;309:26:0;;;;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20717:21:5;20727:10;20717:9;:21::i;:::-;20740;;;;;;;;;;;;;;;;;;309:26:0;;;;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;-1:-1:-1;20795:29:5;;;;;;;;;;;;;;;;;20792:1;20780:13;;;20795:29;20780:13;309:26:0;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;-1:-1:-1;20858:5:5;;-1:-1:-1;;;;;20858:5:5;20844:10;:19;20840:172;;;20879:20;:32;;;20840:172;;;20946:6;;-1:-1:-1;;;;;20946:6:5;20932:10;:20;20928:84;;;20968:21;:33;;;20928:84;21026:40;;;21044:10;21026:40;;;;;;;;;;;;;;;;;;;;;345:1:0;;;;20581:492:5;;;:::o;3910:56::-;3965:1;3910:56;:::o;4693:32::-;;;;:::o;32351:354::-;32440:6;;32414;;32440;;;;;:14;;32450:4;32440:14;32436:262;;;-1:-1:-1;32475:13:5;32468:20;;32436:262;32507:9;;;;;;;:18;;32503:195;;-1:-1:-1;32546:14:5;32539:21;;32503:195;32579:16;:14;:16::i;:::-;:37;;;;32599:17;:15;:17::i;:::-;32575:123;;;-1:-1:-1;32637:11:5;32630:18;;32575:123;-1:-1:-1;32682:16:5;32575:123;32351:354;:::o;4315:33::-;;;;:::o;5650:107::-;5714:9;;5691:4;;5714:9;;;;;:17;;5727:4;5714:17;:36;;;;-1:-1:-1;5735:6:5;;;;;;;:15;5714:36;5707:43;;5650:107;:::o;9813:1064::-;9992:28;10045:8;9992:62;;10074:6;-1:-1:-1;;;;;10074:13:5;;:15;;;;;-1:-1:-1;;;10074:15:5;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10074:15:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10074:15:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10074:15:5;10065:6;:24;10119:26;;;;;;;;-1:-1:-1;;;;;10119:24:5;;;;;:26;;;;;10074:15;;10119:26;;;;;;;:24;:26;;;5:2:-1;;;;30:1;27;20:12;5:2;10119:26:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10119:26:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10119:26:5;10099:17;:46;10169:20;;;;;;;;-1:-1:-1;;;;;10169:18:5;;;;;:20;;;;;10119:26;;10169:20;;;;;;;:18;:20;;;5:2:-1;;;;30:1;27;20:12;5:2;10169:20:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10169:20:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10169:20:5;10155:11;:34;10207:14;;;;;;;;-1:-1:-1;;;;;10207:12:5;;;;;:14;;;;;10169:20;;10207:14;;;;;;;:12;:14;;;5:2:-1;;;;30:1;27;20:12;5:2;10207:14:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10207:14:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10207:14:5;10199:5;:22;;-1:-1:-1;;;;;;10199:22:5;-1:-1:-1;;;;;10199:22:5;;;;;;10240:15;;;;;;;;:13;;;;;;:15;;;;;10207:14;;10240:15;;;;;;;;:13;:15;;;5:2:-1;;;;30:1;27;20:12;5:2;10240:15:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10240:15:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10240:15:5;10231:6;:24;;-1:-1:-1;;;;;;10231:24:5;-1:-1:-1;;;;;10231:24:5;;;;;;10288:28;;;;;;;;:26;;;;;;:28;;;;;10240:15;;10288:28;;;;;;;;:26;:28;;;5:2:-1;;;;30:1;27;20:12;5:2;10288:28:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10288:28:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10288:28:5;10266:19;:50;10349:29;;;;;;;;-1:-1:-1;;;;;10349:27:5;;;;;:29;;;;;10288:28;;10349:29;;;;;;;:27;:29;;;5:2:-1;;;;30:1;27;20:12;5:2;10349:29:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10349:29:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10349:29:5;10326:20;:52;;;10414:32;;;;;;;;-1:-1:-1;;;;;10414:30:5;;;;;:32;;;;10349:29;;10414:32;;;;;;;:30;:32;;;5:2:-1;;;;30:1;27;20:12;5:2;10414:32:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10414:32:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10414:32:5;10388:23;:58;10480:29;;;;;;;;-1:-1:-1;;;;;10480:27:5;;;;;:29;;;;;10414:32;;10480:29;;;;;;;:27;:29;;;5:2:-1;;;;30:1;27;20:12;5:2;10480:29:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10480:29:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10480:29:5;10457:20;:52;10543:30;;;;;;;;-1:-1:-1;;;;;10543:28:5;;;;;:30;;;;;10480:29;;10543:30;;;;;;;:28;:30;;;5:2:-1;;;;30:1;27;20:12;5:2;10543:30:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10543:30:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10543:30:5;10519:21;:54;10610:33;;;;;;;;-1:-1:-1;;;;;10610:31:5;;;;;:33;;;;;10543:30;;10610:33;;;;;;;:31;:33;;;5:2:-1;;;;30:1;27;20:12;5:2;10610:33:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10610:33:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10610:33:5;10583:24;:60;10654:15;:34;;-1:-1:-1;;;;;10654:34:5;;;-1:-1:-1;;;;;;10654:34:5;;;;;;;;10698:8;:34;;;;;;;;;;;10742:9;:22;;;;;;;;;;;;;;10775:9;:16;;-1:-1:-1;;10775:16:5;;;;;10654:34;10863:6;10802:68;;;-1:-1:-1;;;;;10802:68:5;;10863:6;;;10802:68;;;;;10832:15;;;;;10802:60;;:68;;;;;10654:15;;10802:68;;;;;;;;10654:15;10832;10802:68;;;5:2:-1;;;;30:1;27;20:12;5:2;10802:68:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10802:68:5;;;;9813:1064;;;;;:::o;26863:1344::-;26967:16;27464;27727:18;27783:14;27869;26918:10;:8;:10::i;:::-;26930:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;26930:21:5;;;;;309:26:0;;;;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;;26986:13:5;:11;:13::i;:::-;26967:32;;27157:165;27193:11;27222:19;;27259:20;;27297:11;;27157:18;:165::i;:::-;27156:166;27135:249;;;;;-1:-1:-1;;;;;27135:249:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27483:157;27537:17;;27568:19;;27601:11;;27626:4;27483:40;:157::i;:::-;27464:176;;27762:11;27748;:25;27727:46;;27800:13;:30;;27824:6;;-1:-1:-1;;;;;27824:6:5;27800:30;;;27816:5;;-1:-1:-1;;;;;27816:5:5;27800:30;27783:47;;27886:8;;;;;;;;;-1:-1:-1;;;;;27886:8:5;-1:-1:-1;;;;;27886:15:5;;:17;;;;;-1:-1:-1;;;27886:17:5;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;27886:17:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;27886:17:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;27886:17:5;:33;;;-1:-1:-1;;;;;27886:33:5;;27914:4;27886:33;;;;;;-1:-1:-1;;;;;27886:27:5;;;;;;:33;;;;;:17;;:33;;;;;;;;:27;:33;;;5:2:-1;;;;30:1;27;20:12;5:2;27886:33:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;27886:33:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;27886:33:5;;-1:-1:-1;27929:30:5;27941:6;27886:33;27929:11;:30::i;:::-;27974:38;;;-1:-1:-1;;;;;27974:38:5;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;27974:38:5;;;;;;;;;;28023:6;:13;;-1:-1:-1;;28023:13:5;;;;;28052:148;28078:6;28098:13;:29;;28126:1;28098:29;;;28114:9;28098:29;28141:13;:29;;28161:9;28141:29;;;28157:1;28141:29;28184:6;;28052:148;;;-1:-1:-1;;;;;28052:148:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;26863:1344;;;;;;;:::o;11432:440::-;11589:20;;11623:21;;11658:19;;11691:20;;11725;;11759:21;;11794:23;;11831:24;;11432:440;;;;;;;;:::o;4654:32::-;;;;:::o;15967:1667::-;16085:12;16129:22;16485:18;16551:16;16897:15;16054;17813:1;17794:15;:20;;17816:26;;;;;;;;;;;;;;;;;;;;;;;17786:57;;;;;;;-1:-1:-1;;;;;17786:57:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;17786:57:5;-1:-1:-1;17861:9:5;;17880:24;;;;;;;;;;;;;;;;;;17861:9;;;;;:17;;17874:4;17861:17;17853:52;;;;-1:-1:-1;;;;;17853:52:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;17853:52:5;-1:-1:-1;17923:6:5;;17940:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;17940:25:5;;;;;17923:6;;;;;:15;17915:51;;;;-1:-1:-1;;;;;17915:51:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;17915:51:5;;17984:27;18000:10;17984:15;:27::i;:::-;18013:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;18013:28:5;;;;-1:-1:-1;;;;;18013:28:5;;;17976:66;;;;;;;-1:-1:-1;;;;;17976:66:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;17976:66:5;;18060:21;18070:10;18060:9;:21::i;:::-;18092:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;18092:25:5;;;;;18060:30;18052:66;;;;-1:-1:-1;;;;;18052:66:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;18052:66:5;-1:-1:-1;16114:5:5;;-1:-1:-1;;;;;16114:5:5;16100:10;:19;;-1:-1:-1;16100:19:5;16154:52;;16186:20;;16154:52;;;16164:19;;16154:52;16129:77;;16309:17;16291:15;:35;16287:87;;;16347:26;;;;;;;;;;;;;;;;;;;;;;;;16340:34;;-1:-1:-1;;;;;16340:34:5;;;;;;;;;;;;;;;;16347:26;;16340:34;;;;;;;;16347:26;16340:34;;16347:26;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;16287:87:5;16526:15;16506:17;:35;16485:56;;16570:13;:11;:13::i;:::-;16551:32;;16598:222;16630:11;16655:7;:45;;16681:19;;16655:45;;;16665:13;16655:45;16714:7;:46;;16747:13;16714:46;;;16724:20;;16714:46;16774:11;;16598:18;:222::i;:::-;16597:223;16593:294;;;16843:32;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;16843:32:5;;;;;;;16836:40;;-1:-1:-1;;;;;16836:40:5;;;;;;;;;;;;;;;;16843:32;;16836:40;;;;;;;;16843:32;16836:40;;16843:32;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;16593:294:5;16915:193;16983:11;;17008;17033:17;;17064:13;17091:7;16915:54;:193::i;:::-;16897:211;;17124:77;17171:17;;17190:10;17124:46;:77::i;:::-;17123:78;17119:147;;;17224:30;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;17224:30:5;;;;;;;17217:38;;-1:-1:-1;;;;;17217:38:5;;;;;;;;;;;;;;;;17224:30;;17217:38;;;;;;;;17224:30;17217:38;;17224:30;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;17119:147:5;17276:40;17288:10;17300:15;17276:11;:40::i;:::-;17331:48;;;17351:10;17331:48;;;;;;;;;;-1:-1:-1;;;;;;;;;;;17331:48:5;;;;;;;;;;17394:7;17390:140;;;17417:19;:35;;;17390:140;;;17483:20;:36;;;17390:140;17620:6;;17545:82;;;17570:10;17545:82;;;;;;;;17599:4;17545:82;;;;;;;;;;;;;;;;;;;;;;;;;;;15967:1667;;;;;;;:::o;34704:364::-;34872:16;34918:143;34981:12;35007:15;35036;34918:49;:143::i;14621:1064::-;14696:24;;;;;;;;;;;;;;;;;15011:12;;;;14693:1;14683:11;;;;14696:24;14683:11;309:26:0;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;-1:-1:-1;14739:9:5;;14758:24;;;;;;;;;;;;;;;;;14739:9;;;;;;:17;;14752:4;14739:17;;14758:24;14739:17;309:26:0;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;-1:-1:-1;14801:6:5;;14818:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;14818:25:5;;;;14801:6;;;;;;:15;;14818:25;14801:15;309:26:0;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;;14862:27:5;14878:10;14862:15;:27::i;:::-;14891:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;14891:28:5;;;;-1:-1:-1;;;;;14891:28:5;;;317:9:0;328:6;309:26;;;;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;;14938:21:5;14948:10;14938:9;:21::i;:::-;14970:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;14970:25:5;;;;14938:30;;;14970:25;14938:30;309:26:0;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;-1:-1:-1;15040:5:5;;-1:-1:-1;;;;;15040:5:5;15026:10;:19;;-1:-1:-1;15080:101:5;15174:6;15026:19;15081:78;;15139:20;;15081:78;;;15104:19;;15081:78;15080:93;:101;:93;:101;:::i;:::-;15055:126;;15263:84;15310:17;;15329;15263:46;:84::i;:::-;15262:85;15258:141;;;15368:30;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;15368:30:5;;;;;;;15361:38;;-1:-1:-1;;;;;15361:38:5;;;;;;;;;;;;;;;;15368:30;;15361:38;;;;;;;;15368:30;15361:38;;15368:30;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;15258:141:5;15410:16;15419:6;15410:8;:16::i;:::-;15441:7;15437:148;;;15464:19;:39;;;15437:148;;;15534:20;:40;;;15437:148;15600:78;15625:10;15637:6;15645:5;15652:17;15671:6;;15600:78;;;;-1:-1:-1;;;;;15600:78:5;-1:-1:-1;;;;;15600:78:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;345:1:0;;;;;;;;14621:1064:5;;;;;:::o;5309:36::-;;;;;;-1:-1:-1;;;;;5309:36:5;;:::o;36704:403::-;36898:10;36932:168;36986:18;37018:15;37047:12;37073:17;36932:40;:168::i;:::-;36924:176;36704:403;-1:-1:-1;;;;;36704:403:5:o;5149:31::-;;;;;;;;;:::o;6148:162::-;6219:13;;6196:4;;6219:13;;;;;:84;;;;-1:-1:-1;6249:19:5;;:24;;:53;;-1:-1:-1;;6283:19:5;;6277:3;:25;;6148:162::o;3972:59::-;4023:8;3972:59;:::o;14020:443::-;14075:9;;14095:28;;;;;;;;;;;;;;;;;-1:-1:-1;;14075:9:5;;;;;:18;;14095:28;14075:18;309:26:0;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;;14142:27:5;14158:10;14142:15;:27::i;:::-;14171:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;14171:28:5;;;;-1:-1:-1;;;;;14171:28:5;;;317:9:0;328:6;309:26;;;;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;;14233:8:5;;;;;;;;;-1:-1:-1;;;;;14233:8:5;-1:-1:-1;;;;;14233:15:5;;:17;;;;;-1:-1:-1;;;14233:17:5;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;14233:17:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;14233:17:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;14233:17:5;:33;;;-1:-1:-1;;;;;14233:33:5;;14261:4;14233:33;;;;;;-1:-1:-1;;;;;14233:27:5;;;;;;:33;;;;;:17;;:33;;;;;;;;:27;:33;;;5:2:-1;;;;30:1;27;20:12;5:2;14233:33:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;14233:33:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;14233:33:5;;-1:-1:-1;14276:35:5;14288:10;14233:33;14276:11;:35::i;:::-;14326:43;;;14346:10;14326:43;;;;;;;;;;-1:-1:-1;;;;;;;;;;;14326:43:5;;;;;;;;;;14379:6;:13;;-1:-1:-1;;14379:13:5;;;;;14449:6;;14407:49;;;14425:10;14407:49;;;;;;;;;;;;;;;;;;;;;;;;;345:1:0;;14020:443:5;;;:::o;6829:127::-;6891:4;6924:5;;-1:-1:-1;;;;;6914:15:5;;;6924:5;;6914:15;;:35;;-1:-1:-1;6943:6:5;;-1:-1:-1;;;;;6933:16:5;;;6943:6;;6933:16;6914:35;6907:42;6829:127;-1:-1:-1;;6829:127:5:o;4942:26::-;;;;;;;;;:::o;7808:1614::-;8261:15;8322:9;8480:19;4023:8;8127:18;:49;;8178:23;;;;;;;;;;;;;;;;;;317:9:0;328:6;309:26;;;;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;;8237:13:5;8217:8;;:34;;;;;-1:-1:-1;;;;;8217:34:5;;;;;-1:-1:-1;;;;;8217:34:5;;;;;;8279:8;;;;;;;;;-1:-1:-1;;;;;8279:8:5;-1:-1:-1;;;;;8279:15:5;;:17;;;;;-1:-1:-1;;;8279:17:5;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8279:17:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8279:17:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;8279:17:5;:33;;;-1:-1:-1;;;;;8279:33:5;;8307:4;8279:33;;;;;;-1:-1:-1;;;;;8279:27:5;;;;;;:33;;;;;:17;;:33;;;;;;;;:27;:33;;;5:2:-1;;;;30:1;27;20:12;5:2;8279:33:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8279:33:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;8279:33:5;;-1:-1:-1;8334:59:5;8374:18;8334:39;:59::i;:::-;8322:71;-1:-1:-1;8407:18:5;;;8403:66;;8446:22;;;;;;;;;;;;;;;;;;;8439:30;;-1:-1:-1;;;;;8439:30:5;;;;;;;;;;;;;;;;8446:22;;8439:30;;;;;;;;8446:22;8439:30;;8446:22;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;8403:66:5;8515:4;8502:10;:17;8480:39;;8534:82;8581:18;8601:14;8534:46;:82::i;:::-;8533:83;8529:139;;;8637:30;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;8637:30:5;;;;;;;8630:38;;-1:-1:-1;;;;;8630:38:5;;;;;;;;;;;;;;;;8637:30;;8630:38;;;;;;;;8637:30;8630:38;;8637:30;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;8529:139:5;8683:8;8679:208;;;8707:5;:18;;-1:-1:-1;;;;;;8707:18:5;-1:-1:-1;;;;;8707:18:5;;;;;8739:19;:36;;;8679:208;;;8806:6;:19;;-1:-1:-1;;;;;;8806:19:5;-1:-1:-1;;;;;8806:19:5;;;;;8839:20;:37;;;8679:208;8897:6;:18;;;8925:17;:38;;;8973:20;:41;;;9024:21;:42;;;9077:11;:26;;;9113:23;:38;;;9161:24;:39;;;9211:15;:34;;-1:-1:-1;;;;;9211:34:5;;;-1:-1:-1;;;;;;9211:34:5;;;;;;;9255:9;:22;;;;;;;;;;;;;9293:122;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7808:1614;;;;;;;;;;;;;:::o;35652:470::-;35875:15;35919:196;35987:12;36013;36039:15;36068;36097:8;35919:54;:196::i;:::-;35906:209;35652:470;-1:-1:-1;;;;;;35652:470:5:o;18331:701::-;18412:6;;18429:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;18429:25:5;;;;18412:6;;;;;;:15;;18429:25;18412:15;309:26:0;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;;18473:27:5;18489:10;18473:15;:27::i;:::-;18502:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;18502:28:5;;;;-1:-1:-1;;;;;18502:28:5;;;317:9:0;328:6;309:26;;;;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;;18549:28:5;18565:11;18549:15;:28::i;:::-;18588:24;;;;;;;;;;;;;;;;;18549:37;;;18588:24;18549:37;309:26:0;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;;18631:21:5;18641:10;18631:9;:21::i;:::-;18663:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;18663:25:5;;;;18631:30;;;18663:25;18631:30;309:26:0;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;-1:-1:-1;18722:5:5;;-1:-1:-1;;;;;18722:5:5;18708:10;:19;18704:176;;;18729:5;:19;;-1:-1:-1;;;;;;18729:19:5;-1:-1:-1;;;;;18729:19:5;;;;;18704:176;;;18781:6;;-1:-1:-1;;;;;18781:6:5;18767:10;:20;18763:117;;;18789:6;:20;;-1:-1:-1;;;;;;18789:20:5;-1:-1:-1;;;;;18789:20:5;;;;;18763:117;;;18842:15;;;;;-1:-1:-1;;;;;18842:15:5;18828:10;:29;18824:56;;;18859:15;:21;;-1:-1:-1;;18859:21:5;;;18824:56;18920:15;;18890:73;;;-1:-1:-1;;;;;18890:73:5;;-1:-1:-1;;;;;18890:73:5;;;;;;;;;18920:15;;;;;18890:60;;:73;;;;;18920:15;;18890:73;;;;;;;18920:15;;18890:73;;;5:2:-1;;;;30:1;27;20:12;5:2;18890:73:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;18978:47:5;;;19001:10;18978:47;;-1:-1:-1;;;;;18978:47:5;;;;;;;;;;-1:-1:-1;18978:47:5;;;;;;;;-1:-1:-1;18978:47:5;345:1:0;;;;;;18331:701:5;;;:::o;4731:30::-;;;;:::o;4500:36::-;;;;:::o;21172:574::-;21269:9;;21289:28;;;;;;;;;;;;;;;;;21269:9;;;;;;:18;;21289:28;21269:18;309:26:0;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;-1:-1:-1;21336:6:5;;21353:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;21353:25:5;;;;21336:6;;;;;;:15;;21353:25;21336:15;309:26:0;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;;21397:27:5;21413:10;21397:15;:27::i;:::-;21426:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;21426:28:5;;;;-1:-1:-1;;;;;21426:28:5;;;317:9:0;328:6;309:26;;;;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;-1:-1:-1;21494:29:5;;;;;;;;;;;;;;;;;21491:1;21473:19;;;21494:29;21473:19;309:26:0;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;-1:-1:-1;21539:11:5;:29;;;21578:23;:41;;;21629:24;:42;;;21686:53;;;21711:10;21686:53;;;;;;;;;;;;;;;;;;;;;345:1:0;;;;;;21172:574:5;;;:::o;4093:20::-;;;-1:-1:-1;;;;;4093:20:5;;:::o;4277:32::-;;;;:::o;4768:33::-;;;;:::o;37168:140::-;37225:8;37251:50;37291:9;37251:39;:50::i;33516:685::-;33720:12;33748:16;33936:17;33767:159;33821:17;;33852:20;33886:12;33912:4;33767:40;:159::i;:::-;33748:178;;33956:161;34010:17;;34041:21;34076:12;34102:5;33956:40;:161::i;:::-;33936:181;;34152:11;34137:12;:26;:57;;;;;34182:12;34167;:27;34137:57;34127:67;33516:685;-1:-1:-1;;;;;;;33516:685:5:o;5419:24::-;;;-1:-1:-1;;;;;5419:24:5;;:::o;11877:180::-;12001:10;;;;;;;;12025:15;;;;-1:-1:-1;;;;;12025:15:5;;11877:180::o;4214:21::-;;;;:::o;19439:1067::-;19895:14;19537:27;19553:10;19537:15;:27::i;:::-;19566:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;19566:28:5;;;;-1:-1:-1;;;;;19566:28:5;;;317:9:0;328:6;309:26;;;;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;;19613:10:5;:8;:10::i;:::-;19625:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;19625:21:5;;;;;309:26:0;;;;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;;19720:21:5;19730:10;19720:9;:21::i;:::-;19752:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;19752:25:5;;;;19720:30;;;19752:25;19720:30;309:26:0;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;-1:-1:-1;19821:29:5;;;;;;;;;;;;;;;;;19818:1;19796:23;;;19821:29;19796:23;309:26:0;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;;19912:33:5;19934:10;19912:21;:33::i;:::-;19973:5;;19895:50;;-1:-1:-1;;;;;;19973:5:5;19959:10;:19;19955:348;;;19994:12;:19;;-1:-1:-1;;19994:19:5;20009:4;19994:19;;;20027:20;:42;;;20083:18;:30;;;19955:348;;;20148:6;;-1:-1:-1;;;;;20148:6:5;20134:10;:20;20130:173;;;20170:13;:20;;-1:-1:-1;;20170:20:5;;;;;20204:21;:43;;;20261:19;:31;;;20130:173;20343:15;;20313:71;;;;;;20373:10;20313:71;;;;;;-1:-1:-1;;;;;20343:15:5;;;;20313:59;;:71;;;;;20343:15;;20313:71;;;;;;;;20343:15;;20313:71;;;5:2:-1;;;;30:1;27;20:12;5:2;20313:71:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;20399:100:5;;;20423:10;20399:100;;;;;;;;;;;;;;;;;;-1:-1:-1;20399:100:5;;;;;;;-1:-1:-1;20399:100:5;345:1:0;;;;;;19439:1067:5;;;;;:::o;37396:138::-;37452:8;37478:49;37517:9;37478:38;:49::i;28371:2412::-;28556:16;28598:24;28655:20;28884:21;29348;29735:12;28431:10;:8;:10::i;:::-;28443:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;28443:21:5;;;;;309:26:0;;;;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;;28483:27:5;28499:10;28483:15;:27::i;:::-;28512:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;28512:28:5;;;;-1:-1:-1;;;;;28512:28:5;;;317:9:0;328:6;309:26;;;;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;;28575:13:5;:11;:13::i;:::-;28639:5;;28746:11;;28796:17;;28827:19;;28556:32;;-1:-1:-1;;;;;;28639:5:5;;;28625:10;:19;;-1:-1:-1;28678:196:5;;28746:11;;28556:32;;28639:5;28678:54;:196::i;:::-;28655:219;;28908:198;28976:11;;29001;29026:17;;29057:20;;29091:5;28908:54;:198::i;:::-;28884:222;;29372:115;29470:16;29372:80;29436:15;29372:8;;;;;;;;;-1:-1:-1;;;;;29372:8:5;-1:-1:-1;;;;;29372:15:5;;:17;;;;;-1:-1:-1;;;29372:17:5;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;29372:17:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;29372:17:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;29372:17:5;:46;;;-1:-1:-1;;;;;29372:46:5;;29413:4;29372:46;;;;;;-1:-1:-1;;;;;29372:40:5;;;;;;:46;;;;;:17;;:46;;;;;;;;:40;:46;;;5:2:-1;;;;30:1;27;20:12;5:2;29372:46:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;29372:46:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;29372:46:5;;:80;:63;:80;:::i;:::-;:97;:115;:97;:115;:::i;:::-;29348:139;-1:-1:-1;29501:21:5;;29497:107;;29543:50;;;;;;;;;;;;;;;;;29497:107;29613:35;29631:16;29613:17;:35::i;:::-;29750:163;29802:19;:56;;29842:16;29802:56;;;29824:15;29802:56;3965:1;29750:38;:163::i;:::-;29735:178;;29927:19;29923:297;;;29980:28;:15;30000:7;29980:28;:19;:28;:::i;:::-;29962:46;-1:-1:-1;30041:29:5;:16;30062:7;30041:29;:20;:29;:::i;:::-;30022:48;;29923:297;;;30119:28;:15;30139:7;30119:28;:19;:28;:::i;:::-;30101:46;-1:-1:-1;30180:29:5;:16;30201:7;30180:29;:20;:29;:::i;:::-;30161:48;;29923:297;30294:5;;30282:35;;-1:-1:-1;;;;;30294:5:5;30301:15;30282:11;:35::i;:::-;30352:5;;30332:43;;;-1:-1:-1;;;;;30352:5:5;;;30332:43;;;;;;;;;;-1:-1:-1;;;;;;;;;;;30332:43:5;;;;;;;;;30397:6;;30385:37;;-1:-1:-1;;;;;30397:6:5;30405:16;30385:11;:37::i;:::-;30457:6;;30437:45;;;-1:-1:-1;;;;;30457:6:5;;;30437:45;;;;;;;;;;-1:-1:-1;;;;;;;;;;;30437:45:5;;;;;;;;;30493:10;:17;;-1:-1:-1;;;;30493:17:5;;;;;30520:13;;;;;30544:232;;;;30608:5;;;30632:6;30658;;30586:79;;;-1:-1:-1;;;;;30608:5:5;;;30586:79;;;;;;;;30632:6;;;;30586:79;;;;;;;;;;;;;;;;;;;;;;;;;30544:232;;;30719:6;;;30745:5;30769:6;;30697:79;;;-1:-1:-1;;;;;30719:6:5;;;30697:79;;;;;;;;30745:5;;;;30697:79;;;;;;;;;;;;;;;;;;;;;;;;;30544:232;345:1:0;;28371:2412:5;;;;;;;;:::o;5352:30::-;;;-1:-1:-1;;;;;5352:30:5;;:::o;5872:158::-;5942:12;;5919:4;;5942:12;;:81;;;;-1:-1:-1;5971:18:5;;:23;;:51;;-1:-1:-1;;6004:18:5;;5998:3;:24;;5872:158::o;38322:203::-;38419:12;38457:61;38500:6;38508:9;38457:42;:61::i;:::-;38447:71;38322:203;-1:-1:-1;;;38322:203:5:o;4617:31::-;;;;:::o;4907:29::-;;;;;;;;;:::o;38706:197::-;38799:13;38839:57;38878:7;38887:8;38839:38;:57::i;4845:24::-;;;;;;:::o;12318:1447::-;12382:9;;12402:28;;;;;;;;;;;;;;;;;-1:-1:-1;;;;12382:9:5;;;;;;:18;;12402:28;12382:18;309:26:0;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;-1:-1:-1;12449:6:5;;12466:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;12466:25:5;;;;12449:6;;;;;;:15;;12466:25;12449:15;309:26:0;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;;12543:27:5;12559:10;12543:15;:27::i;:::-;12581:24;;;;;;;;;;;;;;;;;12543:36;;;12581:24;12543:36;309:26:0;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;;12677:57:5;12716:17;;12677:38;:57::i;:::-;12659:75;-1:-1:-1;12748:20:5;;;12744:68;;12789:22;;;;;;;;;;;;;;;;;;;12782:30;;-1:-1:-1;;;;;12782:30:5;;;;;;;;;;;;;;;;12789:22;;12782:30;;;;;;;;12789:22;12782:30;;12789:22;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;12744:68:5;12854:10;12845:6;:19;12823:41;;12879:81;12926:17;;12945:14;12879:46;:81::i;:::-;12878:82;12874:138;;;12981:30;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;12981:30:5;;;;;;;12974:38;;-1:-1:-1;;;;;12974:38:5;;;;;;;;;;;;;;;;12981:30;;12974:38;;;;;;;;12981:30;12974:38;;12981:30;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;12874:138:5;13023:16;13032:6;13023:8;:16::i;:::-;13049:112;13093:58;13133:17;;13093:39;:58::i;:::-;13080:10;:71;13049:17;:112::i;:::-;13176:5;;-1:-1:-1;;;;;13176:5:5;:12;13172:212;;;13204:5;:18;;-1:-1:-1;;;;;;13204:18:5;13212:10;13204:18;;;13236:19;:36;;;13172:212;;;13303:6;:19;;-1:-1:-1;;;;;;13303:19:5;13312:10;13303:19;;;13336:20;:37;;;13172:212;13394:9;:16;;-1:-1:-1;;13394:16:5;;;;;13450:15;;13420:72;;;-1:-1:-1;;;;;13420:72:5;;13481:10;13420:72;;;;;;-1:-1:-1;;;;;13450:15:5;;;;13420:60;;:72;;;;;13394:16;;13420:72;;;;;;;;13394:16;13450:15;13420:72;;;5:2:-1;;;;30:1;27;20:12;5:2;13420:72:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;13420:72:5;;;;13507:251;13536:10;13560:6;13580:5;;;;;;;;;-1:-1:-1;;;;;13580:5:5;13599:6;;;;;;;;;-1:-1:-1;;;;;13599:6:5;13619;;13639:17;;13670:11;;13695:19;;13728:20;;13507:251;;;;-1:-1:-1;;;;;13507:251:5;-1:-1:-1;;;;;13507:251:5;;;;;;;;;;;-1:-1:-1;;;;;13507:251:5;-1:-1:-1;;;;;13507:251:5;;;;;;-1:-1:-1;;;;;13507:251:5;-1:-1:-1;;;;;13507:251:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;345:1:0;;;;12318:1447:5;;;;;:::o;11067:360::-;11140:7;11234:5;;;11253:6;11273;;11293:11;;11318:17;;11349:12;;11140:7;;;;;;;;;;;;;;-1:-1:-1;;;;;11234:5:5;;;;11253:6;;11273;11293:11;11318:17;11349:12;;;;;11234:5;11375:13;;;11402:8;:6;:8::i;:::-;11213:207;;;;-1:-1:-1;11213:207:5;;-1:-1:-1;11213:207:5;;-1:-1:-1;11213:207:5;-1:-1:-1;11213:207:5;-1:-1:-1;11213:207:5;-1:-1:-1;11213:207:5;;-1:-1:-1;11067:360:5;-1:-1:-1;11067:360:5:o;4430:23::-;;;;:::o;4459:35::-;;;;:::o;6450:178::-;6506:4;6540:5;;-1:-1:-1;;;;;6530:15:5;;;6540:5;;6530:15;:35;;;;;6549:16;:14;:16::i;:::-;6529:92;;;-1:-1:-1;6593:6:5;;-1:-1:-1;;;;;6583:16:5;;;6593:6;;6583:16;:37;;;;;6603:17;:15;:17::i;31161:1064::-;31903:24;31970:14;31214:27;31230:10;31214:15;:27::i;:::-;31243:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;31243:28:5;;;;-1:-1:-1;;;;;31243:28:5;;;317:9:0;328:6;309:26;;;;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;;31290:10:5;:8;:10::i;:::-;31302:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;31302:21:5;;;;;309:26:0;;;;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;;31342:21:5;31352:10;31342:9;:21::i;:::-;31374:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;31374:25:5;;;;31342:30;;;31374:25;31342:30;309:26:0;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;-1:-1:-1;31432:15:5;;31449:26;;;;;;;;;;;;;;;;;31432:15;;;;-1:-1:-1;;;;;31432:15:5;31418:10;:29;;;31449:26;31418:29;309:26:0;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;;31520:8:5;;;;;;;;;-1:-1:-1;;;;;31520:8:5;-1:-1:-1;;;;;31520:28:5;;:30;;;;;-1:-1:-1;;;31520:30:5;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;31520:30:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;31520:30:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;31520:30:5;31494:8;;:22;;;;;;31511:4;31494:22;;;;;;-1:-1:-1;;;;;31494:56:5;;;;:8;;;;:16;;:22;;;;;31520:30;;31494:22;;;;;;;;:8;:22;;;5:2:-1;;;;30:1;27;20:12;5:2;31494:22:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;31494:22:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;31494:22:5;31552:29;;;;;;;;;;;;;31494:22;31552:29;;;-1:-1:-1;;;;;31494:56:5;;;;;;;;;31552:29;31494:56;309:26:0;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;-1:-1:-1;31649:15:5;;;;;-1:-1:-1;;;;;31649:15:5;:22;31645:101;;;31687:15;:28;;-1:-1:-1;;31687:28:5;31705:10;31687:28;;;;;31729:7;;31645:101;31875:11;:18;;-1:-1:-1;;31875:18:5;;;;;31930:8;;:30;;;;;;;;-1:-1:-1;;;;;31930:8:5;;;;:28;;:30;;;;;;;;;;;;;;;:8;:30;;;5:2:-1;;;;30:1;27;20:12;5:2;31930:30:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;31930:30:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;31930:30:5;31987:77;;;;;;;;31930:30;;-1:-1:-1;;;;;;31987:75:5;;;;;:77;;;;;31930:30;;31987:77;;;;;;;;;:75;:77;;;5:2:-1;;;;30:1;27;20:12;5:2;31987:77:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;31987:77:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;31987:77:5;32094:8;;:17;;;;;;;;31987:77;;-1:-1:-1;32074:54:5;;31987:77;;-1:-1:-1;;;;;32094:8:5;;:15;;:17;;;;;31987:77;;32094:17;;;;;;;:8;:17;;;5:2:-1;;;;30:1;27;20:12;5:2;32094:17:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;32094:17:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;32094:17:5;:33;;;-1:-1:-1;;;;;32094:33:5;;32122:4;32094:33;;;;;;-1:-1:-1;;;;;32094:27:5;;;;;;:33;;;;;:17;;:33;;;;;;;;:27;:33;;;5:2:-1;;;;30:1;27;20:12;5:2;32094:33:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;32094:33:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;32094:33:5;32074:11;:54::i;:::-;32138:11;:19;;-1:-1:-1;;32167:13:5;;;;;32196:22;;;-1:-1:-1;;;;;32196:22:5;;;;;;;;;;;;;;;345:1:0;;;;;;;;;31161:1064:5;;;;:::o;4807:31::-;;;;:::o;22323:2795::-;22440:9;22654:19;22851:16;22893:19;23543:20;23606:27;23792;23936:16;22411:13;25271:10;:8;:10::i;:::-;25283:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;25283:21:5;;;;;25263:42;;;;;;-1:-1:-1;;;;;25263:42:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;25263:42:5;;25323:41;25333:13;:30;;25357:6;;-1:-1:-1;;;;;25357:6:5;25333:30;;;25349:5;;-1:-1:-1;;;;;25349:5:5;25333:30;25323:9;:41::i;:::-;25366:22;;;;;;;;;;;;;;;;;;25315:74;;;;;;-1:-1:-1;;;;;25315:74:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;25315:74:5;;25407:27;25423:10;25407:15;:27::i;:::-;25445:24;;;;;;;;;;;;;;;;;;25407:36;25399:71;;;;-1:-1:-1;;;;;25399:71:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;25399:71:5;;22452:57;22491:17;;22452:38;:57::i;:::-;22440:69;-1:-1:-1;22523:14:5;;;22519:62;;22558:22;;;;;;;;;;;;;;;;;;;22551:30;;-1:-1:-1;;;;;22551:30:5;;;;;;;;;;;;;;;;22558:22;;22551:30;;;;;;;;22558:22;22551:30;;22558:22;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;22519:62:5;22676:16;:6;22687:4;22676:16;:10;:16;:::i;:::-;22654:38;;22707:81;22754:17;;22773:14;22707:46;:81::i;:::-;22706:82;22702:138;;;22809:30;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;22809:30:5;;;;;;;22802:38;;-1:-1:-1;;;;;22802:38:5;;;;;;;;;;;;;;;;22809:30;;22802:38;;;;;;;;22809:30;22802:38;;22809:30;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;22702:138:5;22870:13;:11;:13::i;:::-;22851:32;;22915:13;:84;;22978:21;;22915:84;;;22943:20;;22915:84;22893:106;;23075:245;23107:11;23132:13;:52;;23165:19;;23132:52;;;23148:14;23132:52;23198:13;:53;;23237:14;23198:53;;;23214:20;;23198:53;23265:14;23075:18;:245::i;:::-;23074:246;23070:317;;;23343:32;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;23343:32:5;;;;;;;23336:40;;-1:-1:-1;;;;;23336:40:5;;;;;;;;;;;;;;;;23343:32;;23336:40;;;;;;;;23343:32;23336:40;;23343:32;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;23070:317:5;23446:16;23455:6;23446:8;:16::i;:::-;23472:23;23490:4;23472:17;:23::i;:::-;23566:13;:30;;23590:6;;-1:-1:-1;;;;;23590:6:5;23566:30;;;23582:5;;-1:-1:-1;;;;;23582:5:5;23566:30;23543:53;;23636:107;23666:13;23693:14;23721:12;23636:16;:107::i;:::-;23606:137;;23822:66;23873:14;23822:8;;;;;;;;;-1:-1:-1;;;;;23822:8:5;-1:-1:-1;;;;;23822:15:5;;:17;;;;;-1:-1:-1;;;23822:17:5;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;23822:66:5;23792:96;;23955:143;24018:17;;24049:11;;24074:14;23955:49;:143::i;:::-;23936:162;;24113:13;24109:536;;;24142:5;:18;;-1:-1:-1;;;;;;24142:18:5;24150:10;24142:18;;;24174:19;:36;;;24224:23;:40;;;24278:20;:34;;;24326:20;:45;;;24109:536;;;24402:6;:19;;-1:-1:-1;;;;;;24402:19:5;24411:10;24402:19;;;24435:20;:37;;;24486:24;:41;;;24541:21;:35;;;24590:19;:44;;;24109:536;24655:11;:28;;;24693:17;:31;;;24735:24;24745:13;24735:9;:24::i;:::-;24846:15;;-1:-1:-1;;;;;24846:31:5;;;:15;;;;;:31;24842:83;;;24893:15;:21;;-1:-1:-1;;24893:21:5;;;24842:83;24965:15;;24935:72;;;-1:-1:-1;;;;;24935:72:5;;24996:10;24935:72;;;;;;-1:-1:-1;;;;;24965:15:5;;;;24935:60;;:72;;;;;24965:15;;24935:72;;;;;;;;24965:15;;24935:72;;;5:2:-1;;;;30:1;27;20:12;5:2;24935:72:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;25104:6:5;;25022:89;;;25033:10;25022:89;;-1:-1:-1;;;;;25022:89:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;25022:89:5;;;;;;;-1:-1:-1;25022:89:5;22323:2795;;;;;;;;;;;:::o;21830:251::-;21886:10;:8;:10::i;:::-;21898:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;21898:21:5;;;;;309:26:0;;;;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;;21938:21:5;21948:10;21938:9;:21::i;:::-;21961;;;;;;;;;;;;;;;;;;309:26:0;;;;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;-1:-1:-1;22022:5:5;;21998:30;;-1:-1:-1;;;;;22022:5:5;22008:10;:19;21998:9;:30::i;:::-;22043:31;;;22063:10;22043:31;;;;;;;;;;;;;345:1:0;;21830:251:5;;:::o;4875:25::-;;;;;;;;;:::o;2605:316:7:-;2764:11;2791:18;2812:42;2826:12;2840:13;2812;:42::i;:::-;2791:63;;2873:41;2883:15;2900:13;2873:9;:41::i;32782:204:5:-;32928:9;;32944:6;;32922:29;;;;;;;;;;;;;;;32852:10;;;;-1:-1:-1;;;;;32928:9:5;;;;32922:21;;:29;;;;;;;;;;32928:9;32922:29;;;5:2:-1;;;;30:1;27;20:12;5:2;32922:29:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;32922:29:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;32922:29:5;;32782:204;-1:-1:-1;;32782:204:5:o;6403:1083:7:-;6599:10;6686:24;6819:22;6952:15;6714:17;6713:96;;1165:24;6713:96;;;1085:25;6713:96;6686:123;-1:-1:-1;386:8:7;6845:34;;;6844:50;6819:75;;386:8;7033:18;386:8;7003:12;:26;6984:15;:46;:67;;;;;;;;6970:105;;;;;;;;6952:123;;7227:17;:51;;;;;7261:17;7248:10;:30;7227:51;7223:77;;;7299:1;7292:8;;;;7223:77;7371:17;7370:109;;7469:10;7449:17;:30;7370:109;;;7424:10;7404:17;:30;7370:109;7362:117;;6403:1083;;;;;;;;;;:::o;39721:182:5:-;39807:8;;;;;;;;;-1:-1:-1;;;;;39807:8:5;-1:-1:-1;;;;;39807:15:5;;:17;;;;;-1:-1:-1;;;39807:17:5;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;39807:17:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;39807:17:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;39807:17:5;:39;;;;;;-1:-1:-1;;;;;39807:39:5;;;;;;;;;;;;;;;:26;;;;;;;:39;;;;;:17;;:39;;;;;;;-1:-1:-1;39807:26:5;:39;;;5:2:-1;;;;30:1;27;20:12;5:2;39807:39:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;39807:39:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;39807:39:5;39860:26;;;;;;;;;;;;39807:39;39860:26;;;;;;;;;;;;39786:110;;;;;;-1:-1:-1;;;;;39786:110:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;39786:110:5;;39721:182;;:::o;4515:972:7:-;4740:15;386:8;5075:33;;;;5131:12;;5166;;5201:15;;4740;;;;386:8;5131:12;5266:6;;;5265:21;;5264:28;;;;;;;;5259:1;:34;:47;;;;;;;;5245:84;;;;;;;;5228:101;;5359:8;:42;;5391:10;5387:1;:14;5359:42;;;5374:10;5370:1;:14;5359:42;5339:62;-1:-1:-1;5436:1:7;5419:18;;;5412:26;;;;5466:13;4515:972;-1:-1:-1;;;;;;;;;;;4515:972:7:o;5493:327::-;5625:12;5675:54;5685:15;547:2;5675:9;:54::i;:::-;5664:7;:65;;5663:150;;;;;5758:54;5768:15;622:3;5758:9;:54::i;:::-;5747:7;:65;;5653:160;5493:327;-1:-1:-1;;;5493:327:7:o;2091:365::-;2261:16;386:8;2321:102;2392:15;2356:32;:15;386:8;2356:32;:19;:32;:::i;:::-;:52;;;;;;;2321:12;;2356:52;;2321:102;:16;:102;:::i;:::-;2307:142;;;;;;;;;2091:365;-1:-1:-1;;;;2091:365:7:o;1238:128:10:-;1319:7;;;1339;;;;1332:15;;;40155:183:5;40225:8;;;;;;;;;-1:-1:-1;;;;;40225:8:5;-1:-1:-1;;;;;40225:15:5;;:17;;;;;-1:-1:-1;;;40225:17:5;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;40225:17:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;40225:17:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;40225:17:5;:56;;;;;;40256:10;40225:56;;;;40268:4;40225:56;;;;;;;;;;;;-1:-1:-1;;;;;40225:30:5;;;;;;:56;;;;;:17;;:56;;;;;;;;-1:-1:-1;40225:30:5;:56;;;5:2:-1;;;;30:1;27;20:12;5:2;40225:56:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;40225:56:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;40225:56:5;40295:26;;;;;;;;;;;;40225:56;40295:26;;;;;;;;;;;;40204:127;;;;;;-1:-1:-1;;;;;40204:127:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;40204:127:5;;40155:183;:::o;1260:120:7:-;1319:8;1371:2;1345:23;1355:9;1366:1;1345:9;:23::i;:::-;:28;;;;;;;;;1260:120;-1:-1:-1;;1260:120:7:o;39052:220:5:-;39188:14;39244:3;39231:10;:16;39230:35;;39264:1;39230:35;;;-1:-1:-1;39251:10:5;39052:220::o;1468:119:7:-;1526:8;1578:2;1552:23;1562:9;1573:1;1552:9;:23::i;1060:116:10:-;1120:7;1142:8;;;;1135:16;;;;-1:-1:-1;1164:7:10;;;1060:116::o;39966:104:5:-;40036:8;;:18;;;;;;;;40024:39;;-1:-1:-1;;;;;40036:8:5;;:16;;:18;;;;;;;;;;;;;;:8;:18;;;5:2:-1;;;;30:1;27;20:12;5:2;40036:18:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;40036:18:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;40036:18:5;40056:6;40024:11;:39::i;:::-;39966:104;:::o;3763:168:7:-;3921:3;3899:18;;3898:26;;3763:168::o;3228:354::-;3327:12;3398:16;3455:14;3369:9;3359:6;:19;3355:33;;;3387:1;3380:8;;;;3355:33;3438:6;3421:9;3417:28;3398:47;;3499:6;3473:12;3488:3;3473:18;3472:34;;;;;;;;3455:51;;3545:1;3532:10;:14;3531:43;;3564:10;3563:11;;3531:43;;;3550:10;3531:43;3516:59;;3228:354;;;;;;;:::o;25677:710:5:-;25828:27;25964:245;26032:11;;26057:14;26085:17;;26116:12;:57;;26153:20;;26116:57;;;26131:19;;26116:57;26187:12;25964:54;:245::i;:::-;25939:270;;26259:49;26271:12;26285:22;26259:11;:49::i;:::-;26323:57;;;-1:-1:-1;;;;;26323:57:5;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;26323:57:5;;;;;;;;;;25677:710;;;;;:::o;39331:333::-;39394:15;39390:268;;;39448:1;39425:20;:24;;;39463:18;:22;39499:12;:20;;-1:-1:-1;;39499:20:5;;;39390:268;;;39574:1;39550:21;:25;;;39589:19;:23;39626:13;:21;;-1:-1:-1;;39626:21:5;;;39331:333;:::o;203:380:10:-;263:9;489:7;;485:36;;;-1:-1:-1;513:1:10;506:8;;485:36;-1:-1:-1;531:7:10;;;536:2;531;:7;551:6;;;;;;;;:12;544:20;;",
  "source": "pragma solidity ^0.4.23;\npragma experimental \"v0.5.0\";\n\nimport \"openzeppelin-solidity/contracts/math/SafeMath.sol\";\nimport \"../DBC.sol\";\nimport \"../Feeds.sol\";\nimport \"../Registry.sol\";\nimport \"./ContractForDifferenceFactory.sol\";\nimport \"./ContractForDifferenceRegistry.sol\";\nimport \"./ContractForDifferenceLibrary.sol\";\n\n\n/*\n * SOLIUM DISABLE: \n *\n *   security/no-block-members - we need to use 'now' in order to set a time \n *       limit.\n */\n\n /* solium-disable security/no-block-members */\n\n/**\n * @title Contract for difference\n *\n * Contract for difference for a given market between a\n * \"buyer\" (long position) and \"seller\" (short position).\n */\ncontract ContractForDifference is DBC {\n    using SafeMath for uint;\n\n    /*\n     * Events\n     */\n\n    event LogCFDCreated(\n        address creator,\n        bytes32 market,\n        uint notionalAmountDai,\n        uint deposit\n    );\n    event LogCFDInitiated(\n        address joiner,\n        uint amountSent,\n        address buyer,\n        address seller,\n        bytes32 market,\n        uint notionalAmountDai,\n        uint strikePrice,\n        uint buyerDepositBalance,\n        uint sellerDepositBalance\n    );\n    event LogCFDTransferPosition(address oldOwner, address newOwner);\n    event LogCFDCanceledNew(address party, uint amount, bytes32 market);\n    event LogCFDStrikePriceUpdated(address party, uint newStrikePrice);\n\n    event LogCFDSale(\n        address party,\n        uint saleStrikePrice,\n        uint timeLimit\n    );\n    event LogCFDSaleCancelled(address party);\n    event LogCFDSaleUpdated(address party, uint newPrice);\n    event LogCFDSold(address to, address by, uint newNotional, uint sellerAmount, uint buyerDeposit, bytes32 market);\n\n    event LogCFDPartyBalanceUpdate(address party, uint amount, bool isWithdraw, uint newBalance, bytes32 market);\n    event LogCFDTransferFunds(address receiver, uint amount);\n\n    event LogCFDClosed(address winner, uint buyerCollateral, uint sellerCollateral, bytes32 market);\n    event LogCFDForceTerminated(address terminator, uint terminatorAmount, address otherParty, uint otherPartyAmount, bytes32 market);\n    event LogCFDUpgraded(address newCFD);\n    event LogCFDRemainingBalanceUnexpected(uint remainder);\n\n    enum Status {\n        CREATED,\n        INITIATED,\n        SALE,\n        CLOSED\n    }\n\n    /*\n     * Constants\n     */\n\n    string constant REASON_NOTIONAL_TOO_LOW = \"Notional below minimum\";\n    string constant REASON_FEES_NOT_ENOUGH = \"Not enough sent to cover fees\";\n    string constant REASON_DAI_TRANSFER_FAILED = \"Failure transfering ownership of DAI tokens\";\n    string constant REASON_COLLATERAL_RANGE_FAILED = \"collateralInRange false\";\n    string constant REASON_MUST_NOT_BE_INITIATED = \"Must not be initiated\";\n    string constant REASON_MUST_NOT_BE_CLOSED = \"Must not be closed\";\n    string constant REASON_MUST_NOT_BE_PARTY = \"Contract party can't call this\";\n    string constant REASON_MUST_BE_INITIATED = \"Must be initiated\";\n    string constant REASON_MUST_BE_SELLER = \"msg.sender must be seller\";\n    string constant REASON_MUST_NOT_BE_SELLER = \"msg.sender must not be seller\";\n    string constant REASON_MUST_BE_ON_SALE = \"Must be on sale\";\n    string constant REASON_MUST_BE_POSITIVE_PRICE = \"Price must be > 0\";\n    string constant REASON_ONLY_CONTRACT_PARTIES = \"Only contract parties can do this\";\n    string constant REASON_MUST_BE_ACTIVE = \"Must be active\";\n    string constant REASON_MARKET_PRICE_RANGE_FAILED = \"collateralInRange false\";\n    string constant REASON_WITHDRAW_NOT_ENOUGH = \"Can't withdraw more then available\";\n    string constant REASON_AMOUNT_NOT_ENOUGH = \"Amount not enough\";\n    string constant REASON_UPGRADE_ALREADY_SET = \"msg.sender already called\";\n    string constant REASON_UPGRADE_ALREADY_LATEST = \"Already at latest version\";\n    string constant REASON_TRANSFER_TO_EXISTING_PARTY = \"Can't transfer to existing party\";\n\n    uint public constant FORCE_TERMINATE_PENALTY_PERCENT = 5;\n    uint public constant MINIMUM_NOTIONAL_AMOUNT_DAI = 1 * 1e18; // 1 DAI/1 USD\n\n\n    /*\n     * State variables\n     */\n\n    address public buyer;                           // long\n    address public seller;                          // short\n    bytes32 public market;\n\n    uint public notionalAmountDai;\n    uint public buyerInitialNotional;\n    uint public sellerInitialNotional;\n\n    // format of strike prices as in Feeds contract - see Feeds.decimals()\n    uint public strikePrice;\n    uint public buyerInitialStrikePrice;\n    uint public sellerInitialStrikePrice;\n\n    // balances of amounts actually deposited/withdrawn from the contract\n    uint public buyerDepositBalance;\n    uint public sellerDepositBalance;\n\n    uint public buyerSaleStrikePrice;\n    uint public buyerSaleTimeLimit;\n\n    uint public sellerSaleStrikePrice;\n    uint public sellerSaleTimeLimit;\n\n    bool public buyerSelling;\n    bool public sellerSelling;\n\n    bool public initiated = false;\n    bool public closed = false;\n    bool public terminated;\n\n    // set to true for a short period of time - when second party has called\n    // upgrade and upgrade has called the new factory to do the work\n    bool public upgradeable = false;\n\n    // set to first party that calls upgrade\n    // enables identification of who called and that it has been called once\n    address public upgradeCalledBy = 0x0;\n\n    address public cfdRegistryAddr;\n    address public feedsAddr;\n\n    Registry public registry;\n\n    /*\n     * Functions\n     */\n\n    constructor() public {}\n\n    /**\n     * @dev Contract has been initiated (has 2 parties) and not yet terminated.\n     * @return true if contract is active\n     */\n    function isActive() public view returns (bool) {\n        return initiated == true && closed == false;\n    }\n\n    /**\n     * @dev Is buyer / long party selling.\n     * @return true if buyer has side up for sale\n     */\n    function isBuyerSelling() public view returns (bool) {\n        return buyerSelling &&\n            (buyerSaleTimeLimit == 0 || now < buyerSaleTimeLimit);\n    }\n\n    /**\n     * @dev Is seller / short party selling.\n     * @return true if seller has side up for sale\n     */\n    function isSellerSelling() public view returns (bool) {\n        return sellerSelling &&\n            (sellerSaleTimeLimit == 0 || now < sellerSaleTimeLimit);\n    }\n\n    /**\n     * @dev If the given party is selling one side of the contract.\n     * @return true if the given party is selling\n     */\n    function isSelling(address _party) public view returns (bool) {\n        return (_party == buyer && isBuyerSelling()) ||\n            (_party == seller && isSellerSelling());\n    }\n\n    /**\n     * @dev Check if the given address is one of the 2 parties of the contract.\n     * @param _party Address to check\n     * @return true if _party is either the buyer or seller.\n     */\n    function isContractParty(address _party) public view returns (bool) {\n        return _party == buyer || _party == seller;\n    }\n\n    /**\n     * @dev Create a new CFDinstance specifying the terms of the contract.\n     *\n     * Fee of 0.3% of the notional is taken.\n     *\n     * Therefore the intial deposit is _value minus these fees.\n     *\n     * @param _registryAddr Registry contract address\n     * @param _cfdRegistryAddr CFD Registry contract address\n     * @param _feedsAddr Feeds address\n     * @param _partyAddr Address of the party creating the contract\n     * @param _marketId Contract is for prices on this market\n     * @param _strikePrice Agreed initial price for the contract (compatible\n                with Feeds stored price - see Feeds.decimals() adjustment)\n     * @param _notionalAmountDai Contract amount\n     * @param _isBuyer Flag indicating if the contract creator wants to take the\n     *            buyer (true) or the seller side (false).\n     */\n    function create(\n        address _registryAddr,\n        address _cfdRegistryAddr,\n        address _feedsAddr,\n        address _partyAddr, // msg.sender calling the Factory\n        bytes32 _marketId,\n        uint _strikePrice,\n        uint _notionalAmountDai,\n        bool _isBuyer\n    )\n        public\n        pre_cond(_notionalAmountDai >= MINIMUM_NOTIONAL_AMOUNT_DAI, REASON_NOTIONAL_TOO_LOW)\n    {\n        registry = Registry(_registryAddr);\n        uint daiBalance = registry.getDAI().balanceOf(this);\n        uint fees = ContractForDifferenceLibrary.creatorFee(_notionalAmountDai);\n        if (daiBalance <= fees)\n            revert(REASON_FEES_NOT_ENOUGH);\n\n        uint collateralSent = daiBalance - fees;\n        if (!ContractForDifferenceLibrary.collateralInRange(_notionalAmountDai, collateralSent))\n            revert(REASON_COLLATERAL_RANGE_FAILED);\n\n        if (_isBuyer) {\n            buyer = _partyAddr;\n            buyerDepositBalance = collateralSent;\n        } else {\n            seller = _partyAddr;\n            sellerDepositBalance = collateralSent;\n        }\n\n        market = _marketId;\n        notionalAmountDai = _notionalAmountDai;\n        buyerInitialNotional = _notionalAmountDai;\n        sellerInitialNotional = _notionalAmountDai;\n\n        strikePrice = _strikePrice;\n        buyerInitialStrikePrice = _strikePrice;\n        sellerInitialStrikePrice = _strikePrice;\n\n        cfdRegistryAddr = _cfdRegistryAddr;\n        feedsAddr = _feedsAddr;\n\n        emit LogCFDCreated(\n            _partyAddr,\n            market,\n            notionalAmountDai,\n            daiBalance\n        );\n    }\n\n    /**\n     * @dev Create a new CFDinstance from a previous CFD instance. This is part\n     *      of the upgrade process (see CFD.upgrade()).\n     *\n     * @param _cfdAddr Address of the existing / old CFD\n     * @param _registryAddr Address of Registry contract\n     * @param _cfdRegistryAddr Address of CFDRegistry contract\n     * @param _feedsAddr Address to send fees to\n     */\n    function createByUpgrade(\n        address _cfdAddr,\n        address _registryAddr,\n        address _cfdRegistryAddr,\n        address _feedsAddr\n    )\n        public\n    {\n        ContractForDifference oldCfd = ContractForDifference(_cfdAddr);\n\n        market = oldCfd.market();\n        notionalAmountDai = oldCfd.notionalAmountDai();\n        strikePrice = oldCfd.strikePrice();\n        buyer = oldCfd.buyer();\n        seller = oldCfd.seller();\n\n        buyerDepositBalance = oldCfd.buyerDepositBalance();\n        buyerInitialNotional = oldCfd.buyerInitialNotional();\n        buyerInitialStrikePrice = oldCfd.buyerInitialStrikePrice();\n\n        sellerDepositBalance = oldCfd.sellerDepositBalance();\n        sellerInitialNotional = oldCfd.sellerInitialNotional();\n        sellerInitialStrikePrice = oldCfd.sellerInitialStrikePrice();\n\n        cfdRegistryAddr = _cfdRegistryAddr;\n        registry = Registry(_registryAddr);\n        feedsAddr = _feedsAddr;\n\n        initiated = true;\n\n        ContractForDifferenceRegistry(cfdRegistryAddr).registerParty(seller);\n    }\n\n    /**\n     * Returns an array with all the attributes of the contract\n     * (Had to split in 3 functions because of the stack limit)\n     * Max number of return values == 8\n     */\n    function getCfdAttributes()\n        public\n        view\n        returns (address, address, bytes32, uint, uint, bool, bool, Status)\n    {\n        return (\n            buyer,\n            seller,\n            market,\n            strikePrice,\n            notionalAmountDai,\n            buyerSelling,\n            sellerSelling,\n            status()\n        );\n    }\n    function getCfdAttributes2()\n        public\n        view\n        returns (uint, uint, uint, uint, uint, uint, uint, uint)\n    {\n        return (\n            buyerInitialNotional,\n            sellerInitialNotional,\n            buyerDepositBalance,\n            sellerDepositBalance,\n            buyerSaleStrikePrice,\n            sellerSaleStrikePrice,\n            buyerInitialStrikePrice,\n            sellerInitialStrikePrice\n        );\n    }\n    function getCfdAttributes3()\n        public\n        view\n        returns (bool, address)\n    {\n        return (\n            terminated,\n            upgradeCalledBy\n        );\n    }\n\n    /**\n     * @dev Counterparty deposits their funds into the contract thereby joining\n     * and initiating the contract.\n     *\n     * Fee of 0.5% of the notional is taken.\n     *\n     * Therefore the intial deposit is _value minus these fees.\n     */\n    function deposit(uint _value)\n        external\n        pre_cond(initiated == false, REASON_MUST_NOT_BE_INITIATED)\n        pre_cond(closed == false, REASON_MUST_NOT_BE_CLOSED) // cancelNew has not been called\n        pre_cond(isContractParty(msg.sender) == false, REASON_MUST_NOT_BE_PARTY) // reject contract creator depositing\n    {\n        uint joinerFees = ContractForDifferenceLibrary.joinerFee(notionalAmountDai);\n        if (_value <= joinerFees)\n            revert(REASON_FEES_NOT_ENOUGH);\n\n        uint collateralSent = _value - joinerFees;\n        if (!ContractForDifferenceLibrary.collateralInRange(notionalAmountDai, collateralSent))\n            revert(REASON_COLLATERAL_RANGE_FAILED);\n\n        daiClaim(_value);\n        daiTransferToFees(\n            joinerFees + ContractForDifferenceLibrary.creatorFee(notionalAmountDai)\n        );\n\n        if (buyer == 0x0) {\n            buyer = msg.sender;\n            buyerDepositBalance = collateralSent;\n        } else {\n            seller = msg.sender;\n            sellerDepositBalance = collateralSent;\n        }\n\n        initiated = true;\n        ContractForDifferenceRegistry(cfdRegistryAddr).registerParty(msg.sender);\n        emit LogCFDInitiated(\n            msg.sender,\n            _value,\n            buyer,\n            seller,\n            market,\n            notionalAmountDai,\n            strikePrice,\n            buyerDepositBalance,\n            sellerDepositBalance\n        );\n    }\n\n    /**\n     * @dev Cancels a newly created contract refunding the balance to the party\n     *      that created the contract. This can only be called before a contract\n     *      is initiated. ie. between the create() and deposit() calls.\n     */\n    function cancelNew()\n        external\n        pre_cond(initiated == false, REASON_MUST_NOT_BE_INITIATED)\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\n    {\n        uint amountSent = registry.getDAI().balanceOf(this);\n        daiTransfer(msg.sender, amountSent);\n        emit LogCFDTransferFunds(msg.sender, amountSent);\n        closed = true;\n        emit LogCFDCanceledNew(msg.sender, amountSent, market);\n    }\n\n    /**\n     * @dev Party adds more funds to the contract thereby increasing their\n     *      deposit balance.\n     * @param _value DAI amount\n     */\n    function topup(uint _value)\n        external\n        pre_cond(_value >= 1, REASON_AMOUNT_NOT_ENOUGH)\n        pre_cond(initiated == true, REASON_MUST_BE_INITIATED)\n        pre_cond(closed == false, REASON_MUST_NOT_BE_CLOSED)\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\n        pre_cond(isSelling(msg.sender) == false, REASON_MUST_NOT_BE_SELLER)\n    {\n        bool isBuyer = msg.sender == buyer;\n        uint newDepositBalance = (isBuyer ? \n            buyerDepositBalance : \n            sellerDepositBalance\n        ).add(_value);\n\n        // check topup doesn't make collateral exceed the maximum\n        if (!ContractForDifferenceLibrary.collateralInRange(notionalAmountDai, newDepositBalance))\n            revert(REASON_COLLATERAL_RANGE_FAILED);\n\n        daiClaim(_value);\n\n        if (isBuyer) {\n            buyerDepositBalance = newDepositBalance;\n        } else {\n            sellerDepositBalance = newDepositBalance;\n        }\n\n        emit LogCFDPartyBalanceUpdate(msg.sender, _value, false, newDepositBalance, market);\n    }\n\n    /**\n     * @dev Party withdraws funds from the contract.\n     *      They can only withdraw down to an amount that leaves the collateral\n     *      to notional difference at 20% or more.\n     * @param _withdrawAmount Amount to withdraw from the deposits balance.\n     */\n    function withdraw(uint _withdrawAmount)\n        external\n        assertWithdrawPreCond(_withdrawAmount)\n    {\n        bool isBuyer = msg.sender == buyer;\n        uint currentDepositBal = isBuyer ? buyerDepositBalance : sellerDepositBalance;\n\n        // first simple check that can't withdraw more then deposited\n        if (_withdrawAmount > currentDepositBal)\n            revert(REASON_WITHDRAW_NOT_ENOUGH);\n\n        // second a more precise check that the collateral at new balance will remain above the min\n        uint newDepositBal = currentDepositBal - _withdrawAmount;\n        uint marketPrice = latestPrice();\n        if (!marketPriceInRange(\n            marketPrice,\n            isBuyer ? newDepositBal : buyerDepositBalance,\n            isBuyer ? sellerDepositBalance : newDepositBal,\n            strikePrice // unchanged on withdraw\n        )) {\n            revert(REASON_MARKET_PRICE_RANGE_FAILED);\n        }\n\n        uint collateral = ContractForDifferenceLibrary.calculateCollateralAmount(\n            strikePrice,\n            marketPrice,\n            notionalAmountDai,\n            newDepositBal,\n            isBuyer\n        );\n\n        if (!ContractForDifferenceLibrary.collateralInRange(notionalAmountDai, collateral)) {\n            revert(REASON_COLLATERAL_RANGE_FAILED);\n        }\n\n        daiTransfer(msg.sender, _withdrawAmount);\n        emit LogCFDTransferFunds(msg.sender, _withdrawAmount);\n\n        if (isBuyer) {\n            buyerDepositBalance = newDepositBal;\n        } else {\n            sellerDepositBalance = newDepositBal;\n        }\n\n        emit LogCFDPartyBalanceUpdate(msg.sender, _withdrawAmount, true, newDepositBal, market);\n    }\n\n    /* NOTE: Split off into modifier to work around 'stack too deep' error */\n    modifier assertWithdrawPreCond(uint _withdrawAmount) \n    {\n        require(_withdrawAmount >= 1, REASON_WITHDRAW_NOT_ENOUGH);\n        require(initiated == true, REASON_MUST_BE_INITIATED);\n        require(closed == false, REASON_MUST_NOT_BE_CLOSED);\n        require(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES);\n        require(isSelling(msg.sender) == false, REASON_MUST_NOT_BE_SELLER);\n        _;\n    }\n\n    /**\n     * @dev Parties can transfer contract ownership to another address by\n     *      calling this function.\n     * @param _newAddress Addreess of the new party to swap in.\n     */\n    function transferPosition(address _newAddress)\n        external\n        pre_cond(closed == false, REASON_MUST_NOT_BE_CLOSED)\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\n        pre_cond(isContractParty(_newAddress) == false, REASON_MUST_NOT_BE_PARTY)\n        pre_cond(isSelling(msg.sender) == false, REASON_MUST_NOT_BE_SELLER)\n    {\n        if (msg.sender == buyer) buyer = _newAddress;\n        else if (msg.sender == seller) seller = _newAddress;\n        else if (msg.sender == upgradeCalledBy) upgradeCalledBy = 0x0;\n        ContractForDifferenceRegistry(cfdRegistryAddr).registerParty(_newAddress);\n        emit LogCFDTransferPosition(msg.sender, _newAddress);\n    }\n\n    /**\n     * @dev Position in a contract can be sold to another party. This function\n     *      makes the callers side available for sale. A party can buy the side\n     *      with the buy function.\n     * @param _desiredStrikePrice Sellers desired sell strike price\n     * @param _timeLimit Sale available until this time in UNIX epoch seconds\n     *                  (< now for no limit)\n     */\n    function sellPrepare(uint _desiredStrikePrice, uint _timeLimit)\n        external\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\n        // reject already marked selling by the caller\n        pre_cond(isSelling(msg.sender) == false, REASON_MUST_NOT_BE_SELLER)\n        pre_cond(_desiredStrikePrice > 0, REASON_MUST_BE_POSITIVE_PRICE)\n    {\n        // mark side on sale\n        uint timeLimit = timeLimitFutureOrZero(_timeLimit);\n        if (msg.sender == buyer) {\n            buyerSelling = true;\n            buyerSaleStrikePrice = _desiredStrikePrice;\n            buyerSaleTimeLimit = timeLimit;\n        } else if (msg.sender == seller) {\n            sellerSelling = true;\n            sellerSaleStrikePrice = _desiredStrikePrice;\n            sellerSaleTimeLimit = timeLimit;\n        }\n\n        ContractForDifferenceRegistry(cfdRegistryAddr).registerSale(msg.sender);\n        emit LogCFDSale(\n            msg.sender,\n            _desiredStrikePrice,\n            timeLimit\n        );\n    }\n\n    /**\n     * @dev Seller can update the price on the sale.\n     */\n    function sellUpdate(\n        uint _newPrice\n    )\n        external\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\n        pre_cond(isSelling(msg.sender), REASON_MUST_BE_SELLER)\n        pre_cond(_newPrice > 0, REASON_MUST_BE_POSITIVE_PRICE)\n    {\n        if (msg.sender == buyer) {\n            buyerSaleStrikePrice = _newPrice;\n        } else if (msg.sender == seller) {\n            sellerSaleStrikePrice = _newPrice;\n        }\n        emit LogCFDSaleUpdated(msg.sender, _newPrice);\n    }\n\n    /**\n     * @dev Party can update the strike price of an non-initialized contract\n     */\n    function changeStrikePrice(\n        uint _newStrikePrice\n    )\n        external\n        pre_cond(initiated == false, REASON_MUST_NOT_BE_INITIATED)\n        pre_cond(closed == false, REASON_MUST_NOT_BE_CLOSED)\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\n        pre_cond(_newStrikePrice > 0, REASON_MUST_BE_POSITIVE_PRICE)\n    {\n        strikePrice = _newStrikePrice;\n        buyerInitialStrikePrice = _newStrikePrice;\n        sellerInitialStrikePrice = _newStrikePrice;\n        emit LogCFDStrikePriceUpdated(msg.sender, _newStrikePrice);\n    }\n\n    /**\n     * @dev Cancel the for sale status setup by sellPrepare()\n     */\n    function sellCancel()\n        external\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\n        pre_cond(isSelling(msg.sender), REASON_MUST_BE_SELLER)\n    {\n        clearSale(msg.sender == buyer);\n        emit LogCFDSaleCancelled(msg.sender);\n    }\n\n    /**\n     * @dev Buy the side in the contract that is for sale.\n     *\n     * Fee of 0.5% of the notional is taken.\n     *\n     * @param _buyBuyerSide Buying the buyer side or the seller side?\n     * @param _value DAI amount\n     */\n    function buy(bool _buyBuyerSide, uint _value)\n        external\n        assertBuyPreCond(_buyBuyerSide)\n    {\n        uint fees = ContractForDifferenceLibrary.joinerFee(notionalAmountDai);\n        if (_value <= fees)\n            revert(REASON_FEES_NOT_ENOUGH);\n\n        // check sent collateral falls in the allowable range\n        uint collateralSent = _value.sub(fees);\n        if (!ContractForDifferenceLibrary.collateralInRange(notionalAmountDai, collateralSent))\n            revert(REASON_COLLATERAL_RANGE_FAILED);\n\n        uint marketPrice = latestPrice();\n        uint newStrikePrice = _buyBuyerSide ?\n            buyerSaleStrikePrice :\n            sellerSaleStrikePrice;\n\n        // check new parameters fall in the allowable range\n        if (!marketPriceInRange(\n            marketPrice,\n            _buyBuyerSide ? collateralSent : buyerDepositBalance,\n            _buyBuyerSide ? sellerDepositBalance : collateralSent,\n            newStrikePrice // buying at this strike price\n        )) {\n            revert(REASON_MARKET_PRICE_RANGE_FAILED);\n        }\n\n        // move ownership of sent DAI to the CFD\n        daiClaim(_value);\n        daiTransferToFees(fees);\n\n        // transfer to selling party\n        address sellingParty = _buyBuyerSide ? buyer : seller;\n        uint sellingPartyCollateral = buyTransferFunds(\n            _buyBuyerSide,\n            newStrikePrice,\n            sellingParty\n        );\n\n        // set new party and balances\n        uint remainingPartyDeposits = registry.getDAI().\n            balanceOf(this).sub(collateralSent);\n\n        // new notional amount value\n        uint newNotional = ContractForDifferenceLibrary.calculateNewNotional(\n            notionalAmountDai,\n            strikePrice,\n            newStrikePrice\n        );\n\n        if (_buyBuyerSide) {\n            buyer = msg.sender;\n            buyerDepositBalance = collateralSent;\n            buyerInitialStrikePrice = newStrikePrice;\n            buyerInitialNotional = newNotional;\n            sellerDepositBalance = remainingPartyDeposits;\n        } else {\n            seller = msg.sender;\n            sellerDepositBalance = collateralSent;\n            sellerInitialStrikePrice = newStrikePrice;\n            sellerInitialNotional = newNotional;\n            buyerDepositBalance = remainingPartyDeposits;\n        }\n\n        strikePrice = newStrikePrice;\n        notionalAmountDai = newNotional;\n\n        clearSale(_buyBuyerSide);\n\n        // clean up upgradeCalledBy if the departing party had set that\n        if (upgradeCalledBy == sellingParty) {\n            upgradeCalledBy = 0x0;\n        }\n\n        ContractForDifferenceRegistry(cfdRegistryAddr).registerParty(msg.sender);\n        emit LogCFDSold(msg.sender, sellingParty, newNotional, sellingPartyCollateral, _value, market);\n    }\n\n    /* NOTE: Split off into modifier to work around 'stack too deep' error */\n    modifier assertBuyPreCond(bool _buyBuyerSide) \n    {\n        require(isActive(), REASON_MUST_BE_ACTIVE);\n        require(isSelling(_buyBuyerSide ? buyer : seller), REASON_MUST_BE_ON_SALE);\n        require(isContractParty(msg.sender) == false, REASON_MUST_NOT_BE_PARTY);\n        _;\n    }\n\n    /**\n     * Does all transfers of funds related to the buy().\n     *\n     * Transfer logic split off in seperate function ONLY to workaround\n     * 'Stack too deep' limit.\n     */\n    function buyTransferFunds(\n        bool buyBuyerSide,\n        uint newStrikePrice,\n        address sellingParty\n    )\n        private\n        returns (uint sellingPartyCollateral)\n    {\n        // determine collateral amount to send to the selling party\n        sellingPartyCollateral = ContractForDifferenceLibrary.calculateCollateralAmount(\n            strikePrice,\n            newStrikePrice,\n            notionalAmountDai,\n            buyBuyerSide ? buyerDepositBalance : sellerDepositBalance,\n            buyBuyerSide\n        );\n\n        // send money to selling party\n        daiTransfer(sellingParty, sellingPartyCollateral);\n        emit LogCFDTransferFunds(sellingParty, sellingPartyCollateral);\n    }\n\n    /**\n     * @dev Daemons will call this routine when the market price has moved\n     *      enough that the closeRatio for this contract has been reached.\n     *      It can actually be called by anyone who is willing to pay the gas\n     *      for the liquidate. But if the market has moved past the liquidate\n     *      threshold the call will be rejected.\n     *\n     * This will disolve the contract and return each parties balance of\n     * collateral.\n     */\n    function liquidate()\n        external\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\n    {\n        uint marketPrice = latestPrice();\n\n        // #11 double check the 5% threshold was crossed, if not then REJECT\n        // (can only liquidate if out of range)\n        require(\n            !marketPriceInRange(\n                marketPrice,\n                buyerDepositBalance,\n                sellerDepositBalance,\n                strikePrice\n            ), \n            \"Liquidate threshold not yet reached\"\n        );\n\n        // fetch one of the cutoffs to determine which is the winner\n        uint buyerCutOff = ContractForDifferenceLibrary.cutOffPrice(\n            notionalAmountDai,\n            buyerDepositBalance,\n            strikePrice,\n            true\n        );\n\n        // if buyer cutoff still in range then buyer wins, otherwise seller\n        bool winnerIsBuyer = marketPrice > buyerCutOff;\n        address winner = winnerIsBuyer ? buyer : seller;\n\n        // winner takes all\n        uint remaining = registry.getDAI().balanceOf(this);\n        daiTransfer(winner, remaining);\n        emit LogCFDTransferFunds(winner, remaining);\n\n        closed = true;\n\n        emit LogCFDClosed(\n            winner,\n            winnerIsBuyer ? remaining : 0,\n            winnerIsBuyer ? 0 : remaining,\n            market\n        );\n    }\n\n    /**\n     * Force terminate executed by one party who will penalised 5% of their\n     * collateral. Then penalty will be sent to the counterparty.\n     */\n    function forceTerminate()\n        external\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\n    {\n        uint marketPrice = latestPrice();\n        bool forcingPartyIsBuyer = msg.sender == buyer;\n\n        uint buyerCollateral = ContractForDifferenceLibrary.calculateCollateralAmount(\n            strikePrice,\n            marketPrice,\n            notionalAmountDai,\n            buyerDepositBalance,\n            true\n        );\n        uint sellerCollateral = ContractForDifferenceLibrary.calculateCollateralAmount(\n            strikePrice,\n            marketPrice,\n            notionalAmountDai,\n            sellerDepositBalance,\n            false\n        );\n\n        //\n        // calculate and check the remainder - it should be equal to zero\n        //\n        // if not expected log the event and transfer the remainder to fees - it\n        //     will be sorted out manually\n        //\n        uint balanceRemainder = registry.getDAI().\n            balanceOf(this).\n            sub(buyerCollateral).\n            sub(sellerCollateral);\n        if (balanceRemainder != 0) {\n            emit LogCFDRemainingBalanceUnexpected(balanceRemainder);\n        }\n        daiTransferToFees(balanceRemainder);\n\n        // penalise the force terminator 5% and give it to the counterparty\n        uint penalty = ContractForDifferenceLibrary.percentOf(\n            forcingPartyIsBuyer ? buyerCollateral : sellerCollateral,\n            FORCE_TERMINATE_PENALTY_PERCENT\n        );\n        if (forcingPartyIsBuyer) {\n            buyerCollateral = buyerCollateral.sub(penalty);\n            sellerCollateral = sellerCollateral.add(penalty);\n        } else {\n            buyerCollateral = buyerCollateral.add(penalty);\n            sellerCollateral = sellerCollateral.sub(penalty);\n        }\n\n        // Send collateral amounts back each party.\n        daiTransfer(buyer, buyerCollateral);\n        emit LogCFDTransferFunds(buyer, buyerCollateral);\n        daiTransfer(seller, sellerCollateral);\n        emit LogCFDTransferFunds(seller, sellerCollateral);\n\n        terminated = true;\n        closed = true;\n\n        if (forcingPartyIsBuyer)\n            emit LogCFDForceTerminated(buyer, buyerCollateral, seller, sellerCollateral, market);\n        else\n            emit LogCFDForceTerminated(seller, sellerCollateral, buyer, buyerCollateral, market);\n    }\n\n    /**\n     * @dev Upgrade contract to a new version. This involves creating a new CFD\n     *      at the latest contract set - transferring over all properties and\n     *      value from this one to the new one.\n     *      An upgrade requires a call to this function from both parties. Then\n     *      upgrade will happen when the second party makes the call.\n     */\n    function upgrade()\n        external\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\n        pre_cond(isSelling(msg.sender) == false, REASON_MUST_NOT_BE_SELLER)\n        pre_cond(msg.sender != upgradeCalledBy, REASON_UPGRADE_ALREADY_SET)\n        pre_cond(registry.allCFDs(this) != registry.getCFDFactoryLatest(), REASON_UPGRADE_ALREADY_LATEST)\n    {\n        // 1st call to initiate upgrade process\n        if (upgradeCalledBy == 0x0) {\n            upgradeCalledBy = msg.sender;\n            return;\n        }\n\n        // if here then then this is the 2nd call, invoked by the opposite, so\n        // kick off the upgrade process\n        upgradeable = true;\n        address cfdFactoryLatest = registry.getCFDFactoryLatest();\n        address newCfd = ContractForDifferenceFactory(cfdFactoryLatest).\n            createByUpgrade();\n        daiTransfer(newCfd, registry.getDAI().balanceOf(this));\n        upgradeable = false;\n        closed = true;\n\n        emit LogCFDUpgraded(newCfd);\n    }\n\n    /**\n     * @dev Derive status from the state variables.\n     * @return Status reflecting the current state.\n     */\n    function status()\n        public\n        view\n        returns (Status)\n    {\n        if (closed == true)\n            return Status.CLOSED;\n        else if (initiated == false)\n            return Status.CREATED;\n        else if (isBuyerSelling() || isSellerSelling())\n            return Status.SALE;\n        else\n            return Status.INITIATED;\n    }\n\n    /**\n     * Get the latest read for the market of this CFD.\n     */\n    function latestPrice()\n        internal\n        view\n        returns (uint price)\n    {\n        uint marketPrice;\n        (marketPrice, ) = Feeds(feedsAddr).read(market);\n        return marketPrice;\n    }\n\n    /**\n     * @dev Checks if given parameters and given market price result in a price\n     *      inside an allowable range. This range is defined by the ContractForDifferenceLibrary.cutOffPrice\n     *      function formulas. The idea is that as parameters change - leverage,\n     *      market price etc., we must check the change doesn't result in a\n     *      liquidation event due to too little collateral.\n     *\n     * @param _marketPrice Current market price\n     * @return true if in range; false if not\n     */\n\n    function marketPriceInRange(\n        uint _marketPrice,\n        uint _buyerDepositBalance,\n        uint _sellerDepositBalance,\n        uint _strikePrice\n    )\n        public\n        view\n        returns (bool inRange)\n    {\n        uint buyerCutOff = ContractForDifferenceLibrary.cutOffPrice(\n            notionalAmountDai,\n            _buyerDepositBalance,\n            _strikePrice,\n            true\n        );\n        uint sellerCutOff = ContractForDifferenceLibrary.cutOffPrice(\n            notionalAmountDai,\n            _sellerDepositBalance,\n            _strikePrice,\n            false\n        );\n        inRange = _marketPrice > buyerCutOff && _marketPrice < sellerCutOff;\n    }\n\n   /**\n     * @dev Calculate new notional amount after a side has been sold at a new\n     *      strike price.\n     *\n     * Formula is:\n     *  N2 = N1 * S2 / S1\n     * Where:\n     *  N1 = previous notional\n     *  S1 = previous strike price\n     *  S2 = sale strike price\n     *\n     * @param _oldNotional Existing notional.\n     * @param _oldStrikePrice Existing strike price.\n     * @param _newStrikePrice New / Sale strike price.\n     * @return newNotional Result of the calculation.\n     */\n    function calculateNewNotional(\n        uint _oldNotional,\n        uint _oldStrikePrice,\n        uint _newStrikePrice\n    )\n        public\n        pure\n        returns (uint newNotional)\n    {\n        newNotional = ContractForDifferenceLibrary.calculateNewNotional(\n            _oldNotional,\n            _oldStrikePrice,\n            _newStrikePrice\n        );\n    }\n\n    /**\n     * @dev Calculate the collateral amount for one party given the current\n     *      market price and original strike price, notional amount and the\n     *      amount the party has deposited into the contract.\n     *\n     * @param _marketPrice Current market price\n     * @param _strikePrice CFD strike price\n     * @param _notionalAmount CFD notional amount\n     * @param _depositBalance Balances of deposits into the contract\n     * @param _isBuyer Buyer or Seller / Long or short party?\n     *\n     * @return collateral Amount of collateral for the party\n     */\n    function calculateCollateralAmount(\n        uint _strikePrice,\n        uint _marketPrice,\n        uint _notionalAmount,\n        uint _depositBalance,\n        bool _isBuyer\n    )\n        public\n        pure\n        returns (uint collateral)\n    {\n        collateral = ContractForDifferenceLibrary.calculateCollateralAmount(\n            _strikePrice,\n            _marketPrice,\n            _notionalAmount,\n            _depositBalance,\n            _isBuyer\n        );\n    }\n\n    /**\n     * @dev Calculate the cut off price for buyer or seller.\n     *\n     * This is the price that if passed would raise a liquidation event.\n     *\n     * Base Formulas are:\n     *     Buyer:  1.05 * S - depositBalanceLong  * S / N\n     *     Seller: 0.95 * S + depositBalanceShort * S / N\n     *\n     * However for Solidity we need to adjust parts by FACTOR_UINT to ensure\n     * no fractions.\n     *\n     * @param _notionalAmountDai Contract notional amount\n     * @param _depositBalance Balance of deposits for one party\n     *\n     * @return cut off price\n     */\n    function cutOffPrice(\n        uint _notionalAmountDai,\n        uint _depositBalance,\n        uint _strikePrice,\n        bool _calcForBuyerSide\n    )\n        public\n        pure\n        returns (uint price)\n    {\n        price = ContractForDifferenceLibrary.cutOffPrice(\n            _notionalAmountDai,\n            _depositBalance,\n            _strikePrice,\n            _calcForBuyerSide\n        );\n    }\n\n    /**\n     * Creator fee - 0.3% of notional.\n     */\n    function creatorFee(uint _notional) public pure returns (uint fee) {\n        fee = ContractForDifferenceLibrary.creatorFee(_notional);\n    }\n\n    /**\n     * Joiner (deposit or buy) percentage fee - 0.5% of notional.\n     */\n    function joinerFee(uint _notional) public pure returns (uint fee) {\n        fee = ContractForDifferenceLibrary.joinerFee(_notional);\n    }\n\n    /**\n     * @dev Calculate the change in contract value based on the price change.\n     * @param _currentPrice Current market price\n     */\n    function changeInDai(\n        uint _strikePrice,\n        uint _currentPrice,\n        uint _notionalAmount\n    )\n        public\n        pure\n        returns (uint change)\n    {\n        change = ContractForDifferenceLibrary.changeInDai(\n            _strikePrice,\n            _currentPrice,\n            _notionalAmount\n        );\n    }\n\n    /**\n     * @dev Return a percentage change comparing a value with a new value.\n     * @param _value The existing value to compare against\n     * @param _newValue The new value to compare the change against\n     * @return Percentage change (eg. _value = 100, _newValue = 90 then return 10)\n     */\n    function percentChange(uint _value, uint _newValue)\n        public\n        pure\n        returns (uint percent)\n    {\n        percent = ContractForDifferenceLibrary.percentChange(_value, _newValue);\n    }\n\n    /**\n     * @dev Return a percentage of a given amount.\n     * @param _amount Amount to calculate the percentage of\n     * @param _percent Percent amount (1 - 100)\n     */\n    function percentOf(uint _amount, uint _percent)\n        public\n        pure\n        returns (uint adjusted)\n    {\n        adjusted = ContractForDifferenceLibrary.percentOf(_amount, _percent);\n    }\n\n    /**\n     * Utility that given a time limit will preverve it if in the future OR\n     * set it to 0 if it's in the present or past.\n     */\n    function timeLimitFutureOrZero(\n        uint _timeLimit\n    )\n        private\n        view // not pure because of 'now'\n        returns(uint timeLimit)\n    {\n        timeLimit = (_timeLimit > now) ? _timeLimit : 0;\n    }\n\n    /**\n     * Clear all sale related state.\n     */\n    function clearSale(bool _clearBuyerSide) private {\n        if (_clearBuyerSide) {\n            buyerSaleStrikePrice = 0;\n            buyerSaleTimeLimit = 0;\n            buyerSelling = false;\n        } else {\n            sellerSaleStrikePrice = 0;\n            sellerSaleTimeLimit = 0;\n            sellerSelling = false;\n        }\n    }\n\n    /**\n     * Transfer DAI to an address.\n     */\n    function daiTransfer(address _to, uint _value) private {\n        require(\n            registry.getDAI().transfer(_to, _value),\n            REASON_DAI_TRANSFER_FAILED\n        );\n    }\n\n    /**\n     * Transfer DAI to the fees address.\n     */\n    function daiTransferToFees(uint _value) private {\n        daiTransfer(registry.getFees(), _value);\n    }\n\n    /**\n     * Claim DAI - ie. move approved DAI to this CFD contract.\n     */\n    function daiClaim(uint _value) private {\n        require(\n            registry.getDAI().transferFrom(msg.sender, this, _value),\n            REASON_DAI_TRANSFER_FAILED\n        );\n    }\n\n}\n",
  "sourcePath": "/home/hatch/projects/0xfutures/protocol/contracts/cfd/ContractForDifference.sol",
  "compiler": {
    "name": "solc",
    "version": "0.4.25+commit.59dbf8f1.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "2.0.2",
  "updatedAt": "2019-02-04T05:12:09.608Z"
}