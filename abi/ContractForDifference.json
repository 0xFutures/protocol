{
  "contractName": "ContractForDifference",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "notionalAmountDai",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "seller",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "feedsAddr",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "terminated",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "FORCE_TERMINATE_PENALTY_PERCENT",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerSaleStrikePrice",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerDepositBalance",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "upgradeCalledBy",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "upgradeable",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "MINIMUM_NOTIONAL_AMOUNT_DAI",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "closed",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerSaleTimeLimit",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerInitialStrikePrice",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyer",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerSaleStrikePrice",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "market",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "cfdRegistryAddr",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerDepositBalance",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "initiated",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerSelling",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerInitialStrikePrice",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerSaleTimeLimit",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerSelling",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "notionalAmountDai",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "deposit",
          "type": "uint256"
        }
      ],
      "name": "LogCFDCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "joiner",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amountSent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "notionalAmountDai",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "strikePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "buyerDepositBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "sellerDepositBalance",
          "type": "uint256"
        }
      ],
      "name": "LogCFDInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "LogCFDTransferPosition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        }
      ],
      "name": "LogCFDCanceledNew",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "newStrikePrice",
          "type": "uint256"
        }
      ],
      "name": "LogCFDStrikePriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "saleStrikePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "timeLimit",
          "type": "uint256"
        }
      ],
      "name": "LogCFDSale",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        }
      ],
      "name": "LogCFDSaleCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "LogCFDSaleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "sellerAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "buyerDeposit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        }
      ],
      "name": "LogCFDSold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "isWithdraw",
          "type": "bool"
        },
        {
          "indexed": false,
          "name": "newBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        }
      ],
      "name": "LogCFDPartyBalanceUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LogCFDTransferFunds",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "buyerCollateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "sellerCollateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        }
      ],
      "name": "LogCFDClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "terminator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "terminatorAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "otherParty",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "otherPartyAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        }
      ],
      "name": "LogCFDForceTerminated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "newCFD",
          "type": "address"
        }
      ],
      "name": "LogCFDUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "remainder",
          "type": "uint256"
        }
      ],
      "name": "LogCFDRemainingBalanceUnexpected",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isActive",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isBuyerSelling",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isSellerSelling",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_party",
          "type": "address"
        }
      ],
      "name": "isSelling",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_party",
          "type": "address"
        }
      ],
      "name": "isContractParty",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_registryAddr",
          "type": "address"
        },
        {
          "name": "_cfdRegistryAddr",
          "type": "address"
        },
        {
          "name": "_feedsAddr",
          "type": "address"
        },
        {
          "name": "_partyAddr",
          "type": "address"
        },
        {
          "name": "_marketId",
          "type": "bytes32"
        },
        {
          "name": "_strikePrice",
          "type": "uint256"
        },
        {
          "name": "_notionalAmountDai",
          "type": "uint256"
        },
        {
          "name": "_isBuyer",
          "type": "bool"
        }
      ],
      "name": "create",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_cfdAddr",
          "type": "address"
        },
        {
          "name": "_registryAddr",
          "type": "address"
        },
        {
          "name": "_cfdRegistryAddr",
          "type": "address"
        },
        {
          "name": "_feedsAddr",
          "type": "address"
        }
      ],
      "name": "createByUpgrade",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCfdAttributes",
      "outputs": [
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "bytes32"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "bool"
        },
        {
          "name": "",
          "type": "bool"
        },
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCfdAttributes2",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCfdAttributes3",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        },
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "cancelNew",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "topup",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_newAddress",
          "type": "address"
        }
      ],
      "name": "transferPosition",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_desiredStrikePrice",
          "type": "uint256"
        },
        {
          "name": "_timeLimit",
          "type": "uint256"
        }
      ],
      "name": "sellPrepare",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_newPrice",
          "type": "uint256"
        }
      ],
      "name": "sellUpdate",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_newStrikePrice",
          "type": "uint256"
        }
      ],
      "name": "changeStrikePrice",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "sellCancel",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_buyBuyerSide",
          "type": "bool"
        },
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "liquidate",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "forceTerminate",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "upgrade",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "status",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_marketPrice",
          "type": "uint256"
        },
        {
          "name": "_buyerDepositBalance",
          "type": "uint256"
        },
        {
          "name": "_sellerDepositBalance",
          "type": "uint256"
        },
        {
          "name": "_buyerStrikePrice",
          "type": "uint256"
        },
        {
          "name": "_sellerStrikePrice",
          "type": "uint256"
        }
      ],
      "name": "marketPriceInRange",
      "outputs": [
        {
          "name": "inRange",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_strikePrice",
          "type": "uint256"
        },
        {
          "name": "_marketPrice",
          "type": "uint256"
        },
        {
          "name": "_notionalAmount",
          "type": "uint256"
        },
        {
          "name": "_depositBalance",
          "type": "uint256"
        },
        {
          "name": "_isBuyer",
          "type": "bool"
        }
      ],
      "name": "calculateCollateralAmount",
      "outputs": [
        {
          "name": "collateral",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_notionalAmountDai",
          "type": "uint256"
        },
        {
          "name": "_depositBalance",
          "type": "uint256"
        },
        {
          "name": "_strikePrice",
          "type": "uint256"
        },
        {
          "name": "_calcForBuyerSide",
          "type": "bool"
        }
      ],
      "name": "cutOffPrice",
      "outputs": [
        {
          "name": "price",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_notional",
          "type": "uint256"
        }
      ],
      "name": "creatorFee",
      "outputs": [
        {
          "name": "fee",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_notional",
          "type": "uint256"
        }
      ],
      "name": "joinerFee",
      "outputs": [
        {
          "name": "fee",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_value",
          "type": "uint256"
        },
        {
          "name": "_newValue",
          "type": "uint256"
        }
      ],
      "name": "percentChange",
      "outputs": [
        {
          "name": "percent",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_amount",
          "type": "uint256"
        },
        {
          "name": "_percent",
          "type": "uint256"
        }
      ],
      "name": "percentOf",
      "outputs": [
        {
          "name": "adjusted",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106102795763ffffffff60e060020a600035041663037b9c17811461027e57806308551a53146102a55780630a10ff5f146102d6578063194307bf146102eb5780631a9fddf2146103145780631bcccdf7146103405780631bdfca0114610355578063200d2ed21461036a57806322f3e2d4146103a35780632802759b146103b857806328a07025146104035780632a6d096f146104185780632d4dce7d146104605780632e1a7d4d1461047557806330db555f1461049f578063333c9dda146104c9578063393d8533146104de57806341c20c8e1461051c57806346f33a6d1461053157806348ddb0dd14610546578063497b13d31461055b5780635407baea14610570578063597e1fb5146105a35780635df0d4cd146105b85780635dfa360a146106205780635e24e35d146106645780636182fab3146106975780636a8100b2146106ac5780637028875e146106c15780637150d8ae146106eb578063785619391461070057806378c3829b146107155780637b1039991461073f5780637d21f9501461075457806380f556051461078c578063818197ea146107a15780638505571e146107d157806393a96512146107fb57806398074eb41461081057806398531f28146108255780639c03d24a1461083a5780639dec14301461086a5780639f1185361461087f578063a6f4082114610894578063ae3cde59146108c4578063b6b55f25146108d9578063c2ef94f614610903578063c93c88d714610977578063d525be321461098c578063d55ec697146109bf578063dedfa247146109d4578063df0fdcdc14610a16578063e24c469b14610a2b578063f797efda14610a5d578063fe2e569914610a72575b600080fd5b34801561028a57600080fd5b50610293610a87565b60408051918252519081900360200190f35b3480156102b157600080fd5b506102ba610a8d565b60408051600160a060020a039092168252519081900360200190f35b3480156102e257600080fd5b506102ba610a9c565b3480156102f757600080fd5b50610300610aab565b604080519115158252519081900360200190f35b34801561032057600080fd5b5061033e6004803603602081101561033757600080fd5b5035610abc565b005b34801561034c57600080fd5b50610293610e90565b34801561036157600080fd5b50610293610e95565b34801561037657600080fd5b5061037f610e9b565b6040518082600381111561038f57fe5b60ff16815260200191505060405180910390f35b3480156103af57600080fd5b50610300610f01565b3480156103c457600080fd5b5061033e600480360360808110156103db57600080fd5b50600160a060020a038135811691602081013582169160408201358116916060013516610f30565b34801561040f57600080fd5b5061033e611434565b34801561042457600080fd5b5061042d61174f565b604080519687526020870195909552858501939093526060850191909152608084015260a0830152519081900360c00190f35b34801561046c57600080fd5b50610293611769565b34801561048157600080fd5b5061033e6004803603602081101561049857600080fd5b503561176f565b3480156104ab57600080fd5b5061033e600480360360208110156104c257600080fd5b5035611d02565b3480156104d557600080fd5b506102ba612109565b3480156104ea57600080fd5b506102936004803603608081101561050157600080fd5b50803590602081013590604081013590606001351515612122565b34801561052857600080fd5b50610300612139565b34801561053d57600080fd5b5061030061214b565b34801561055257600080fd5b50610293612173565b34801561056757600080fd5b5061033e61217f565b34801561057c57600080fd5b506103006004803603602081101561059357600080fd5b5035600160a060020a0316612437565b3480156105af57600080fd5b50610300612467565b3480156105c457600080fd5b5061033e60048036036101008110156105dc57600080fd5b50600160a060020a0381358116916020810135821691604082013581169160608101359091169060808101359060a08101359060c08101359060e001351515612477565b34801561062c57600080fd5b50610293600480360360a081101561064357600080fd5b5080359060208101359060408101359060608101359060800135151561281a565b34801561067057600080fd5b5061033e6004803603602081101561068757600080fd5b5035600160a060020a0316612833565b3480156106a357600080fd5b50610293612bb7565b3480156106b857600080fd5b50610293612bbd565b3480156106cd57600080fd5b5061033e600480360360208110156106e457600080fd5b5035612bc3565b3480156106f757600080fd5b506102ba612e47565b34801561070c57600080fd5b50610293612e56565b34801561072157600080fd5b506102936004803603602081101561073857600080fd5b5035612e5c565b34801561074b57600080fd5b506102ba612e67565b34801561076057600080fd5b50610769612e76565b604080519215158352600160a060020a0390911660208301528051918290030190f35b34801561079857600080fd5b50610293612e9c565b3480156107ad57600080fd5b5061033e600480360360408110156107c457600080fd5b5080359060200135612ea2565b3480156107dd57600080fd5b50610293600480360360208110156107f457600080fd5b5035613370565b34801561080757600080fd5b5061033e61337b565b34801561081c57600080fd5b506102ba613836565b34801561083157600080fd5b50610300613845565b34801561084657600080fd5b506102936004803603604081101561085d57600080fd5b5080359060200135613868565b34801561087657600080fd5b5061029361387b565b34801561088b57600080fd5b50610300613881565b3480156108a057600080fd5b50610293600480360360408110156108b757600080fd5b5080359060200135613890565b3480156108d057600080fd5b5061030061389c565b3480156108e557600080fd5b5061033e600480360360208110156108fc57600080fd5b50356138a5565b34801561090f57600080fd5b50610918613d2c565b60408051600160a060020a03808a1682528816602082015290810186905260608101859052831515608082015282151560a082015260c0810182600381111561095d57fe5b60ff16815260200197505050505050505060405180910390f35b34801561098357600080fd5b50610293613d82565b34801561099857600080fd5b50610300600480360360208110156109af57600080fd5b5035600160a060020a0316613d88565b3480156109cb57600080fd5b5061033e613dcf565b3480156109e057600080fd5b50610300600480360360a08110156109f757600080fd5b508035906020810135906040810135906060810135906080013561448d565b348015610a2257600080fd5b506102936144ce565b348015610a3757600080fd5b5061033e60048036036040811015610a4e57600080fd5b508035151590602001356144d4565b348015610a6957600080fd5b5061033e614a96565b348015610a7e57600080fd5b50610300614bf5565b60035481565b600154600160a060020a031681565b600e54600160a060020a031681565b600c54640100000000900460ff1681565b610ac4610f01565b60408051808201909152600e81526000805160206153cb833981519152602082015280821515610b755760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610b3a578181015183820152602001610b22565b50505050905090810190601f168015610b675780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50610b7f33613d88565b60408051808201909152601981527f6d73672e73656e646572206d7573742062652073656c6c657200000000000000602082015280821515610c065760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b3a578181015183820152602001610b22565b5060408051808201909152601181527f5072696365206d757374206265203e2030000000000000000000000000000000602082015260008611908082610c915760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b3a578181015183820152602001610b22565b5060008054600160a060020a03163314610cac576000610caf565b60015b90506000610ce160035483610cc657600754610cca565b6006545b84610cd757600554610cdb565b6004545b85614c03565b600054909150600160a060020a0316331415610d995760408051606081018252602381527f4d757374206265206d6f7265207468616e206c69717569646174696f6e207072602082015260e860020a626963650291810191909152818a11610d8e5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b3a578181015183820152602001610b22565b506008899055610e4a565b600154600160a060020a0316331415610e4a5760408051606081018252602381527f4d757374206265206c657373207468616e206c69717569646174696f6e207072602082015260e860020a626963650291810191909152818a10610e435760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b3a578181015183820152602001610b22565b50600a8990555b60408051338152602081018b905281517fbbee2154904c4910310beb779cb9f970f5faa539a34158662d3963477f19ce31929181900390910190a1505050505050505050565b600581565b60085481565b600c546000906301000000900460ff16151560011415610ebd57506003610efe565b600c5462010000900460ff161515610ed757506000610efe565b610edf613845565b80610eed5750610eed61214b565b15610efa57506002610efe565b5060015b90565b600c5460009062010000900460ff1615156001148015610f2b5750600c546301000000900460ff16155b905090565b600084905080600160a060020a03166380f556056040518163ffffffff1660e060020a02815260040160206040518083038186803b158015610f7157600080fd5b505afa158015610f85573d6000803e3d6000fd5b505050506040513d6020811015610f9b57600080fd5b5051600255604080517f037b9c170000000000000000000000000000000000000000000000000000000081529051600160a060020a0383169163037b9c17916004808301926020929190829003018186803b158015610ff957600080fd5b505afa15801561100d573d6000803e3d6000fd5b505050506040513d602081101561102357600080fd5b5051600355604080517f7150d8ae0000000000000000000000000000000000000000000000000000000081529051600160a060020a03831691637150d8ae916004808301926020929190829003018186803b15801561108157600080fd5b505afa158015611095573d6000803e3d6000fd5b505050506040513d60208110156110ab57600080fd5b505160008054600160a060020a031916600160a060020a03928316179055604080517f08551a530000000000000000000000000000000000000000000000000000000081529051918316916308551a5391600480820192602092909190829003018186803b15801561111c57600080fd5b505afa158015611130573d6000803e3d6000fd5b505050506040513d602081101561114657600080fd5b505160018054600160a060020a031916600160a060020a03928316179055604080517f9dec1430000000000000000000000000000000000000000000000000000000008152905191831691639dec143091600480820192602092909190829003018186803b1580156111b757600080fd5b505afa1580156111cb573d6000803e3d6000fd5b505050506040513d60208110156111e157600080fd5b5051600655604080517fc93c88d70000000000000000000000000000000000000000000000000000000081529051600160a060020a0383169163c93c88d7916004808301926020929190829003018186803b15801561123f57600080fd5b505afa158015611253573d6000803e3d6000fd5b505050506040513d602081101561126957600080fd5b50516004908155604080517f2d4dce7d0000000000000000000000000000000000000000000000000000000081529051600160a060020a03841692632d4dce7d92808201926020929091829003018186803b1580156112c757600080fd5b505afa1580156112db573d6000803e3d6000fd5b505050506040513d60208110156112f157600080fd5b5051600755604080517f6a8100b20000000000000000000000000000000000000000000000000000000081529051600160a060020a03831691636a8100b2916004808301926020929190829003018186803b15801561134f57600080fd5b505afa158015611363573d6000803e3d6000fd5b505050506040513d602081101561137957600080fd5b5051600555600d8054600160a060020a03808616600160a060020a03199283161792839055600f8054888316908416179055600e8054868316931692909217909155600c805462ff00001916620100001790556001546040805160e160020a6340f46fd102815291831660048301525192909116916381e8dfa29160248082019260009290919082900301818387803b15801561141557600080fd5b505af1158015611429573d6000803e3d6000fd5b505050505050505050565b61143c610f01565b60408051808201909152600e81526000805160206153cb8339815191526020820152808215156114b15760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b3a578181015183820152602001610b22565b5060006114bc614ca6565b90506114d38160065460075460045460055461448d565b1561154e576040805160e560020a62461bcd02815260206004820152602360248201527f4c6971756964617465207468726573686f6c64206e6f7420796574207265616360448201527f6865640000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60006115636003546006546004546001614c03565b905080821160008161158057600154600160a060020a031661158d565b600054600160a060020a03165b90506000600f60009054906101000a9004600160a060020a0316600160a060020a0316638ef855686040518163ffffffff1660e060020a02815260040160206040518083038186803b1580156115e257600080fd5b505afa1580156115f6573d6000803e3d6000fd5b505050506040513d602081101561160c57600080fd5b50516040805160e060020a6370a082310281523060048201529051600160a060020a03909216916370a0823191602480820192602092909190829003018186803b15801561165957600080fd5b505afa15801561166d573d6000803e3d6000fd5b505050506040513d602081101561168357600080fd5b505190506116918282614d40565b60408051600160a060020a03841681526020810183905281516000805160206153ab833981519152929181900390910190a1600c805463ff000000191663010000001790557faa0254c6ef7b0f13349b08e091c677fb9d83e5829f3e697eee7127c0702292b38284611704576000611706565b825b856117115783611714565b60005b60025460408051600160a060020a0390951685526020850193909352838301919091526060830152519081900360800190a150505050505050565b600654600754600854600a54600454600554909192939495565b60075481565b60408051606081018252602281527f43616e2774207769746864726177206d6f7265207468656e20617661696c616260208201527f6c6500000000000000000000000000000000000000000000000000000000000091810191909152819060018210156118215760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b3a578181015183820152602001610b22565b50600c5460408051808201909152601181527f4d75737420626520696e6974696174656400000000000000000000000000000060208201529062010000900460ff1615156001146118b75760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b3a578181015183820152602001610b22565b50600c54604080518082019091526012815260008051602061538b8339815191526020820152906301000000900460ff16156119385760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b3a578181015183820152602001610b22565b5061194233612437565b6060604051908101604052806021815260200160008051602061540b833981519152815260200160f860020a6073028152509015156119c65760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b3a578181015183820152602001610b22565b506119d033613d88565b60408051808201909152601d81526000805160206153eb83398151915260208201529015611a435760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b3a578181015183820152602001610b22565b5060008054600160a060020a031633149081611a6157600754611a65565b6006545b905080841115611b125760408051606081018252602281527f43616e2774207769746864726177206d6f7265207468656e20617661696c616260208083019182527f6c6500000000000000000000000000000000000000000000000000000000000083850152925160e560020a62461bcd02815260048101938452825160248201528251929392839260449092019190808383600083811015610b3a578181015183820152602001610b22565b8381036000611b1f614ca6565b9050611b4e8185611b3257600654611b34565b835b86611b3f5784611b43565b6007545b60045460055461448d565b1515611bbf576040805180820182526017815260008051602061536b8339815191526020808301918252925160e560020a62461bcd02815260048101938452825160248201528251929392839260449092019190808383600083811015610b3a578181015183820152602001610b22565b6000611be085611bd157600554611bd5565b6004545b836003548689614f08565b9050611bee60035482614f78565b1515611c5f576040805180820182526017815260008051602061536b8339815191526020808301918252925160e560020a62461bcd02815260048101938452825160248201528251929392839260449092019190808383600083811015610b3a578181015183820152602001610b22565b611c693388614d40565b604080513381526020810189905281516000805160206153ab833981519152929181900390910190a18415611ca2576006839055611ca8565b60078390555b60025460408051338152602081018a9052600181830152606081018690526080810192909252517fea455ea564b4652eabbfbcf652bb6439ed6f6edea8eb0525f2becb5aec40c8649181900360a00190a150505050505050565b60408051808201909152601181527f416d6f756e74206e6f7420656e6f75676800000000000000000000000000000060208201526001821015908082611d8d5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b3a578181015183820152602001610b22565b50600c5460408051808201909152601181527f4d75737420626520696e6974696174656400000000000000000000000000000060208201526201000090910460ff161515600114908082611e265760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b3a578181015183820152602001610b22565b50600c54604080518082019091526012815260008051602061538b8339815191526020820152630100000090910460ff1615908082611eaa5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b3a578181015183820152602001610b22565b50611eb433612437565b6060604051908101604052806021815260200160008051602061540b833981519152815260200160f860020a6073028152508181901515611f3a5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b3a578181015183820152602001610b22565b50611f4433613d88565b60408051808201909152601d81526000805160206153eb83398151915260208201529015908082611fba5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b3a578181015183820152602001610b22565b5060008054600160a060020a0316331490611fec8d83611fdc57600754611fe0565b6006545b9063ffffffff614fa516565b9050611ffa60035482614f78565b151561206b576040805180820182526017815260008051602061536b8339815191526020808301918252925160e560020a62461bcd02815260048101938452825160248201528251929392839260449092019190808383600083811015610b3a578181015183820152602001610b22565b6120748d614fb7565b811561208457600681905561208a565b60078190555b7fea455ea564b4652eabbfbcf652bb6439ed6f6edea8eb0525f2becb5aec40c864338e6000846002546040518086600160a060020a0316600160a060020a03168152602001858152602001841515151581526020018381526020018281526020019550505050505060405180910390a150505050505050505050505050565b600c5466010000000000009004600160a060020a031681565b600061213085858585614c03565b95945050505050565b600c5465010000000000900460ff1681565b600c54600090610100900460ff168015610f2b5750600b541580610f2b575050600b54421090565b670de0b6b3a764000081565b600c5460408051808201909152601581527f4d757374206e6f7420626520696e69746961746564000000000000000000000060208201526201000090910460ff16159080826122135760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b3a578181015183820152602001610b22565b5061221d33612437565b6060604051908101604052806021815260200160008051602061540b833981519152815260200160f860020a60730281525081819015156122a35760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b3a578181015183820152602001610b22565b50600f54604080517f8ef855680000000000000000000000000000000000000000000000000000000081529051600092600160a060020a031691638ef85568916004808301926020929190829003018186803b15801561230257600080fd5b505afa158015612316573d6000803e3d6000fd5b505050506040513d602081101561232c57600080fd5b50516040805160e060020a6370a082310281523060048201529051600160a060020a03909216916370a0823191602480820192602092909190829003018186803b15801561237957600080fd5b505afa15801561238d573d6000803e3d6000fd5b505050506040513d60208110156123a357600080fd5b505190506123b13382614d40565b604080513381526020810183905281516000805160206153ab833981519152929181900390910190a1600c805463ff00000019166301000000179055600254604080513381526020810184905280820192909252517f6407ec2a4ae9d6ab72d4d8edded079bc20dae08edf3fcedd15fa606583efd1449181900360600190a15050505050565b60008054600160a060020a03838116911614806124615750600154600160a060020a038381169116145b92915050565b600c546301000000900460ff1681565b60408051808201909152601681527f4e6f74696f6e616c2062656c6f77206d696e696d756d000000000000000000006020820152670de0b6b3a76400008310159080826125095760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b3a578181015183820152602001610b22565b50600f8054600160a060020a031916600160a060020a038c81169190911791829055604080517f8ef85568000000000000000000000000000000000000000000000000000000008152905160009390921691638ef8556891600480820192602092909190829003018186803b15801561258157600080fd5b505afa158015612595573d6000803e3d6000fd5b505050506040513d60208110156125ab57600080fd5b50516040805160e060020a6370a082310281523060048201529051600160a060020a03909216916370a0823191602480820192602092909190829003018186803b1580156125f857600080fd5b505afa15801561260c573d6000803e3d6000fd5b505050506040513d602081101561262257600080fd5b50519050600061263186615182565b90508082116126b757604080518082018252601d81527f4e6f7420656e6f7567682073656e7420746f20636f76657220666565730000006020808301918252925160e560020a62461bcd02815260048101938452825160248201528251929392839260449092019190808383600083811015610b3a578181015183820152602001610b22565b8082036126c48782614f78565b1515612735576040805180820182526017815260008051602061536b8339815191526020808301918252925160e560020a62461bcd02815260048101938452825160248201528251929392839260449092019190808383600083811015610b3a578181015183820152602001610b22565b85156127605760008054600160a060020a031916600160a060020a038c161790556006819055612781565b60018054600160a060020a031916600160a060020a038c1617905560078190555b6002899055600387905560048890556005889055600d8054600160a060020a03808f16600160a060020a031992831617909255600e80548e8416921691909117905560408051918c168252602082018b905281810189905260608201859052517f69d73ba3035242abcb4cbe9e73c2317a193d589f1ab392766a856075e4a5ea9d9181900360800190a150505050505050505050505050565b60006128298686868686614f08565b9695505050505050565b600c54604080518082019091526012815260008051602061538b8339815191526020820152630100000090910460ff16159080826128b65760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b3a578181015183820152602001610b22565b506128c033612437565b6060604051908101604052806021815260200160008051602061540b833981519152815260200160f860020a60730281525081819015156129465760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b3a578181015183820152602001610b22565b5061295085612437565b60408051808201909152601e81527f436f6e74726163742070617274792063616e27742063616c6c20746869730000602082015290159080826129d85760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b3a578181015183820152602001610b22565b506129e233613d88565b60408051808201909152601d81526000805160206153eb83398151915260208201529015908082612a585760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b3a578181015183820152602001610b22565b50600054600160a060020a0316331415612a8c5760008054600160a060020a031916600160a060020a038b16179055612b00565b600154600160a060020a0316331415612abf5760018054600160a060020a031916600160a060020a038b16179055612b00565b600c5466010000000000009004600160a060020a0316331415612b0057600c805479ffffffffffffffffffffffffffffffffffffffff000000000000191690555b600d546040805160e160020a6340f46fd1028152600160a060020a038c81166004830152915191909216916381e8dfa291602480830192600092919082900301818387803b158015612b5157600080fd5b505af1158015612b65573d6000803e3d6000fd5b505060408051338152600160a060020a038d16602082015281517fce6084c9f950738add8e5747a76463fe6d6652d782d26beabe2b69029391a5df9450908190039091019150a1505050505050505050565b60095481565b60055481565b600c5460408051808201909152601581527f4d757374206e6f7420626520696e69746961746564000000000000000000000060208201526201000090910460ff1615908082612c575760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b3a578181015183820152602001610b22565b50600c54604080518082019091526012815260008051602061538b8339815191526020820152630100000090910460ff1615908082612cdb5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b3a578181015183820152602001610b22565b50612ce533612437565b6060604051908101604052806021815260200160008051602061540b833981519152815260200160f860020a6073028152508181901515612d6b5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b3a578181015183820152602001610b22565b5060408051808201909152601181527f5072696365206d757374206265203e2030000000000000000000000000000000602082015260008811908082612df65760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b3a578181015183820152602001610b22565b506004899055600589905560408051338152602081018b905281517fe77dd1d532a40e832a7a0938f6bcc6e7724487734f75f6b1f84dfeddcc32c47c929181900390910190a1505050505050505050565b600054600160a060020a031681565b600a5481565b600061246182615182565b600f54600160a060020a031681565b600c54640100000000810460ff16916601000000000000909104600160a060020a031690565b60025481565b612eab33612437565b6060604051908101604052806021815260200160008051602061540b833981519152815260200160f860020a6073028152508181901515612f315760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b3a578181015183820152602001610b22565b50612f3a610f01565b60408051808201909152600e81526000805160206153cb833981519152602082015280821515612faf5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b3a578181015183820152602001610b22565b50612fb933613d88565b60408051808201909152601d81526000805160206153eb8339815191526020820152901590808261302f5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b3a578181015183820152602001610b22565b5060408051808201909152601181527f5072696365206d757374206265203e20300000000000000000000000000000006020820152600089119080826130ba5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b3a578181015183820152602001610b22565b5060008054600160a060020a031633146130d55760006130d8565b60015b905060006130ef60035483610cc657600754610cca565b905060006130fc8c6151a1565b600054909150600160a060020a03163314156131c65760408051606081018252602381527f4d757374206265206d6f7265207468616e206c69717569646174696f6e207072602082015260e860020a626963650291810191909152828e116131a95760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b3a578181015183820152602001610b22565b50600c805460ff1916600117905560088d9055600981905561328b565b600154600160a060020a031633141561328b5760408051606081018252602381527f4d757374206265206c657373207468616e206c69717569646174696f6e207072602082015260e860020a626963650291810191909152828e106132705760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b3a578181015183820152602001610b22565b50600c805461ff001916610100179055600a8d9055600b8190555b600d54604080517f62c597040000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a03909216916362c597049160248082019260009290919082900301818387803b1580156132f057600080fd5b505af1158015613304573d6000803e3d6000fd5b505050507fb5d6baf622d177db5af6d250d11c52507155dbc0359dd6ab5f7c65ca36c4ffc1338e836040518084600160a060020a0316600160a060020a03168152602001838152602001828152602001935050505060405180910390a150505050505050505050505050565b6000612461826151b5565b613383610f01565b60408051808201909152600e81526000805160206153cb8339815191526020820152808215156133f85760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b3a578181015183820152602001610b22565b5061340233612437565b6060604051908101604052806021815260200160008051602061540b833981519152815260200160f860020a60730281525081819015156134885760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b3a578181015183820152602001610b22565b506000613493614ca6565b60008054600454600354600654949550600160a060020a039092163314936134be9286916001614f08565b905060006134d6600554856003546007546000614f08565b905060006135ee826135e285600f60009054906101000a9004600160a060020a0316600160a060020a0316638ef855686040518163ffffffff1660e060020a02815260040160206040518083038186803b15801561353357600080fd5b505afa158015613547573d6000803e3d6000fd5b505050506040513d602081101561355d57600080fd5b50516040805160e060020a6370a082310281523060048201529051600160a060020a03909216916370a0823191602480820192602092909190829003018186803b1580156135aa57600080fd5b505afa1580156135be573d6000803e3d6000fd5b505050506040513d60208110156135d457600080fd5b50519063ffffffff6151c416565b9063ffffffff6151c416565b9050801561362a576040805182815290517fec6a0b860bf684f74dbe39a6138edd92b8c04da302be601f5a4cfea6099b31aa9181900360200190a15b613633816151d9565b600061364c856136435783613645565b845b600561526d565b9050841561367d57613664848263ffffffff6151c416565b9350613676838263ffffffff614fa516565b92506136a2565b61368d848263ffffffff614fa516565b935061369f838263ffffffff6151c416565b92505b6000546136b890600160a060020a031685614d40565b60005460408051600160a060020a0390921682526020820186905280516000805160206153ab8339815191529281900390910190a160015461370390600160a060020a031684614d40565b60015460408051600160a060020a0390921682526020820185905280516000805160206153ab8339815191529281900390910190a1600c805463ff0000001964ff00000000199091166401000000001716630100000017905584156137c85760005460015460025460408051600160a060020a03948516815260208101899052929093168284015260608201869052608082015290517f81bf0ecca77d43968d8c2687fe97a6d65b62e33063055c15042f5d5fd63abe289181900360a00190a161382a565b60015460005460025460408051600160a060020a03948516815260208101889052929093168284015260608201879052608082015290517f81bf0ecca77d43968d8c2687fe97a6d65b62e33063055c15042f5d5fd63abe289181900360a00190a15b50505050505050505050565b600d54600160a060020a031681565b600c5460009060ff168015610f2b57506009541580610f2b575050600954421090565b60006138748383615275565b9392505050565b60065481565b600c5462010000900460ff1681565b6000613874838361526d565b600c5460ff1681565b600c5460408051808201909152601581527f4d757374206e6f7420626520696e69746961746564000000000000000000000060208201526201000090910460ff16159080826139395760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b3a578181015183820152602001610b22565b50600c54604080518082019091526012815260008051602061538b8339815191526020820152630100000090910460ff16159080826139bd5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b3a578181015183820152602001610b22565b506139c733612437565b60408051808201909152601e81527f436f6e74726163742070617274792063616e27742063616c6c2074686973000060208201529015908082613a4f5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b3a578181015183820152602001610b22565b506000613a5d6003546151b5565b9050808811613ae357604080518082018252601d81527f4e6f7420656e6f7567682073656e7420746f20636f76657220666565730000006020808301918252925160e560020a62461bcd02815260048101938452825160248201528251929392839260449092019190808383600083811015610b3a578181015183820152602001610b22565b60035481890390613af49082614f78565b1515613b65576040805180820182526017815260008051602061536b8339815191526020808301918252925160e560020a62461bcd02815260048101938452825160248201528251929392839260449092019190808383600083811015610b3a578181015183820152602001610b22565b613b6e89614fb7565b613b83613b7c600354615182565b83016151d9565b600054600160a060020a03161515613bb15760008054600160a060020a031916331790556006819055613bc9565b60018054600160a060020a0319163317905560078190555b600c805462ff0000191662010000179055600d546040805160e160020a6340f46fd10281523360048201529051600160a060020a03909216916381e8dfa29160248082019260009290919082900301818387803b158015613c2957600080fd5b505af1158015613c3d573d6000803e3d6000fd5b505050507f94bdcbfe1580a4a1b6292d3543b07391ef8e107a5168feefc7412f3da94ebe31338a6000809054906101000a9004600160a060020a0316600160009054906101000a9004600160a060020a0316600254600354600454600654600754604051808a600160a060020a0316600160a060020a0316815260200189815260200188600160a060020a0316600160a060020a0316815260200187600160a060020a0316600160a060020a03168152602001868152602001858152602001848152602001838152602001828152602001995050505050505050505060405180910390a1505050505050505050565b60008054600154600254600354600c54859485948594859485948594600160a060020a03908116941692919060ff80821691610100900416613d6c610e9b565b959d949c50929a50909850965094509092509050565b60045481565b60008054600160a060020a038381169116148015613da95750613da9613845565b806124615750600154600160a060020a038381169116148015612461575061246161214b565b613dd833612437565b6060604051908101604052806021815260200160008051602061540b833981519152815260200160f860020a6073028152508181901515613e5e5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b3a578181015183820152602001610b22565b50613e67610f01565b60408051808201909152600e81526000805160206153cb833981519152602082015280821515613edc5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b3a578181015183820152602001610b22565b50613ee633613d88565b60408051808201909152601d81526000805160206153eb83398151915260208201529015908082613f5c5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b3a578181015183820152602001610b22565b50600c5460408051808201909152601981527f6d73672e73656e64657220616c72656164792063616c6c65640000000000000060208201526601000000000000909104600160a060020a0316331415908082613ffd5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b3a578181015183820152602001610b22565b50600f60009054906101000a9004600160a060020a0316600160a060020a03166323ec7f2a6040518163ffffffff1660e060020a02815260040160206040518083038186803b15801561404f57600080fd5b505afa158015614063573d6000803e3d6000fd5b505050506040513d602081101561407957600080fd5b5051600f54604080517f0c5a95f80000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a039384169390921691630c5a95f891602480820192602092909190829003018186803b1580156140e357600080fd5b505afa1580156140f7573d6000803e3d6000fd5b505050506040513d602081101561410d57600080fd5b505160408051808201909152601981527f416c7265616479206174206c61746573742076657273696f6e000000000000006020820152600160a060020a0390911691909114159080826141a55760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b3a578181015183820152602001610b22565b50600c5466010000000000009004600160a060020a031615156141f557600c805479ffffffffffffffffffffffffffffffffffffffff00000000000019163366010000000000000217905561382a565b600c805465ff0000000000191665010000000000179055600f54604080517f23ec7f2a0000000000000000000000000000000000000000000000000000000081529051600092600160a060020a0316916323ec7f2a916004808301926020929190829003018186803b15801561426a57600080fd5b505afa15801561427e573d6000803e3d6000fd5b505050506040513d602081101561429457600080fd5b5051604080517f165ae0fc0000000000000000000000000000000000000000000000000000000081529051919250600091600160a060020a0384169163165ae0fc91600480830192602092919082900301818787803b1580156142f657600080fd5b505af115801561430a573d6000803e3d6000fd5b505050506040513d602081101561432057600080fd5b5051600f54604080517f8ef85568000000000000000000000000000000000000000000000000000000008152905192935061442e928492600160a060020a031691638ef85568916004808301926020929190829003018186803b15801561438657600080fd5b505afa15801561439a573d6000803e3d6000fd5b505050506040513d60208110156143b057600080fd5b50516040805160e060020a6370a082310281523060048201529051600160a060020a03909216916370a0823191602480820192602092909190829003018186803b1580156143fd57600080fd5b505afa158015614411573d6000803e3d6000fd5b505050506040513d602081101561442757600080fd5b5051614d40565b600c805465ff00ff0000001916630100000017905560408051600160a060020a038316815290517fbf44b7c20b944f553303a3ec7caff0a29f0378e297b7d9dc5b1267d359b7ea6c9181900360200190a1505050505050505050505050565b60008061449f60035487866001614c03565b905060006144b260035487866000614c03565b905081881180156144c257508088105b98975050505050505050565b600b5481565b816144dd610f01565b60408051808201909152600e81526000805160206153cb83398151915260208201529015156145515760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b3a578181015183820152602001610b22565b5061457d8161456b57600154600160a060020a0316614578565b600054600160a060020a03165b613d88565b60408051808201909152600f81527f4d757374206265206f6e2073616c65000000000000000000000000000000000060208201529015156146035760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b3a578181015183820152602001610b22565b5061460d33612437565b60408051808201909152601e81527f436f6e74726163742070617274792063616e27742063616c6c20746869730000602082015290156146925760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b3a578181015183820152602001610b22565b5060006146a06003546151b5565b905080831161472657604080518082018252601d81527f4e6f7420656e6f7567682073656e7420746f20636f76657220666565730000006020808301918252925160e560020a62461bcd02815260048101938452825160248201528251929392839260449092019190808383600083811015610b3a578181015183820152602001610b22565b6000614738848363ffffffff6151c416565b905061474660035482614f78565b15156147b7576040805180820182526017815260008051602061536b8339815191526020808301918252925160e560020a62461bcd02815260048101938452825160248201528251929392839260449092019190808383600083811015610b3a578181015183820152602001610b22565b60006147c1614ca6565b90506000866147d257600a546147d6565b6008545b905061481d82886147e9576006546147eb565b845b896147f657856147fa565b6007545b8a61480757600454614809565b845b8b6148145785614818565b6005545b61448d565b151561488e576040805180820182526017815260008051602061536b8339815191526020808301918252925160e560020a62461bcd02815260048101938452825160248201528251929392839260449092019190808383600083811015610b3a578181015183820152602001610b22565b61489786614fb7565b6148a0846151d9565b6000876148b857600154600160a060020a03166148c5565b600054600160a060020a03165b905060006148d389836152ae565b9050600061492c86600f60009054906101000a9004600160a060020a0316600160a060020a0316638ef855686040518163ffffffff1660e060020a02815260040160206040518083038186803b15801561353357600080fd5b9050891561495a5760008054600160a060020a0319163317905560068690556004849055600781905561497c565b60018054600160a060020a031916331790556007869055600584905560068190555b6149858a615333565b600c54600160a060020a0384811666010000000000009092041614156149c957600c805479ffffffffffffffffffffffffffffffffffffffff000000000000191690555b600d546040805160e160020a6340f46fd10281523360048201529051600160a060020a03909216916381e8dfa29160248082019260009290919082900301818387803b158015614a1857600080fd5b505af1158015614a2c573d6000803e3d6000fd5b505060025460408051338152600160a060020a0388166020820152808201879052606081018e90526080810192909252517feb6b52de9952e41588ee27d1ad74bfa34d67974e3f1044262043ae7deab0132b93509081900360a0019150a150505050505050505050565b614a9e610f01565b60408051808201909152600e81526000805160206153cb833981519152602082015280821515614b135760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b3a578181015183820152602001610b22565b50614b1d33613d88565b60408051808201909152601981527f6d73672e73656e646572206d7573742062652073656c6c657200000000000000602082015280821515614ba45760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b3a578181015183820152602001610b22565b50600054614bbc90600160a060020a03163314615333565b6040805133815290517f82229214624615d3bbec967c7100737095261ce7b7cf043d442f92d635b737619181900360200190a150505050565b600c54610100900460ff1681565b60008082614c1a5768052663ccab1e1c0000614c25565b6805b12aefafa80400005b9050600068056bc75e2d63100000858302049050600068056bc75e2d631000008868056bc75e2d6310000088028902811515614c5d57fe5b04811515614c6757fe5b049050848015614c7657508181115b15614c875760009350505050614c9e565b84614c9457808201614c98565b8082035b93505050505b949350505050565b600e54600254604080517f61da1439000000000000000000000000000000000000000000000000000000008152600481019290925280516000938493600160a060020a03909116926361da143992602480840193829003018186803b158015614d0e57600080fd5b505afa158015614d22573d6000803e3d6000fd5b505050506040513d6040811015614d3857600080fd5b505191505090565b600f60009054906101000a9004600160a060020a0316600160a060020a0316638ef855686040518163ffffffff1660e060020a02815260040160206040518083038186803b158015614d9157600080fd5b505afa158015614da5573d6000803e3d6000fd5b505050506040513d6020811015614dbb57600080fd5b5051604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a038581166004830152602482018590529151919092169163a9059cbb9160448083019260209291908290030181600087803b158015614e2957600080fd5b505af1158015614e3d573d6000803e3d6000fd5b505050506040513d6020811015614e5357600080fd5b505160408051606081018252602b81527f4661696c757265207472616e73666572696e67206f776e657273686970206f6660208201527f2044414920746f6b656e7300000000000000000000000000000000000000000091810191909152901515614f035760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b3a578181015183820152602001610b22565b505050565b600068056bc75e2d6310000084810290879087908690859080858086038202811515614f3057fe5b058702811515614f3c57fe5b05811515614f4657fe5b059050600087614f5857818303614f5c565b8183015b90506000811215614f6957fe5b9b9a5050505050505050505050565b6000614f8583601461526d565b82101580156138745750614f9b836101f461526d565b8211159392505050565b60008282018381101561387457600080fd5b600f60009054906101000a9004600160a060020a0316600160a060020a0316638ef855686040518163ffffffff1660e060020a02815260040160206040518083038186803b15801561500857600080fd5b505afa15801561501c573d6000803e3d6000fd5b505050506040513d602081101561503257600080fd5b5051604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018490529051600160a060020a03909216916323b872dd916064808201926020929091908290030181600087803b1580156150a457600080fd5b505af11580156150b8573d6000803e3d6000fd5b505050506040513d60208110156150ce57600080fd5b505160408051606081018252602b81527f4661696c757265207472616e73666572696e67206f776e657273686970206f6660208201527f2044414920746f6b656e730000000000000000000000000000000000000000009181019190915290151561517e5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b3a578181015183820152602001610b22565b5050565b6000600a61519183600361526d565b81151561519a57fe5b0492915050565b60004282116151b1576000612461565b5090565b6000600a61519183600561526d565b6000828211156151d357600080fd5b50900390565b600f54604080517fdb8d55f1000000000000000000000000000000000000000000000000000000008152905161526a92600160a060020a03169163db8d55f1916004808301926020929190829003018186803b15801561523857600080fd5b505afa15801561524c573d6000803e3d6000fd5b505050506040513d602081101561526257600080fd5b505182614d40565b50565b606491020490565b60008183141561528757506000612461565b8282036000846064830281151561529a57fe5b05905060008113614c9e5780600003612130565b60006152ef836152c0576005546152c4565b6004545b846152d157600a546152d5565b6008545b600354866152e5576007546152e9565b6006545b87614f08565b90506152fb8282614d40565b60408051600160a060020a03841681526020810183905281516000805160206153ab833981519152929181900390910190a192915050565b80156153525760006008819055600955600c805460ff1916905561526a565b6000600a819055600b55600c805461ff00191690555056fe636f6c6c61746572616c496e52616e67652066616c73650000000000000000004d757374206e6f7420626520636c6f7365640000000000000000000000000000ae0c91484288809ae2c2fb81551bd9d06d4d3bcbbce87f3c5a3d5775f299358b4d757374206265206163746976650000000000000000000000000000000000006d73672e73656e646572206d757374206e6f742062652073656c6c65720000004f6e6c7920636f6e747261637420706172746965732063616e20646f20746869a165627a7a72305820eaff8353a4f7ccc75c94066d2ab85bdd959d4c314338b6d9fdadc73f0b48026b0029",
  "sourceMap": "626:39613:5:-;;;4938:29;;;5340:43;;;;5521:23;5:2:-1;;;;30:1;27;20:12;5:2;5521:23:5;626:39613;;;;;;",
  "deployedSourceMap": "626:39613:5:-;;;;;;;;;-1:-1:-1;;;626:39613:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4379:29;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4379:29:5;;;;;;;;;;;;;;;;;;;;4290:21;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4290:21:5;;;;;;;;-1:-1:-1;;;;;4290:21:5;;;;;;;;;;;;;;5426:24;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5426:24:5;;;;5005:22;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5005:22:5;;;;;;;;;;;;;;;;;;;;;;21056:1152;;8:9:-1;5:2;;;30:1;27;20:12;5:2;21056:1152:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;21056:1152:5;;;;;4047:56;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4047:56:5;;;;4724:32;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4724:32:5;;;;33317:354;;8:9:-1;5:2;;;30:1;27;20:12;5:2;33317:354:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5688:107;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5688:107:5;;;;9721:894;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9721:894:5;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;;;;;;9721:894:5;;;;;;;;;;;;;;;;;;;;;;;;;27699:1419;;8:9:-1;5:2;;;30:1;27;20:12;5:2;27699:1419:5;;;;11139:359;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11139:359:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4685:32;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4685:32:5;;;;15679:1741;;8:9:-1;5:2;;;30:1;27;20:12;5:2;15679:1741:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;15679:1741:5;;;14333:1064;;8:9:-1;5:2;;;30:1;27;20:12;5:2;14333:1064:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;14333:1064:5;;;5340:43;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5340:43:5;;;;37074:403;;8:9:-1;5:2;;;30:1;27;20:12;5:2;37074:403:5;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;37074:403:5;;;;;;;;;;;;;;;;;;;;5180:31;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5180:31:5;;;;6186:162;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6186:162:5;;;;4109:59;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4109:59:5;;;;13723:452;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13723:452:5;;;;6867:127;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6867:127:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;6867:127:5;-1:-1:-1;;;;;6867:127:5;;;4973:26;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4973:26:5;;;;7846:1484;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7846:1484:5;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;;;;;;7846:1484:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;36022:470;;8:9:-1;5:2;;;30:1;27;20:12;5:2;36022:470:5;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;36022:470:5;;;;;;;;;;;;;;;;;;;;;;;;;18117:708;;8:9:-1;5:2;;;30:1;27;20:12;5:2;18117:708:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;18117:708:5;-1:-1:-1;;;;;18117:708:5;;;4762:30;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4762:30:5;;;;4531:36;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4531:36:5;;;;22307:535;;8:9:-1;5:2;;;30:1;27;20:12;5:2;22307:535:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;22307:535:5;;;4230:20;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4230:20:5;;;;4799:33;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4799:33:5;;;;37538:140;;8:9:-1;5:2;;;30:1;27;20:12;5:2;37538:140:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;37538:140:5;;;5457:24;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5457:24:5;;;;11503:180;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11503:180:5;;;;;;;;;;;;;-1:-1:-1;;;;;11503:180:5;;;;;;;;;;;;;;;;4351:21;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4351:21:5;;;;19232:1749;;8:9:-1;5:2;;;30:1;27;20:12;5:2;19232:1749:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;19232:1749:5;;;;;;;;37766:138;;8:9:-1;5:2;;;30:1;27;20:12;5:2;37766:138:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;37766:138:5;;;29282:2446;;8:9:-1;5:2;;;30:1;27;20:12;5:2;29282:2446:5;;;;5390:30;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5390:30:5;;;;5910:158;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5910:158:5;;;;38211:203;;8:9:-1;5:2;;;30:1;27;20:12;5:2;38211:203:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;38211:203:5;;;;;;;;4648:31;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4648:31:5;;;;4938:29;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4938:29:5;;;;38595:197;;8:9:-1;5:2;;;30:1;27;20:12;5:2;38595:197:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;38595:197:5;;;;;;;;4876:24;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4876:24:5;;;;11944:1524;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11944:1524:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;11944:1524:5;;;10805:329;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10805:329:5;;;;;;;;-1:-1:-1;;;;;10805:329:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4490:35;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4490:35:5;;;;6488:178;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6488:178:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;6488:178:5;-1:-1:-1;;;;;6488:178:5;;;32106:1085;;8:9:-1;5:2;;;30:1;27;20:12;5:2;32106:1085:5;;;;34702:734;;8:9:-1;5:2;;;30:1;27;20:12;5:2;34702:734:5;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;34702:734:5;;;;;;;;;;;;;;;;;;;;;;;4838:31;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4838:31:5;;;;23419:2465;;8:9:-1;5:2;;;30:1;27;20:12;5:2;23419:2465:5;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;23419:2465:5;;;;;;;;;;22926:251;;8:9:-1;5:2;;;30:1;27;20:12;5:2;22926:251:5;;;;4906:25;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4906:25:5;;;;4379:29;;;;:::o;4290:21::-;;;-1:-1:-1;;;;;4290:21:5;;:::o;5426:24::-;;;-1:-1:-1;;;;;5426:24:5;;:::o;5005:22::-;;;;;;;;;:::o;21056:1152::-;21140:10;:8;:10::i;:::-;21152:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;21152:21:5;;;;;285:26:0;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21192:21:5;21202:10;21192:9;:21::i;:::-;21215;;;;;;;;;;;;;;;;;;285:26:0;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;21270:29:5;;;;;;;;;;;;;;;;;21267:1;21255:13;;;21270:29;21255:13;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;21349:12:5;21379:5;;-1:-1:-1;;;;;21379:5:5;21365:10;:19;21364:36;;21395:5;21364:36;;;21388:4;21364:36;21349:51;;21410:11;21424:246;21478:17;;21510:7;21509:54;;21543:20;;21509:54;;;21521:19;;21509:54;21578:7;21577:62;;21615:24;;21577:62;;;21589:23;;21577:62;21653:7;21424:40;:246::i;:::-;21699:5;;21410:260;;-1:-1:-1;;;;;;21699:5:5;21685:10;:19;21681:466;;;21817:31;;;;;;;;;;;;;;;;-1:-1:-1;;;;;21817:31:5;;;;;;;21797:18;;;21789:60;;;;-1:-1:-1;;;;;21789:60:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;21789:60:5;-1:-1:-1;21863:20:5;:32;;;21681:466;;;21930:6;;-1:-1:-1;;;;;21930:6:5;21916:10;:20;21912:235;;;22057:31;;;;;;;;;;;;;;;;-1:-1:-1;;;;;22057:31:5;;;;;;;22037:18;;;22029:60;;;;-1:-1:-1;;;;;22029:60:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;22029:60:5;-1:-1:-1;22103:21:5;:33;;;21912:235;22161:40;;;22179:10;22161:40;;;;;;;;;;;;;;;;;;;;;321:1:0;;;;;;21056:1152:5;;;:::o;4047:56::-;4102:1;4047:56;:::o;4724:32::-;;;;:::o;33317:354::-;33406:6;;33380;;33406;;;;;:14;;33416:4;33406:14;33402:262;;;-1:-1:-1;33441:13:5;33434:20;;33402:262;33473:9;;;;;;;:18;;33469:195;;-1:-1:-1;33512:14:5;33505:21;;33469:195;33545:16;:14;:16::i;:::-;:37;;;;33565:17;:15;:17::i;:::-;33541:123;;;-1:-1:-1;33603:11:5;33596:18;;33541:123;-1:-1:-1;33648:16:5;33541:123;33317:354;:::o;5688:107::-;5752:9;;5729:4;;5752:9;;;;;:17;;5765:4;5752:17;:36;;;;-1:-1:-1;5773:6:5;;;;;;;:15;5752:36;5745:43;;5688:107;:::o;9721:894::-;9900:28;9953:8;9900:62;;9982:6;-1:-1:-1;;;;;9982:13:5;;:15;;;;;-1:-1:-1;;;9982:15:5;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9982:15:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;9982:15:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;9982:15:5;9973:6;:24;10027:26;;;;;;;;-1:-1:-1;;;;;10027:24:5;;;;;:26;;;;;9982:15;;10027:26;;;;;;;:24;:26;;;5:2:-1;;;;30:1;27;20:12;5:2;10027:26:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10027:26:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10027:26:5;10007:17;:46;10071:14;;;;;;;;-1:-1:-1;;;;;10071:12:5;;;;;:14;;;;;10027:26;;10071:14;;;;;;;:12;:14;;;5:2:-1;;;;30:1;27;20:12;5:2;10071:14:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10071:14:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10071:14:5;10063:5;:22;;-1:-1:-1;;;;;;10063:22:5;-1:-1:-1;;;;;10063:22:5;;;;;;10104:15;;;;;;;;:13;;;;;;:15;;;;;10071:14;;10104:15;;;;;;;;:13;:15;;;5:2:-1;;;;30:1;27;20:12;5:2;10104:15:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10104:15:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10104:15:5;10095:6;:24;;-1:-1:-1;;;;;;10095:24:5;-1:-1:-1;;;;;10095:24:5;;;;;;10152:28;;;;;;;;:26;;;;;;:28;;;;;10104:15;;10152:28;;;;;;;;:26;:28;;;5:2:-1;;;;30:1;27;20:12;5:2;10152:28:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10152:28:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10152:28:5;10130:19;:50;10216:32;;;;;;;;-1:-1:-1;;;;;10216:30:5;;;;;:32;;;;;10152:28;;10216:32;;;;;;;:30;:32;;;5:2:-1;;;;30:1;27;20:12;5:2;10216:32:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10216:32:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10216:32:5;10190:23;:58;;;10282:29;;;;;;;;-1:-1:-1;;;;;10282:27:5;;;;;:29;;;;10216:32;;10282:29;;;;;;;:27;:29;;;5:2:-1;;;;30:1;27;20:12;5:2;10282:29:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10282:29:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10282:29:5;10259:20;:52;10348:33;;;;;;;;-1:-1:-1;;;;;10348:31:5;;;;;:33;;;;;10282:29;;10348:33;;;;;;;:31;:33;;;5:2:-1;;;;30:1;27;20:12;5:2;10348:33:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10348:33:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10348:33:5;10321:24;:60;10392:15;:34;;-1:-1:-1;;;;;10392:34:5;;;-1:-1:-1;;;;;;10392:34:5;;;;;;;;10436:8;:34;;;;;;;;;;;10480:9;:22;;;;;;;;;;;;;;10513:9;:16;;-1:-1:-1;;10513:16:5;;;;;10392:34;10601:6;10540:68;;;-1:-1:-1;;;;;10540:68:5;;10601:6;;;10540:68;;;;;10570:15;;;;;10540:60;;:68;;;;;10392:15;;10540:68;;;;;;;;10392:15;10570;10540:68;;;5:2:-1;;;;30:1;27;20:12;5:2;10540:68:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10540:68:5;;;;9721:894;;;;;:::o;27699:1419::-;27754:10;:8;:10::i;:::-;27766:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;27766:21:5;;;;;285:26:0;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;27803:16:5;27822:13;:11;:13::i;:::-;27803:32;;27993:219;28029:11;28058:19;;28095:20;;28133:23;;28174:24;;27993:18;:219::i;:::-;27992:220;27971:303;;;;;-1:-1:-1;;;;;27971:303:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;28354:16;28373:169;28427:17;;28458:19;;28491:23;;28528:4;28373:40;:169::i;:::-;28354:188;-1:-1:-1;28650:25:5;;;28629:18;28650:25;28702:30;;28726:6;;-1:-1:-1;;;;;28726:6:5;28702:30;;;28718:5;;-1:-1:-1;;;;;28718:5:5;28702:30;28685:47;;28771:14;28788:8;;;;;;;;;-1:-1:-1;;;;;28788:8:5;-1:-1:-1;;;;;28788:15:5;;:17;;;;;-1:-1:-1;;;28788:17:5;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;28788:17:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;28788:17:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;28788:17:5;:42;;;-1:-1:-1;;;;;28788:42:5;;28824:4;28788:42;;;;;;-1:-1:-1;;;;;28788:27:5;;;;;;:42;;;;;:17;;:42;;;;;;;;:27;:42;;;5:2:-1;;;;30:1;27;20:12;5:2;28788:42:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;28788:42:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;28788:42:5;;-1:-1:-1;28840:30:5;28852:6;28788:42;28840:11;:30::i;:::-;28885:38;;;-1:-1:-1;;;;;28885:38:5;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;28885:38:5;;;;;;;;;;28934:6;:13;;-1:-1:-1;;28934:13:5;;;;;28963:148;28989:6;29009:13;:29;;29037:1;29009:29;;;29025:9;29009:29;29052:13;:29;;29072:9;29052:29;;;29068:1;29052:29;29095:6;;28963:148;;;-1:-1:-1;;;;;28963:148:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;321:1:0;;;;;27699:1419:5;;:::o;11139:359::-;11284:19;;11317:20;;11351;;11385:21;;11420:23;;11457:24;;11139:359;;;;;;:::o;4685:32::-;;;;:::o;15679:1741::-;17602:26;;;;;;;;;;;;;;;;;;;;;;;;15766:15;;17599:1;17580:20;;;17572:57;;;;-1:-1:-1;;;;;17572:57:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;17572:57:5;-1:-1:-1;17647:9:5;;17666:24;;;;;;;;;;;;;;;;;;17647:9;;;;;:17;;17660:4;17647:17;17639:52;;;;-1:-1:-1;;;;;17639:52:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;17639:52:5;-1:-1:-1;17709:6:5;;17726:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;17726:25:5;;;;;17709:6;;;;;:15;17701:51;;;;-1:-1:-1;;;;;17701:51:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;17701:51:5;;17770:27;17786:10;17770:15;:27::i;:::-;17799:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;17799:28:5;;;;-1:-1:-1;;;;;17799:28:5;;;17762:66;;;;;;;-1:-1:-1;;;;;17762:66:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;17762:66:5;;17846:21;17856:10;17846:9;:21::i;:::-;17878:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;17878:25:5;;;;;17846:30;17838:66;;;;-1:-1:-1;;;;;17838:66:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;17838:66:5;-1:-1:-1;15797:12:5;15826:5;;-1:-1:-1;;;;;15826:5:5;15812:10;:19;;;15866:52;;15898:20;;15866:52;;;15876:19;;15866:52;15841:77;;16021:17;16003:15;:35;15999:87;;;16059:26;;;;;;;;;;;;;;;;;;;;;;;;16052:34;;-1:-1:-1;;;;;16052:34:5;;;;;;;;;;;;;;;;16059:26;;16052:34;;;;;;;;16059:26;16052:34;;16059:26;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;15999:87:5;16218:35;;;16197:18;16282:13;:11;:13::i;:::-;16263:32;;16310:247;16342:11;16367:7;:45;;16393:19;;16367:45;;;16377:13;16367:45;16426:7;:46;;16459:13;16426:46;;;16436:20;;16426:46;16486:23;;16523:24;;16310:18;:247::i;:::-;16309:248;16305:319;;;16580:32;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;16580:32:5;;;;;;;16573:40;;-1:-1:-1;;;;;16573:40:5;;;;;;;;;;;;;;;;16580:32;;16573:40;;;;;;;;16580:32;16573:40;;16580:32;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;16305:319:5;16634:15;16652:242;16720:7;:60;;16756:24;;16720:60;;;16730:23;;16720:60;16794:11;16819:17;;16850:13;16877:7;16652:54;:242::i;:::-;16634:260;;16910:77;16957:17;;16976:10;16910:46;:77::i;:::-;16909:78;16905:147;;;17010:30;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;17010:30:5;;;;;;;17003:38;;-1:-1:-1;;;;;17003:38:5;;;;;;;;;;;;;;;;17010:30;;17003:38;;;;;;;;17010:30;17003:38;;17010:30;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;16905:147:5;17062:40;17074:10;17086:15;17062:11;:40::i;:::-;17117:48;;;17137:10;17117:48;;;;;;;;;;-1:-1:-1;;;;;;;;;;;17117:48:5;;;;;;;;;;17180:7;17176:140;;;17203:19;:35;;;17176:140;;;17269:20;:36;;;17176:140;17406:6;;17331:82;;;17356:10;17331:82;;;;;;;;17385:4;17331:82;;;;;;;;;;;;;;;;;;;;;;;;;;;17914:1;;;;;15679:1741;;:::o;14333:1064::-;14408:24;;;;;;;;;;;;;;;;;14405:1;14395:11;;;;14408:24;14395:11;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;14451:9:5;;14470:24;;;;;;;;;;;;;;;;;14451:9;;;;;;:17;;14464:4;14451:17;;14470:24;14451:17;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;14513:6:5;;14530:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;14530:25:5;;;;14513:6;;;;;;:15;;14530:25;14513:15;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;14574:27:5;14590:10;14574:15;:27::i;:::-;14603:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;14603:28:5;;;;-1:-1:-1;;;;;14603:28:5;;;293:9:0;304:6;285:26;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;14650:21:5;14660:10;14650:9;:21::i;:::-;14682:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;14682:25:5;;;;14650:30;;;14682:25;14650:30;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;14723:12:5;14752:5;;-1:-1:-1;;;;;14752:5:5;14738:10;:19;;14792:101;14886:6;14738:19;14793:78;;14851:20;;14793:78;;;14816:19;;14793:78;14792:93;:101;:93;:101;:::i;:::-;14767:126;;14975:84;15022:17;;15041;14975:46;:84::i;:::-;14974:85;14970:141;;;15080:30;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;15080:30:5;;;;;;;15073:38;;-1:-1:-1;;;;;15073:38:5;;;;;;;;;;;;;;;;15080:30;;15073:38;;;;;;;;15080:30;15073:38;;15080:30;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;14970:141:5;15122:16;15131:6;15122:8;:16::i;:::-;15153:7;15149:148;;;15176:19;:39;;;15149:148;;;15246:20;:40;;;15149:148;15312:78;15337:10;15349:6;15357:5;15364:17;15383:6;;15312:78;;;;-1:-1:-1;;;;;15312:78:5;-1:-1:-1;;;;;15312:78:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;321:1:0;;;;;;;;;;14333:1064:5;;;:::o;5340:43::-;;;;;;-1:-1:-1;;;;;5340:43:5;;:::o;37074:403::-;37268:10;37302:168;37356:18;37388:15;37417:12;37443:17;37302:40;:168::i;:::-;37294:176;37074:403;-1:-1:-1;;;;;37074:403:5:o;5180:31::-;;;;;;;;;:::o;6186:162::-;6257:13;;6234:4;;6257:13;;;;;:84;;;;-1:-1:-1;6287:19:5;;:24;;:53;;-1:-1:-1;;6321:19:5;;6315:3;:25;;6186:162::o;4109:59::-;4160:8;4109:59;:::o;13723:452::-;13778:9;;13798:28;;;;;;;;;;;;;;;;;13778:9;;;;;;:18;;13798:28;13778:18;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;13845:27:5;13861:10;13845:15;:27::i;:::-;13874:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;13874:28:5;;;;-1:-1:-1;;;;;13874:28:5;;;293:9:0;304:6;285:26;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;13936:8:5;;:17;;;;;;;;13918:15;;-1:-1:-1;;;;;13936:8:5;;:15;;:17;;;;;;;;;;;;;;:8;:17;;;5:2:-1;;;;30:1;27;20:12;5:2;13936:17:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;13936:17:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;13936:17:5;:42;;;-1:-1:-1;;;;;13936:42:5;;13972:4;13936:42;;;;;;-1:-1:-1;;;;;13936:27:5;;;;;;:42;;;;;:17;;:42;;;;;;;;:27;:42;;;5:2:-1;;;;30:1;27;20:12;5:2;13936:42:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;13936:42:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;13936:42:5;;-1:-1:-1;13988:35:5;14000:10;13936:42;13988:11;:35::i;:::-;14038:43;;;14058:10;14038:43;;;;;;;;;;-1:-1:-1;;;;;;;;;;;14038:43:5;;;;;;;;;;14091:6;:13;;-1:-1:-1;;14091:13:5;;;;;14161:6;;14119:49;;;14137:10;14119:49;;;;;;;;;;;;;;;;;;;;;;;;;321:1:0;;;13723:452:5;;:::o;6867:127::-;6929:4;6962:5;;-1:-1:-1;;;;;6952:15:5;;;6962:5;;6952:15;;:35;;-1:-1:-1;6981:6:5;;-1:-1:-1;;;;;6971:16:5;;;6981:6;;6971:16;6952:35;6945:42;6867:127;-1:-1:-1;;6867:127:5:o;4973:26::-;;;;;;;;;:::o;7846:1484::-;8216:23;;;;;;;;;;;;;;;;;4160:8;8165:49;;;;8216:23;8165:49;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;8255:8:5;:34;;-1:-1:-1;;;;;;8255:34:5;-1:-1:-1;;;;;8255:34:5;;;;;;;;;;;8317:17;;;;;;;;-1:-1:-1;;8317:8:5;;;;:15;;:17;;;;;;;;;;;;;;;:8;:17;;;5:2:-1;;;;30:1;27;20:12;5:2;8317:17:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8317:17:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;8317:17:5;:42;;;-1:-1:-1;;;;;8317:42:5;;8353:4;8317:42;;;;;;-1:-1:-1;;;;;8317:27:5;;;;;;:42;;;;;:17;;:42;;;;;;;;:27;:42;;;5:2:-1;;;;30:1;27;20:12;5:2;8317:42:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8317:42:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;8317:42:5;;-1:-1:-1;8369:9:5;8381:59;8421:18;8381:39;:59::i;:::-;8369:71;-1:-1:-1;8454:18:5;;;8450:66;;8493:22;;;;;;;;;;;;;;;;;;;8486:30;;-1:-1:-1;;;;;8486:30:5;;;;;;;;;;;;;;;;8493:22;;8486:30;;;;;;;;8493:22;8486:30;;8493:22;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;8450:66:5;8549:17;;;8581:82;8628:18;8549:17;8581:46;:82::i;:::-;8580:83;8576:139;;;8684:30;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;8684:30:5;;;;;;;8677:38;;-1:-1:-1;;;;;8677:38:5;;;;;;;;;;;;;;;;8684:30;;8677:38;;;;;;;;8684:30;8677:38;;8684:30;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;8576:139:5;8730:8;8726:208;;;8754:5;:18;;-1:-1:-1;;;;;;8754:18:5;-1:-1:-1;;;;;8754:18:5;;;;;8786:19;:36;;;8726:208;;;8853:6;:19;;-1:-1:-1;;;;;;8853:19:5;-1:-1:-1;;;;;8853:19:5;;;;;8886:20;:37;;;8726:208;8944:6;:18;;;8972:17;:38;;;9021:23;:38;;;9069:24;:39;;;9119:15;:34;;-1:-1:-1;;;;;9119:34:5;;;-1:-1:-1;;;;;;9119:34:5;;;;;;;9163:9;:22;;;;;;;;;;;;;9201:122;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;321:1:0;;;7846:1484:5;;;;;;;;;;:::o;36022:470::-;36245:15;36289:196;36357:12;36383;36409:15;36438;36467:8;36289:54;:196::i;:::-;36276:209;36022:470;-1:-1:-1;;;;;;36022:470:5:o;18117:708::-;18198:6;;18215:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;18215:25:5;;;;18198:6;;;;;;:15;;18215:25;18198:15;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;18259:27:5;18275:10;18259:15;:27::i;:::-;18288:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;18288:28:5;;;;-1:-1:-1;;;;;18288:28:5;;;293:9:0;304:6;285:26;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;18335:28:5;18351:11;18335:15;:28::i;:::-;18374:24;;;;;;;;;;;;;;;;;18335:37;;;18374:24;18335:37;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;18417:21:5;18427:10;18417:9;:21::i;:::-;18449:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;18449:25:5;;;;18417:30;;;18449:25;18417:30;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;18508:5:5;;-1:-1:-1;;;;;18508:5:5;18494:10;:19;18490:183;;;18515:5;:19;;-1:-1:-1;;;;;;18515:19:5;-1:-1:-1;;;;;18515:19:5;;;;;18490:183;;;18567:6;;-1:-1:-1;;;;;18567:6:5;18553:10;:20;18549:124;;;18575:6;:20;;-1:-1:-1;;;;;;18575:20:5;-1:-1:-1;;;;;18575:20:5;;;;;18549:124;;;18628:15;;;;;-1:-1:-1;;;;;18628:15:5;18614:10;:29;18610:63;;;18645:15;:28;;-1:-1:-1;;18645:28:5;;;18610:63;18713:15;;18683:73;;;-1:-1:-1;;;;;18683:73:5;;-1:-1:-1;;;;;18683:73:5;;;;;;;;;18713:15;;;;;18683:60;;:73;;;;;18713:15;;18683:73;;;;;;;18713:15;;18683:73;;;5:2:-1;;;;30:1;27;20:12;5:2;18683:73:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;18771:47:5;;;18794:10;18771:47;;-1:-1:-1;;;;;18771:47:5;;;;;;;;;;-1:-1:-1;18771:47:5;;;;;;;;-1:-1:-1;18771:47:5;321:1:0;;;;;;18117:708:5;;;:::o;4762:30::-;;;;:::o;4531:36::-;;;;:::o;22307:535::-;22404:9;;22424:28;;;;;;;;;;;;;;;;;22404:9;;;;;;:18;;22424:28;22404:18;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;22471:6:5;;22488:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;22488:25:5;;;;22471:6;;;;;;:15;;22488:25;22471:15;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;22532:27:5;22548:10;22532:15;:27::i;:::-;22561:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;22561:28:5;;;;-1:-1:-1;;;;;22561:28:5;;;293:9:0;304:6;285:26;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;22629:29:5;;;;;;;;;;;;;;;;;22626:1;22608:19;;;22629:29;22608:19;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;22674:23:5;:41;;;22725:24;:42;;;22782:53;;;22807:10;22782:53;;;;;;;;;;;;;;;;;;;;;321:1:0;;;;;;22307:535:5;;;:::o;4230:20::-;;;-1:-1:-1;;;;;4230:20:5;;:::o;4799:33::-;;;;:::o;37538:140::-;37595:8;37621:50;37661:9;37621:39;:50::i;5457:24::-;;;-1:-1:-1;;;;;5457:24:5;;:::o;11503:180::-;11627:10;;;;;;;;11651:15;;;;-1:-1:-1;;;;;11651:15:5;;11503:180::o;4351:21::-;;;;:::o;19232:1749::-;19330:27;19346:10;19330:15;:27::i;:::-;19359:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;19359:28:5;;;;-1:-1:-1;;;;;19359:28:5;;;293:9:0;304:6;285:26;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;19406:10:5;:8;:10::i;:::-;19418:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;19418:21:5;;;;;285:26:0;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;19513:21:5;19523:10;19513:9;:21::i;:::-;19545:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;19545:25:5;;;;19513:30;;;19545:25;19513:30;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;19614:29:5;;;;;;;;;;;;;;;;;19611:1;19589:23;;;19614:29;19589:23;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;19693:12:5;19723:5;;-1:-1:-1;;;;;19723:5:5;19709:10;:19;19708:36;;19739:5;19708:36;;;19732:4;19708:36;19693:51;;19754:11;19768:246;19822:17;;19854:7;19853:54;;19887:20;;19853:54;;19768:246;19754:260;;20054:14;20071:33;20093:10;20071:21;:33::i;:::-;20132:5;;20054:50;;-1:-1:-1;;;;;;20132:5:5;20118:10;:19;20114:664;;;20261:31;;;;;;;;;;;;;;;;-1:-1:-1;;;;;20261:31:5;;;;;;;20231:28;;;20223:70;;;;-1:-1:-1;;;;;20223:70:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;20223:70:5;-1:-1:-1;20307:12:5;:19;;-1:-1:-1;;20307:19:5;20322:4;20307:19;;;20340:20;:42;;;20396:18;:30;;;20114:664;;;20461:6;;-1:-1:-1;;;;;20461:6:5;20447:10;:20;20443:335;;;20599:31;;;;;;;;;;;;;;;;-1:-1:-1;;;;;20599:31:5;;;;;;;20569:28;;;20561:70;;;;-1:-1:-1;;;;;20561:70:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;20561:70:5;-1:-1:-1;20645:13:5;:20;;-1:-1:-1;;20645:20:5;;;;;20679:21;:43;;;20736:19;:31;;;20443:335;20818:15;;20788:71;;;;;;20848:10;20788:71;;;;;;-1:-1:-1;;;;;20818:15:5;;;;20788:59;;:71;;;;;20818:15;;20788:71;;;;;;;;20818:15;;20788:71;;;5:2:-1;;;;30:1;27;20:12;5:2;20788:71:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;20788:71:5;;;;20874:100;20898:10;20922:19;20955:9;20874:100;;;;-1:-1:-1;;;;;20874:100:5;-1:-1:-1;;;;;20874:100:5;;;;;;;;;;;;;;;;;;;;;;;;;;;321:1:0;;;;;;;;;19232:1749:5;;;;:::o;37766:138::-;37822:8;37848:49;37887:9;37848:38;:49::i;29282:2446::-;29342:10;:8;:10::i;:::-;29354:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;29354:21:5;;;;;285:26:0;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;29394:27:5;29410:10;29394:15;:27::i;:::-;29423:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;29423:28:5;;;;-1:-1:-1;;;;;29423:28:5;;;293:9:0;304:6;285:26;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;29467:16:5;29486:13;:11;:13::i;:::-;29509:24;29550:5;;29657:23;;29719:17;;29750:19;;29467:32;;-1:-1:-1;;;;;;29550:5:5;;;29536:10;:19;;29589:208;;29467:32;;29550:5;29589:54;:208::i;:::-;29566:231;;29807:21;29831:211;29899:24;;29937:11;29962:17;;29993:20;;30027:5;29831:54;:211::i;:::-;29807:235;;30284:21;30308:124;30415:16;30308:89;30381:15;30308:8;;;;;;;;;-1:-1:-1;;;;;30308:8:5;-1:-1:-1;;;;;30308:15:5;;:17;;;;;-1:-1:-1;;;30308:17:5;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;30308:17:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;30308:17:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;30308:17:5;:55;;;-1:-1:-1;;;;;30308:55:5;;30357:4;30308:55;;;;;;-1:-1:-1;;;;;30308:40:5;;;;;;:55;;;;;:17;;:55;;;;;;;;:40;:55;;;5:2:-1;;;;30:1;27;20:12;5:2;30308:55:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;30308:55:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;30308:55:5;;:89;:72;:89;:::i;:::-;:106;:124;:106;:124;:::i;:::-;30284:148;-1:-1:-1;30446:21:5;;30442:107;;30488:50;;;;;;;;;;;;;;;;;30442:107;30558:35;30576:16;30558:17;:35::i;:::-;30680:12;30695:163;30747:19;:56;;30787:16;30747:56;;;30769:15;30747:56;4102:1;30695:38;:163::i;:::-;30680:178;;30872:19;30868:297;;;30925:28;:15;30945:7;30925:28;:19;:28;:::i;:::-;30907:46;-1:-1:-1;30986:29:5;:16;31007:7;30986:29;:20;:29;:::i;:::-;30967:48;;30868:297;;;31064:28;:15;31084:7;31064:28;:19;:28;:::i;:::-;31046:46;-1:-1:-1;31125:29:5;:16;31146:7;31125:29;:20;:29;:::i;:::-;31106:48;;30868:297;31239:5;;31227:35;;-1:-1:-1;;;;;31239:5:5;31246:15;31227:11;:35::i;:::-;31297:5;;31277:43;;;-1:-1:-1;;;;;31297:5:5;;;31277:43;;;;;;;;;;-1:-1:-1;;;;;;;;;;;31277:43:5;;;;;;;;;31342:6;;31330:37;;-1:-1:-1;;;;;31342:6:5;31350:16;31330:11;:37::i;:::-;31402:6;;31382:45;;;-1:-1:-1;;;;;31402:6:5;;;31382:45;;;;;;;;;;-1:-1:-1;;;;;;;;;;;31382:45:5;;;;;;;;;31438:10;:17;;-1:-1:-1;;;;31438:17:5;;;;;31465:13;;;;;31489:232;;;;31553:5;;;31577:6;31603;;31531:79;;;-1:-1:-1;;;;;31553:5:5;;;31531:79;;;;;;;;31577:6;;;;31531:79;;;;;;;;;;;;;;;;;;;;;;;;;31489:232;;;31664:6;;;31690:5;31714:6;;31642:79;;;-1:-1:-1;;;;;31664:6:5;;;31642:79;;;;;;;;31690:5;;;;31642:79;;;;;;;;;;;;;;;;;;;;;;;;;31489:232;321:1:0;;;;;;;;29282:2446:5;;:::o;5390:30::-;;;-1:-1:-1;;;;;5390:30:5;;:::o;5910:158::-;5980:12;;5957:4;;5980:12;;:81;;;;-1:-1:-1;6009:18:5;;:23;;:51;;-1:-1:-1;;6042:18:5;;6036:3;:24;;5910:158::o;38211:203::-;38308:12;38346:61;38389:6;38397:9;38346:42;:61::i;:::-;38336:71;38211:203;-1:-1:-1;;;38211:203:5:o;4648:31::-;;;;:::o;4938:29::-;;;;;;;;;:::o;38595:197::-;38688:13;38728:57;38767:7;38776:8;38728:38;:57::i;4876:24::-;;;;;;:::o;11944:1524::-;12008:9;;12028:28;;;;;;;;;;;;;;;;;12008:9;;;;;;:18;;12028:28;12008:18;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;12075:6:5;;12092:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;12092:25:5;;;;12075:6;;;;;;:15;;12092:25;12075:15;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;12169:27:5;12185:10;12169:15;:27::i;:::-;12207:24;;;;;;;;;;;;;;;;;12169:36;;;12207:24;12169:36;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;12285:15:5;12303:57;12342:17;;12303:38;:57::i;:::-;12285:75;-1:-1:-1;12374:20:5;;;12370:68;;12415:22;;;;;;;;;;;;;;;;;;;12408:30;;-1:-1:-1;;;;;12408:30:5;;;;;;;;;;;;;;;;12415:22;;12408:30;;;;;;;;12415:22;12408:30;;12415:22;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;12370:68:5;12552:17;;12471:19;;;;12505:81;;12471:19;12505:46;:81::i;:::-;12504:82;12500:138;;;12607:30;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;12607:30:5;;;;;;;12600:38;;-1:-1:-1;;;;;12600:38:5;;;;;;;;;;;;;;;;12607:30;;12600:38;;;;;;;;12607:30;12600:38;;12607:30;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;12500:138:5;12649:16;12658:6;12649:8;:16::i;:::-;12675:112;12719:58;12759:17;;12719:39;:58::i;:::-;12706:10;:71;12675:17;:112::i;:::-;12819:1;12802:5;-1:-1:-1;;;;;12802:5:5;:19;12798:219;;;12837:5;:18;;-1:-1:-1;;;;;;12837:18:5;12845:10;12837:18;;;12869:19;:36;;;12798:219;;;12936:6;:19;;-1:-1:-1;;;;;;12936:19:5;12945:10;12936:19;;;12969:20;:37;;;12798:219;13027:9;:16;;-1:-1:-1;;13027:16:5;;;;;13083:15;;13053:72;;;-1:-1:-1;;;;;13053:72:5;;13114:10;13053:72;;;;;;-1:-1:-1;;;;;13083:15:5;;;;13053:60;;:72;;;;;13027:16;;13053:72;;;;;;;;13027:16;13083:15;13053:72;;;5:2:-1;;;;30:1;27;20:12;5:2;13053:72:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;13053:72:5;;;;13140:321;13169:10;13193:6;13213:5;;;;;;;;;-1:-1:-1;;;;;13213:5:5;13232:6;;;;;;;;;-1:-1:-1;;;;;13232:6:5;13252;;13272:17;;13303:23;;13398:19;;13431:20;;13140:321;;;;-1:-1:-1;;;;;13140:321:5;-1:-1:-1;;;;;13140:321:5;;;;;;;;;;;-1:-1:-1;;;;;13140:321:5;-1:-1:-1;;;;;13140:321:5;;;;;;-1:-1:-1;;;;;13140:321:5;-1:-1:-1;;;;;13140:321:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;321:1:0;;;;;;11944:1524:5;;;:::o;10805:329::-;10878:7;10966:5;;;10985:6;11005;;11025:17;;11056:12;;10878:7;;;;;;;;;;;;-1:-1:-1;;;;;10966:5:5;;;;10985:6;;11005;11025:17;11056:12;;;;;10966:5;11082:13;;;11109:8;:6;:8::i;:::-;10945:182;;;;-1:-1:-1;10945:182:5;;-1:-1:-1;10945:182:5;;-1:-1:-1;10945:182:5;-1:-1:-1;10945:182:5;-1:-1:-1;10945:182:5;;-1:-1:-1;10805:329:5;-1:-1:-1;10805:329:5:o;4490:35::-;;;;:::o;6488:178::-;6544:4;6578:5;;-1:-1:-1;;;;;6568:15:5;;;6578:5;;6568:15;:35;;;;;6587:16;:14;:16::i;:::-;6567:92;;;-1:-1:-1;6631:6:5;;-1:-1:-1;;;;;6621:16:5;;;6631:6;;6621:16;:37;;;;;6641:17;:15;:17::i;32106:1085::-;32159:27;32175:10;32159:15;:27::i;:::-;32188:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;32188:28:5;;;;-1:-1:-1;;;;;32188:28:5;;;293:9:0;304:6;285:26;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;32235:10:5;:8;:10::i;:::-;32247:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;32247:21:5;;;;;285:26:0;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;32287:21:5;32297:10;32287:9;:21::i;:::-;32319:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;32319:25:5;;;;32287:30;;;32319:25;32287:30;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;32377:15:5;;32394:26;;;;;;;;;;;;;;;;;32377:15;;;;-1:-1:-1;;;;;32377:15:5;32363:10;:29;;;32394:26;32363:29;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;32474:8:5;;;;;;;;;-1:-1:-1;;;;;32474:8:5;-1:-1:-1;;;;;32474:28:5;;:30;;;;;-1:-1:-1;;;32474:30:5;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;32474:30:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;32474:30:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;32474:30:5;32439:8;;:31;;;;;;32464:4;32439:31;;;;;;-1:-1:-1;;;;;32439:65:5;;;;:8;;;;:16;;:31;;;;;32474:30;;32439:31;;;;;;;;:8;:31;;;5:2:-1;;;;30:1;27;20:12;5:2;32439:31:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;32439:31:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;32439:31:5;32506:29;;;;;;;;;;;;;32439:31;32506:29;;;-1:-1:-1;;;;;32439:65:5;;;;;;;;;32506:29;32439:65;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;32603:15:5;;;;;-1:-1:-1;;;;;32603:15:5;:29;32599:108;;;32648:15;:28;;-1:-1:-1;;32648:28:5;32666:10;32648:28;;;;;32690:7;;32599:108;32836:11;:18;;-1:-1:-1;;32836:18:5;;;;;32891:8;;:30;;;;;;;;32836:18;;-1:-1:-1;;;;;32891:8:5;;:28;;:30;;;;;;;;;;;;;;:8;:30;;;5:2:-1;;;;30:1;27;20:12;5:2;32891:30:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;32891:30:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;32891:30:5;32956:64;;;;;;;;32891:30;;-1:-1:-1;32931:14:5;;-1:-1:-1;;;;;32956:62:5;;;;;:64;;;;;32891:30;;32956:64;;;;;;;32931:14;32956:62;:64;;;5:2:-1;;;;30:1;27;20:12;5:2;32956:64:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;32956:64:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;32956:64:5;33051:8;;:17;;;;;;;;32956:64;;-1:-1:-1;33031:63:5;;32956:64;;-1:-1:-1;;;;;33051:8:5;;:15;;:17;;;;;32956:64;;33051:17;;;;;;;:8;:17;;;5:2:-1;;;;30:1;27;20:12;5:2;33051:17:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;33051:17:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;33051:17:5;:42;;;-1:-1:-1;;;;;33051:42:5;;33087:4;33051:42;;;;;;-1:-1:-1;;;;;33051:27:5;;;;;;:42;;;;;:17;;:42;;;;;;;;:27;:42;;;5:2:-1;;;;30:1;27;20:12;5:2;33051:42:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;33051:42:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;33051:42:5;33031:11;:63::i;:::-;33104:11;:19;;-1:-1:-1;;33133:13:5;;;;;33162:22;;;-1:-1:-1;;;;;33162:22:5;;;;;;;;;;;;;;;321:1:0;;;;;;;;;;32106:1085:5;;:::o;34702:734::-;34944:12;34972:16;34991:164;35045:17;;35076:20;35110:17;35141:4;34991:40;:164::i;:::-;34972:183;;35165:17;35185:167;35239:17;;35270:21;35305:18;35337:5;35185:40;:167::i;:::-;35165:187;;35387:11;35372:12;:26;:57;;;;;35417:12;35402;:27;35372:57;35362:67;34702:734;-1:-1:-1;;;;;;;;34702:734:5:o;4838:31::-;;;;:::o;23419:2465::-;23507:13;26037:10;:8;:10::i;:::-;26049:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;26049:21:5;;;;;26029:42;;;;;;-1:-1:-1;;;;;26029:42:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;26029:42:5;;26089:41;26099:13;:30;;26123:6;;-1:-1:-1;;;;;26123:6:5;26099:30;;;26115:5;;-1:-1:-1;;;;;26115:5:5;26099:30;26089:9;:41::i;:::-;26132:22;;;;;;;;;;;;;;;;;;26081:74;;;;;;-1:-1:-1;;;;;26081:74:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;26081:74:5;;26173:27;26189:10;26173:15;:27::i;:::-;26211:24;;;;;;;;;;;;;;;;;;26173:36;26165:71;;;;-1:-1:-1;;;;;26165:71:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;26165:71:5;;23536:9;23548:57;23587:17;;23548:38;:57::i;:::-;23536:69;-1:-1:-1;23619:14:5;;;23615:62;;23654:22;;;;;;;;;;;;;;;;;;;23647:30;;-1:-1:-1;;;;;23647:30:5;;;;;;;;;;;;;;;;23654:22;;23647:30;;;;;;;;23654:22;23647:30;;23654:22;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;23615:62:5;23750:19;23772:16;:6;23783:4;23772:16;:10;:16;:::i;:::-;23750:38;;23803:81;23850:17;;23869:14;23803:46;:81::i;:::-;23802:82;23798:138;;;23905:30;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;23905:30:5;;;;;;;23898:38;;-1:-1:-1;;;;;23898:38:5;;;;;;;;;;;;;;;;23905:30;;23898:38;;;;;;;;23905:30;23898:38;;23905:30;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;23798:138:5;23947:16;23966:13;:11;:13::i;:::-;23947:32;;23989:19;24011:13;:84;;24074:21;;24011:84;;;24039:20;;24011:84;23989:106;;24171:327;24203:11;24228:13;:52;;24261:19;;24228:52;;;24244:14;24228:52;24294:13;:53;;24333:14;24294:53;;;24310:20;;24294:53;24361:13;:56;;24394:23;;24361:56;;;24377:14;24361:56;24431:13;:57;;24474:14;24431:57;;;24447:24;;24431:57;24171:18;:327::i;:::-;24170:328;24166:399;;;24521:32;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;24521:32:5;;;;;;;24514:40;;-1:-1:-1;;;;;24514:40:5;;;;;;;;;;;;;;;;24521:32;;24514:40;;;;;;;;24521:32;24514:40;;24521:32;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;24166:399:5;24624:16;24633:6;24624:8;:16::i;:::-;24650:23;24668:4;24650:17;:23::i;:::-;24721:20;24744:13;:30;;24768:6;;-1:-1:-1;;;;;24768:6:5;24744:30;;;24760:5;;-1:-1:-1;;;;;24760:5:5;24744:30;24721:53;;24784:27;24814:79;24844:13;24871:12;24814:16;:79::i;:::-;24784:109;;24942:27;24972:75;25032:14;24972:8;;;;;;;;;-1:-1:-1;;;;;24972:8:5;-1:-1:-1;;;;;24972:15:5;;:17;;;;;-1:-1:-1;;;24972:17:5;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;24972:75:5;24942:105;;25062:13;25058:439;;;25091:5;:18;;-1:-1:-1;;;;;;25091:18:5;25099:10;25091:18;;;25123:19;:36;;;25173:23;:40;;;25227:20;:45;;;25058:439;;;25303:6;:19;;-1:-1:-1;;;;;;25303:19:5;25312:10;25303:19;;;25336:20;:37;;;25387:24;:41;;;25442:19;:44;;;25058:439;25507:24;25517:13;25507:9;:24::i;:::-;25618:15;;-1:-1:-1;;;;;25618:31:5;;;:15;;;;;:31;25614:90;;;25665:15;:28;;-1:-1:-1;;25665:28:5;;;25614:90;25744:15;;25714:72;;;-1:-1:-1;;;;;25714:72:5;;25775:10;25714:72;;;;;;-1:-1:-1;;;;;25744:15:5;;;;25714:60;;:72;;;;;25744:15;;25714:72;;;;;;;;25744:15;;25714:72;;;5:2:-1;;;;30:1;27;20:12;5:2;25714:72:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;25870:6:5;;25801:76;;;25812:10;25801:76;;-1:-1:-1;;;;;25801:76:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;25801:76:5;;;;;;;-1:-1:-1;25801:76:5;26246:1;;;;;;;23419:2465;;;:::o;22926:251::-;22982:10;:8;:10::i;:::-;22994:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;22994:21:5;;;;;285:26:0;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;23034:21:5;23044:10;23034:9;:21::i;:::-;23057;;;;;;;;;;;;;;;;;;285:26:0;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;23118:5:5;;23094:30;;-1:-1:-1;;;;;23118:5:5;23104:10;:19;23094:9;:30::i;:::-;23139:31;;;23159:10;23139:31;;;;;;;;;;;;;321:1:0;;22926:251:5;;:::o;4906:25::-;;;;;;;;;:::o;5050:1083:7:-;5246:10;5333:24;5361:17;5360:96;;1134:24;5360:96;;;1054:25;5360:96;5333:123;-1:-1:-1;5466:22:7;355:8;5492:34;;;5491:50;5466:75;;5599:15;355:8;5680:18;355:8;5650:12;:26;5631:15;:46;:67;;;;;;;;5617:105;;;;;;;;5599:123;;5874:17;:51;;;;;5908:17;5895:10;:30;5874:51;5870:77;;;5946:1;5939:8;;;;;;;5870:77;6018:17;6017:109;;6116:10;6096:17;:30;6017:109;;;6071:10;6051:17;:30;6017:109;6009:117;;5050:1083;;;;;;;;;;:::o;33748:204:5:-;33894:9;;33910:6;;33888:29;;;;;;;;;;;;;;;33818:10;;;;-1:-1:-1;;;;;33894:9:5;;;;33888:21;;:29;;;;;;;;;;33894:9;33888:29;;;5:2:-1;;;;30:1;27;20:12;5:2;33888:29:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;33888:29:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;33888:29:5;;-1:-1:-1;;33748:204:5;:::o;39610:182::-;39696:8;;;;;;;;;-1:-1:-1;;;;;39696:8:5;-1:-1:-1;;;;;39696:15:5;;:17;;;;;-1:-1:-1;;;39696:17:5;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;39696:17:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;39696:17:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;39696:17:5;:39;;;;;;-1:-1:-1;;;;;39696:39:5;;;;;;;;;;;;;;;:26;;;;;;;:39;;;;;:17;;:39;;;;;;;-1:-1:-1;39696:26:5;:39;;;5:2:-1;;;;30:1;27;20:12;5:2;39696:39:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;39696:39:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;39696:39:5;39749:26;;;;;;;;;;;;39696:39;39749:26;;;;;;;;;;;;39675:110;;;;;;-1:-1:-1;;;;;39675:110:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;39675:110:5;;39610:182;;:::o;3162:972:7:-;3387:15;355:8;3722:33;;;;3778:12;;3813;;3848:15;;3387;;355:8;3778:12;3913:6;;;3912:21;;3911:28;;;;;;;;3906:1;:34;:47;;;;;;;;3892:84;;;;;;;;3875:101;;3986:17;4006:8;:42;;4038:10;4034:1;:14;4006:42;;;4021:10;4017:1;:14;4006:42;3986:62;-1:-1:-1;4083:1:7;4066:18;;;4059:26;;;;4113:13;3162:972;-1:-1:-1;;;;;;;;;;;3162:972:7:o;4140:327::-;4272:12;4322:54;4332:15;516:2;4322:9;:54::i;:::-;4311:7;:65;;4310:150;;;;;4405:54;4415:15;591:3;4405:9;:54::i;:::-;4394:7;:65;;4300:160;4140:327;-1:-1:-1;;;4140:327:7:o;1431:145:10:-;1489:7;1520:5;;;1543:6;;;;1535:15;;;;;40044:192:5;40114:8;;;;;;;;;-1:-1:-1;;;;;40114:8:5;-1:-1:-1;;;;;40114:15:5;;:17;;;;;-1:-1:-1;;;40114:17:5;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;40114:17:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;40114:17:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;40114:17:5;:65;;;;;;40145:10;40114:65;;;;40165:4;40114:65;;;;;;;;;;;;-1:-1:-1;;;;;40114:30:5;;;;;;:65;;;;;:17;;:65;;;;;;;;-1:-1:-1;40114:30:5;:65;;;5:2:-1;;;;30:1;27;20:12;5:2;40114:65:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;40114:65:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;40114:65:5;40193:26;;;;;;;;;;;;40114:65;40193:26;;;;;;;;;;;;40093:136;;;;;;-1:-1:-1;;;;;40093:136:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;40093:136:5;;40044:192;:::o;1229:120:7:-;1288:8;1340:2;1314:23;1324:9;1335:1;1314:9;:23::i;:::-;:28;;;;;;;;;1229:120;-1:-1:-1;;1229:120:7:o;38941:220:5:-;39077:14;39133:3;39120:10;:16;39119:35;;39153:1;39119:35;;;-1:-1:-1;39140:10:5;38941:220::o;1437:119:7:-;1495:8;1547:2;1521:23;1531:9;1542:1;1521:9;:23::i;1205:145:10:-;1263:7;1290:6;;;;1282:15;;;;;;-1:-1:-1;1319:5:10;;;1205:145::o;39855:104:5:-;39925:8;;:18;;;;;;;;39913:39;;-1:-1:-1;;;;;39925:8:5;;:16;;:18;;;;;;;;;;;;;;:8;:18;;;5:2:-1;;;;30:1;27;20:12;5:2;39925:18:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;39925:18:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;39925:18:5;39945:6;39913:11;:39::i;:::-;39855:104;:::o;2398:168:7:-;2556:3;2534:18;;2533:26;;2398:168::o;1863:354::-;1962:12;2004:9;1994:6;:19;1990:33;;;-1:-1:-1;2022:1:7;2015:8;;1990:33;2052:28;;;2033:16;2073:6;2123:3;2108:18;;2107:34;;;;;;;;2090:51;;2180:1;2167:10;:14;2166:43;;2199:10;2198:11;;2166:43;;26443:780:5;26565:27;26701:344;26769:12;:65;;26810:24;;26769:65;;;26784:23;;26769:65;26848:12;:59;;26886:21;;26848:59;;;26863:20;;26848:59;26921:17;;26952:12;:57;;26989:20;;26952:57;;;26967:19;;26952:57;27023:12;26701:54;:344::i;:::-;26676:369;;27095:49;27107:12;27121:22;27095:11;:49::i;:::-;27159:57;;;-1:-1:-1;;;;;27159:57:5;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;27159:57:5;;;;;;;;;;26443:780;;;;:::o;39220:333::-;39283:15;39279:268;;;39337:1;39314:20;:24;;;39352:18;:22;39388:12;:20;;-1:-1:-1;;39388:20:5;;;39279:268;;;39463:1;39439:21;:25;;;39478:19;:23;39515:13;:21;;-1:-1:-1;;39515:21:5;;;39220:333;:::o",
  "source": "pragma solidity ^0.5.0;\n\nimport \"openzeppelin-solidity/contracts/math/SafeMath.sol\";\nimport \"../DBC.sol\";\nimport \"../Feeds.sol\";\nimport \"../Registry.sol\";\nimport \"./ContractForDifferenceFactory.sol\";\nimport \"./ContractForDifferenceRegistry.sol\";\nimport \"./ContractForDifferenceLibrary.sol\";\n\n\n/*\n * SOLIUM DISABLE: \n *\n *   security/no-block-members - we need to use 'now' in order to set a time \n *       limit.\n */\n\n /* solium-disable security/no-block-members */\n\n/**\n * @title Contract for difference\n *\n * Contract for difference for a given market between a\n * \"buyer\" (long position) and \"seller\" (short position).\n */\ncontract ContractForDifference is DBC {\n    using SafeMath for uint;\n\n    /*\n     * Events\n     */\n\n    event LogCFDCreated(\n        address creator,\n        bytes32 market,\n        uint notionalAmountDai,\n        uint deposit\n    );\n    event LogCFDInitiated(\n        address joiner,\n        uint amountSent,\n        address buyer,\n        address seller,\n        bytes32 market,\n        uint notionalAmountDai,\n        uint strikePrice,\n        uint buyerDepositBalance,\n        uint sellerDepositBalance\n    );\n    event LogCFDTransferPosition(address oldOwner, address newOwner);\n    event LogCFDCanceledNew(address party, uint amount, bytes32 market);\n    event LogCFDStrikePriceUpdated(address party, uint newStrikePrice);\n\n    event LogCFDSale(\n        address party,\n        uint saleStrikePrice,\n        uint timeLimit\n    );\n    event LogCFDSaleCancelled(address party);\n    event LogCFDSaleUpdated(address party, uint newPrice);\n    event LogCFDSold(address to, address by, uint sellerAmount, uint buyerDeposit, bytes32 market);\n\n    event LogCFDPartyBalanceUpdate(address party, uint amount, bool isWithdraw, uint newBalance, bytes32 market);\n    event LogCFDTransferFunds(address receiver, uint amount);\n\n    event LogCFDClosed(address winner, uint buyerCollateral, uint sellerCollateral, bytes32 market);\n    event LogCFDForceTerminated(address terminator, uint terminatorAmount, address otherParty, uint otherPartyAmount, bytes32 market);\n    event LogCFDUpgraded(address newCFD);\n    event LogCFDRemainingBalanceUnexpected(uint remainder);\n\n    enum Status {\n        CREATED,\n        INITIATED,\n        SALE,\n        CLOSED\n    }\n\n    /*\n     * Constants\n     */\n\n    string constant REASON_NOTIONAL_TOO_LOW = \"Notional below minimum\";\n    string constant REASON_FEES_NOT_ENOUGH = \"Not enough sent to cover fees\";\n    string constant REASON_DAI_TRANSFER_FAILED = \"Failure transfering ownership of DAI tokens\";\n    string constant REASON_COLLATERAL_RANGE_FAILED = \"collateralInRange false\";\n    string constant REASON_MUST_NOT_BE_INITIATED = \"Must not be initiated\";\n    string constant REASON_MUST_NOT_BE_CLOSED = \"Must not be closed\";\n    string constant REASON_MUST_NOT_BE_PARTY = \"Contract party can't call this\";\n    string constant REASON_MUST_BE_INITIATED = \"Must be initiated\";\n    string constant REASON_MUST_BE_SELLER = \"msg.sender must be seller\";\n    string constant REASON_MUST_NOT_BE_SELLER = \"msg.sender must not be seller\";\n    string constant REASON_MUST_BE_ON_SALE = \"Must be on sale\";\n    string constant REASON_MUST_BE_POSITIVE_PRICE = \"Price must be > 0\";\n    string constant REASON_ONLY_CONTRACT_PARTIES = \"Only contract parties can do this\";\n    string constant REASON_MUST_BE_ACTIVE = \"Must be active\";\n    string constant REASON_MARKET_PRICE_RANGE_FAILED = \"collateralInRange false\";\n    string constant REASON_WITHDRAW_NOT_ENOUGH = \"Can't withdraw more then available\";\n    string constant REASON_AMOUNT_NOT_ENOUGH = \"Amount not enough\";\n    string constant REASON_UPGRADE_ALREADY_SET = \"msg.sender already called\";\n    string constant REASON_UPGRADE_ALREADY_LATEST = \"Already at latest version\";\n    string constant REASON_TRANSFER_TO_EXISTING_PARTY = \"Can't transfer to existing party\";\n    string constant REASON_MUST_BE_MORE_THAN_CUTOFF = \"Must be more than liquidation price\";\n    string constant REASON_MUST_BE_LESS_THAN_CUTOFF = \"Must be less than liquidation price\";\n\n    uint public constant FORCE_TERMINATE_PENALTY_PERCENT = 5;\n    uint public constant MINIMUM_NOTIONAL_AMOUNT_DAI = 1 * 1e18; // 1 DAI/1 USD\n\n\n    /*\n     * State variables\n     */\n\n    address public buyer;                           // long\n    address public seller;                          // short\n    bytes32 public market;\n\n    uint public notionalAmountDai;\n\n    // format of strike prices as in Feeds contract - see Feeds.decimals()\n    uint public buyerInitialStrikePrice;\n    uint public sellerInitialStrikePrice;\n\n    // balances of amounts actually deposited/withdrawn from the contract\n    uint public buyerDepositBalance;\n    uint public sellerDepositBalance;\n\n    uint public buyerSaleStrikePrice;\n    uint public buyerSaleTimeLimit;\n\n    uint public sellerSaleStrikePrice;\n    uint public sellerSaleTimeLimit;\n\n    bool public buyerSelling;\n    bool public sellerSelling;\n\n    bool public initiated = false;\n    bool public closed = false;\n    bool public terminated;\n\n    // set to true for a short period of time - when second party has called\n    // upgrade and upgrade has called the new factory to do the work\n    bool public upgradeable = false;\n\n    // set to first party that calls upgrade\n    // enables identification of who called and that it has been called once\n    address public upgradeCalledBy = address(0);\n\n    address public cfdRegistryAddr;\n    address public feedsAddr;\n\n    Registry public registry;\n\n    /*\n     * Functions\n     */\n\n    constructor() public {}\n\n    /**\n     * @dev Contract has been initiated (has 2 parties) and not yet terminated.\n     * @return true if contract is active\n     */\n    function isActive() public view returns (bool) {\n        return initiated == true && closed == false;\n    }\n\n    /**\n     * @dev Is buyer / long party selling.\n     * @return true if buyer has side up for sale\n     */\n    function isBuyerSelling() public view returns (bool) {\n        return buyerSelling &&\n            (buyerSaleTimeLimit == 0 || now < buyerSaleTimeLimit);\n    }\n\n    /**\n     * @dev Is seller / short party selling.\n     * @return true if seller has side up for sale\n     */\n    function isSellerSelling() public view returns (bool) {\n        return sellerSelling &&\n            (sellerSaleTimeLimit == 0 || now < sellerSaleTimeLimit);\n    }\n\n    /**\n     * @dev If the given party is selling one side of the contract.\n     * @return true if the given party is selling\n     */\n    function isSelling(address _party) public view returns (bool) {\n        return (_party == buyer && isBuyerSelling()) ||\n            (_party == seller && isSellerSelling());\n    }\n\n    /**\n     * @dev Check if the given address is one of the 2 parties of the contract.\n     * @param _party Address to check\n     * @return true if _party is either the buyer or seller.\n     */\n    function isContractParty(address _party) public view returns (bool) {\n        return _party == buyer || _party == seller;\n    }\n\n    /**\n     * @dev Create a new CFDinstance specifying the terms of the contract.\n     *\n     * Fee of 0.3% of the notional is taken.\n     *\n     * Therefore the intial deposit is _value minus these fees.\n     *\n     * @param _registryAddr Registry contract address\n     * @param _cfdRegistryAddr CFD Registry contract address\n     * @param _feedsAddr Feeds address\n     * @param _partyAddr Address of the party creating the contract\n     * @param _marketId Contract is for prices on this market\n     * @param _strikePrice Agreed initial price for the contract (compatible\n                with Feeds stored price - see Feeds.decimals() adjustment)\n     * @param _notionalAmountDai Contract amount\n     * @param _isBuyer Flag indicating if the contract creator wants to take the\n     *            buyer (true) or the seller side (false).\n     */\n    function create(\n        address _registryAddr,\n        address _cfdRegistryAddr,\n        address _feedsAddr,\n        address _partyAddr, // msg.sender calling the Factory\n        bytes32 _marketId,\n        uint _strikePrice,\n        uint _notionalAmountDai,\n        bool _isBuyer\n    )\n        public\n        pre_cond(_notionalAmountDai >= MINIMUM_NOTIONAL_AMOUNT_DAI, REASON_NOTIONAL_TOO_LOW)\n    {\n        registry = Registry(_registryAddr);\n        uint daiBalance = registry.getDAI().balanceOf(address(this));\n        uint fees = ContractForDifferenceLibrary.creatorFee(_notionalAmountDai);\n        if (daiBalance <= fees)\n            revert(REASON_FEES_NOT_ENOUGH);\n\n        uint collateralSent = daiBalance - fees;\n        if (!ContractForDifferenceLibrary.collateralInRange(_notionalAmountDai, collateralSent))\n            revert(REASON_COLLATERAL_RANGE_FAILED);\n\n        if (_isBuyer) {\n            buyer = _partyAddr;\n            buyerDepositBalance = collateralSent;\n        } else {\n            seller = _partyAddr;\n            sellerDepositBalance = collateralSent;\n        }\n\n        market = _marketId;\n        notionalAmountDai = _notionalAmountDai;\n\n        buyerInitialStrikePrice = _strikePrice;\n        sellerInitialStrikePrice = _strikePrice;\n\n        cfdRegistryAddr = _cfdRegistryAddr;\n        feedsAddr = _feedsAddr;\n\n        emit LogCFDCreated(\n            _partyAddr,\n            market,\n            notionalAmountDai,\n            daiBalance\n        );\n    }\n\n    /**\n     * @dev Create a new CFDinstance from a previous CFD instance. This is part\n     *      of the upgrade process (see CFD.upgrade()).\n     *\n     * @param _cfdAddr Address of the existing / old CFD\n     * @param _registryAddr Address of Registry contract\n     * @param _cfdRegistryAddr Address of CFDRegistry contract\n     * @param _feedsAddr Address to send fees to\n     */\n    function createByUpgrade(\n        address _cfdAddr,\n        address _registryAddr,\n        address _cfdRegistryAddr,\n        address _feedsAddr\n    )\n        public\n    {\n        ContractForDifference oldCfd = ContractForDifference(_cfdAddr);\n\n        market = oldCfd.market();\n        notionalAmountDai = oldCfd.notionalAmountDai();\n        buyer = oldCfd.buyer();\n        seller = oldCfd.seller();\n\n        buyerDepositBalance = oldCfd.buyerDepositBalance();\n        buyerInitialStrikePrice = oldCfd.buyerInitialStrikePrice();\n\n        sellerDepositBalance = oldCfd.sellerDepositBalance();\n        sellerInitialStrikePrice = oldCfd.sellerInitialStrikePrice();\n\n        cfdRegistryAddr = _cfdRegistryAddr;\n        registry = Registry(_registryAddr);\n        feedsAddr = _feedsAddr;\n\n        initiated = true;\n\n        ContractForDifferenceRegistry(cfdRegistryAddr).registerParty(seller);\n    }\n\n    /**\n     * Returns an array with all the attributes of the contract\n     * (Had to split in 3 functions because of the stack limit)\n     * Max number of return values == 8\n     */\n    function getCfdAttributes()\n        public\n        view\n        returns (address, address, bytes32, uint, bool, bool, Status)\n    {\n        return (\n            buyer,\n            seller,\n            market,\n            notionalAmountDai,\n            buyerSelling,\n            sellerSelling,\n            status()\n        );\n    }\n    function getCfdAttributes2()\n        public\n        view\n        returns (uint, uint, uint, uint, uint, uint)\n    {\n        return (\n            buyerDepositBalance,\n            sellerDepositBalance,\n            buyerSaleStrikePrice,\n            sellerSaleStrikePrice,\n            buyerInitialStrikePrice,\n            sellerInitialStrikePrice\n        );\n    }\n    function getCfdAttributes3()\n        public\n        view\n        returns (bool, address)\n    {\n        return (\n            terminated,\n            upgradeCalledBy\n        );\n    }\n\n    /**\n     * @dev Counterparty deposits their funds into the contract thereby joining\n     * and initiating the contract.\n     *\n     * Fee of 0.5% of the notional is taken.\n     *\n     * Therefore the intial deposit is _value minus these fees.\n     */\n    function deposit(uint _value)\n        external\n        pre_cond(initiated == false, REASON_MUST_NOT_BE_INITIATED)\n        pre_cond(closed == false, REASON_MUST_NOT_BE_CLOSED) // cancelNew has not been called\n        pre_cond(isContractParty(msg.sender) == false, REASON_MUST_NOT_BE_PARTY) // reject contract creator depositing\n    {\n        uint joinerFees = ContractForDifferenceLibrary.joinerFee(notionalAmountDai);\n        if (_value <= joinerFees)\n            revert(REASON_FEES_NOT_ENOUGH);\n\n        uint collateralSent = _value - joinerFees;\n        if (!ContractForDifferenceLibrary.collateralInRange(notionalAmountDai, collateralSent))\n            revert(REASON_COLLATERAL_RANGE_FAILED);\n\n        daiClaim(_value);\n        daiTransferToFees(\n            joinerFees + ContractForDifferenceLibrary.creatorFee(notionalAmountDai)\n        );\n\n        if (buyer == address(0)) {\n            buyer = msg.sender;\n            buyerDepositBalance = collateralSent;\n        } else {\n            seller = msg.sender;\n            sellerDepositBalance = collateralSent;\n        }\n\n        initiated = true;\n        ContractForDifferenceRegistry(cfdRegistryAddr).registerParty(msg.sender);\n        emit LogCFDInitiated(\n            msg.sender,\n            _value,\n            buyer,\n            seller,\n            market,\n            notionalAmountDai,\n            buyerInitialStrikePrice, // strikePrice is same for buyer and seller at this stage\n            buyerDepositBalance,\n            sellerDepositBalance\n        );\n    }\n\n    /**\n     * @dev Cancels a newly created contract refunding the balance to the party\n     *      that created the contract. This can only be called before a contract\n     *      is initiated. ie. between the create() and deposit() calls.\n     */\n    function cancelNew()\n        external\n        pre_cond(initiated == false, REASON_MUST_NOT_BE_INITIATED)\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\n    {\n        uint amountSent = registry.getDAI().balanceOf(address(this));\n        daiTransfer(msg.sender, amountSent);\n        emit LogCFDTransferFunds(msg.sender, amountSent);\n        closed = true;\n        emit LogCFDCanceledNew(msg.sender, amountSent, market);\n    }\n\n    /**\n     * @dev Party adds more funds to the contract thereby increasing their\n     *      deposit balance.\n     * @param _value DAI amount\n     */\n    function topup(uint _value)\n        external\n        pre_cond(_value >= 1, REASON_AMOUNT_NOT_ENOUGH)\n        pre_cond(initiated == true, REASON_MUST_BE_INITIATED)\n        pre_cond(closed == false, REASON_MUST_NOT_BE_CLOSED)\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\n        pre_cond(isSelling(msg.sender) == false, REASON_MUST_NOT_BE_SELLER)\n    {\n        bool isBuyer = msg.sender == buyer;\n        uint newDepositBalance = (isBuyer ? \n            buyerDepositBalance : \n            sellerDepositBalance\n        ).add(_value);\n\n        // check topup doesn't make collateral exceed the maximum\n        if (!ContractForDifferenceLibrary.collateralInRange(notionalAmountDai, newDepositBalance))\n            revert(REASON_COLLATERAL_RANGE_FAILED);\n\n        daiClaim(_value);\n\n        if (isBuyer) {\n            buyerDepositBalance = newDepositBalance;\n        } else {\n            sellerDepositBalance = newDepositBalance;\n        }\n\n        emit LogCFDPartyBalanceUpdate(msg.sender, _value, false, newDepositBalance, market);\n    }\n\n    /**\n     * @dev Party withdraws funds from the contract.\n     *      They can only withdraw down to an amount that leaves the collateral\n     *      to notional difference at 20% or more.\n     * @param _withdrawAmount Amount to withdraw from the deposits balance.\n     */\n    function withdraw(uint _withdrawAmount)\n        external\n        assertWithdrawPreCond(_withdrawAmount)\n    {\n        bool isBuyer = msg.sender == buyer;\n        uint currentDepositBal = isBuyer ? buyerDepositBalance : sellerDepositBalance;\n\n        // first simple check that can't withdraw more then deposited\n        if (_withdrawAmount > currentDepositBal)\n            revert(REASON_WITHDRAW_NOT_ENOUGH);\n\n        // second a more precise check that the collateral at new balance will remain above the min\n        uint newDepositBal = currentDepositBal - _withdrawAmount;\n        uint marketPrice = latestPrice();\n        if (!marketPriceInRange(\n            marketPrice,\n            isBuyer ? newDepositBal : buyerDepositBalance,\n            isBuyer ? sellerDepositBalance : newDepositBal,\n            buyerInitialStrikePrice,\n            sellerInitialStrikePrice\n        )) {\n            revert(REASON_MARKET_PRICE_RANGE_FAILED);\n        }\n\n        uint collateral = ContractForDifferenceLibrary.calculateCollateralAmount(\n            isBuyer ? buyerInitialStrikePrice : sellerInitialStrikePrice,\n            marketPrice,\n            notionalAmountDai,\n            newDepositBal,\n            isBuyer\n        );\n\n        if (!ContractForDifferenceLibrary.collateralInRange(notionalAmountDai, collateral)) {\n            revert(REASON_COLLATERAL_RANGE_FAILED);\n        }\n\n        daiTransfer(msg.sender, _withdrawAmount);\n        emit LogCFDTransferFunds(msg.sender, _withdrawAmount);\n\n        if (isBuyer) {\n            buyerDepositBalance = newDepositBal;\n        } else {\n            sellerDepositBalance = newDepositBal;\n        }\n\n        emit LogCFDPartyBalanceUpdate(msg.sender, _withdrawAmount, true, newDepositBal, market);\n    }\n\n    /* NOTE: Split off into modifier to work around 'stack too deep' error */\n    modifier assertWithdrawPreCond(uint _withdrawAmount) \n    {\n        require(_withdrawAmount >= 1, REASON_WITHDRAW_NOT_ENOUGH);\n        require(initiated == true, REASON_MUST_BE_INITIATED);\n        require(closed == false, REASON_MUST_NOT_BE_CLOSED);\n        require(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES);\n        require(isSelling(msg.sender) == false, REASON_MUST_NOT_BE_SELLER);\n        _;\n    }\n\n    /**\n     * @dev Parties can transfer contract ownership to another address by\n     *      calling this function.\n     * @param _newAddress Addreess of the new party to swap in.\n     */\n    function transferPosition(address _newAddress)\n        external\n        pre_cond(closed == false, REASON_MUST_NOT_BE_CLOSED)\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\n        pre_cond(isContractParty(_newAddress) == false, REASON_MUST_NOT_BE_PARTY)\n        pre_cond(isSelling(msg.sender) == false, REASON_MUST_NOT_BE_SELLER)\n    {\n        if (msg.sender == buyer) buyer = _newAddress;\n        else if (msg.sender == seller) seller = _newAddress;\n        else if (msg.sender == upgradeCalledBy) upgradeCalledBy = address(0);\n        ContractForDifferenceRegistry(cfdRegistryAddr).registerParty(_newAddress);\n        emit LogCFDTransferPosition(msg.sender, _newAddress);\n    }\n\n    /**\n     * @dev Position in a contract can be sold to another party. This function\n     *      makes the callers side available for sale. A party can buy the side\n     *      with the buy function.\n     * @param _desiredStrikePrice Sellers desired sell strike price\n     * @param _timeLimit Sale available until this time in UNIX epoch seconds\n     *                  (< now for no limit)\n     */\n    function sellPrepare(uint _desiredStrikePrice, uint _timeLimit)\n        external\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\n        // reject already marked selling by the caller\n        pre_cond(isSelling(msg.sender) == false, REASON_MUST_NOT_BE_SELLER)\n        pre_cond(_desiredStrikePrice > 0, REASON_MUST_BE_POSITIVE_PRICE)\n    {\n        // calculate cutoff price\n        bool isBuyer = (msg.sender == buyer) ? true : false;\n        uint cutOff = ContractForDifferenceLibrary.cutOffPrice(\n            notionalAmountDai,\n            (isBuyer) ? buyerDepositBalance : sellerDepositBalance,\n            (isBuyer) ? buyerInitialStrikePrice : sellerInitialStrikePrice,\n            isBuyer\n        );\n\n        // mark side on sale\n        uint timeLimit = timeLimitFutureOrZero(_timeLimit);\n        if (msg.sender == buyer) {\n            // check sale strike price is not below liquidation price\n            require(_desiredStrikePrice > cutOff, REASON_MUST_BE_MORE_THAN_CUTOFF);\n            buyerSelling = true;\n            buyerSaleStrikePrice = _desiredStrikePrice;\n            buyerSaleTimeLimit = timeLimit;\n        } else if (msg.sender == seller) {\n            // check sale strike price is not already above liquidation price\n            require(_desiredStrikePrice < cutOff, REASON_MUST_BE_LESS_THAN_CUTOFF);\n            sellerSelling = true;\n            sellerSaleStrikePrice = _desiredStrikePrice;\n            sellerSaleTimeLimit = timeLimit;\n        }\n\n        ContractForDifferenceRegistry(cfdRegistryAddr).registerSale(msg.sender);\n        emit LogCFDSale(\n            msg.sender,\n            _desiredStrikePrice,\n            timeLimit\n        );\n    }\n\n    /**\n     * @dev Seller can update the price on the sale.\n     */\n    function sellUpdate(\n        uint _newPrice\n    )\n        external\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\n        pre_cond(isSelling(msg.sender), REASON_MUST_BE_SELLER)\n        pre_cond(_newPrice > 0, REASON_MUST_BE_POSITIVE_PRICE)\n    {\n        // calculate cutoff price\n        bool isBuyer = (msg.sender == buyer) ? true : false;\n        uint cutOff = ContractForDifferenceLibrary.cutOffPrice(\n            notionalAmountDai,\n            (isBuyer) ? buyerDepositBalance : sellerDepositBalance,\n            (isBuyer) ? buyerInitialStrikePrice : sellerInitialStrikePrice,\n            isBuyer\n        );\n\n        if (msg.sender == buyer) {\n            // check new strike price is not below liquidation price\n            require(_newPrice > cutOff, REASON_MUST_BE_MORE_THAN_CUTOFF);\n            buyerSaleStrikePrice = _newPrice;\n        } else if (msg.sender == seller) {\n            // check new strike price is not already above liquidation price\n            require(_newPrice < cutOff, REASON_MUST_BE_LESS_THAN_CUTOFF);\n            sellerSaleStrikePrice = _newPrice;\n        }\n        emit LogCFDSaleUpdated(msg.sender, _newPrice);\n    }\n\n    /**\n     * @dev Party can update the strike price of an non-initialized contract\n     */\n    function changeStrikePrice(\n        uint _newStrikePrice\n    )\n        external\n        pre_cond(initiated == false, REASON_MUST_NOT_BE_INITIATED)\n        pre_cond(closed == false, REASON_MUST_NOT_BE_CLOSED)\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\n        pre_cond(_newStrikePrice > 0, REASON_MUST_BE_POSITIVE_PRICE)\n    {\n        buyerInitialStrikePrice = _newStrikePrice;\n        sellerInitialStrikePrice = _newStrikePrice;\n        emit LogCFDStrikePriceUpdated(msg.sender, _newStrikePrice);\n    }\n\n    /**\n     * @dev Cancel the for sale status setup by sellPrepare()\n     */\n    function sellCancel()\n        external\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\n        pre_cond(isSelling(msg.sender), REASON_MUST_BE_SELLER)\n    {\n        clearSale(msg.sender == buyer);\n        emit LogCFDSaleCancelled(msg.sender);\n    }\n\n    /**\n     * @dev Buy the side in the contract that is for sale.\n     *\n     * Fee of 0.5% of the notional is taken.\n     *\n     * @param _buyBuyerSide Buying the buyer side or the seller side?\n     * @param _value DAI amount\n     */\n    function buy(bool _buyBuyerSide, uint _value)\n        external\n        assertBuyPreCond(_buyBuyerSide)\n    {\n        uint fees = ContractForDifferenceLibrary.joinerFee(notionalAmountDai);\n        if (_value <= fees)\n            revert(REASON_FEES_NOT_ENOUGH);\n\n        // check sent collateral falls in the allowable range\n        uint collateralSent = _value.sub(fees);\n        if (!ContractForDifferenceLibrary.collateralInRange(notionalAmountDai, collateralSent))\n            revert(REASON_COLLATERAL_RANGE_FAILED);\n\n        uint marketPrice = latestPrice();\n        uint buyStrikePrice = _buyBuyerSide ?\n            buyerSaleStrikePrice :\n            sellerSaleStrikePrice;\n\n        // check new parameters fall in the allowable range\n        if (!marketPriceInRange(\n            marketPrice,\n            _buyBuyerSide ? collateralSent : buyerDepositBalance,\n            _buyBuyerSide ? sellerDepositBalance : collateralSent,\n            _buyBuyerSide ? buyStrikePrice : buyerInitialStrikePrice,\n            _buyBuyerSide ? sellerInitialStrikePrice : buyStrikePrice\n        )) {\n            revert(REASON_MARKET_PRICE_RANGE_FAILED);\n        }\n\n        // move ownership of sent DAI to the CFD\n        daiClaim(_value);\n        daiTransferToFees(fees);\n\n        // transfer to selling party\n        address sellingParty = _buyBuyerSide ? buyer : seller;\n        uint sellingPartyCollateral = buyTransferFunds(\n            _buyBuyerSide,\n            sellingParty\n        );\n\n        // set new party and balances\n        uint remainingPartyDeposits = registry.getDAI().\n            balanceOf(address(this)).sub(collateralSent);\n\n        if (_buyBuyerSide) {\n            buyer = msg.sender;\n            buyerDepositBalance = collateralSent;\n            buyerInitialStrikePrice = buyStrikePrice;\n            sellerDepositBalance = remainingPartyDeposits;\n        } else {\n            seller = msg.sender;\n            sellerDepositBalance = collateralSent;\n            sellerInitialStrikePrice = buyStrikePrice;\n            buyerDepositBalance = remainingPartyDeposits;\n        }\n\n        clearSale(_buyBuyerSide);\n\n        // clean up upgradeCalledBy if the departing party had set that\n        if (upgradeCalledBy == sellingParty) {\n            upgradeCalledBy = address(0);\n        }\n\n        ContractForDifferenceRegistry(cfdRegistryAddr).registerParty(msg.sender);\n        emit LogCFDSold(msg.sender, sellingParty, sellingPartyCollateral, _value, market);\n    }\n\n    /* NOTE: Split off into modifier to work around 'stack too deep' error */\n    modifier assertBuyPreCond(bool _buyBuyerSide) \n    {\n        require(isActive(), REASON_MUST_BE_ACTIVE);\n        require(isSelling(_buyBuyerSide ? buyer : seller), REASON_MUST_BE_ON_SALE);\n        require(isContractParty(msg.sender) == false, REASON_MUST_NOT_BE_PARTY);\n        _;\n    }\n\n    /**\n     * Does all transfers of funds related to the buy().\n     *\n     * Transfer logic split off in seperate function ONLY to workaround\n     * 'Stack too deep' limit.\n     */\n    function buyTransferFunds(\n        bool buyBuyerSide,\n        address sellingParty\n    )\n        private\n        returns (uint sellingPartyCollateral)\n    {\n        // determine collateral amount to send to the selling party\n        sellingPartyCollateral = ContractForDifferenceLibrary.calculateCollateralAmount(\n            buyBuyerSide ? buyerInitialStrikePrice : sellerInitialStrikePrice,\n            buyBuyerSide ? buyerSaleStrikePrice : sellerSaleStrikePrice,\n            notionalAmountDai,\n            buyBuyerSide ? buyerDepositBalance : sellerDepositBalance,\n            buyBuyerSide\n        );\n\n        // send money to selling party\n        daiTransfer(sellingParty, sellingPartyCollateral);\n        emit LogCFDTransferFunds(sellingParty, sellingPartyCollateral);\n    }\n\n    /**\n     * @dev Daemons will call this routine when the market price has moved\n     *      enough that the closeRatio for this contract has been reached.\n     *      It can actually be called by anyone who is willing to pay the gas\n     *      for the liquidate. But if the market has moved past the liquidate\n     *      threshold the call will be rejected.\n     *\n     * This will disolve the contract and return each parties balance of\n     * collateral.\n     */\n    function liquidate()\n        external\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\n    {\n        uint marketPrice = latestPrice();\n\n        // #11 double check the 5% threshold was crossed, if not then REJECT\n        // (can only liquidate if out of range)\n        require(\n            !marketPriceInRange(\n                marketPrice,\n                buyerDepositBalance,\n                sellerDepositBalance,\n                buyerInitialStrikePrice,\n                sellerInitialStrikePrice\n            ), \n            \"Liquidate threshold not yet reached\"\n        );\n\n        // fetch one of the cutoffs to determine which is the winner\n        uint buyerCutOff = ContractForDifferenceLibrary.cutOffPrice(\n            notionalAmountDai,\n            buyerDepositBalance,\n            buyerInitialStrikePrice,\n            true\n        );\n\n        // if buyer cutoff still in range then buyer wins, otherwise seller\n        bool winnerIsBuyer = marketPrice > buyerCutOff;\n        address winner = winnerIsBuyer ? buyer : seller;\n\n        // winner takes all\n        uint remaining = registry.getDAI().balanceOf(address(this));\n        daiTransfer(winner, remaining);\n        emit LogCFDTransferFunds(winner, remaining);\n\n        closed = true;\n\n        emit LogCFDClosed(\n            winner,\n            winnerIsBuyer ? remaining : 0,\n            winnerIsBuyer ? 0 : remaining,\n            market\n        );\n    }\n\n    /**\n     * Force terminate executed by one party who will penalised 5% of their\n     * collateral. Then penalty will be sent to the counterparty.\n     */\n    function forceTerminate()\n        external\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\n    {\n        uint marketPrice = latestPrice();\n        bool forcingPartyIsBuyer = msg.sender == buyer;\n\n        uint buyerCollateral = ContractForDifferenceLibrary.calculateCollateralAmount(\n            buyerInitialStrikePrice,\n            marketPrice,\n            notionalAmountDai,\n            buyerDepositBalance,\n            true\n        );\n        uint sellerCollateral = ContractForDifferenceLibrary.calculateCollateralAmount(\n            sellerInitialStrikePrice,\n            marketPrice,\n            notionalAmountDai,\n            sellerDepositBalance,\n            false\n        );\n\n        //\n        // calculate and check the remainder - it should be equal to zero\n        //\n        // if not expected log the event and transfer the remainder to fees - it\n        //     will be sorted out manually\n        //\n        uint balanceRemainder = registry.getDAI().\n            balanceOf(address(this)).\n            sub(buyerCollateral).\n            sub(sellerCollateral);\n        if (balanceRemainder != 0) {\n            emit LogCFDRemainingBalanceUnexpected(balanceRemainder);\n        }\n        daiTransferToFees(balanceRemainder);\n\n        // penalise the force terminator 5% and give it to the counterparty\n        uint penalty = ContractForDifferenceLibrary.percentOf(\n            forcingPartyIsBuyer ? buyerCollateral : sellerCollateral,\n            FORCE_TERMINATE_PENALTY_PERCENT\n        );\n        if (forcingPartyIsBuyer) {\n            buyerCollateral = buyerCollateral.sub(penalty);\n            sellerCollateral = sellerCollateral.add(penalty);\n        } else {\n            buyerCollateral = buyerCollateral.add(penalty);\n            sellerCollateral = sellerCollateral.sub(penalty);\n        }\n\n        // Send collateral amounts back each party.\n        daiTransfer(buyer, buyerCollateral);\n        emit LogCFDTransferFunds(buyer, buyerCollateral);\n        daiTransfer(seller, sellerCollateral);\n        emit LogCFDTransferFunds(seller, sellerCollateral);\n\n        terminated = true;\n        closed = true;\n\n        if (forcingPartyIsBuyer)\n            emit LogCFDForceTerminated(buyer, buyerCollateral, seller, sellerCollateral, market);\n        else\n            emit LogCFDForceTerminated(seller, sellerCollateral, buyer, buyerCollateral, market);\n    }\n\n    /**\n     * @dev Upgrade contract to a new version. This involves creating a new CFD\n     *      at the latest contract set - transferring over all properties and\n     *      value from this one to the new one.\n     *      An upgrade requires a call to this function from both parties. Then\n     *      upgrade will happen when the second party makes the call.\n     */\n    function upgrade()\n        external\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\n        pre_cond(isSelling(msg.sender) == false, REASON_MUST_NOT_BE_SELLER)\n        pre_cond(msg.sender != upgradeCalledBy, REASON_UPGRADE_ALREADY_SET)\n        pre_cond(registry.allCFDs(address(this)) != registry.getCFDFactoryLatest(), REASON_UPGRADE_ALREADY_LATEST)\n    {\n        // 1st call to initiate upgrade process\n        if (upgradeCalledBy == address(0)) {\n            upgradeCalledBy = msg.sender;\n            return;\n        }\n\n        // if here then then this is the 2nd call, invoked by the opposite, so\n        // kick off the upgrade process\n        upgradeable = true;\n        address cfdFactoryLatest = registry.getCFDFactoryLatest();\n        address newCfd = address(ContractForDifferenceFactory(cfdFactoryLatest).createByUpgrade());\n        daiTransfer(newCfd, registry.getDAI().balanceOf(address(this)));\n        upgradeable = false;\n        closed = true;\n\n        emit LogCFDUpgraded(newCfd);\n    }\n\n    /**\n     * @dev Derive status from the state variables.\n     * @return Status reflecting the current state.\n     */\n    function status()\n        public\n        view\n        returns (Status)\n    {\n        if (closed == true)\n            return Status.CLOSED;\n        else if (initiated == false)\n            return Status.CREATED;\n        else if (isBuyerSelling() || isSellerSelling())\n            return Status.SALE;\n        else\n            return Status.INITIATED;\n    }\n\n    /**\n     * Get the latest read for the market of this CFD.\n     */\n    function latestPrice()\n        internal\n        view\n        returns (uint price)\n    {\n        uint marketPrice;\n        (marketPrice, ) = Feeds(feedsAddr).read(market);\n        return marketPrice;\n    }\n\n    /**\n     * @dev Checks if given parameters and given market price result in a price\n     *      inside an allowable range. This range is defined by the ContractForDifferenceLibrary.cutOffPrice\n     *      function formulas. The idea is that as parameters change - leverage,\n     *      market price etc., we must check the change doesn't result in a\n     *      liquidation event due to too little collateral.\n     *\n     * @param _marketPrice Current market price\n     * @param _buyerDepositBalance Buyer deposits amount\n     * @param _sellerDepositBalance Seller deposits amount\n     * @param _buyerStrikePrice Buyer strike price\n     * @param _sellerStrikePrice Seller strike price\n     * @return true if in range; false if not\n     */\n\n    function marketPriceInRange(\n        uint _marketPrice,\n        uint _buyerDepositBalance,\n        uint _sellerDepositBalance,\n        uint _buyerStrikePrice,\n        uint _sellerStrikePrice\n    )\n        public\n        view\n        returns (bool inRange)\n    {\n        uint buyerCutOff = ContractForDifferenceLibrary.cutOffPrice(\n            notionalAmountDai,\n            _buyerDepositBalance,\n            _buyerStrikePrice,\n            true\n        );\n        uint sellerCutOff = ContractForDifferenceLibrary.cutOffPrice(\n            notionalAmountDai,\n            _sellerDepositBalance,\n            _sellerStrikePrice,\n            false\n        );\n        inRange = _marketPrice > buyerCutOff && _marketPrice < sellerCutOff;\n    }\n\n    /**\n     * @dev Calculate the collateral amount for one party given the current\n     *      market price and original strike price, notional amount and the\n     *      amount the party has deposited into the contract.\n     *\n     * @param _marketPrice Current market price\n     * @param _strikePrice Party strike price\n     * @param _notionalAmount CFD notional amount\n     * @param _depositBalance Balances of deposits into the contract\n     * @param _isBuyer Buyer or Seller / Long or short party?\n     *\n     * @return collateral Amount of collateral for the party\n     */\n    function calculateCollateralAmount(\n        uint _strikePrice,\n        uint _marketPrice,\n        uint _notionalAmount,\n        uint _depositBalance,\n        bool _isBuyer\n    )\n        public\n        pure\n        returns (uint collateral)\n    {\n        collateral = ContractForDifferenceLibrary.calculateCollateralAmount(\n            _strikePrice,\n            _marketPrice,\n            _notionalAmount,\n            _depositBalance,\n            _isBuyer\n        );\n    }\n\n    /**\n     * @dev Calculate the cut off price for buyer or seller.\n     *\n     * This is the price that if passed would raise a liquidation event.\n     *\n     * Base Formulas are:\n     *     Buyer:  1.05 * S - depositBalanceLong  * S / N\n     *     Seller: 0.95 * S + depositBalanceShort * S / N\n     *\n     * However for Solidity we need to adjust parts by FACTOR_UINT to ensure\n     * no fractions.\n     *\n     * @param _notionalAmountDai Contract notional amount\n     * @param _depositBalance Balance of deposits for one party\n     *\n     * @return cut off price\n     */\n    function cutOffPrice(\n        uint _notionalAmountDai,\n        uint _depositBalance,\n        uint _strikePrice,\n        bool _calcForBuyerSide\n    )\n        public\n        pure\n        returns (uint price)\n    {\n        price = ContractForDifferenceLibrary.cutOffPrice(\n            _notionalAmountDai,\n            _depositBalance,\n            _strikePrice,\n            _calcForBuyerSide\n        );\n    }\n\n    /**\n     * Creator fee - 0.3% of notional.\n     */\n    function creatorFee(uint _notional) public pure returns (uint fee) {\n        fee = ContractForDifferenceLibrary.creatorFee(_notional);\n    }\n\n    /**\n     * Joiner (deposit or buy) percentage fee - 0.5% of notional.\n     */\n    function joinerFee(uint _notional) public pure returns (uint fee) {\n        fee = ContractForDifferenceLibrary.joinerFee(_notional);\n    }\n\n    /**\n     * @dev Return a percentage change comparing a value with a new value.\n     * @param _value The existing value to compare against\n     * @param _newValue The new value to compare the change against\n     * @return Percentage change (eg. _value = 100, _newValue = 90 then return 10)\n     */\n    function percentChange(uint _value, uint _newValue)\n        public\n        pure\n        returns (uint percent)\n    {\n        percent = ContractForDifferenceLibrary.percentChange(_value, _newValue);\n    }\n\n    /**\n     * @dev Return a percentage of a given amount.\n     * @param _amount Amount to calculate the percentage of\n     * @param _percent Percent amount (1 - 100)\n     */\n    function percentOf(uint _amount, uint _percent)\n        public\n        pure\n        returns (uint adjusted)\n    {\n        adjusted = ContractForDifferenceLibrary.percentOf(_amount, _percent);\n    }\n\n    /**\n     * Utility that given a time limit will preverve it if in the future OR\n     * set it to 0 if it's in the present or past.\n     */\n    function timeLimitFutureOrZero(\n        uint _timeLimit\n    )\n        private\n        view // not pure because of 'now'\n        returns(uint timeLimit)\n    {\n        timeLimit = (_timeLimit > now) ? _timeLimit : 0;\n    }\n\n    /**\n     * Clear all sale related state.\n     */\n    function clearSale(bool _clearBuyerSide) private {\n        if (_clearBuyerSide) {\n            buyerSaleStrikePrice = 0;\n            buyerSaleTimeLimit = 0;\n            buyerSelling = false;\n        } else {\n            sellerSaleStrikePrice = 0;\n            sellerSaleTimeLimit = 0;\n            sellerSelling = false;\n        }\n    }\n\n    /**\n     * Transfer DAI to an address.\n     */\n    function daiTransfer(address _to, uint _value) private {\n        require(\n            registry.getDAI().transfer(_to, _value),\n            REASON_DAI_TRANSFER_FAILED\n        );\n    }\n\n    /**\n     * Transfer DAI to the fees address.\n     */\n    function daiTransferToFees(uint _value) private {\n        daiTransfer(registry.getFees(), _value);\n    }\n\n    /**\n     * Claim DAI - ie. move approved DAI to this CFD contract.\n     */\n    function daiClaim(uint _value) private {\n        require(\n            registry.getDAI().transferFrom(msg.sender, address(this), _value),\n            REASON_DAI_TRANSFER_FAILED\n        );\n    }\n\n}\n",
  "sourcePath": "/home/julien/0xFutures/protocol-infura/contracts/cfd/ContractForDifference.sol",
  "compiler": {
    "name": "solc",
    "version": "0.5.0+commit.1d4f565a.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.2",
  "updatedAt": "2019-03-19T23:12:39.395Z",
  "devdoc": {
    "methods": {
      "buy(bool,uint256)": {
        "details": "Buy the side in the contract that is for sale.     * Fee of 0.5% of the notional is taken.",
        "params": {
          "_buyBuyerSide": "Buying the buyer side or the seller side?",
          "_value": "DAI amount"
        }
      },
      "calculateCollateralAmount(uint256,uint256,uint256,uint256,bool)": {
        "details": "Calculate the collateral amount for one party given the current     market price and original strike price, notional amount and the     amount the party has deposited into the contract.",
        "params": {
          "_depositBalance": "Balances of deposits into the contract",
          "_isBuyer": "Buyer or Seller / Long or short party?",
          "_marketPrice": "Current market price",
          "_notionalAmount": "CFD notional amount",
          "_strikePrice": "Party strike price"
        },
        "return": "collateral Amount of collateral for the party"
      },
      "cancelNew()": {
        "details": "Cancels a newly created contract refunding the balance to the party     that created the contract. This can only be called before a contract     is initiated. ie. between the create() and deposit() calls."
      },
      "changeStrikePrice(uint256)": {
        "details": "Party can update the strike price of an non-initialized contract"
      },
      "create(address,address,address,address,bytes32,uint256,uint256,bool)": {
        "details": "Create a new CFDinstance specifying the terms of the contract.     * Fee of 0.3% of the notional is taken.     * Therefore the intial deposit is _value minus these fees.",
        "params": {
          "_cfdRegistryAddr": "CFD Registry contract address",
          "_feedsAddr": "Feeds address",
          "_isBuyer": "Flag indicating if the contract creator wants to take the           buyer (true) or the seller side (false).",
          "_marketId": "Contract is for prices on this market",
          "_notionalAmountDai": "Contract amount",
          "_partyAddr": "Address of the party creating the contract",
          "_registryAddr": "Registry contract address",
          "_strikePrice": "Agreed initial price for the contract (compatible with Feeds stored price - see Feeds.decimals() adjustment)"
        }
      },
      "createByUpgrade(address,address,address,address)": {
        "details": "Create a new CFDinstance from a previous CFD instance. This is part     of the upgrade process (see CFD.upgrade()).",
        "params": {
          "_cfdAddr": "Address of the existing / old CFD",
          "_cfdRegistryAddr": "Address of CFDRegistry contract",
          "_feedsAddr": "Address to send fees to",
          "_registryAddr": "Address of Registry contract"
        }
      },
      "cutOffPrice(uint256,uint256,uint256,bool)": {
        "details": "Calculate the cut off price for buyer or seller.     * This is the price that if passed would raise a liquidation event.     * Base Formulas are:    Buyer:  1.05 * S - depositBalanceLong  * S / N    Seller: 0.95 * S + depositBalanceShort * S / N     * However for Solidity we need to adjust parts by FACTOR_UINT to ensure no fractions.",
        "params": {
          "_depositBalance": "Balance of deposits for one party",
          "_notionalAmountDai": "Contract notional amount"
        },
        "return": "cut off price"
      },
      "deposit(uint256)": {
        "details": "Counterparty deposits their funds into the contract thereby joining and initiating the contract.     * Fee of 0.5% of the notional is taken.     * Therefore the intial deposit is _value minus these fees."
      },
      "isActive()": {
        "details": "Contract has been initiated (has 2 parties) and not yet terminated.",
        "return": "true if contract is active"
      },
      "isBuyerSelling()": {
        "details": "Is buyer / long party selling.",
        "return": "true if buyer has side up for sale"
      },
      "isContractParty(address)": {
        "details": "Check if the given address is one of the 2 parties of the contract.",
        "params": {
          "_party": "Address to check"
        },
        "return": "true if _party is either the buyer or seller."
      },
      "isSellerSelling()": {
        "details": "Is seller / short party selling.",
        "return": "true if seller has side up for sale"
      },
      "isSelling(address)": {
        "details": "If the given party is selling one side of the contract.",
        "return": "true if the given party is selling"
      },
      "liquidate()": {
        "details": "Daemons will call this routine when the market price has moved     enough that the closeRatio for this contract has been reached.     It can actually be called by anyone who is willing to pay the gas     for the liquidate. But if the market has moved past the liquidate     threshold the call will be rejected.     * This will disolve the contract and return each parties balance of collateral."
      },
      "marketPriceInRange(uint256,uint256,uint256,uint256,uint256)": {
        "details": "Checks if given parameters and given market price result in a price     inside an allowable range. This range is defined by the ContractForDifferenceLibrary.cutOffPrice     function formulas. The idea is that as parameters change - leverage,     market price etc., we must check the change doesn't result in a     liquidation event due to too little collateral.",
        "params": {
          "_buyerDepositBalance": "Buyer deposits amount",
          "_buyerStrikePrice": "Buyer strike price",
          "_marketPrice": "Current market price",
          "_sellerDepositBalance": "Seller deposits amount",
          "_sellerStrikePrice": "Seller strike price"
        },
        "return": "true if in range; false if not"
      },
      "percentChange(uint256,uint256)": {
        "details": "Return a percentage change comparing a value with a new value.",
        "params": {
          "_newValue": "The new value to compare the change against",
          "_value": "The existing value to compare against"
        },
        "return": "Percentage change (eg. _value = 100, _newValue = 90 then return 10)"
      },
      "percentOf(uint256,uint256)": {
        "details": "Return a percentage of a given amount.",
        "params": {
          "_amount": "Amount to calculate the percentage of",
          "_percent": "Percent amount (1 - 100)"
        }
      },
      "sellCancel()": {
        "details": "Cancel the for sale status setup by sellPrepare()"
      },
      "sellPrepare(uint256,uint256)": {
        "details": "Position in a contract can be sold to another party. This function     makes the callers side available for sale. A party can buy the side     with the buy function.",
        "params": {
          "_desiredStrikePrice": "Sellers desired sell strike price",
          "_timeLimit": "Sale available until this time in UNIX epoch seconds                 (< now for no limit)"
        }
      },
      "sellUpdate(uint256)": {
        "details": "Seller can update the price on the sale."
      },
      "status()": {
        "details": "Derive status from the state variables.",
        "return": "Status reflecting the current state."
      },
      "topup(uint256)": {
        "details": "Party adds more funds to the contract thereby increasing their     deposit balance.",
        "params": {
          "_value": "DAI amount"
        }
      },
      "transferPosition(address)": {
        "details": "Parties can transfer contract ownership to another address by     calling this function.",
        "params": {
          "_newAddress": "Addreess of the new party to swap in."
        }
      },
      "upgrade()": {
        "details": "Upgrade contract to a new version. This involves creating a new CFD     at the latest contract set - transferring over all properties and     value from this one to the new one.     An upgrade requires a call to this function from both parties. Then     upgrade will happen when the second party makes the call."
      },
      "withdraw(uint256)": {
        "details": "Party withdraws funds from the contract.     They can only withdraw down to an amount that leaves the collateral     to notional difference at 20% or more.",
        "params": {
          "_withdrawAmount": "Amount to withdraw from the deposits balance."
        }
      }
    },
    "title": "Contract for difference * Contract for difference for a given market between a \"buyer\" (long position) and \"seller\" (short position)."
  },
  "userdoc": {
    "methods": {
      "creatorFee(uint256)": {
        "notice": "Creator fee - 0.3% of notional."
      },
      "forceTerminate()": {
        "notice": "Force terminate executed by one party who will penalised 5% of their collateral. Then penalty will be sent to the counterparty."
      },
      "getCfdAttributes()": {
        "notice": "Returns an array with all the attributes of the contract (Had to split in 3 functions because of the stack limit) Max number of return values == 8"
      },
      "joinerFee(uint256)": {
        "notice": "Joiner (deposit or buy) percentage fee - 0.5% of notional."
      }
    }
  }
}