{
  "contractName": "ContractForDifference",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "notionalAmountDai",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "seller",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "feedsAddr",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "terminated",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "FORCE_TERMINATE_PENALTY_PERCENT",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerSaleStrikePrice",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerInitialNotional",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerDepositBalance",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "upgradeCalledBy",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "upgradeable",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "MINIMUM_NOTIONAL_AMOUNT_DAI",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "closed",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerSaleTimeLimit",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerInitialStrikePrice",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyer",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerInitialNotional",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerSaleStrikePrice",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "market",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "cfdRegistryAddr",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerDepositBalance",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "initiated",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerSelling",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "strikePrice",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerInitialStrikePrice",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerSaleTimeLimit",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerSelling",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "notionalAmountDai",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "deposit",
          "type": "uint256"
        }
      ],
      "name": "LogCFDCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "joiner",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amountSent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "notionalAmountDai",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "strikePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "buyerDepositBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "sellerDepositBalance",
          "type": "uint256"
        }
      ],
      "name": "LogCFDInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "LogCFDTransferPosition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        }
      ],
      "name": "LogCFDCanceledNew",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "newStrikePrice",
          "type": "uint256"
        }
      ],
      "name": "LogCFDStrikePriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "saleStrikePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "timeLimit",
          "type": "uint256"
        }
      ],
      "name": "LogCFDSale",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        }
      ],
      "name": "LogCFDSaleCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "LogCFDSaleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "newNotional",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "sellerAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "buyerDeposit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        }
      ],
      "name": "LogCFDSold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "isWithdraw",
          "type": "bool"
        },
        {
          "indexed": false,
          "name": "newBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        }
      ],
      "name": "LogCFDPartyBalanceUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LogCFDTransferFunds",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "buyerCollateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "sellerCollateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        }
      ],
      "name": "LogCFDClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "terminator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "terminatorAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "otherParty",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "otherPartyAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        }
      ],
      "name": "LogCFDForceTerminated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "newCFD",
          "type": "address"
        }
      ],
      "name": "LogCFDUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "remainder",
          "type": "uint256"
        }
      ],
      "name": "LogCFDRemainingBalanceUnexpected",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isActive",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isBuyerSelling",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isSellerSelling",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_party",
          "type": "address"
        }
      ],
      "name": "isSelling",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_party",
          "type": "address"
        }
      ],
      "name": "isContractParty",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_registryAddr",
          "type": "address"
        },
        {
          "name": "_cfdRegistryAddr",
          "type": "address"
        },
        {
          "name": "_feedsAddr",
          "type": "address"
        },
        {
          "name": "_partyAddr",
          "type": "address"
        },
        {
          "name": "_marketId",
          "type": "bytes32"
        },
        {
          "name": "_strikePrice",
          "type": "uint256"
        },
        {
          "name": "_notionalAmountDai",
          "type": "uint256"
        },
        {
          "name": "_isBuyer",
          "type": "bool"
        }
      ],
      "name": "create",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_cfdAddr",
          "type": "address"
        },
        {
          "name": "_registryAddr",
          "type": "address"
        },
        {
          "name": "_cfdRegistryAddr",
          "type": "address"
        },
        {
          "name": "_feedsAddr",
          "type": "address"
        }
      ],
      "name": "createByUpgrade",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCfdAttributes",
      "outputs": [
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "bytes32"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "bool"
        },
        {
          "name": "",
          "type": "bool"
        },
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCfdAttributes2",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCfdAttributes3",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        },
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "cancelNew",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "topup",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_newAddress",
          "type": "address"
        }
      ],
      "name": "transferPosition",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_desiredStrikePrice",
          "type": "uint256"
        },
        {
          "name": "_timeLimit",
          "type": "uint256"
        }
      ],
      "name": "sellPrepare",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_newPrice",
          "type": "uint256"
        }
      ],
      "name": "sellUpdate",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_newStrikePrice",
          "type": "uint256"
        }
      ],
      "name": "changeStrikePrice",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "sellCancel",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_buyBuyerSide",
          "type": "bool"
        },
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "liquidate",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "forceTerminate",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "upgrade",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "status",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_marketPrice",
          "type": "uint256"
        },
        {
          "name": "_buyerDepositBalance",
          "type": "uint256"
        },
        {
          "name": "_sellerDepositBalance",
          "type": "uint256"
        },
        {
          "name": "_strikePrice",
          "type": "uint256"
        }
      ],
      "name": "marketPriceInRange",
      "outputs": [
        {
          "name": "inRange",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_oldNotional",
          "type": "uint256"
        },
        {
          "name": "_oldStrikePrice",
          "type": "uint256"
        },
        {
          "name": "_newStrikePrice",
          "type": "uint256"
        }
      ],
      "name": "calculateNewNotional",
      "outputs": [
        {
          "name": "newNotional",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_strikePrice",
          "type": "uint256"
        },
        {
          "name": "_marketPrice",
          "type": "uint256"
        },
        {
          "name": "_notionalAmount",
          "type": "uint256"
        },
        {
          "name": "_depositBalance",
          "type": "uint256"
        },
        {
          "name": "_isBuyer",
          "type": "bool"
        }
      ],
      "name": "calculateCollateralAmount",
      "outputs": [
        {
          "name": "collateral",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_notionalAmountDai",
          "type": "uint256"
        },
        {
          "name": "_depositBalance",
          "type": "uint256"
        },
        {
          "name": "_strikePrice",
          "type": "uint256"
        },
        {
          "name": "_calcForBuyerSide",
          "type": "bool"
        }
      ],
      "name": "cutOffPrice",
      "outputs": [
        {
          "name": "price",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_notional",
          "type": "uint256"
        }
      ],
      "name": "creatorFee",
      "outputs": [
        {
          "name": "fee",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_notional",
          "type": "uint256"
        }
      ],
      "name": "joinerFee",
      "outputs": [
        {
          "name": "fee",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_strikePrice",
          "type": "uint256"
        },
        {
          "name": "_currentPrice",
          "type": "uint256"
        },
        {
          "name": "_notionalAmount",
          "type": "uint256"
        }
      ],
      "name": "changeInDai",
      "outputs": [
        {
          "name": "change",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_value",
          "type": "uint256"
        },
        {
          "name": "_newValue",
          "type": "uint256"
        }
      ],
      "name": "percentChange",
      "outputs": [
        {
          "name": "percent",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_amount",
          "type": "uint256"
        },
        {
          "name": "_percent",
          "type": "uint256"
        }
      ],
      "name": "percentOf",
      "outputs": [
        {
          "name": "adjusted",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "bytecode": "0x6080604052600f80547fffffffffffff000000000000000000000000000000000000000000ff0000ffff16905534801561003857600080fd5b506157a480620000496000396000f3fe6080604052600436106102b05763ffffffff60e060020a600035041663037b9c1781146102b557806308551a53146102dc5780630a10ff5f1461030d5780630c247fdb14610322578063194307bf146103585780631a9fddf2146103815780631bcccdf7146103ad5780631bdfca01146103c2578063200d2ed2146103d757806322e20d2a1461041057806322f3e2d4146104255780632802759b1461043a57806328a07025146104855780632a6d096f1461049a5780632d4dce7d146104f05780632e1a7d4d146105055780632f301a781461052f57806330db555f14610565578063333c9dda1461058f578063393d8533146105a457806341c20c8e146105e257806346f33a6d146105f757806348ddb0dd1461060c578063497b13d3146106215780635407baea14610636578063597e1fb5146106695780635df0d4cd1461067e5780635dfa360a146106e65780635e24e35d1461072a5780636182fab31461075d5780636a8100b2146107725780637028875e146107875780637150d8ae146107b15780637185b30c146107c657806378561939146107db57806378c3829b146107f05780637af5cde91461081a5780637b103999146108565780637d21f9501461086b57806380f55605146108a3578063818197ea146108b85780638505571e146108e857806393a965121461091257806398074eb41461092757806398531f281461093c5780639c03d24a146109515780639dec1430146109815780639f11853614610996578063a6f40821146109ab578063ae3cde59146109db578063b6b55f25146109f0578063c2ef94f614610a1a578063c52987cf14610a96578063c93c88d714610aab578063d525be3214610ac0578063d55ec69714610af3578063df0fdcdc14610b08578063e24c469b14610b1d578063f797efda14610b4f578063fe2e569914610b64575b600080fd5b3480156102c157600080fd5b506102ca610b79565b60408051918252519081900360200190f35b3480156102e857600080fd5b506102f1610b7f565b60408051600160a060020a039092168252519081900360200190f35b34801561031957600080fd5b506102f1610b8e565b34801561032e57600080fd5b506102ca6004803603606081101561034557600080fd5b5080359060208101359060400135610b9d565b34801561036457600080fd5b5061036d610bb2565b604080519115158252519081900360200190f35b34801561038d57600080fd5b506103ab600480360360208110156103a457600080fd5b5035610bc3565b005b3480156103b957600080fd5b506102ca610f97565b3480156103ce57600080fd5b506102ca610f9c565b3480156103e357600080fd5b506103ec610fa2565b604051808260038111156103fc57fe5b60ff16815260200191505060405180910390f35b34801561041c57600080fd5b506102ca611008565b34801561043157600080fd5b5061036d61100e565b34801561044657600080fd5b506103ab6004803603608081101561045d57600080fd5b50600160a060020a03813581169160208101358216916040820135811691606001351661103d565b34801561049157600080fd5b506103ab6116d9565b3480156104a657600080fd5b506104af6119f1565b604080519889526020890197909752878701959095526060870193909352608086019190915260a085015260c084015260e083015251908190036101000190f35b3480156104fc57600080fd5b506102ca611a13565b34801561051157600080fd5b506103ab6004803603602081101561052857600080fd5b5035611a19565b34801561053b57600080fd5b506102ca6004803603606081101561055257600080fd5b5080359060208101359060400135611f9b565b34801561057157600080fd5b506103ab6004803603602081101561058857600080fd5b5035611fa8565b34801561059b57600080fd5b506102f16123af565b3480156105b057600080fd5b506102ca600480360360808110156105c757600080fd5b508035906020810135906040810135906060013515156123c8565b3480156105ee57600080fd5b5061036d6123df565b34801561060357600080fd5b5061036d6123f1565b34801561061857600080fd5b506102ca612419565b34801561062d57600080fd5b506103ab612425565b34801561064257600080fd5b5061036d6004803603602081101561065957600080fd5b5035600160a060020a03166126dd565b34801561067557600080fd5b5061036d61270d565b34801561068a57600080fd5b506103ab60048036036101008110156106a257600080fd5b50600160a060020a0381358116916020810135821691604082013581169160608101359091169060808101359060a08101359060c08101359060e00135151561271d565b3480156106f257600080fd5b506102ca600480360360a081101561070957600080fd5b50803590602081013590604081013590606081013590608001351515612acf565b34801561073657600080fd5b506103ab6004803603602081101561074d57600080fd5b5035600160a060020a0316612ae8565b34801561076957600080fd5b506102ca612e6c565b34801561077e57600080fd5b506102ca612e72565b34801561079357600080fd5b506103ab600480360360208110156107aa57600080fd5b5035612e78565b3480156107bd57600080fd5b506102f1613101565b3480156107d257600080fd5b506102ca613110565b3480156107e757600080fd5b506102ca613116565b3480156107fc57600080fd5b506102ca6004803603602081101561081357600080fd5b503561311c565b34801561082657600080fd5b5061036d6004803603608081101561083d57600080fd5b5080359060208101359060408101359060600135613127565b34801561086257600080fd5b506102f1613167565b34801561087757600080fd5b50610880613176565b604080519215158352600160a060020a0390911660208301528051918290030190f35b3480156108af57600080fd5b506102ca61319c565b3480156108c457600080fd5b506103ab600480360360408110156108db57600080fd5b50803590602001356131a2565b3480156108f457600080fd5b506102ca6004803603602081101561090b57600080fd5b5035613670565b34801561091e57600080fd5b506103ab61367b565b34801561093357600080fd5b506102f1613b36565b34801561094857600080fd5b5061036d613b45565b34801561095d57600080fd5b506102ca6004803603604081101561097457600080fd5b5080359060200135613b68565b34801561098d57600080fd5b506102ca613b7b565b3480156109a257600080fd5b5061036d613b81565b3480156109b757600080fd5b506102ca600480360360408110156109ce57600080fd5b5080359060200135613b90565b3480156109e757600080fd5b5061036d613b9c565b3480156109fc57600080fd5b506103ab60048036036020811015610a1357600080fd5b5035613ba5565b348015610a2657600080fd5b50610a2f61402c565b60408051600160a060020a03808b16825289166020820152908101879052606081018690526080810185905283151560a082015282151560c082015260e08101826003811115610a7b57fe5b60ff1681526020019850505050505050505060405180910390f35b348015610aa257600080fd5b506102ca61408a565b348015610ab757600080fd5b506102ca614090565b348015610acc57600080fd5b5061036d60048036036020811015610ae357600080fd5b5035600160a060020a0316614096565b348015610aff57600080fd5b506103ab6140dd565b348015610b1457600080fd5b506102ca61479b565b348015610b2957600080fd5b506103ab60048036036040811015610b4057600080fd5b508035151590602001356147a1565b348015610b5b57600080fd5b506103ab614d76565b348015610b7057600080fd5b5061036d614ed5565b60035481565b600154600160a060020a031681565b601154600160a060020a031681565b6000610baa848484614ee3565b949350505050565b600f54640100000000900460ff1681565b610bcb61100e565b60408051808201909152600e8152600080516020615719833981519152602082015280821515610c7c5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610c41578181015183820152602001610c29565b50505050905090810190601f168015610c6e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50610c8633614096565b60408051808201909152601981527f6d73672e73656e646572206d7573742062652073656c6c657200000000000000602082015280821515610d0d5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610c41578181015183820152602001610c29565b5060408051808201909152601181527f5072696365206d757374206265203e2030000000000000000000000000000000602082015260008611908082610d985760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610c41578181015183820152602001610c29565b5060008054600160a060020a03163314610db3576000610db6565b60015b90506000610de860035483610dcd57600a54610dd1565b6009545b84610dde57600854610de2565b6007545b85614efc565b600054909150600160a060020a0316331415610ea05760408051606081018252602381527f4d757374206265206d6f7265207468616e206c69717569646174696f6e207072602082015260e860020a626963650291810191909152818a11610e955760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610c41578181015183820152602001610c29565b50600b899055610f51565b600154600160a060020a0316331415610f515760408051606081018252602381527f4d757374206265206c657373207468616e206c69717569646174696f6e207072602082015260e860020a626963650291810191909152818a10610f4a5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610c41578181015183820152602001610c29565b50600d8990555b60408051338152602081018b905281517fbbee2154904c4910310beb779cb9f970f5faa539a34158662d3963477f19ce31929181900390910190a1505050505050505050565b600581565b600b5481565b600f546000906301000000900460ff16151560011415610fc457506003611005565b600f5462010000900460ff161515610fde57506000611005565b610fe6613b45565b80610ff45750610ff46123f1565b1561100157506002611005565b5060015b90565b60055481565b600f5460009062010000900460ff16151560011480156110385750600f546301000000900460ff16155b905090565b600084905080600160a060020a03166380f556056040518163ffffffff1660e060020a02815260040160206040518083038186803b15801561107e57600080fd5b505afa158015611092573d6000803e3d6000fd5b505050506040513d60208110156110a857600080fd5b5051600255604080517f037b9c170000000000000000000000000000000000000000000000000000000081529051600160a060020a0383169163037b9c17916004808301926020929190829003018186803b15801561110657600080fd5b505afa15801561111a573d6000803e3d6000fd5b505050506040513d602081101561113057600080fd5b5051600355604080517fc52987cf0000000000000000000000000000000000000000000000000000000081529051600160a060020a0383169163c52987cf916004808301926020929190829003018186803b15801561118e57600080fd5b505afa1580156111a2573d6000803e3d6000fd5b505050506040513d60208110156111b857600080fd5b5051600655604080517f7150d8ae0000000000000000000000000000000000000000000000000000000081529051600160a060020a03831691637150d8ae916004808301926020929190829003018186803b15801561121657600080fd5b505afa15801561122a573d6000803e3d6000fd5b505050506040513d602081101561124057600080fd5b505160008054600160a060020a031916600160a060020a03928316179055604080517f08551a530000000000000000000000000000000000000000000000000000000081529051918316916308551a5391600480820192602092909190829003018186803b1580156112b157600080fd5b505afa1580156112c5573d6000803e3d6000fd5b505050506040513d60208110156112db57600080fd5b505160018054600160a060020a031916600160a060020a03928316179055604080517f9dec1430000000000000000000000000000000000000000000000000000000008152905191831691639dec143091600480820192602092909190829003018186803b15801561134c57600080fd5b505afa158015611360573d6000803e3d6000fd5b505050506040513d602081101561137657600080fd5b5051600955604080517f7185b30c0000000000000000000000000000000000000000000000000000000081529051600160a060020a03831691637185b30c916004808301926020929190829003018186803b1580156113d457600080fd5b505afa1580156113e8573d6000803e3d6000fd5b505050506040513d60208110156113fe57600080fd5b50516004908155604080517fc93c88d70000000000000000000000000000000000000000000000000000000081529051600160a060020a0384169263c93c88d792808201926020929091829003018186803b15801561145c57600080fd5b505afa158015611470573d6000803e3d6000fd5b505050506040513d602081101561148657600080fd5b5051600755604080517f2d4dce7d0000000000000000000000000000000000000000000000000000000081529051600160a060020a03831691632d4dce7d916004808301926020929190829003018186803b1580156114e457600080fd5b505afa1580156114f8573d6000803e3d6000fd5b505050506040513d602081101561150e57600080fd5b5051600a55604080517f22e20d2a0000000000000000000000000000000000000000000000000000000081529051600160a060020a038316916322e20d2a916004808301926020929190829003018186803b15801561156c57600080fd5b505afa158015611580573d6000803e3d6000fd5b505050506040513d602081101561159657600080fd5b5051600555604080517f6a8100b20000000000000000000000000000000000000000000000000000000081529051600160a060020a03831691636a8100b2916004808301926020929190829003018186803b1580156115f457600080fd5b505afa158015611608573d6000803e3d6000fd5b505050506040513d602081101561161e57600080fd5b505160085560108054600160a060020a03808616600160a060020a031992831617928390556012805488831690841617905560118054868316931692909217909155600f805462ff00001916620100001790556001546040805160e160020a6340f46fd102815291831660048301525192909116916381e8dfa29160248082019260009290919082900301818387803b1580156116ba57600080fd5b505af11580156116ce573d6000803e3d6000fd5b505050505050505050565b6116e161100e565b60408051808201909152600e81526000805160206157198339815191526020820152808215156117565760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610c41578181015183820152602001610c29565b506000611761614f9d565b905061177581600954600a54600654613127565b156117f0576040805160e560020a62461bcd02815260206004820152602360248201527f4c6971756964617465207468726573686f6c64206e6f7420796574207265616360448201527f6865640000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b60006118056003546009546006546001614efc565b905080821160008161182257600154600160a060020a031661182f565b600054600160a060020a03165b90506000601260009054906101000a9004600160a060020a0316600160a060020a0316638ef855686040518163ffffffff1660e060020a02815260040160206040518083038186803b15801561188457600080fd5b505afa158015611898573d6000803e3d6000fd5b505050506040513d60208110156118ae57600080fd5b50516040805160e060020a6370a082310281523060048201529051600160a060020a03909216916370a0823191602480820192602092909190829003018186803b1580156118fb57600080fd5b505afa15801561190f573d6000803e3d6000fd5b505050506040513d602081101561192557600080fd5b505190506119338282615036565b60408051600160a060020a03841681526020810183905281516000805160206156f9833981519152929181900390910190a1600f805463ff000000191663010000001790557faa0254c6ef7b0f13349b08e091c677fb9d83e5829f3e697eee7127c0702292b382846119a65760006119a8565b825b856119b357836119b6565b60005b60025460408051600160a060020a0390951685526020850193909352838301919091526060830152519081900360800190a150505050505050565b600454600554600954600a54600b54600d546007546008549091929394959697565b600a5481565b60408051606081018252602281527f43616e2774207769746864726177206d6f7265207468656e20617661696c616260208201527f6c650000000000000000000000000000000000000000000000000000000000009181019190915281906001821015611acb5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610c41578181015183820152602001610c29565b50600f5460408051808201909152601181527f4d75737420626520696e6974696174656400000000000000000000000000000060208201529062010000900460ff161515600114611b615760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610c41578181015183820152602001610c29565b50600f5460408051808201909152601281526000805160206156d98339815191526020820152906301000000900460ff1615611be25760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610c41578181015183820152602001610c29565b50611bec336126dd565b60606040519081016040528060218152602001600080516020615759833981519152815260200160f860020a607302815250901515611c705760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610c41578181015183820152602001610c29565b50611c7a33614096565b60408051808201909152601d815260008051602061573983398151915260208201529015611ced5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610c41578181015183820152602001610c29565b5060008054600160a060020a031633149081611d0b57600a54611d0f565b6009545b905080841115611dbc5760408051606081018252602281527f43616e2774207769746864726177206d6f7265207468656e20617661696c616260208083019182527f6c6500000000000000000000000000000000000000000000000000000000000083850152925160e560020a62461bcd02815260048101938452825160248201528251929392839260449092019190808383600083811015610c41578181015183820152602001610c29565b8381036000611dc9614f9d565b9050611df58185611ddc57600954611dde565b835b86611de95784611ded565b600a545b600654613127565b1515611e6657604080518082018252601781526000805160206156b98339815191526020808301918252925160e560020a62461bcd02815260048101938452825160248201528251929392839260449092019190808383600083811015610c41578181015183820152602001610c29565b6000611e796006548360035486896151fe565b9050611e876003548261526e565b1515611ef857604080518082018252601781526000805160206156b98339815191526020808301918252925160e560020a62461bcd02815260048101938452825160248201528251929392839260449092019190808383600083811015610c41578181015183820152602001610c29565b611f023388615036565b604080513381526020810189905281516000805160206156f9833981519152929181900390910190a18415611f3b576009839055611f41565b600a8390555b60025460408051338152602081018a9052600181830152606081018690526080810192909252517fea455ea564b4652eabbfbcf652bb6439ed6f6edea8eb0525f2becb5aec40c8649181900360a00190a150505050505050565b6000610baa84848461529b565b60408051808201909152601181527f416d6f756e74206e6f7420656e6f756768000000000000000000000000000000602082015260018210159080826120335760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610c41578181015183820152602001610c29565b50600f5460408051808201909152601181527f4d75737420626520696e6974696174656400000000000000000000000000000060208201526201000090910460ff1615156001149080826120cc5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610c41578181015183820152602001610c29565b50600f5460408051808201909152601281526000805160206156d98339815191526020820152630100000090910460ff16159080826121505760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610c41578181015183820152602001610c29565b5061215a336126dd565b60606040519081016040528060218152602001600080516020615759833981519152815260200160f860020a60730281525081819015156121e05760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610c41578181015183820152602001610c29565b506121ea33614096565b60408051808201909152601d8152600080516020615739833981519152602082015290159080826122605760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610c41578181015183820152602001610c29565b5060008054600160a060020a03163314906122928d8361228257600a54612286565b6009545b9063ffffffff6152e516565b90506122a06003548261526e565b151561231157604080518082018252601781526000805160206156b98339815191526020808301918252925160e560020a62461bcd02815260048101938452825160248201528251929392839260449092019190808383600083811015610c41578181015183820152602001610c29565b61231a8d6152f7565b811561232a576009819055612330565b600a8190555b7fea455ea564b4652eabbfbcf652bb6439ed6f6edea8eb0525f2becb5aec40c864338e6000846002546040518086600160a060020a0316600160a060020a03168152602001858152602001841515151581526020018381526020018281526020019550505050505060405180910390a150505050505050505050505050565b600f5466010000000000009004600160a060020a031681565b60006123d685858585614efc565b95945050505050565b600f5465010000000000900460ff1681565b600f54600090610100900460ff1680156110385750600e541580611038575050600e54421090565b670de0b6b3a764000081565b600f5460408051808201909152601581527f4d757374206e6f7420626520696e69746961746564000000000000000000000060208201526201000090910460ff16159080826124b95760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610c41578181015183820152602001610c29565b506124c3336126dd565b60606040519081016040528060218152602001600080516020615759833981519152815260200160f860020a60730281525081819015156125495760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610c41578181015183820152602001610c29565b50601254604080517f8ef855680000000000000000000000000000000000000000000000000000000081529051600092600160a060020a031691638ef85568916004808301926020929190829003018186803b1580156125a857600080fd5b505afa1580156125bc573d6000803e3d6000fd5b505050506040513d60208110156125d257600080fd5b50516040805160e060020a6370a082310281523060048201529051600160a060020a03909216916370a0823191602480820192602092909190829003018186803b15801561261f57600080fd5b505afa158015612633573d6000803e3d6000fd5b505050506040513d602081101561264957600080fd5b505190506126573382615036565b604080513381526020810183905281516000805160206156f9833981519152929181900390910190a1600f805463ff00000019166301000000179055600254604080513381526020810184905280820192909252517f6407ec2a4ae9d6ab72d4d8edded079bc20dae08edf3fcedd15fa606583efd1449181900360600190a15050505050565b60008054600160a060020a03838116911614806127075750600154600160a060020a038381169116145b92915050565b600f546301000000900460ff1681565b60408051808201909152601681527f4e6f74696f6e616c2062656c6f77206d696e696d756d000000000000000000006020820152670de0b6b3a76400008310159080826127af5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610c41578181015183820152602001610c29565b5060128054600160a060020a031916600160a060020a038c81169190911791829055604080517f8ef85568000000000000000000000000000000000000000000000000000000008152905160009390921691638ef8556891600480820192602092909190829003018186803b15801561282757600080fd5b505afa15801561283b573d6000803e3d6000fd5b505050506040513d602081101561285157600080fd5b50516040805160e060020a6370a082310281523060048201529051600160a060020a03909216916370a0823191602480820192602092909190829003018186803b15801561289e57600080fd5b505afa1580156128b2573d6000803e3d6000fd5b505050506040513d60208110156128c857600080fd5b5051905060006128d7866154c2565b905080821161295d57604080518082018252601d81527f4e6f7420656e6f7567682073656e7420746f20636f76657220666565730000006020808301918252925160e560020a62461bcd02815260048101938452825160248201528251929392839260449092019190808383600083811015610c41578181015183820152602001610c29565b80820361296a878261526e565b15156129db57604080518082018252601781526000805160206156b98339815191526020808301918252925160e560020a62461bcd02815260048101938452825160248201528251929392839260449092019190808383600083811015610c41578181015183820152602001610c29565b8515612a065760008054600160a060020a031916600160a060020a038c161790556009819055612a27565b60018054600160a060020a031916600160a060020a038c16179055600a8190555b600289905560038790556004879055600587905560068890556007889055600888905560108054600160a060020a03808f16600160a060020a031992831617909255601180548e8416921691909117905560408051918c168252602082018b905281810189905260608201859052517f69d73ba3035242abcb4cbe9e73c2317a193d589f1ab392766a856075e4a5ea9d9181900360800190a150505050505050505050505050565b6000612ade86868686866151fe565b9695505050505050565b600f5460408051808201909152601281526000805160206156d98339815191526020820152630100000090910460ff1615908082612b6b5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610c41578181015183820152602001610c29565b50612b75336126dd565b60606040519081016040528060218152602001600080516020615759833981519152815260200160f860020a6073028152508181901515612bfb5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610c41578181015183820152602001610c29565b50612c05856126dd565b60408051808201909152601e81527f436f6e74726163742070617274792063616e27742063616c6c2074686973000060208201529015908082612c8d5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610c41578181015183820152602001610c29565b50612c9733614096565b60408051808201909152601d815260008051602061573983398151915260208201529015908082612d0d5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610c41578181015183820152602001610c29565b50600054600160a060020a0316331415612d415760008054600160a060020a031916600160a060020a038b16179055612db5565b600154600160a060020a0316331415612d745760018054600160a060020a031916600160a060020a038b16179055612db5565b600f5466010000000000009004600160a060020a0316331415612db557600f805479ffffffffffffffffffffffffffffffffffffffff000000000000191690555b6010546040805160e160020a6340f46fd1028152600160a060020a038c81166004830152915191909216916381e8dfa291602480830192600092919082900301818387803b158015612e0657600080fd5b505af1158015612e1a573d6000803e3d6000fd5b505060408051338152600160a060020a038d16602082015281517fce6084c9f950738add8e5747a76463fe6d6652d782d26beabe2b69029391a5df9450908190039091019150a1505050505050505050565b600c5481565b60085481565b600f5460408051808201909152601581527f4d757374206e6f7420626520696e69746961746564000000000000000000000060208201526201000090910460ff1615908082612f0c5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610c41578181015183820152602001610c29565b50600f5460408051808201909152601281526000805160206156d98339815191526020820152630100000090910460ff1615908082612f905760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610c41578181015183820152602001610c29565b50612f9a336126dd565b60606040519081016040528060218152602001600080516020615759833981519152815260200160f860020a60730281525081819015156130205760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610c41578181015183820152602001610c29565b5060408051808201909152601181527f5072696365206d757374206265203e20300000000000000000000000000000006020820152600088119080826130ab5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610c41578181015183820152602001610c29565b5060068990556007899055600889905560408051338152602081018b905281517fe77dd1d532a40e832a7a0938f6bcc6e7724487734f75f6b1f84dfeddcc32c47c929181900390910190a1505050505050505050565b600054600160a060020a031681565b60045481565b600d5481565b6000612707826154c2565b60008061313960035486856001614efc565b9050600061314c60035486866000614efc565b9050818711801561315c57508087105b979650505050505050565b601254600160a060020a031681565b600f54640100000000810460ff16916601000000000000909104600160a060020a031690565b60025481565b6131ab336126dd565b60606040519081016040528060218152602001600080516020615759833981519152815260200160f860020a60730281525081819015156132315760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610c41578181015183820152602001610c29565b5061323a61100e565b60408051808201909152600e81526000805160206157198339815191526020820152808215156132af5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610c41578181015183820152602001610c29565b506132b933614096565b60408051808201909152601d81526000805160206157398339815191526020820152901590808261332f5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610c41578181015183820152602001610c29565b5060408051808201909152601181527f5072696365206d757374206265203e20300000000000000000000000000000006020820152600089119080826133ba5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610c41578181015183820152602001610c29565b5060008054600160a060020a031633146133d55760006133d8565b60015b905060006133ef60035483610dcd57600a54610dd1565b905060006133fc8c6154e1565b600054909150600160a060020a03163314156134c65760408051606081018252602381527f4d757374206265206d6f7265207468616e206c69717569646174696f6e207072602082015260e860020a626963650291810191909152828e116134a95760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610c41578181015183820152602001610c29565b50600f805460ff19166001179055600b8d9055600c81905561358b565b600154600160a060020a031633141561358b5760408051606081018252602381527f4d757374206265206c657373207468616e206c69717569646174696f6e207072602082015260e860020a626963650291810191909152828e106135705760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610c41578181015183820152602001610c29565b50600f805461ff001916610100179055600d8d9055600e8190555b601054604080517f62c597040000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a03909216916362c597049160248082019260009290919082900301818387803b1580156135f057600080fd5b505af1158015613604573d6000803e3d6000fd5b505050507fb5d6baf622d177db5af6d250d11c52507155dbc0359dd6ab5f7c65ca36c4ffc1338e836040518084600160a060020a0316600160a060020a03168152602001838152602001828152602001935050505060405180910390a150505050505050505050505050565b6000612707826154f5565b61368361100e565b60408051808201909152600e81526000805160206157198339815191526020820152808215156136f85760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610c41578181015183820152602001610c29565b50613702336126dd565b60606040519081016040528060218152602001600080516020615759833981519152815260200160f860020a60730281525081819015156137885760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610c41578181015183820152602001610c29565b506000613793614f9d565b60008054600654600354600954949550600160a060020a039092163314936137be92869160016151fe565b905060006137d660065485600354600a5460006151fe565b905060006138ee826138e285601260009054906101000a9004600160a060020a0316600160a060020a0316638ef855686040518163ffffffff1660e060020a02815260040160206040518083038186803b15801561383357600080fd5b505afa158015613847573d6000803e3d6000fd5b505050506040513d602081101561385d57600080fd5b50516040805160e060020a6370a082310281523060048201529051600160a060020a03909216916370a0823191602480820192602092909190829003018186803b1580156138aa57600080fd5b505afa1580156138be573d6000803e3d6000fd5b505050506040513d60208110156138d457600080fd5b50519063ffffffff61550416565b9063ffffffff61550416565b9050801561392a576040805182815290517fec6a0b860bf684f74dbe39a6138edd92b8c04da302be601f5a4cfea6099b31aa9181900360200190a15b61393381615519565b600061394c856139435783613945565b845b60056155ad565b9050841561397d57613964848263ffffffff61550416565b9350613976838263ffffffff6152e516565b92506139a2565b61398d848263ffffffff6152e516565b935061399f838263ffffffff61550416565b92505b6000546139b890600160a060020a031685615036565b60005460408051600160a060020a0390921682526020820186905280516000805160206156f98339815191529281900390910190a1600154613a0390600160a060020a031684615036565b60015460408051600160a060020a0390921682526020820185905280516000805160206156f98339815191529281900390910190a1600f805463ff0000001964ff0000000019909116640100000000171663010000001790558415613ac85760005460015460025460408051600160a060020a03948516815260208101899052929093168284015260608201869052608082015290517f81bf0ecca77d43968d8c2687fe97a6d65b62e33063055c15042f5d5fd63abe289181900360a00190a1613b2a565b60015460005460025460408051600160a060020a03948516815260208101889052929093168284015260608201879052608082015290517f81bf0ecca77d43968d8c2687fe97a6d65b62e33063055c15042f5d5fd63abe289181900360a00190a15b50505050505050505050565b601054600160a060020a031681565b600f5460009060ff1680156110385750600c541580611038575050600c54421090565b6000613b7483836155b5565b9392505050565b60095481565b600f5462010000900460ff1681565b6000613b7483836155ad565b600f5460ff1681565b600f5460408051808201909152601581527f4d757374206e6f7420626520696e69746961746564000000000000000000000060208201526201000090910460ff1615908082613c395760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610c41578181015183820152602001610c29565b50600f5460408051808201909152601281526000805160206156d98339815191526020820152630100000090910460ff1615908082613cbd5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610c41578181015183820152602001610c29565b50613cc7336126dd565b60408051808201909152601e81527f436f6e74726163742070617274792063616e27742063616c6c2074686973000060208201529015908082613d4f5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610c41578181015183820152602001610c29565b506000613d5d6003546154f5565b9050808811613de357604080518082018252601d81527f4e6f7420656e6f7567682073656e7420746f20636f76657220666565730000006020808301918252925160e560020a62461bcd02815260048101938452825160248201528251929392839260449092019190808383600083811015610c41578181015183820152602001610c29565b60035481890390613df4908261526e565b1515613e6557604080518082018252601781526000805160206156b98339815191526020808301918252925160e560020a62461bcd02815260048101938452825160248201528251929392839260449092019190808383600083811015610c41578181015183820152602001610c29565b613e6e896152f7565b613e83613e7c6003546154c2565b8301615519565b600054600160a060020a03161515613eb15760008054600160a060020a031916331790556009819055613ec9565b60018054600160a060020a03191633179055600a8190555b600f805462ff00001916620100001790556010546040805160e160020a6340f46fd10281523360048201529051600160a060020a03909216916381e8dfa29160248082019260009290919082900301818387803b158015613f2957600080fd5b505af1158015613f3d573d6000803e3d6000fd5b505050507f94bdcbfe1580a4a1b6292d3543b07391ef8e107a5168feefc7412f3da94ebe31338a6000809054906101000a9004600160a060020a0316600160009054906101000a9004600160a060020a0316600254600354600654600954600a54604051808a600160a060020a0316600160a060020a0316815260200189815260200188600160a060020a0316600160a060020a0316815260200187600160a060020a0316600160a060020a03168152602001868152602001858152602001848152602001838152602001828152602001995050505050505050505060405180910390a1505050505050505050565b60008054600154600254600654600354600f548695869586958695869586958695600160a060020a0390811695169392919060ff80821691610100900416614072610fa2565b969f959e50939c50919a509850965094509092509050565b60065481565b60075481565b60008054600160a060020a0383811691161480156140b757506140b7613b45565b806127075750600154600160a060020a03838116911614801561270757506127076123f1565b6140e6336126dd565b60606040519081016040528060218152602001600080516020615759833981519152815260200160f860020a607302815250818190151561416c5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610c41578181015183820152602001610c29565b5061417561100e565b60408051808201909152600e81526000805160206157198339815191526020820152808215156141ea5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610c41578181015183820152602001610c29565b506141f433614096565b60408051808201909152601d81526000805160206157398339815191526020820152901590808261426a5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610c41578181015183820152602001610c29565b50600f5460408051808201909152601981527f6d73672e73656e64657220616c72656164792063616c6c65640000000000000060208201526601000000000000909104600160a060020a031633141590808261430b5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610c41578181015183820152602001610c29565b50601260009054906101000a9004600160a060020a0316600160a060020a03166323ec7f2a6040518163ffffffff1660e060020a02815260040160206040518083038186803b15801561435d57600080fd5b505afa158015614371573d6000803e3d6000fd5b505050506040513d602081101561438757600080fd5b5051601254604080517f0c5a95f80000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a039384169390921691630c5a95f891602480820192602092909190829003018186803b1580156143f157600080fd5b505afa158015614405573d6000803e3d6000fd5b505050506040513d602081101561441b57600080fd5b505160408051808201909152601981527f416c7265616479206174206c61746573742076657273696f6e000000000000006020820152600160a060020a0390911691909114159080826144b35760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610c41578181015183820152602001610c29565b50600f5466010000000000009004600160a060020a0316151561450357600f805479ffffffffffffffffffffffffffffffffffffffff000000000000191633660100000000000002179055613b2a565b600f805465ff0000000000191665010000000000179055601254604080517f23ec7f2a0000000000000000000000000000000000000000000000000000000081529051600092600160a060020a0316916323ec7f2a916004808301926020929190829003018186803b15801561457857600080fd5b505afa15801561458c573d6000803e3d6000fd5b505050506040513d60208110156145a257600080fd5b5051604080517f165ae0fc0000000000000000000000000000000000000000000000000000000081529051919250600091600160a060020a0384169163165ae0fc91600480830192602092919082900301818787803b15801561460457600080fd5b505af1158015614618573d6000803e3d6000fd5b505050506040513d602081101561462e57600080fd5b5051601254604080517f8ef85568000000000000000000000000000000000000000000000000000000008152905192935061473c928492600160a060020a031691638ef85568916004808301926020929190829003018186803b15801561469457600080fd5b505afa1580156146a8573d6000803e3d6000fd5b505050506040513d60208110156146be57600080fd5b50516040805160e060020a6370a082310281523060048201529051600160a060020a03909216916370a0823191602480820192602092909190829003018186803b15801561470b57600080fd5b505afa15801561471f573d6000803e3d6000fd5b505050506040513d602081101561473557600080fd5b5051615036565b600f805465ff00ff0000001916630100000017905560408051600160a060020a038316815290517fbf44b7c20b944f553303a3ec7caff0a29f0378e297b7d9dc5b1267d359b7ea6c9181900360200190a1505050505050505050505050565b600e5481565b816147aa61100e565b60408051808201909152600e8152600080516020615719833981519152602082015290151561481e5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610c41578181015183820152602001610c29565b5061484a8161483857600154600160a060020a0316614845565b600054600160a060020a03165b614096565b60408051808201909152600f81527f4d757374206265206f6e2073616c65000000000000000000000000000000000060208201529015156148d05760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610c41578181015183820152602001610c29565b506148da336126dd565b60408051808201909152601e81527f436f6e74726163742070617274792063616e27742063616c6c207468697300006020820152901561495f5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610c41578181015183820152602001610c29565b50600061496d6003546154f5565b90508083116149f357604080518082018252601d81527f4e6f7420656e6f7567682073656e7420746f20636f76657220666565730000006020808301918252925160e560020a62461bcd02815260048101938452825160248201528251929392839260449092019190808383600083811015610c41578181015183820152602001610c29565b6000614a05848363ffffffff61550416565b9050614a136003548261526e565b1515614a8457604080518082018252601781526000805160206156b98339815191526020808301918252925160e560020a62461bcd02815260048101938452825160248201528251929392839260449092019190808383600083811015610c41578181015183820152602001610c29565b6000614a8e614f9d565b9050600086614a9f57600d54614aa3565b600b545b9050614acd8288614ab657600954614ab8565b845b89614ac35785614ac7565b600a545b84613127565b1515614b3e57604080518082018252601781526000805160206156b98339815191526020808301918252925160e560020a62461bcd02815260048101938452825160248201528251929392839260449092019190808383600083811015610c41578181015183820152602001610c29565b614b47866152f7565b614b5084615519565b600087614b6857600154600160a060020a0316614b75565b600054600160a060020a03165b90506000614b848984846155ee565b90506000614bdd86601260009054906101000a9004600160a060020a0316600160a060020a0316638ef855686040518163ffffffff1660e060020a02815260040160206040518083038186803b15801561383357600080fd5b90506000614bf06003546006548761529b565b90508a15614c235760008054600160a060020a03191633179055600987905560078590556004819055600a829055614c4a565b60018054600160a060020a03191633179055600a8790556008859055600581905560098290555b60068590556003819055614c5d8b615656565b600f54600160a060020a038581166601000000000000909204161415614ca157600f805479ffffffffffffffffffffffffffffffffffffffff000000000000191690555b6010546040805160e160020a6340f46fd10281523360048201529051600160a060020a03909216916381e8dfa29160248082019260009290919082900301818387803b158015614cf057600080fd5b505af1158015614d04573d6000803e3d6000fd5b505060025460408051338152600160a060020a038916602082015280820186905260608101889052608081018f905260a0810192909252517fd356d730a2af36f9a0a6dfacdadfec02dd284bedaf298f1f5894a869abb3b63693509081900360c0019150a15050505050505050505050565b614d7e61100e565b60408051808201909152600e8152600080516020615719833981519152602082015280821515614df35760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610c41578181015183820152602001610c29565b50614dfd33614096565b60408051808201909152601981527f6d73672e73656e646572206d7573742062652073656c6c657200000000000000602082015280821515614e845760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610c41578181015183820152602001610c29565b50600054614e9c90600160a060020a03163314615656565b6040805133815290517f82229214624615d3bbec967c7100737095261ce7b7cf043d442f92d635b737619181900360200190a150505050565b600f54610100900460ff1681565b600080614ef085856155b5565b90506123d683826155ad565b60008082614f135768052663ccab1e1c0000614f1e565b6805b12aefafa80400005b9050600068056bc75e2d63100000858302049050600068056bc75e2d631000008868056bc75e2d6310000088028902811515614f5657fe5b04811515614f6057fe5b049050848015614f6f57508181115b15614f805760009350505050610baa565b84614f8d57808201614f91565b8082035b98975050505050505050565b601154600254604080517f61da1439000000000000000000000000000000000000000000000000000000008152600481019290925251600092600160a060020a0316916361da1439916024808301926020929190829003018186803b15801561500557600080fd5b505afa158015615019573d6000803e3d6000fd5b505050506040513d602081101561502f57600080fd5b5051919050565b601260009054906101000a9004600160a060020a0316600160a060020a0316638ef855686040518163ffffffff1660e060020a02815260040160206040518083038186803b15801561508757600080fd5b505afa15801561509b573d6000803e3d6000fd5b505050506040513d60208110156150b157600080fd5b5051604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a038581166004830152602482018590529151919092169163a9059cbb9160448083019260209291908290030181600087803b15801561511f57600080fd5b505af1158015615133573d6000803e3d6000fd5b505050506040513d602081101561514957600080fd5b505160408051606081018252602b81527f4661696c757265207472616e73666572696e67206f776e657273686970206f6660208201527f2044414920746f6b656e73000000000000000000000000000000000000000000918101919091529015156151f95760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610c41578181015183820152602001610c29565b505050565b600068056bc75e2d631000008481029087908790869085908085808603820281151561522657fe5b05870281151561523257fe5b0581151561523c57fe5b05905060008761524e57818303615252565b8183015b9050600081121561525f57fe5b9b9a5050505050505050505050565b600061527b8360146155ad565b8210158015613b745750615291836101f46155ad565b8211159392505050565b600068056bc75e2d631000006152d3846152bb858463ffffffff61568d16565b8115156152c457fe5b8791900463ffffffff61568d16565b8115156152dc57fe5b04949350505050565b600082820183811015613b7457600080fd5b601260009054906101000a9004600160a060020a0316600160a060020a0316638ef855686040518163ffffffff1660e060020a02815260040160206040518083038186803b15801561534857600080fd5b505afa15801561535c573d6000803e3d6000fd5b505050506040513d602081101561537257600080fd5b5051604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018490529051600160a060020a03909216916323b872dd916064808201926020929091908290030181600087803b1580156153e457600080fd5b505af11580156153f8573d6000803e3d6000fd5b505050506040513d602081101561540e57600080fd5b505160408051606081018252602b81527f4661696c757265207472616e73666572696e67206f776e657273686970206f6660208201527f2044414920746f6b656e73000000000000000000000000000000000000000000918101919091529015156154be5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610c41578181015183820152602001610c29565b5050565b6000600a6154d18360036155ad565b8115156154da57fe5b0492915050565b60004282116154f1576000612707565b5090565b6000600a6154d18360056155ad565b60008282111561551357600080fd5b50900390565b601254604080517fdb8d55f100000000000000000000000000000000000000000000000000000000815290516155aa92600160a060020a03169163db8d55f1916004808301926020929190829003018186803b15801561557857600080fd5b505afa15801561558c573d6000803e3d6000fd5b505050506040513d60208110156155a257600080fd5b505182615036565b50565b606491020490565b6000818314156155c757506000612707565b828203600084606483028115156155da57fe5b05905060008113610baa57806000036123d6565b6000615611600654846003548761560757600a5461560b565b6009545b886151fe565b905061561d8282615036565b60408051600160a060020a03841681526020810183905281516000805160206156f9833981519152929181900390910190a19392505050565b8015615675576000600b819055600c55600f805460ff191690556155aa565b6000600d819055600e55600f805461ff001916905550565b600082151561569e57506000612707565b8282028284828115156156ad57fe5b0414613b7457600080fdfe636f6c6c61746572616c496e52616e67652066616c73650000000000000000004d757374206e6f7420626520636c6f7365640000000000000000000000000000ae0c91484288809ae2c2fb81551bd9d06d4d3bcbbce87f3c5a3d5775f299358b4d757374206265206163746976650000000000000000000000000000000000006d73672e73656e646572206d757374206e6f742062652073656c6c65720000004f6e6c7920636f6e747261637420706172746965732063616e20646f20746869a165627a7a72305820b9c94b19d5435418fa76689c3d6d404bcdc672f8c5097b7a0d37da6fbabad1cc0029",
  "deployedBytecode": "",
  "sourceMap": "637:41126:4:-;;;5050:29;;;5452:43;;;;5633:23;5:2:-1;;;;30:1;27;20:12;5:2;5633:23:4;637:41126;;;;;;",
  "deployedSourceMap": "637:41126:4:-;;;;;;;;;-1:-1:-1;;;637:41126:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4408:29;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4408:29:4;;;;;;;;;;;;;;;;;;;;4319:21;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4319:21:4;;;;;;;;-1:-1:-1;;;;;4319:21:4;;;;;;;;;;;;;;5538:24;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5538:24:4;;;;39096:332;;8:9:-1;5:2;;;30:1;27;20:12;5:2;39096:332:4;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;39096:332:4;;;;;;;;;;;;;5117:22;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5117:22:4;;;;;;;;;;;;;;;;;;;;;;21338:1152;;8:9:-1;5:2;;;30:1;27;20:12;5:2;21338:1152:4;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;21338:1152:4;;;;;4076:56;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4076:56:4;;;;4836:32;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4836:32:4;;;;33823:354;;8:9:-1;5:2;;;30:1;27;20:12;5:2;33823:354:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4481:33;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4481:33:4;;;;5805:107;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5805:107:4;;;;9865:1064;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9865:1064:4;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;;;;;;9865:1064:4;;;;;;;;;;;;;;;;;;;;;;;;;28296:1353;;8:9:-1;5:2;;;30:1;27;20:12;5:2;28296:1353:4;;;;11484:440;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11484:440:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4797:32;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4797:32:4;;;;16035:1667;;8:9:-1;5:2;;;30:1;27;20:12;5:2;16035:1667:4;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;16035:1667:4;;;36117:364;;8:9:-1;5:2;;;30:1;27;20:12;5:2;36117:364:4;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;36117:364:4;;;;;;;;;;;;;14689:1064;;8:9:-1;5:2;;;30:1;27;20:12;5:2;14689:1064:4;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;14689:1064:4;;;5452:43;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5452:43:4;;;;38117:403;;8:9:-1;5:2;;;30:1;27;20:12;5:2;38117:403:4;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;38117:403:4;;;;;;;;;;;;;;;;;;;;5292:31;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5292:31:4;;;;6303:162;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6303:162:4;;;;4138:59;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4138:59:4;;;;14079:452;;8:9:-1;5:2;;;30:1;27;20:12;5:2;14079:452:4;;;;6984:127;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6984:127:4;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;6984:127:4;-1:-1:-1;;;;;6984:127:4;;;5085:26;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5085:26:4;;;;7851:1623;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7851:1623:4;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;;;;;;7851:1623:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;37065:470;;8:9:-1;5:2;;;30:1;27;20:12;5:2;37065:470:4;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;37065:470:4;;;;;;;;;;;;;;;;;;;;;;;;;18399:708;;8:9:-1;5:2;;;30:1;27;20:12;5:2;18399:708:4;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;18399:708:4;-1:-1:-1;;;;;18399:708:4;;;4874:30;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4874:30:4;;;;4643:36;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4643:36:4;;;;22589:574;;8:9:-1;5:2;;;30:1;27;20:12;5:2;22589:574:4;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;22589:574:4;;;4259:20;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4259:20:4;;;;4443:32;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4443:32:4;;;;4911:33;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4911:33:4;;;;38581:140;;8:9:-1;5:2;;;30:1;27;20:12;5:2;38581:140:4;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;38581:140:4;;;34929:685;;8:9:-1;5:2;;;30:1;27;20:12;5:2;34929:685:4;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;34929:685:4;;;;;;;;;;;;;;;;;;5569:24;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5569:24:4;;;;11929:180;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11929:180:4;;;;;;;;;;;;;-1:-1:-1;;;;;11929:180:4;;;;;;;;;;;;;;;;4380:21;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4380:21:4;;;;19514:1749;;8:9:-1;5:2;;;30:1;27;20:12;5:2;19514:1749:4;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;19514:1749:4;;;;;;;;38809:138;;8:9:-1;5:2;;;30:1;27;20:12;5:2;38809:138:4;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;38809:138:4;;;29813:2421;;8:9:-1;5:2;;;30:1;27;20:12;5:2;29813:2421:4;;;;5502:30;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5502:30:4;;;;6027:158;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6027:158:4;;;;39735:203;;8:9:-1;5:2;;;30:1;27;20:12;5:2;39735:203:4;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;39735:203:4;;;;;;;;4760:31;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4760:31:4;;;;5050:29;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5050:29:4;;;;40119:197;;8:9:-1;5:2;;;30:1;27;20:12;5:2;40119:197:4;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;40119:197:4;;;;;;;;4988:24;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4988:24:4;;;;12370:1454;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12370:1454:4;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;12370:1454:4;;;11119:360;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11119:360:4;;;;;;;;-1:-1:-1;;;;;11119:360:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4573:23;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4573:23:4;;;;4602:35;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4602:35:4;;;;6605:178;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6605:178:4;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;6605:178:4;-1:-1:-1;;;;;6605:178:4;;;32612:1085;;8:9:-1;5:2;;;30:1;27;20:12;5:2;32612:1085:4;;;;4950:31;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4950:31:4;;;;23740:2811;;8:9:-1;5:2;;;30:1;27;20:12;5:2;23740:2811:4;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;23740:2811:4;;;;;;;;;;23247:251;;8:9:-1;5:2;;;30:1;27;20:12;5:2;23247:251:4;;;;5018:25;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5018:25:4;;;;4408:29;;;;:::o;4319:21::-;;;-1:-1:-1;;;;;4319:21:4;;:::o;5538:24::-;;;-1:-1:-1;;;;;5538:24:4;;:::o;39096:332::-;39253:11;39289:132;39343:12;39369:13;39396:15;39289:40;:132::i;:::-;39280:141;39096:332;-1:-1:-1;;;;39096:332:4:o;5117:22::-;;;;;;;;;:::o;21338:1152::-;21422:10;:8;:10::i;:::-;21434:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;21434:21:4;;;;;285:26:0;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21474:21:4;21484:10;21474:9;:21::i;:::-;21497;;;;;;;;;;;;;;;;;;285:26:0;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;21552:29:4;;;;;;;;;;;;;;;;;21549:1;21537:13;;;21552:29;21537:13;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;21631:12:4;21661:5;;-1:-1:-1;;;;;21661:5:4;21647:10;:19;21646:36;;21677:5;21646:36;;;21670:4;21646:36;21631:51;;21692:11;21706:246;21760:17;;21792:7;21791:54;;21825:20;;21791:54;;;21803:19;;21791:54;21860:7;21859:62;;21897:24;;21859:62;;;21871:23;;21859:62;21935:7;21706:40;:246::i;:::-;21981:5;;21692:260;;-1:-1:-1;;;;;;21981:5:4;21967:10;:19;21963:466;;;22099:31;;;;;;;;;;;;;;;;-1:-1:-1;;;;;22099:31:4;;;;;;;22079:18;;;22071:60;;;;-1:-1:-1;;;;;22071:60:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;22071:60:4;-1:-1:-1;22145:20:4;:32;;;21963:466;;;22212:6;;-1:-1:-1;;;;;22212:6:4;22198:10;:20;22194:235;;;22339:31;;;;;;;;;;;;;;;;-1:-1:-1;;;;;22339:31:4;;;;;;;22319:18;;;22311:60;;;;-1:-1:-1;;;;;22311:60:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;22311:60:4;-1:-1:-1;22385:21:4;:33;;;22194:235;22443:40;;;22461:10;22443:40;;;;;;;;;;;;;;;;;;;;;321:1:0;;;;;;21338:1152:4;;;:::o;4076:56::-;4131:1;4076:56;:::o;4836:32::-;;;;:::o;33823:354::-;33912:6;;33886;;33912;;;;;:14;;33922:4;33912:14;33908:262;;;-1:-1:-1;33947:13:4;33940:20;;33908:262;33979:9;;;;;;;:18;;33975:195;;-1:-1:-1;34018:14:4;34011:21;;33975:195;34051:16;:14;:16::i;:::-;:37;;;;34071:17;:15;:17::i;:::-;34047:123;;;-1:-1:-1;34109:11:4;34102:18;;34047:123;-1:-1:-1;34154:16:4;34047:123;33823:354;:::o;4481:33::-;;;;:::o;5805:107::-;5869:9;;5846:4;;5869:9;;;;;:17;;5882:4;5869:17;:36;;;;-1:-1:-1;5890:6:4;;;;;;;:15;5869:36;5862:43;;5805:107;:::o;9865:1064::-;10044:28;10097:8;10044:62;;10126:6;-1:-1:-1;;;;;10126:13:4;;:15;;;;;-1:-1:-1;;;10126:15:4;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10126:15:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10126:15:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10126:15:4;10117:6;:24;10171:26;;;;;;;;-1:-1:-1;;;;;10171:24:4;;;;;:26;;;;;10126:15;;10171:26;;;;;;;:24;:26;;;5:2:-1;;;;30:1;27;20:12;5:2;10171:26:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10171:26:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10171:26:4;10151:17;:46;10221:20;;;;;;;;-1:-1:-1;;;;;10221:18:4;;;;;:20;;;;;10171:26;;10221:20;;;;;;;:18;:20;;;5:2:-1;;;;30:1;27;20:12;5:2;10221:20:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10221:20:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10221:20:4;10207:11;:34;10259:14;;;;;;;;-1:-1:-1;;;;;10259:12:4;;;;;:14;;;;;10221:20;;10259:14;;;;;;;:12;:14;;;5:2:-1;;;;30:1;27;20:12;5:2;10259:14:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10259:14:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10259:14:4;10251:5;:22;;-1:-1:-1;;;;;;10251:22:4;-1:-1:-1;;;;;10251:22:4;;;;;;10292:15;;;;;;;;:13;;;;;;:15;;;;;10259:14;;10292:15;;;;;;;;:13;:15;;;5:2:-1;;;;30:1;27;20:12;5:2;10292:15:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10292:15:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10292:15:4;10283:6;:24;;-1:-1:-1;;;;;;10283:24:4;-1:-1:-1;;;;;10283:24:4;;;;;;10340:28;;;;;;;;:26;;;;;;:28;;;;;10292:15;;10340:28;;;;;;;;:26;:28;;;5:2:-1;;;;30:1;27;20:12;5:2;10340:28:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10340:28:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10340:28:4;10318:19;:50;10401:29;;;;;;;;-1:-1:-1;;;;;10401:27:4;;;;;:29;;;;;10340:28;;10401:29;;;;;;;:27;:29;;;5:2:-1;;;;30:1;27;20:12;5:2;10401:29:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10401:29:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10401:29:4;10378:20;:52;;;10466:32;;;;;;;;-1:-1:-1;;;;;10466:30:4;;;;;:32;;;;10401:29;;10466:32;;;;;;;:30;:32;;;5:2:-1;;;;30:1;27;20:12;5:2;10466:32:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10466:32:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10466:32:4;10440:23;:58;10532:29;;;;;;;;-1:-1:-1;;;;;10532:27:4;;;;;:29;;;;;10466:32;;10532:29;;;;;;;:27;:29;;;5:2:-1;;;;30:1;27;20:12;5:2;10532:29:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10532:29:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10532:29:4;10509:20;:52;10595:30;;;;;;;;-1:-1:-1;;;;;10595:28:4;;;;;:30;;;;;10532:29;;10595:30;;;;;;;:28;:30;;;5:2:-1;;;;30:1;27;20:12;5:2;10595:30:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10595:30:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10595:30:4;10571:21;:54;10662:33;;;;;;;;-1:-1:-1;;;;;10662:31:4;;;;;:33;;;;;10595:30;;10662:33;;;;;;;:31;:33;;;5:2:-1;;;;30:1;27;20:12;5:2;10662:33:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10662:33:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10662:33:4;10635:24;:60;10706:15;:34;;-1:-1:-1;;;;;10706:34:4;;;-1:-1:-1;;;;;;10706:34:4;;;;;;;;10750:8;:34;;;;;;;;;;;10794:9;:22;;;;;;;;;;;;;;10827:9;:16;;-1:-1:-1;;10827:16:4;;;;;10706:34;10915:6;10854:68;;;-1:-1:-1;;;;;10854:68:4;;10915:6;;;10854:68;;;;;10884:15;;;;;10854:60;;:68;;;;;10706:15;;10854:68;;;;;;;;10706:15;10884;10854:68;;;5:2:-1;;;;30:1;27;20:12;5:2;10854:68:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10854:68:4;;;;9865:1064;;;;;:::o;28296:1353::-;28351:10;:8;:10::i;:::-;28363:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;28363:21:4;;;;;285:26:0;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;28400:16:4;28419:13;:11;:13::i;:::-;28400:32;;28590:165;28626:11;28655:19;;28692:20;;28730:11;;28590:18;:165::i;:::-;28589:166;28568:249;;;;;-1:-1:-1;;;;;28568:249:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;28897:16;28916:157;28970:17;;29001:19;;29034:11;;29059:4;28916:40;:157::i;:::-;28897:176;-1:-1:-1;29181:25:4;;;29160:18;29181:25;29233:30;;29257:6;;-1:-1:-1;;;;;29257:6:4;29233:30;;;29249:5;;-1:-1:-1;;;;;29249:5:4;29233:30;29216:47;;29302:14;29319:8;;;;;;;;;-1:-1:-1;;;;;29319:8:4;-1:-1:-1;;;;;29319:15:4;;:17;;;;;-1:-1:-1;;;29319:17:4;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;29319:17:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;29319:17:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;29319:17:4;:42;;;-1:-1:-1;;;;;29319:42:4;;29355:4;29319:42;;;;;;-1:-1:-1;;;;;29319:27:4;;;;;;:42;;;;;:17;;:42;;;;;;;;:27;:42;;;5:2:-1;;;;30:1;27;20:12;5:2;29319:42:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;29319:42:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;29319:42:4;;-1:-1:-1;29371:30:4;29383:6;29319:42;29371:11;:30::i;:::-;29416:38;;;-1:-1:-1;;;;;29416:38:4;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;29416:38:4;;;;;;;;;;29465:6;:13;;-1:-1:-1;;29465:13:4;;;;;29494:148;29520:6;29540:13;:29;;29568:1;29540:29;;;29556:9;29540:29;29583:13;:29;;29603:9;29583:29;;;29599:1;29583:29;29626:6;;29494:148;;;-1:-1:-1;;;;;29494:148:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;321:1:0;;;;;28296:1353:4;;:::o;11484:440::-;11641:20;;11675:21;;11710:19;;11743:20;;11777;;11811:21;;11846:23;;11883:24;;11484:440;;;;;;;;:::o;4797:32::-;;;;:::o;16035:1667::-;17884:26;;;;;;;;;;;;;;;;;;;;;;;;16122:15;;17881:1;17862:20;;;17854:57;;;;-1:-1:-1;;;;;17854:57:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;17854:57:4;-1:-1:-1;17929:9:4;;17948:24;;;;;;;;;;;;;;;;;;17929:9;;;;;:17;;17942:4;17929:17;17921:52;;;;-1:-1:-1;;;;;17921:52:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;17921:52:4;-1:-1:-1;17991:6:4;;18008:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;18008:25:4;;;;;17991:6;;;;;:15;17983:51;;;;-1:-1:-1;;;;;17983:51:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;17983:51:4;;18052:27;18068:10;18052:15;:27::i;:::-;18081:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;18081:28:4;;;;-1:-1:-1;;;;;18081:28:4;;;18044:66;;;;;;;-1:-1:-1;;;;;18044:66:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;18044:66:4;;18128:21;18138:10;18128:9;:21::i;:::-;18160:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;18160:25:4;;;;;18128:30;18120:66;;;;-1:-1:-1;;;;;18120:66:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;18120:66:4;-1:-1:-1;16153:12:4;16182:5;;-1:-1:-1;;;;;16182:5:4;16168:10;:19;;;16222:52;;16254:20;;16222:52;;;16232:19;;16222:52;16197:77;;16377:17;16359:15;:35;16355:87;;;16415:26;;;;;;;;;;;;;;;;;;;;;;;;16408:34;;-1:-1:-1;;;;;16408:34:4;;;;;;;;;;;;;;;;16415:26;;16408:34;;;;;;;;16415:26;16408:34;;16415:26;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;16355:87:4;16574:35;;;16553:18;16638:13;:11;:13::i;:::-;16619:32;;16666:222;16698:11;16723:7;:45;;16749:19;;16723:45;;;16733:13;16723:45;16782:7;:46;;16815:13;16782:46;;;16792:20;;16782:46;16842:11;;16666:18;:222::i;:::-;16665:223;16661:294;;;16911:32;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;16911:32:4;;;;;;;16904:40;;-1:-1:-1;;;;;16904:40:4;;;;;;;;;;;;;;;;16911:32;;16904:40;;;;;;;;16911:32;16904:40;;16911:32;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;16661:294:4;16965:15;16983:193;17051:11;;17076;17101:17;;17132:13;17159:7;16983:54;:193::i;:::-;16965:211;;17192:77;17239:17;;17258:10;17192:46;:77::i;:::-;17191:78;17187:147;;;17292:30;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;17292:30:4;;;;;;;17285:38;;-1:-1:-1;;;;;17285:38:4;;;;;;;;;;;;;;;;17292:30;;17285:38;;;;;;;;17292:30;17285:38;;17292:30;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;17187:147:4;17344:40;17356:10;17368:15;17344:11;:40::i;:::-;17399:48;;;17419:10;17399:48;;;;;;;;;;-1:-1:-1;;;;;;;;;;;17399:48:4;;;;;;;;;;17462:7;17458:140;;;17485:19;:35;;;17458:140;;;17551:20;:36;;;17458:140;17688:6;;17613:82;;;17638:10;17613:82;;;;;;;;17667:4;17613:82;;;;;;;;;;;;;;;;;;;;;;;;;;;18196:1;;;;;16035:1667;;:::o;36117:364::-;36285:16;36331:143;36394:12;36420:15;36449;36331:49;:143::i;14689:1064::-;14764:24;;;;;;;;;;;;;;;;;14761:1;14751:11;;;;14764:24;14751:11;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;14807:9:4;;14826:24;;;;;;;;;;;;;;;;;14807:9;;;;;;:17;;14820:4;14807:17;;14826:24;14807:17;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;14869:6:4;;14886:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;14886:25:4;;;;14869:6;;;;;;:15;;14886:25;14869:15;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;14930:27:4;14946:10;14930:15;:27::i;:::-;14959:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;14959:28:4;;;;-1:-1:-1;;;;;14959:28:4;;;293:9:0;304:6;285:26;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;15006:21:4;15016:10;15006:9;:21::i;:::-;15038:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;15038:25:4;;;;15006:30;;;15038:25;15006:30;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;15079:12:4;15108:5;;-1:-1:-1;;;;;15108:5:4;15094:10;:19;;15148:101;15242:6;15094:19;15149:78;;15207:20;;15149:78;;;15172:19;;15149:78;15148:93;:101;:93;:101;:::i;:::-;15123:126;;15331:84;15378:17;;15397;15331:46;:84::i;:::-;15330:85;15326:141;;;15436:30;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;15436:30:4;;;;;;;15429:38;;-1:-1:-1;;;;;15429:38:4;;;;;;;;;;;;;;;;15436:30;;15429:38;;;;;;;;15436:30;15429:38;;15436:30;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;15326:141:4;15478:16;15487:6;15478:8;:16::i;:::-;15509:7;15505:148;;;15532:19;:39;;;15505:148;;;15602:20;:40;;;15505:148;15668:78;15693:10;15705:6;15713:5;15720:17;15739:6;;15668:78;;;;-1:-1:-1;;;;;15668:78:4;-1:-1:-1;;;;;15668:78:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;321:1:0;;;;;;;;;;14689:1064:4;;;:::o;5452:43::-;;;;;;-1:-1:-1;;;;;5452:43:4;;:::o;38117:403::-;38311:10;38345:168;38399:18;38431:15;38460:12;38486:17;38345:40;:168::i;:::-;38337:176;38117:403;-1:-1:-1;;;;;38117:403:4:o;5292:31::-;;;;;;;;;:::o;6303:162::-;6374:13;;6351:4;;6374:13;;;;;:84;;;;-1:-1:-1;6404:19:4;;:24;;:53;;-1:-1:-1;;6438:19:4;;6432:3;:25;;6303:162::o;4138:59::-;4189:8;4138:59;:::o;14079:452::-;14134:9;;14154:28;;;;;;;;;;;;;;;;;14134:9;;;;;;:18;;14154:28;14134:18;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;14201:27:4;14217:10;14201:15;:27::i;:::-;14230:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;14230:28:4;;;;-1:-1:-1;;;;;14230:28:4;;;293:9:0;304:6;285:26;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;14292:8:4;;:17;;;;;;;;14274:15;;-1:-1:-1;;;;;14292:8:4;;:15;;:17;;;;;;;;;;;;;;:8;:17;;;5:2:-1;;;;30:1;27;20:12;5:2;14292:17:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;14292:17:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;14292:17:4;:42;;;-1:-1:-1;;;;;14292:42:4;;14328:4;14292:42;;;;;;-1:-1:-1;;;;;14292:27:4;;;;;;:42;;;;;:17;;:42;;;;;;;;:27;:42;;;5:2:-1;;;;30:1;27;20:12;5:2;14292:42:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;14292:42:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;14292:42:4;;-1:-1:-1;14344:35:4;14356:10;14292:42;14344:11;:35::i;:::-;14394:43;;;14414:10;14394:43;;;;;;;;;;-1:-1:-1;;;;;;;;;;;14394:43:4;;;;;;;;;;14447:6;:13;;-1:-1:-1;;14447:13:4;;;;;14517:6;;14475:49;;;14493:10;14475:49;;;;;;;;;;;;;;;;;;;;;;;;;321:1:0;;;14079:452:4;;:::o;6984:127::-;7046:4;7079:5;;-1:-1:-1;;;;;7069:15:4;;;7079:5;;7069:15;;:35;;-1:-1:-1;7098:6:4;;-1:-1:-1;;;;;7088:16:4;;;7098:6;;7088:16;7069:35;7062:42;6984:127;-1:-1:-1;;6984:127:4:o;5085:26::-;;;;;;;;;:::o;7851:1623::-;8221:23;;;;;;;;;;;;;;;;;4189:8;8170:49;;;;8221:23;8170:49;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;8260:8:4;:34;;-1:-1:-1;;;;;;8260:34:4;-1:-1:-1;;;;;8260:34:4;;;;;;;;;;;8322:17;;;;;;;;-1:-1:-1;;8322:8:4;;;;:15;;:17;;;;;;;;;;;;;;;:8;:17;;;5:2:-1;;;;30:1;27;20:12;5:2;8322:17:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8322:17:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;8322:17:4;:42;;;-1:-1:-1;;;;;8322:42:4;;8358:4;8322:42;;;;;;-1:-1:-1;;;;;8322:27:4;;;;;;:42;;;;;:17;;:42;;;;;;;;:27;:42;;;5:2:-1;;;;30:1;27;20:12;5:2;8322:42:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8322:42:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;8322:42:4;;-1:-1:-1;8374:9:4;8386:59;8426:18;8386:39;:59::i;:::-;8374:71;-1:-1:-1;8459:18:4;;;8455:66;;8498:22;;;;;;;;;;;;;;;;;;;8491:30;;-1:-1:-1;;;;;8491:30:4;;;;;;;;;;;;;;;;8498:22;;8491:30;;;;;;;;8498:22;8491:30;;8498:22;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;8455:66:4;8554:17;;;8586:82;8633:18;8554:17;8586:46;:82::i;:::-;8585:83;8581:139;;;8689:30;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;8689:30:4;;;;;;;8682:38;;-1:-1:-1;;;;;8682:38:4;;;;;;;;;;;;;;;;8689:30;;8682:38;;;;;;;;8689:30;8682:38;;8689:30;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;8581:139:4;8735:8;8731:208;;;8759:5;:18;;-1:-1:-1;;;;;;8759:18:4;-1:-1:-1;;;;;8759:18:4;;;;;8791:19;:36;;;8731:208;;;8858:6;:19;;-1:-1:-1;;;;;;8858:19:4;-1:-1:-1;;;;;8858:19:4;;;;;8891:20;:37;;;8731:208;8949:6;:18;;;8977:17;:38;;;9025:20;:41;;;9076:21;:42;;;9129:11;:26;;;9165:23;:38;;;9213:24;:39;;;9263:15;:34;;-1:-1:-1;;;;;9263:34:4;;;-1:-1:-1;;;;;;9263:34:4;;;;;;;9307:9;:22;;;;;;;;;;;;;9345:122;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;321:1:0;;;7851:1623:4;;;;;;;;;;:::o;37065:470::-;37288:15;37332:196;37400:12;37426;37452:15;37481;37510:8;37332:54;:196::i;:::-;37319:209;37065:470;-1:-1:-1;;;;;;37065:470:4:o;18399:708::-;18480:6;;18497:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;18497:25:4;;;;18480:6;;;;;;:15;;18497:25;18480:15;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;18541:27:4;18557:10;18541:15;:27::i;:::-;18570:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;18570:28:4;;;;-1:-1:-1;;;;;18570:28:4;;;293:9:0;304:6;285:26;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;18617:28:4;18633:11;18617:15;:28::i;:::-;18656:24;;;;;;;;;;;;;;;;;18617:37;;;18656:24;18617:37;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;18699:21:4;18709:10;18699:9;:21::i;:::-;18731:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;18731:25:4;;;;18699:30;;;18731:25;18699:30;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;18790:5:4;;-1:-1:-1;;;;;18790:5:4;18776:10;:19;18772:183;;;18797:5;:19;;-1:-1:-1;;;;;;18797:19:4;-1:-1:-1;;;;;18797:19:4;;;;;18772:183;;;18849:6;;-1:-1:-1;;;;;18849:6:4;18835:10;:20;18831:124;;;18857:6;:20;;-1:-1:-1;;;;;;18857:20:4;-1:-1:-1;;;;;18857:20:4;;;;;18831:124;;;18910:15;;;;;-1:-1:-1;;;;;18910:15:4;18896:10;:29;18892:63;;;18927:15;:28;;-1:-1:-1;;18927:28:4;;;18892:63;18995:15;;18965:73;;;-1:-1:-1;;;;;18965:73:4;;-1:-1:-1;;;;;18965:73:4;;;;;;;;;18995:15;;;;;18965:60;;:73;;;;;18995:15;;18965:73;;;;;;;18995:15;;18965:73;;;5:2:-1;;;;30:1;27;20:12;5:2;18965:73:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;19053:47:4;;;19076:10;19053:47;;-1:-1:-1;;;;;19053:47:4;;;;;;;;;;-1:-1:-1;19053:47:4;;;;;;;;-1:-1:-1;19053:47:4;321:1:0;;;;;;18399:708:4;;;:::o;4874:30::-;;;;:::o;4643:36::-;;;;:::o;22589:574::-;22686:9;;22706:28;;;;;;;;;;;;;;;;;22686:9;;;;;;:18;;22706:28;22686:18;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;22753:6:4;;22770:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;22770:25:4;;;;22753:6;;;;;;:15;;22770:25;22753:15;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;22814:27:4;22830:10;22814:15;:27::i;:::-;22843:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;22843:28:4;;;;-1:-1:-1;;;;;22843:28:4;;;293:9:0;304:6;285:26;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;22911:29:4;;;;;;;;;;;;;;;;;22908:1;22890:19;;;22911:29;22890:19;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;22956:11:4;:29;;;22995:23;:41;;;23046:24;:42;;;23103:53;;;23128:10;23103:53;;;;;;;;;;;;;;;;;;;;;321:1:0;;;;;;22589:574:4;;;:::o;4259:20::-;;;-1:-1:-1;;;;;4259:20:4;;:::o;4443:32::-;;;;:::o;4911:33::-;;;;:::o;38581:140::-;38638:8;38664:50;38704:9;38664:39;:50::i;34929:685::-;35133:12;35161:16;35180:159;35234:17;;35265:20;35299:12;35325:4;35180:40;:159::i;:::-;35161:178;;35349:17;35369:161;35423:17;;35454:21;35489:12;35515:5;35369:40;:161::i;:::-;35349:181;;35565:11;35550:12;:26;:57;;;;;35595:12;35580;:27;35550:57;35540:67;34929:685;-1:-1:-1;;;;;;;34929:685:4:o;5569:24::-;;;-1:-1:-1;;;;;5569:24:4;;:::o;11929:180::-;12053:10;;;;;;;;12077:15;;;;-1:-1:-1;;;;;12077:15:4;;11929:180::o;4380:21::-;;;;:::o;19514:1749::-;19612:27;19628:10;19612:15;:27::i;:::-;19641:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;19641:28:4;;;;-1:-1:-1;;;;;19641:28:4;;;293:9:0;304:6;285:26;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;19688:10:4;:8;:10::i;:::-;19700:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;19700:21:4;;;;;285:26:0;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;19795:21:4;19805:10;19795:9;:21::i;:::-;19827:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;19827:25:4;;;;19795:30;;;19827:25;19795:30;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;19896:29:4;;;;;;;;;;;;;;;;;19893:1;19871:23;;;19896:29;19871:23;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;19975:12:4;20005:5;;-1:-1:-1;;;;;20005:5:4;19991:10;:19;19990:36;;20021:5;19990:36;;;20014:4;19990:36;19975:51;;20036:11;20050:246;20104:17;;20136:7;20135:54;;20169:20;;20135:54;;20050:246;20036:260;;20336:14;20353:33;20375:10;20353:21;:33::i;:::-;20414:5;;20336:50;;-1:-1:-1;;;;;;20414:5:4;20400:10;:19;20396:664;;;20543:31;;;;;;;;;;;;;;;;-1:-1:-1;;;;;20543:31:4;;;;;;;20513:28;;;20505:70;;;;-1:-1:-1;;;;;20505:70:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;20505:70:4;-1:-1:-1;20589:12:4;:19;;-1:-1:-1;;20589:19:4;20604:4;20589:19;;;20622:20;:42;;;20678:18;:30;;;20396:664;;;20743:6;;-1:-1:-1;;;;;20743:6:4;20729:10;:20;20725:335;;;20881:31;;;;;;;;;;;;;;;;-1:-1:-1;;;;;20881:31:4;;;;;;;20851:28;;;20843:70;;;;-1:-1:-1;;;;;20843:70:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;20843:70:4;-1:-1:-1;20927:13:4;:20;;-1:-1:-1;;20927:20:4;;;;;20961:21;:43;;;21018:19;:31;;;20725:335;21100:15;;21070:71;;;;;;21130:10;21070:71;;;;;;-1:-1:-1;;;;;21100:15:4;;;;21070:59;;:71;;;;;21100:15;;21070:71;;;;;;;;21100:15;;21070:71;;;5:2:-1;;;;30:1;27;20:12;5:2;21070:71:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;21070:71:4;;;;21156:100;21180:10;21204:19;21237:9;21156:100;;;;-1:-1:-1;;;;;21156:100:4;-1:-1:-1;;;;;21156:100:4;;;;;;;;;;;;;;;;;;;;;;;;;;;321:1:0;;;;;;;;;19514:1749:4;;;;:::o;38809:138::-;38865:8;38891:49;38930:9;38891:38;:49::i;29813:2421::-;29873:10;:8;:10::i;:::-;29885:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;29885:21:4;;;;;285:26:0;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;29925:27:4;29941:10;29925:15;:27::i;:::-;29954:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;29954:28:4;;;;-1:-1:-1;;;;;29954:28:4;;;293:9:0;304:6;285:26;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;29998:16:4;30017:13;:11;:13::i;:::-;30040:24;30081:5;;30188:11;;30238:17;;30269:19;;29998:32;;-1:-1:-1;;;;;;30081:5:4;;;30067:10;:19;;30120:196;;29998:32;;30081:5;30120:54;:196::i;:::-;30097:219;;30326:21;30350:198;30418:11;;30443;30468:17;;30499:20;;30533:5;30350:54;:198::i;:::-;30326:222;;30790:21;30814:124;30921:16;30814:89;30887:15;30814:8;;;;;;;;;-1:-1:-1;;;;;30814:8:4;-1:-1:-1;;;;;30814:15:4;;:17;;;;;-1:-1:-1;;;30814:17:4;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;30814:17:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;30814:17:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;30814:17:4;:55;;;-1:-1:-1;;;;;30814:55:4;;30863:4;30814:55;;;;;;-1:-1:-1;;;;;30814:40:4;;;;;;:55;;;;;:17;;:55;;;;;;;;:40;:55;;;5:2:-1;;;;30:1;27;20:12;5:2;30814:55:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;30814:55:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;30814:55:4;;:89;:72;:89;:::i;:::-;:106;:124;:106;:124;:::i;:::-;30790:148;-1:-1:-1;30952:21:4;;30948:107;;30994:50;;;;;;;;;;;;;;;;;30948:107;31064:35;31082:16;31064:17;:35::i;:::-;31186:12;31201:163;31253:19;:56;;31293:16;31253:56;;;31275:15;31253:56;4131:1;31201:38;:163::i;:::-;31186:178;;31378:19;31374:297;;;31431:28;:15;31451:7;31431:28;:19;:28;:::i;:::-;31413:46;-1:-1:-1;31492:29:4;:16;31513:7;31492:29;:20;:29;:::i;:::-;31473:48;;31374:297;;;31570:28;:15;31590:7;31570:28;:19;:28;:::i;:::-;31552:46;-1:-1:-1;31631:29:4;:16;31652:7;31631:29;:20;:29;:::i;:::-;31612:48;;31374:297;31745:5;;31733:35;;-1:-1:-1;;;;;31745:5:4;31752:15;31733:11;:35::i;:::-;31803:5;;31783:43;;;-1:-1:-1;;;;;31803:5:4;;;31783:43;;;;;;;;;;-1:-1:-1;;;;;;;;;;;31783:43:4;;;;;;;;;31848:6;;31836:37;;-1:-1:-1;;;;;31848:6:4;31856:16;31836:11;:37::i;:::-;31908:6;;31888:45;;;-1:-1:-1;;;;;31908:6:4;;;31888:45;;;;;;;;;;-1:-1:-1;;;;;;;;;;;31888:45:4;;;;;;;;;31944:10;:17;;-1:-1:-1;;;;31944:17:4;;;;;31971:13;;;;;31995:232;;;;32059:5;;;32083:6;32109;;32037:79;;;-1:-1:-1;;;;;32059:5:4;;;32037:79;;;;;;;;32083:6;;;;32037:79;;;;;;;;;;;;;;;;;;;;;;;;;31995:232;;;32170:6;;;32196:5;32220:6;;32148:79;;;-1:-1:-1;;;;;32170:6:4;;;32148:79;;;;;;;;32196:5;;;;32148:79;;;;;;;;;;;;;;;;;;;;;;;;;31995:232;321:1:0;;;;;;;;29813:2421:4;;:::o;5502:30::-;;;-1:-1:-1;;;;;5502:30:4;;:::o;6027:158::-;6097:12;;6074:4;;6097:12;;:81;;;;-1:-1:-1;6126:18:4;;:23;;:51;;-1:-1:-1;;6159:18:4;;6153:3;:24;;6027:158::o;39735:203::-;39832:12;39870:61;39913:6;39921:9;39870:42;:61::i;:::-;39860:71;39735:203;-1:-1:-1;;;39735:203:4:o;4760:31::-;;;;:::o;5050:29::-;;;;;;;;;:::o;40119:197::-;40212:13;40252:57;40291:7;40300:8;40252:38;:57::i;4988:24::-;;;;;;:::o;12370:1454::-;12434:9;;12454:28;;;;;;;;;;;;;;;;;12434:9;;;;;;:18;;12454:28;12434:18;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;12501:6:4;;12518:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;12518:25:4;;;;12501:6;;;;;;:15;;12518:25;12501:15;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;12595:27:4;12611:10;12595:15;:27::i;:::-;12633:24;;;;;;;;;;;;;;;;;12595:36;;;12633:24;12595:36;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;12711:15:4;12729:57;12768:17;;12729:38;:57::i;:::-;12711:75;-1:-1:-1;12800:20:4;;;12796:68;;12841:22;;;;;;;;;;;;;;;;;;;12834:30;;-1:-1:-1;;;;;12834:30:4;;;;;;;;;;;;;;;;12841:22;;12834:30;;;;;;;;12841:22;12834:30;;12841:22;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;12796:68:4;12978:17;;12897:19;;;;12931:81;;12897:19;12931:46;:81::i;:::-;12930:82;12926:138;;;13033:30;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;13033:30:4;;;;;;;13026:38;;-1:-1:-1;;;;;13026:38:4;;;;;;;;;;;;;;;;13033:30;;13026:38;;;;;;;;13033:30;13026:38;;13033:30;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;12926:138:4;13075:16;13084:6;13075:8;:16::i;:::-;13101:112;13145:58;13185:17;;13145:39;:58::i;:::-;13132:10;:71;13101:17;:112::i;:::-;13245:1;13228:5;-1:-1:-1;;;;;13228:5:4;:19;13224:219;;;13263:5;:18;;-1:-1:-1;;;;;;13263:18:4;13271:10;13263:18;;;13295:19;:36;;;13224:219;;;13362:6;:19;;-1:-1:-1;;;;;;13362:19:4;13371:10;13362:19;;;13395:20;:37;;;13224:219;13453:9;:16;;-1:-1:-1;;13453:16:4;;;;;13509:15;;13479:72;;;-1:-1:-1;;;;;13479:72:4;;13540:10;13479:72;;;;;;-1:-1:-1;;;;;13509:15:4;;;;13479:60;;:72;;;;;13453:16;;13479:72;;;;;;;;13453:16;13509:15;13479:72;;;5:2:-1;;;;30:1;27;20:12;5:2;13479:72:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;13479:72:4;;;;13566:251;13595:10;13619:6;13639:5;;;;;;;;;-1:-1:-1;;;;;13639:5:4;13658:6;;;;;;;;;-1:-1:-1;;;;;13658:6:4;13678;;13698:17;;13729:11;;13754:19;;13787:20;;13566:251;;;;-1:-1:-1;;;;;13566:251:4;-1:-1:-1;;;;;13566:251:4;;;;;;;;;;;-1:-1:-1;;;;;13566:251:4;-1:-1:-1;;;;;13566:251:4;;;;;;-1:-1:-1;;;;;13566:251:4;-1:-1:-1;;;;;13566:251:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;321:1:0;;;;;;12370:1454:4;;;:::o;11119:360::-;11192:7;11286:5;;;11305:6;11325;;11345:11;;11370:17;;11401:12;;11192:7;;;;;;;;;;;;;;-1:-1:-1;;;;;11286:5:4;;;;11305:6;;11325;11345:11;11370:17;11401:12;;;;;11286:5;11427:13;;;11454:8;:6;:8::i;:::-;11265:207;;;;-1:-1:-1;11265:207:4;;-1:-1:-1;11265:207:4;;-1:-1:-1;11265:207:4;-1:-1:-1;11265:207:4;-1:-1:-1;11265:207:4;-1:-1:-1;11265:207:4;;-1:-1:-1;11119:360:4;-1:-1:-1;11119:360:4:o;4573:23::-;;;;:::o;4602:35::-;;;;:::o;6605:178::-;6661:4;6695:5;;-1:-1:-1;;;;;6685:15:4;;;6695:5;;6685:15;:35;;;;;6704:16;:14;:16::i;:::-;6684:92;;;-1:-1:-1;6748:6:4;;-1:-1:-1;;;;;6738:16:4;;;6748:6;;6738:16;:37;;;;;6758:17;:15;:17::i;32612:1085::-;32665:27;32681:10;32665:15;:27::i;:::-;32694:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;32694:28:4;;;;-1:-1:-1;;;;;32694:28:4;;;293:9:0;304:6;285:26;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;32741:10:4;:8;:10::i;:::-;32753:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;32753:21:4;;;;;285:26:0;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;32793:21:4;32803:10;32793:9;:21::i;:::-;32825:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;32825:25:4;;;;32793:30;;;32825:25;32793:30;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;32883:15:4;;32900:26;;;;;;;;;;;;;;;;;32883:15;;;;-1:-1:-1;;;;;32883:15:4;32869:10;:29;;;32900:26;32869:29;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;32980:8:4;;;;;;;;;-1:-1:-1;;;;;32980:8:4;-1:-1:-1;;;;;32980:28:4;;:30;;;;;-1:-1:-1;;;32980:30:4;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;32980:30:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;32980:30:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;32980:30:4;32945:8;;:31;;;;;;32970:4;32945:31;;;;;;-1:-1:-1;;;;;32945:65:4;;;;:8;;;;:16;;:31;;;;;32980:30;;32945:31;;;;;;;;:8;:31;;;5:2:-1;;;;30:1;27;20:12;5:2;32945:31:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;32945:31:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;32945:31:4;33012:29;;;;;;;;;;;;;32945:31;33012:29;;;-1:-1:-1;;;;;32945:65:4;;;;;;;;;33012:29;32945:65;285:26:0;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;33109:15:4;;;;;-1:-1:-1;;;;;33109:15:4;:29;33105:108;;;33154:15;:28;;-1:-1:-1;;33154:28:4;33172:10;33154:28;;;;;33196:7;;33105:108;33342:11;:18;;-1:-1:-1;;33342:18:4;;;;;33397:8;;:30;;;;;;;;33342:18;;-1:-1:-1;;;;;33397:8:4;;:28;;:30;;;;;;;;;;;;;;:8;:30;;;5:2:-1;;;;30:1;27;20:12;5:2;33397:30:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;33397:30:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;33397:30:4;33462:64;;;;;;;;33397:30;;-1:-1:-1;33437:14:4;;-1:-1:-1;;;;;33462:62:4;;;;;:64;;;;;33397:30;;33462:64;;;;;;;33437:14;33462:62;:64;;;5:2:-1;;;;30:1;27;20:12;5:2;33462:64:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;33462:64:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;33462:64:4;33557:8;;:17;;;;;;;;33462:64;;-1:-1:-1;33537:63:4;;33462:64;;-1:-1:-1;;;;;33557:8:4;;:15;;:17;;;;;33462:64;;33557:17;;;;;;;:8;:17;;;5:2:-1;;;;30:1;27;20:12;5:2;33557:17:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;33557:17:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;33557:17:4;:42;;;-1:-1:-1;;;;;33557:42:4;;33593:4;33557:42;;;;;;-1:-1:-1;;;;;33557:27:4;;;;;;:42;;;;;:17;;:42;;;;;;;;:27;:42;;;5:2:-1;;;;30:1;27;20:12;5:2;33557:42:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;33557:42:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;33557:42:4;33537:11;:63::i;:::-;33610:11;:19;;-1:-1:-1;;33639:13:4;;;;;33668:22;;;-1:-1:-1;;;;;33668:22:4;;;;;;;;;;;;;;;321:1:0;;;;;;;;;;32612:1085:4;;:::o;4950:31::-;;;;:::o;23740:2811::-;23828:13;26704:10;:8;:10::i;:::-;26716:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;26716:21:4;;;;;26696:42;;;;;;-1:-1:-1;;;;;26696:42:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;26696:42:4;;26756:41;26766:13;:30;;26790:6;;-1:-1:-1;;;;;26790:6:4;26766:30;;;26782:5;;-1:-1:-1;;;;;26782:5:4;26766:30;26756:9;:41::i;:::-;26799:22;;;;;;;;;;;;;;;;;;26748:74;;;;;;-1:-1:-1;;;;;26748:74:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;26748:74:4;;26840:27;26856:10;26840:15;:27::i;:::-;26878:24;;;;;;;;;;;;;;;;;;26840:36;26832:71;;;;-1:-1:-1;;;;;26832:71:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;26832:71:4;;23857:9;23869:57;23908:17;;23869:38;:57::i;:::-;23857:69;-1:-1:-1;23940:14:4;;;23936:62;;23975:22;;;;;;;;;;;;;;;;;;;23968:30;;-1:-1:-1;;;;;23968:30:4;;;;;;;;;;;;;;;;23975:22;;23968:30;;;;;;;;23975:22;23968:30;;23975:22;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;23936:62:4;24071:19;24093:16;:6;24104:4;24093:16;:10;:16;:::i;:::-;24071:38;;24124:81;24171:17;;24190:14;24124:46;:81::i;:::-;24123:82;24119:138;;;24226:30;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;24226:30:4;;;;;;;24219:38;;-1:-1:-1;;;;;24219:38:4;;;;;;;;;;;;;;;;24226:30;;24219:38;;;;;;;;24226:30;24219:38;;24226:30;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;24119:138:4;24268:16;24287:13;:11;:13::i;:::-;24268:32;;24310:19;24332:13;:84;;24395:21;;24332:84;;;24360:20;;24332:84;24310:106;;24492:245;24524:11;24549:13;:52;;24582:19;;24549:52;;;24565:14;24549:52;24615:13;:53;;24654:14;24615:53;;;24631:20;;24615:53;24682:14;24492:18;:245::i;:::-;24491:246;24487:317;;;24760:32;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;24760:32:4;;;;;;;24753:40;;-1:-1:-1;;;;;24753:40:4;;;;;;;;;;;;;;;;24760:32;;24753:40;;;;;;;;24760:32;24753:40;;24760:32;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;24487:317:4;24863:16;24872:6;24863:8;:16::i;:::-;24889:23;24907:4;24889:17;:23::i;:::-;24960:20;24983:13;:30;;25007:6;;-1:-1:-1;;;;;25007:6:4;24983:30;;;24999:5;;-1:-1:-1;;;;;24999:5:4;24983:30;24960:53;;25023:27;25053:107;25083:13;25110:14;25138:12;25053:16;:107::i;:::-;25023:137;;25209:27;25239:75;25299:14;25239:8;;;;;;;;;-1:-1:-1;;;;;25239:8:4;-1:-1:-1;;;;;25239:15:4;;:17;;;;;-1:-1:-1;;;25239:17:4;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;25239:75:4;25209:105;;25362:16;25381:143;25444:17;;25475:11;;25500:14;25381:49;:143::i;:::-;25362:162;;25539:13;25535:536;;;25568:5;:18;;-1:-1:-1;;;;;;25568:18:4;25576:10;25568:18;;;25600:19;:36;;;25650:23;:40;;;25704:20;:34;;;25752:20;:45;;;25535:536;;;25828:6;:19;;-1:-1:-1;;;;;;25828:19:4;25837:10;25828:19;;;25861:20;:37;;;25912:24;:41;;;25967:21;:35;;;26016:19;:44;;;25535:536;26081:11;:28;;;26119:17;:31;;;26161:24;26171:13;26161:9;:24::i;:::-;26272:15;;-1:-1:-1;;;;;26272:31:4;;;:15;;;;;:31;26268:90;;;26319:15;:28;;-1:-1:-1;;26319:28:4;;;26268:90;26398:15;;26368:72;;;-1:-1:-1;;;;;26368:72:4;;26429:10;26368:72;;;;;;-1:-1:-1;;;;;26398:15:4;;;;26368:60;;:72;;;;;26398:15;;26368:72;;;;;;;;26398:15;;26368:72;;;5:2:-1;;;;30:1;27;20:12;5:2;26368:72:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;26537:6:4;;26455:89;;;26466:10;26455:89;;-1:-1:-1;;;;;26455:89:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;26455:89:4;;;;;;;-1:-1:-1;26455:89:4;26913:1;;;;;;;;23740:2811;;;:::o;23247:251::-;23303:10;:8;:10::i;:::-;23315:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;23315:21:4;;;;;285:26:0;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;23355:21:4;23365:10;23355:9;:21::i;:::-;23378;;;;;;;;;;;;;;;;;;285:26:0;;;;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;23439:5:4;;23415:30;;-1:-1:-1;;;;;23439:5:4;23425:10;:19;23415:9;:30::i;:::-;23460:31;;;23480:10;23460:31;;;;;;;;;;;;;321:1:0;;23247:251:4;;:::o;5018:25::-;;;;;;;;;:::o;2574:316:6:-;2733:11;2760:18;2781:42;2795:12;2809:13;2781;:42::i;:::-;2760:63;;2842:41;2852:15;2869:13;2842:9;:41::i;6372:1083::-;6568:10;6655:24;6683:17;6682:96;;1134:24;6682:96;;;1054:25;6682:96;6655:123;-1:-1:-1;6788:22:6;355:8;6814:34;;;6813:50;6788:75;;6921:15;355:8;7002:18;355:8;6972:12;:26;6953:15;:46;:67;;;;;;;;6939:105;;;;;;;;6921:123;;7196:17;:51;;;;;7230:17;7217:10;:30;7196:51;7192:77;;;7268:1;7261:8;;;;;;;7192:77;7340:17;7339:109;;7438:10;7418:17;:30;7339:109;;;7393:10;7373:17;:30;7339:109;7331:117;6372:1083;-1:-1:-1;;;;;;;;6372:1083:6:o;34254:145:4:-;34369:9;;34385:6;;34358:34;;;;;;;;;;;;;;34324:10;;-1:-1:-1;;;;;34369:9:4;;34358:26;;:34;;;;;;;;;;;;;;34369:9;34358:34;;;5:2:-1;;;;30:1;27;20:12;5:2;34358:34:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;34358:34:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;34358:34:4;;34254:145;-1:-1:-1;34254:145:4:o;41134:182::-;41220:8;;;;;;;;;-1:-1:-1;;;;;41220:8:4;-1:-1:-1;;;;;41220:15:4;;:17;;;;;-1:-1:-1;;;41220:17:4;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;41220:17:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;41220:17:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;41220:17:4;:39;;;;;;-1:-1:-1;;;;;41220:39:4;;;;;;;;;;;;;;;:26;;;;;;;:39;;;;;:17;;:39;;;;;;;-1:-1:-1;41220:26:4;:39;;;5:2:-1;;;;30:1;27;20:12;5:2;41220:39:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;41220:39:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;41220:39:4;41273:26;;;;;;;;;;;;41220:39;41273:26;;;;;;;;;;;;41199:110;;;;;;-1:-1:-1;;;;;41199:110:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;41199:110:4;;41134:182;;:::o;4484:972:6:-;4709:15;355:8;5044:33;;;;5100:12;;5135;;5170:15;;4709;;355:8;5100:12;5235:6;;;5234:21;;5233:28;;;;;;;;5228:1;:34;:47;;;;;;;;5214:84;;;;;;;;5197:101;;5308:17;5328:8;:42;;5360:10;5356:1;:14;5328:42;;;5343:10;5339:1;:14;5328:42;5308:62;-1:-1:-1;5405:1:6;5388:18;;;5381:26;;;;5435:13;4484:972;-1:-1:-1;;;;;;;;;;;4484:972:6:o;5462:327::-;5594:12;5644:54;5654:15;516:2;5644:9;:54::i;:::-;5633:7;:65;;5632:150;;;;;5727:54;5737:15;591:3;5727:9;:54::i;:::-;5716:7;:65;;5622:160;5462:327;-1:-1:-1;;;5462:327:6:o;2060:365::-;2230:16;355:8;2290:102;2361:15;2325:32;:15;355:8;2325:32;:19;:32;:::i;:::-;:52;;;;;;;2290:12;;2325:52;;2290:102;:16;:102;:::i;:::-;2276:142;;;;;;;;;2060:365;-1:-1:-1;;;;2060:365:6:o;1431:145:14:-;1489:7;1520:5;;;1543:6;;;;1535:15;;;;;41568:192:4;41638:8;;;;;;;;;-1:-1:-1;;;;;41638:8:4;-1:-1:-1;;;;;41638:15:4;;:17;;;;;-1:-1:-1;;;41638:17:4;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;41638:17:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;41638:17:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;41638:17:4;:65;;;;;;41669:10;41638:65;;;;41689:4;41638:65;;;;;;;;;;;;-1:-1:-1;;;;;41638:30:4;;;;;;:65;;;;;:17;;:65;;;;;;;;-1:-1:-1;41638:30:4;:65;;;5:2:-1;;;;30:1;27;20:12;5:2;41638:65:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;41638:65:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;41638:65:4;41717:26;;;;;;;;;;;;41638:65;41717:26;;;;;;;;;;;;41617:136;;;;;;-1:-1:-1;;;;;41617:136:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;41617:136:4;;41568:192;:::o;1229:120:6:-;1288:8;1340:2;1314:23;1324:9;1335:1;1314:9;:23::i;:::-;:28;;;;;;;;;1229:120;-1:-1:-1;;1229:120:6:o;40465:220:4:-;40601:14;40657:3;40644:10;:16;40643:35;;40677:1;40643:35;;;-1:-1:-1;40664:10:4;40465:220::o;1437:119:6:-;1495:8;1547:2;1521:23;1531:9;1542:1;1521:9;:23::i;1205:145:14:-;1263:7;1290:6;;;;1282:15;;;;;;-1:-1:-1;1319:5:14;;;1205:145::o;41379:104:4:-;41449:8;;:18;;;;;;;;41437:39;;-1:-1:-1;;;;;41449:8:4;;:16;;:18;;;;;;;;;;;;;;:8;:18;;;5:2:-1;;;;30:1;27;20:12;5:2;41449:18:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;41449:18:4;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;41449:18:4;41469:6;41437:11;:39::i;:::-;41379:104;:::o;3732:168:6:-;3890:3;3868:18;;3867:26;;3732:168::o;3197:354::-;3296:12;3338:9;3328:6;:19;3324:33;;;-1:-1:-1;3356:1:6;3349:8;;3324:33;3386:28;;;3367:16;3407:6;3457:3;3442:18;;3441:34;;;;;;;;3424:51;;3514:1;3501:10;:14;3500:43;;3533:10;3532:11;;3500:43;;27110:710:4;27261:27;27397:245;27465:11;;27490:14;27518:17;;27549:12;:57;;27586:20;;27549:57;;;27564:19;;27549:57;27620:12;27397:54;:245::i;:::-;27372:270;;27692:49;27704:12;27718:22;27692:11;:49::i;:::-;27756:57;;;-1:-1:-1;;;;;27756:57:4;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;27756:57:4;;;;;;;;;;27110:710;;;;;:::o;40744:333::-;40807:15;40803:268;;;40861:1;40838:20;:24;;;40876:18;:22;40912:12;:20;;-1:-1:-1;;40912:20:4;;;40803:268;;;40987:1;40963:21;:25;;;41002:19;:23;41039:13;:21;;-1:-1:-1;;41039:21:4;;;40744:333;:::o;229:421:14:-;287:7;527:6;;523:45;;;-1:-1:-1;556:1:14;549:8;;523:45;590:5;;;594:1;590;:5;613;;;;;;;;:10;605:19;;;;",
  "source": "pragma solidity ^0.5.0;\n\nimport \"openzeppelin-solidity/contracts/math/SafeMath.sol\";\nimport \"../DBC.sol\";\nimport \"../feeds/PriceFeeds.sol\";\nimport \"../Registry.sol\";\nimport \"./ContractForDifferenceFactory.sol\";\nimport \"./ContractForDifferenceRegistry.sol\";\nimport \"./ContractForDifferenceLibrary.sol\";\n\n\n/*\n * SOLIUM DISABLE: \n *\n *   security/no-block-members - we need to use 'now' in order to set a time \n *       limit.\n */\n\n /* solium-disable security/no-block-members */\n\n/**\n * @title Contract for difference\n *\n * Contract for difference for a given market between a\n * \"buyer\" (long position) and \"seller\" (short position).\n */\ncontract ContractForDifference is DBC {\n    using SafeMath for uint;\n\n    /*\n     * Events\n     */\n\n    event LogCFDCreated(\n        address creator,\n        bytes32 market,\n        uint notionalAmountDai,\n        uint deposit\n    );\n    event LogCFDInitiated(\n        address joiner,\n        uint amountSent,\n        address buyer,\n        address seller,\n        bytes32 market,\n        uint notionalAmountDai,\n        uint strikePrice,\n        uint buyerDepositBalance,\n        uint sellerDepositBalance\n    );\n    event LogCFDTransferPosition(address oldOwner, address newOwner);\n    event LogCFDCanceledNew(address party, uint amount, bytes32 market);\n    event LogCFDStrikePriceUpdated(address party, uint newStrikePrice);\n\n    event LogCFDSale(\n        address party,\n        uint saleStrikePrice,\n        uint timeLimit\n    );\n    event LogCFDSaleCancelled(address party);\n    event LogCFDSaleUpdated(address party, uint newPrice);\n    event LogCFDSold(address to, address by, uint newNotional, uint sellerAmount, uint buyerDeposit, bytes32 market);\n\n    event LogCFDPartyBalanceUpdate(address party, uint amount, bool isWithdraw, uint newBalance, bytes32 market);\n    event LogCFDTransferFunds(address receiver, uint amount);\n\n    event LogCFDClosed(address winner, uint buyerCollateral, uint sellerCollateral, bytes32 market);\n    event LogCFDForceTerminated(address terminator, uint terminatorAmount, address otherParty, uint otherPartyAmount, bytes32 market);\n    event LogCFDUpgraded(address newCFD);\n    event LogCFDRemainingBalanceUnexpected(uint remainder);\n\n    enum Status {\n        CREATED,\n        INITIATED,\n        SALE,\n        CLOSED\n    }\n\n    /*\n     * Constants\n     */\n\n    string constant REASON_NOTIONAL_TOO_LOW = \"Notional below minimum\";\n    string constant REASON_FEES_NOT_ENOUGH = \"Not enough sent to cover fees\";\n    string constant REASON_DAI_TRANSFER_FAILED = \"Failure transfering ownership of DAI tokens\";\n    string constant REASON_COLLATERAL_RANGE_FAILED = \"collateralInRange false\";\n    string constant REASON_MUST_NOT_BE_INITIATED = \"Must not be initiated\";\n    string constant REASON_MUST_NOT_BE_CLOSED = \"Must not be closed\";\n    string constant REASON_MUST_NOT_BE_PARTY = \"Contract party can't call this\";\n    string constant REASON_MUST_BE_INITIATED = \"Must be initiated\";\n    string constant REASON_MUST_BE_SELLER = \"msg.sender must be seller\";\n    string constant REASON_MUST_NOT_BE_SELLER = \"msg.sender must not be seller\";\n    string constant REASON_MUST_BE_ON_SALE = \"Must be on sale\";\n    string constant REASON_MUST_BE_POSITIVE_PRICE = \"Price must be > 0\";\n    string constant REASON_ONLY_CONTRACT_PARTIES = \"Only contract parties can do this\";\n    string constant REASON_MUST_BE_ACTIVE = \"Must be active\";\n    string constant REASON_MARKET_PRICE_RANGE_FAILED = \"collateralInRange false\";\n    string constant REASON_WITHDRAW_NOT_ENOUGH = \"Can't withdraw more then available\";\n    string constant REASON_AMOUNT_NOT_ENOUGH = \"Amount not enough\";\n    string constant REASON_UPGRADE_ALREADY_SET = \"msg.sender already called\";\n    string constant REASON_UPGRADE_ALREADY_LATEST = \"Already at latest version\";\n    string constant REASON_TRANSFER_TO_EXISTING_PARTY = \"Can't transfer to existing party\";\n    string constant REASON_MUST_BE_MORE_THAN_CUTOFF = \"Must be more than liquidation price\";\n    string constant REASON_MUST_BE_LESS_THAN_CUTOFF = \"Must be less than liquidation price\";\n\n    uint public constant FORCE_TERMINATE_PENALTY_PERCENT = 5;\n    uint public constant MINIMUM_NOTIONAL_AMOUNT_DAI = 1 * 1e18; // 1 DAI/1 USD\n\n\n    /*\n     * State variables\n     */\n\n    address public buyer;                           // long\n    address public seller;                          // short\n    bytes32 public market;\n\n    uint public notionalAmountDai;\n    uint public buyerInitialNotional;\n    uint public sellerInitialNotional;\n\n    // strike prices as prices stored in PriceFeeds\n    uint public strikePrice;\n    uint public buyerInitialStrikePrice;\n    uint public sellerInitialStrikePrice;\n\n    // balances of amounts actually deposited/withdrawn from the contract\n    uint public buyerDepositBalance;\n    uint public sellerDepositBalance;\n\n    uint public buyerSaleStrikePrice;\n    uint public buyerSaleTimeLimit;\n\n    uint public sellerSaleStrikePrice;\n    uint public sellerSaleTimeLimit;\n\n    bool public buyerSelling;\n    bool public sellerSelling;\n\n    bool public initiated = false;\n    bool public closed = false;\n    bool public terminated;\n\n    // set to true for a short period of time - when second party has called\n    // upgrade and upgrade has called the new factory to do the work\n    bool public upgradeable = false;\n\n    // set to first party that calls upgrade\n    // enables identification of who called and that it has been called once\n    address public upgradeCalledBy = address(0);\n\n    address public cfdRegistryAddr;\n    address public feedsAddr;\n\n    Registry public registry;\n\n    /*\n     * Functions\n     */\n\n    constructor() public {}\n    \n\n    /**\n     * @dev Contract has been initiated (has 2 parties) and not yet terminated.\n     * @return true if contract is active\n     */\n    function isActive() public view returns (bool) {\n        return initiated == true && closed == false;\n    }\n\n    /**\n     * @dev Is buyer / long party selling.\n     * @return true if buyer has side up for sale\n     */\n    function isBuyerSelling() public view returns (bool) {\n        return buyerSelling &&\n            (buyerSaleTimeLimit == 0 || now < buyerSaleTimeLimit);\n    }\n\n    /**\n     * @dev Is seller / short party selling.\n     * @return true if seller has side up for sale\n     */\n    function isSellerSelling() public view returns (bool) {\n        return sellerSelling &&\n            (sellerSaleTimeLimit == 0 || now < sellerSaleTimeLimit);\n    }\n\n    /**\n     * @dev If the given party is selling one side of the contract.\n     * @return true if the given party is selling\n     */\n    function isSelling(address _party) public view returns (bool) {\n        return (_party == buyer && isBuyerSelling()) ||\n            (_party == seller && isSellerSelling());\n    }\n\n    /**\n     * @dev Check if the given address is one of the 2 parties of the contract.\n     * @param _party Address to check\n     * @return true if _party is either the buyer or seller.\n     */\n    function isContractParty(address _party) public view returns (bool) {\n        return _party == buyer || _party == seller;\n    }\n\n    /**\n     * @dev Create a new CFDinstance specifying the terms of the contract.\n     *\n     * Fee of 0.3% of the notional is taken.\n     *\n     * Therefore the intial deposit is _value minus these fees.\n     *\n     * @param _registryAddr Registry contract address\n     * @param _cfdRegistryAddr CFD Registry contract address\n     * @param _feedsAddr Feeds address\n     * @param _partyAddr Address of the party creating the contract\n     * @param _marketId Contract is for prices on this market\n     * @param _strikePrice Strike price\n     * @param _notionalAmountDai Contract amount\n     * @param _isBuyer Flag indicating if the contract creator wants to take the\n     *            buyer (true) or the seller side (false).\n     */\n    function create(\n        address _registryAddr,\n        address _cfdRegistryAddr,\n        address _feedsAddr,\n        address _partyAddr, // msg.sender calling the Factory\n        bytes32 _marketId,\n        uint _strikePrice,\n        uint _notionalAmountDai,\n        bool _isBuyer\n    )\n        public\n        pre_cond(_notionalAmountDai >= MINIMUM_NOTIONAL_AMOUNT_DAI, REASON_NOTIONAL_TOO_LOW)\n    {\n        registry = Registry(_registryAddr);\n        uint daiBalance = registry.getDAI().balanceOf(address(this));\n        uint fees = ContractForDifferenceLibrary.creatorFee(_notionalAmountDai);\n        if (daiBalance <= fees)\n            revert(REASON_FEES_NOT_ENOUGH);\n\n        uint collateralSent = daiBalance - fees;\n        if (!ContractForDifferenceLibrary.collateralInRange(_notionalAmountDai, collateralSent))\n            revert(REASON_COLLATERAL_RANGE_FAILED);\n\n        if (_isBuyer) {\n            buyer = _partyAddr;\n            buyerDepositBalance = collateralSent;\n        } else {\n            seller = _partyAddr;\n            sellerDepositBalance = collateralSent;\n        }\n\n        market = _marketId;\n        notionalAmountDai = _notionalAmountDai;\n        buyerInitialNotional = _notionalAmountDai;\n        sellerInitialNotional = _notionalAmountDai;\n\n        strikePrice = _strikePrice;\n        buyerInitialStrikePrice = _strikePrice;\n        sellerInitialStrikePrice = _strikePrice;\n\n        cfdRegistryAddr = _cfdRegistryAddr;\n        feedsAddr = _feedsAddr;\n\n        emit LogCFDCreated(\n            _partyAddr,\n            market,\n            notionalAmountDai,\n            daiBalance\n        );\n    }\n\n    /**\n     * @dev Create a new CFDinstance from a previous CFD instance. This is part\n     *      of the upgrade process (see CFD.upgrade()).\n     *\n     * @param _cfdAddr Address of the existing / old CFD\n     * @param _registryAddr Address of Registry contract\n     * @param _cfdRegistryAddr Address of CFDRegistry contract\n     * @param _feedsAddr Address to send fees to\n     */\n    function createByUpgrade(\n        address _cfdAddr,\n        address _registryAddr,\n        address _cfdRegistryAddr,\n        address _feedsAddr\n    )\n        public\n    {\n        ContractForDifference oldCfd = ContractForDifference(_cfdAddr);\n\n        market = oldCfd.market();\n        notionalAmountDai = oldCfd.notionalAmountDai();\n        strikePrice = oldCfd.strikePrice();\n        buyer = oldCfd.buyer();\n        seller = oldCfd.seller();\n\n        buyerDepositBalance = oldCfd.buyerDepositBalance();\n        buyerInitialNotional = oldCfd.buyerInitialNotional();\n        buyerInitialStrikePrice = oldCfd.buyerInitialStrikePrice();\n\n        sellerDepositBalance = oldCfd.sellerDepositBalance();\n        sellerInitialNotional = oldCfd.sellerInitialNotional();\n        sellerInitialStrikePrice = oldCfd.sellerInitialStrikePrice();\n\n        cfdRegistryAddr = _cfdRegistryAddr;\n        registry = Registry(_registryAddr);\n        feedsAddr = _feedsAddr;\n\n        initiated = true;\n\n        ContractForDifferenceRegistry(cfdRegistryAddr).registerParty(seller);\n    }\n\n    /**\n     * Returns an array with all the attributes of the contract\n     * (Had to split in 3 functions because of the stack limit)\n     * Max number of return values == 8\n     */\n    function getCfdAttributes()\n        public\n        view\n        returns (address, address, bytes32, uint, uint, bool, bool, Status)\n    {\n        return (\n            buyer,\n            seller,\n            market,\n            strikePrice,\n            notionalAmountDai,\n            buyerSelling,\n            sellerSelling,\n            status()\n        );\n    }\n    function getCfdAttributes2()\n        public\n        view\n        returns (uint, uint, uint, uint, uint, uint, uint, uint)\n    {\n        return (\n            buyerInitialNotional,\n            sellerInitialNotional,\n            buyerDepositBalance,\n            sellerDepositBalance,\n            buyerSaleStrikePrice,\n            sellerSaleStrikePrice,\n            buyerInitialStrikePrice,\n            sellerInitialStrikePrice\n        );\n    }\n    function getCfdAttributes3()\n        public\n        view\n        returns (bool, address)\n    {\n        return (\n            terminated,\n            upgradeCalledBy\n        );\n    }\n\n    /**\n     * @dev Counterparty deposits their funds into the contract thereby joining\n     * and initiating the contract.\n     *\n     * Fee of 0.5% of the notional is taken.\n     *\n     * Therefore the intial deposit is _value minus these fees.\n     */\n    function deposit(uint _value)\n        external\n        pre_cond(initiated == false, REASON_MUST_NOT_BE_INITIATED)\n        pre_cond(closed == false, REASON_MUST_NOT_BE_CLOSED) // cancelNew has not been called\n        pre_cond(isContractParty(msg.sender) == false, REASON_MUST_NOT_BE_PARTY) // reject contract creator depositing\n    {\n        uint joinerFees = ContractForDifferenceLibrary.joinerFee(notionalAmountDai);\n        if (_value <= joinerFees)\n            revert(REASON_FEES_NOT_ENOUGH);\n\n        uint collateralSent = _value - joinerFees;\n        if (!ContractForDifferenceLibrary.collateralInRange(notionalAmountDai, collateralSent))\n            revert(REASON_COLLATERAL_RANGE_FAILED);\n\n        daiClaim(_value);\n        daiTransferToFees(\n            joinerFees + ContractForDifferenceLibrary.creatorFee(notionalAmountDai)\n        );\n\n        if (buyer == address(0)) {\n            buyer = msg.sender;\n            buyerDepositBalance = collateralSent;\n        } else {\n            seller = msg.sender;\n            sellerDepositBalance = collateralSent;\n        }\n\n        initiated = true;\n        ContractForDifferenceRegistry(cfdRegistryAddr).registerParty(msg.sender);\n        emit LogCFDInitiated(\n            msg.sender,\n            _value,\n            buyer,\n            seller,\n            market,\n            notionalAmountDai,\n            strikePrice,\n            buyerDepositBalance,\n            sellerDepositBalance\n        );\n    }\n\n    /**\n     * @dev Cancels a newly created contract refunding the balance to the party\n     *      that created the contract. This can only be called before a contract\n     *      is initiated. ie. between the create() and deposit() calls.\n     */\n    function cancelNew()\n        external\n        pre_cond(initiated == false, REASON_MUST_NOT_BE_INITIATED)\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\n    {\n        uint amountSent = registry.getDAI().balanceOf(address(this));\n        daiTransfer(msg.sender, amountSent);\n        emit LogCFDTransferFunds(msg.sender, amountSent);\n        closed = true;\n        emit LogCFDCanceledNew(msg.sender, amountSent, market);\n    }\n\n    /**\n     * @dev Party adds more funds to the contract thereby increasing their\n     *      deposit balance.\n     * @param _value DAI amount\n     */\n    function topup(uint _value)\n        external\n        pre_cond(_value >= 1, REASON_AMOUNT_NOT_ENOUGH)\n        pre_cond(initiated == true, REASON_MUST_BE_INITIATED)\n        pre_cond(closed == false, REASON_MUST_NOT_BE_CLOSED)\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\n        pre_cond(isSelling(msg.sender) == false, REASON_MUST_NOT_BE_SELLER)\n    {\n        bool isBuyer = msg.sender == buyer;\n        uint newDepositBalance = (isBuyer ? \n            buyerDepositBalance : \n            sellerDepositBalance\n        ).add(_value);\n\n        // check topup doesn't make collateral exceed the maximum\n        if (!ContractForDifferenceLibrary.collateralInRange(notionalAmountDai, newDepositBalance))\n            revert(REASON_COLLATERAL_RANGE_FAILED);\n\n        daiClaim(_value);\n\n        if (isBuyer) {\n            buyerDepositBalance = newDepositBalance;\n        } else {\n            sellerDepositBalance = newDepositBalance;\n        }\n\n        emit LogCFDPartyBalanceUpdate(msg.sender, _value, false, newDepositBalance, market);\n    }\n\n    /**\n     * @dev Party withdraws funds from the contract.\n     *      They can only withdraw down to an amount that leaves the collateral\n     *      to notional difference at 20% or more.\n     * @param _withdrawAmount Amount to withdraw from the deposits balance.\n     */\n    function withdraw(uint _withdrawAmount)\n        external\n        assertWithdrawPreCond(_withdrawAmount)\n    {\n        bool isBuyer = msg.sender == buyer;\n        uint currentDepositBal = isBuyer ? buyerDepositBalance : sellerDepositBalance;\n\n        // first simple check that can't withdraw more then deposited\n        if (_withdrawAmount > currentDepositBal)\n            revert(REASON_WITHDRAW_NOT_ENOUGH);\n\n        // second a more precise check that the collateral at new balance will remain above the min\n        uint newDepositBal = currentDepositBal - _withdrawAmount;\n        uint marketPrice = latestPrice();\n        if (!marketPriceInRange(\n            marketPrice,\n            isBuyer ? newDepositBal : buyerDepositBalance,\n            isBuyer ? sellerDepositBalance : newDepositBal,\n            strikePrice // unchanged on withdraw\n        )) {\n            revert(REASON_MARKET_PRICE_RANGE_FAILED);\n        }\n\n        uint collateral = ContractForDifferenceLibrary.calculateCollateralAmount(\n            strikePrice,\n            marketPrice,\n            notionalAmountDai,\n            newDepositBal,\n            isBuyer\n        );\n\n        if (!ContractForDifferenceLibrary.collateralInRange(notionalAmountDai, collateral)) {\n            revert(REASON_COLLATERAL_RANGE_FAILED);\n        }\n\n        daiTransfer(msg.sender, _withdrawAmount);\n        emit LogCFDTransferFunds(msg.sender, _withdrawAmount);\n\n        if (isBuyer) {\n            buyerDepositBalance = newDepositBal;\n        } else {\n            sellerDepositBalance = newDepositBal;\n        }\n\n        emit LogCFDPartyBalanceUpdate(msg.sender, _withdrawAmount, true, newDepositBal, market);\n    }\n\n    /* NOTE: Split off into modifier to work around 'stack too deep' error */\n    modifier assertWithdrawPreCond(uint _withdrawAmount) \n    {\n        require(_withdrawAmount >= 1, REASON_WITHDRAW_NOT_ENOUGH);\n        require(initiated == true, REASON_MUST_BE_INITIATED);\n        require(closed == false, REASON_MUST_NOT_BE_CLOSED);\n        require(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES);\n        require(isSelling(msg.sender) == false, REASON_MUST_NOT_BE_SELLER);\n        _;\n    }\n\n    /**\n     * @dev Parties can transfer contract ownership to another address by\n     *      calling this function.\n     * @param _newAddress Addreess of the new party to swap in.\n     */\n    function transferPosition(address _newAddress)\n        external\n        pre_cond(closed == false, REASON_MUST_NOT_BE_CLOSED)\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\n        pre_cond(isContractParty(_newAddress) == false, REASON_MUST_NOT_BE_PARTY)\n        pre_cond(isSelling(msg.sender) == false, REASON_MUST_NOT_BE_SELLER)\n    {\n        if (msg.sender == buyer) buyer = _newAddress;\n        else if (msg.sender == seller) seller = _newAddress;\n        else if (msg.sender == upgradeCalledBy) upgradeCalledBy = address(0);\n        ContractForDifferenceRegistry(cfdRegistryAddr).registerParty(_newAddress);\n        emit LogCFDTransferPosition(msg.sender, _newAddress);\n    }\n\n    /**\n     * @dev Position in a contract can be sold to another party. This function\n     *      makes the callers side available for sale. A party can buy the side\n     *      with the buy function.\n     * @param _desiredStrikePrice Sellers desired sell strike price\n     * @param _timeLimit Sale available until this time in UNIX epoch seconds\n     *                  (< now for no limit)\n     */\n    function sellPrepare(uint _desiredStrikePrice, uint _timeLimit)\n        external\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\n        // reject already marked selling by the caller\n        pre_cond(isSelling(msg.sender) == false, REASON_MUST_NOT_BE_SELLER)\n        pre_cond(_desiredStrikePrice > 0, REASON_MUST_BE_POSITIVE_PRICE)\n    {\n        // calculate cutoff price\n        bool isBuyer = (msg.sender == buyer) ? true : false;\n        uint cutOff = ContractForDifferenceLibrary.cutOffPrice(\n            notionalAmountDai,\n            (isBuyer) ? buyerDepositBalance : sellerDepositBalance,\n            (isBuyer) ? buyerInitialStrikePrice : sellerInitialStrikePrice,\n            isBuyer\n        );\n\n        // mark side on sale\n        uint timeLimit = timeLimitFutureOrZero(_timeLimit);\n        if (msg.sender == buyer) {\n            // check sale strike price is not below liquidation price\n            require(_desiredStrikePrice > cutOff, REASON_MUST_BE_MORE_THAN_CUTOFF);\n            buyerSelling = true;\n            buyerSaleStrikePrice = _desiredStrikePrice;\n            buyerSaleTimeLimit = timeLimit;\n        } else if (msg.sender == seller) {\n            // check sale strike price is not already above liquidation price\n            require(_desiredStrikePrice < cutOff, REASON_MUST_BE_LESS_THAN_CUTOFF);\n            sellerSelling = true;\n            sellerSaleStrikePrice = _desiredStrikePrice;\n            sellerSaleTimeLimit = timeLimit;\n        }\n\n        ContractForDifferenceRegistry(cfdRegistryAddr).registerSale(msg.sender);\n        emit LogCFDSale(\n            msg.sender,\n            _desiredStrikePrice,\n            timeLimit\n        );\n    }\n\n    /**\n     * @dev Seller can update the price on the sale.\n     */\n    function sellUpdate(\n        uint _newPrice\n    )\n        external\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\n        pre_cond(isSelling(msg.sender), REASON_MUST_BE_SELLER)\n        pre_cond(_newPrice > 0, REASON_MUST_BE_POSITIVE_PRICE)\n    {\n        // calculate cutoff price\n        bool isBuyer = (msg.sender == buyer) ? true : false;\n        uint cutOff = ContractForDifferenceLibrary.cutOffPrice(\n            notionalAmountDai,\n            (isBuyer) ? buyerDepositBalance : sellerDepositBalance,\n            (isBuyer) ? buyerInitialStrikePrice : sellerInitialStrikePrice,\n            isBuyer\n        );\n\n        if (msg.sender == buyer) {\n            // check new strike price is not below liquidation price\n            require(_newPrice > cutOff, REASON_MUST_BE_MORE_THAN_CUTOFF);\n            buyerSaleStrikePrice = _newPrice;\n        } else if (msg.sender == seller) {\n            // check new strike price is not already above liquidation price\n            require(_newPrice < cutOff, REASON_MUST_BE_LESS_THAN_CUTOFF);\n            sellerSaleStrikePrice = _newPrice;\n        }\n        emit LogCFDSaleUpdated(msg.sender, _newPrice);\n    }\n\n    /**\n     * @dev Party can update the strike price of an non-initialized contract\n     */\n    function changeStrikePrice(\n        uint _newStrikePrice\n    )\n        external\n        pre_cond(initiated == false, REASON_MUST_NOT_BE_INITIATED)\n        pre_cond(closed == false, REASON_MUST_NOT_BE_CLOSED)\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\n        pre_cond(_newStrikePrice > 0, REASON_MUST_BE_POSITIVE_PRICE)\n    {\n        strikePrice = _newStrikePrice;\n        buyerInitialStrikePrice = _newStrikePrice;\n        sellerInitialStrikePrice = _newStrikePrice;\n        emit LogCFDStrikePriceUpdated(msg.sender, _newStrikePrice);\n    }\n\n    /**\n     * @dev Cancel the for sale status setup by sellPrepare()\n     */\n    function sellCancel()\n        external\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\n        pre_cond(isSelling(msg.sender), REASON_MUST_BE_SELLER)\n    {\n        clearSale(msg.sender == buyer);\n        emit LogCFDSaleCancelled(msg.sender);\n    }\n\n    /**\n     * @dev Buy the side in the contract that is for sale.\n     *\n     * Fee of 0.5% of the notional is taken.\n     *\n     * @param _buyBuyerSide Buying the buyer side or the seller side?\n     * @param _value DAI amount\n     */\n    function buy(bool _buyBuyerSide, uint _value)\n        external\n        assertBuyPreCond(_buyBuyerSide)\n    {\n        uint fees = ContractForDifferenceLibrary.joinerFee(notionalAmountDai);\n        if (_value <= fees)\n            revert(REASON_FEES_NOT_ENOUGH);\n\n        // check sent collateral falls in the allowable range\n        uint collateralSent = _value.sub(fees);\n        if (!ContractForDifferenceLibrary.collateralInRange(notionalAmountDai, collateralSent))\n            revert(REASON_COLLATERAL_RANGE_FAILED);\n\n        uint marketPrice = latestPrice();\n        uint newStrikePrice = _buyBuyerSide ?\n            buyerSaleStrikePrice :\n            sellerSaleStrikePrice;\n\n        // check new parameters fall in the allowable range\n        if (!marketPriceInRange(\n            marketPrice,\n            _buyBuyerSide ? collateralSent : buyerDepositBalance,\n            _buyBuyerSide ? sellerDepositBalance : collateralSent,\n            newStrikePrice // buying at this strike price\n        )) {\n            revert(REASON_MARKET_PRICE_RANGE_FAILED);\n        }\n\n        // move ownership of sent DAI to the CFD\n        daiClaim(_value);\n        daiTransferToFees(fees);\n\n        // transfer to selling party\n        address sellingParty = _buyBuyerSide ? buyer : seller;\n        uint sellingPartyCollateral = buyTransferFunds(\n            _buyBuyerSide,\n            newStrikePrice,\n            sellingParty\n        );\n\n        // set new party and balances\n        uint remainingPartyDeposits = registry.getDAI().\n            balanceOf(address(this)).sub(collateralSent);\n\n        // new notional amount value\n        uint newNotional = ContractForDifferenceLibrary.calculateNewNotional(\n            notionalAmountDai,\n            strikePrice,\n            newStrikePrice\n        );\n\n        if (_buyBuyerSide) {\n            buyer = msg.sender;\n            buyerDepositBalance = collateralSent;\n            buyerInitialStrikePrice = newStrikePrice;\n            buyerInitialNotional = newNotional;\n            sellerDepositBalance = remainingPartyDeposits;\n        } else {\n            seller = msg.sender;\n            sellerDepositBalance = collateralSent;\n            sellerInitialStrikePrice = newStrikePrice;\n            sellerInitialNotional = newNotional;\n            buyerDepositBalance = remainingPartyDeposits;\n        }\n\n        strikePrice = newStrikePrice;\n        notionalAmountDai = newNotional;\n\n        clearSale(_buyBuyerSide);\n\n        // clean up upgradeCalledBy if the departing party had set that\n        if (upgradeCalledBy == sellingParty) {\n            upgradeCalledBy = address(0);\n        }\n\n        ContractForDifferenceRegistry(cfdRegistryAddr).registerParty(msg.sender);\n        emit LogCFDSold(msg.sender, sellingParty, newNotional, sellingPartyCollateral, _value, market);\n    }\n\n    /* NOTE: Split off into modifier to work around 'stack too deep' error */\n    modifier assertBuyPreCond(bool _buyBuyerSide) \n    {\n        require(isActive(), REASON_MUST_BE_ACTIVE);\n        require(isSelling(_buyBuyerSide ? buyer : seller), REASON_MUST_BE_ON_SALE);\n        require(isContractParty(msg.sender) == false, REASON_MUST_NOT_BE_PARTY);\n        _;\n    }\n\n    /**\n     * Does all transfers of funds related to the buy().\n     *\n     * Transfer logic split off in seperate function ONLY to workaround\n     * 'Stack too deep' limit.\n     */\n    function buyTransferFunds(\n        bool buyBuyerSide,\n        uint newStrikePrice,\n        address sellingParty\n    )\n        private\n        returns (uint sellingPartyCollateral)\n    {\n        // determine collateral amount to send to the selling party\n        sellingPartyCollateral = ContractForDifferenceLibrary.calculateCollateralAmount(\n            strikePrice,\n            newStrikePrice,\n            notionalAmountDai,\n            buyBuyerSide ? buyerDepositBalance : sellerDepositBalance,\n            buyBuyerSide\n        );\n\n        // send money to selling party\n        daiTransfer(sellingParty, sellingPartyCollateral);\n        emit LogCFDTransferFunds(sellingParty, sellingPartyCollateral);\n    }\n\n    /**\n     * @dev Daemons will call this routine when the market price has moved\n     *      enough that the closeRatio for this contract has been reached.\n     *      It can actually be called by anyone who is willing to pay the gas\n     *      for the liquidate. But if the market has moved past the liquidate\n     *      threshold the call will be rejected.\n     *\n     * This will disolve the contract and return each parties balance of\n     * collateral.\n     */\n    function liquidate()\n        external\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\n    {\n        uint marketPrice = latestPrice();\n\n        // #11 double check the 5% threshold was crossed, if not then REJECT\n        // (can only liquidate if out of range)\n        require(\n            !marketPriceInRange(\n                marketPrice,\n                buyerDepositBalance,\n                sellerDepositBalance,\n                strikePrice\n            ), \n            \"Liquidate threshold not yet reached\"\n        );\n\n        // fetch one of the cutoffs to determine which is the winner\n        uint buyerCutOff = ContractForDifferenceLibrary.cutOffPrice(\n            notionalAmountDai,\n            buyerDepositBalance,\n            strikePrice,\n            true\n        );\n\n        // if buyer cutoff still in range then buyer wins, otherwise seller\n        bool winnerIsBuyer = marketPrice > buyerCutOff;\n        address winner = winnerIsBuyer ? buyer : seller;\n\n        // winner takes all\n        uint remaining = registry.getDAI().balanceOf(address(this));\n        daiTransfer(winner, remaining);\n        emit LogCFDTransferFunds(winner, remaining);\n\n        closed = true;\n\n        emit LogCFDClosed(\n            winner,\n            winnerIsBuyer ? remaining : 0,\n            winnerIsBuyer ? 0 : remaining,\n            market\n        );\n    }\n\n    /**\n     * Force terminate executed by one party who will penalised 5% of their\n     * collateral. Then penalty will be sent to the counterparty.\n     */\n    function forceTerminate()\n        external\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\n    {\n        uint marketPrice = latestPrice();\n        bool forcingPartyIsBuyer = msg.sender == buyer;\n\n        uint buyerCollateral = ContractForDifferenceLibrary.calculateCollateralAmount(\n            strikePrice,\n            marketPrice,\n            notionalAmountDai,\n            buyerDepositBalance,\n            true\n        );\n        uint sellerCollateral = ContractForDifferenceLibrary.calculateCollateralAmount(\n            strikePrice,\n            marketPrice,\n            notionalAmountDai,\n            sellerDepositBalance,\n            false\n        );\n\n        //\n        // calculate and check the remainder - it should be equal to zero\n        //\n        // if not expected log the event and transfer the remainder to fees - it\n        //     will be sorted out manually\n        //\n        uint balanceRemainder = registry.getDAI().\n            balanceOf(address(this)).\n            sub(buyerCollateral).\n            sub(sellerCollateral);\n        if (balanceRemainder != 0) {\n            emit LogCFDRemainingBalanceUnexpected(balanceRemainder);\n        }\n        daiTransferToFees(balanceRemainder);\n\n        // penalise the force terminator 5% and give it to the counterparty\n        uint penalty = ContractForDifferenceLibrary.percentOf(\n            forcingPartyIsBuyer ? buyerCollateral : sellerCollateral,\n            FORCE_TERMINATE_PENALTY_PERCENT\n        );\n        if (forcingPartyIsBuyer) {\n            buyerCollateral = buyerCollateral.sub(penalty);\n            sellerCollateral = sellerCollateral.add(penalty);\n        } else {\n            buyerCollateral = buyerCollateral.add(penalty);\n            sellerCollateral = sellerCollateral.sub(penalty);\n        }\n\n        // Send collateral amounts back each party.\n        daiTransfer(buyer, buyerCollateral);\n        emit LogCFDTransferFunds(buyer, buyerCollateral);\n        daiTransfer(seller, sellerCollateral);\n        emit LogCFDTransferFunds(seller, sellerCollateral);\n\n        terminated = true;\n        closed = true;\n\n        if (forcingPartyIsBuyer)\n            emit LogCFDForceTerminated(buyer, buyerCollateral, seller, sellerCollateral, market);\n        else\n            emit LogCFDForceTerminated(seller, sellerCollateral, buyer, buyerCollateral, market);\n    }\n\n    /**\n     * @dev Upgrade contract to a new version. This involves creating a new CFD\n     *      at the latest contract set - transferring over all properties and\n     *      value from this one to the new one.\n     *      An upgrade requires a call to this function from both parties. Then\n     *      upgrade will happen when the second party makes the call.\n     */\n    function upgrade()\n        external\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\n        pre_cond(isSelling(msg.sender) == false, REASON_MUST_NOT_BE_SELLER)\n        pre_cond(msg.sender != upgradeCalledBy, REASON_UPGRADE_ALREADY_SET)\n        pre_cond(registry.allCFDs(address(this)) != registry.getCFDFactoryLatest(), REASON_UPGRADE_ALREADY_LATEST)\n    {\n        // 1st call to initiate upgrade process\n        if (upgradeCalledBy == address(0)) {\n            upgradeCalledBy = msg.sender;\n            return;\n        }\n\n        // if here then then this is the 2nd call, invoked by the opposite, so\n        // kick off the upgrade process\n        upgradeable = true;\n        address cfdFactoryLatest = registry.getCFDFactoryLatest();\n        address newCfd = address(ContractForDifferenceFactory(cfdFactoryLatest).createByUpgrade());\n        daiTransfer(newCfd, registry.getDAI().balanceOf(address(this)));\n        upgradeable = false;\n        closed = true;\n\n        emit LogCFDUpgraded(newCfd);\n    }\n\n    /**\n     * @dev Derive status from the state variables.\n     * @return Status reflecting the current state.\n     */\n    function status()\n        public\n        view\n        returns (Status)\n    {\n        if (closed == true)\n            return Status.CLOSED;\n        else if (initiated == false)\n            return Status.CREATED;\n        else if (isBuyerSelling() || isSellerSelling())\n            return Status.SALE;\n        else\n            return Status.INITIATED;\n    }\n\n    /**\n     * Get the latest read for the market of this CFD.\n     */\n    function latestPrice()\n        internal\n        view\n        returns (uint price)\n    {\n        price = PriceFeeds(feedsAddr).read(market);\n    }\n\n    /**\n     * @dev Checks if given parameters and given market price result in a price\n     *      inside an allowable range. This range is defined by the ContractForDifferenceLibrary.cutOffPrice\n     *      function formulas. The idea is that as parameters change - leverage,\n     *      market price etc., we must check the change doesn't result in a\n     *      liquidation event due to too little collateral.\n     *\n     * @param _marketPrice Current market price\n     * @return true if in range; false if not\n     */\n\n    function marketPriceInRange(\n        uint _marketPrice,\n        uint _buyerDepositBalance,\n        uint _sellerDepositBalance,\n        uint _strikePrice\n    )\n        public\n        view\n        returns (bool inRange)\n    {\n        uint buyerCutOff = ContractForDifferenceLibrary.cutOffPrice(\n            notionalAmountDai,\n            _buyerDepositBalance,\n            _strikePrice,\n            true\n        );\n        uint sellerCutOff = ContractForDifferenceLibrary.cutOffPrice(\n            notionalAmountDai,\n            _sellerDepositBalance,\n            _strikePrice,\n            false\n        );\n        inRange = _marketPrice > buyerCutOff && _marketPrice < sellerCutOff;\n    }\n\n   /**\n     * @dev Calculate new notional amount after a side has been sold at a new\n     *      strike price.\n     *\n     * Formula is:\n     *  N2 = N1 * S2 / S1\n     * Where:\n     *  N1 = previous notional\n     *  S1 = previous strike price\n     *  S2 = sale strike price\n     *\n     * @param _oldNotional Existing notional.\n     * @param _oldStrikePrice Existing strike price.\n     * @param _newStrikePrice New / Sale strike price.\n     * @return newNotional Result of the calculation.\n     */\n    function calculateNewNotional(\n        uint _oldNotional,\n        uint _oldStrikePrice,\n        uint _newStrikePrice\n    )\n        public\n        pure\n        returns (uint newNotional)\n    {\n        newNotional = ContractForDifferenceLibrary.calculateNewNotional(\n            _oldNotional,\n            _oldStrikePrice,\n            _newStrikePrice\n        );\n    }\n\n    /**\n     * @dev Calculate the collateral amount for one party given the current\n     *      market price and original strike price, notional amount and the\n     *      amount the party has deposited into the contract.\n     *\n     * @param _marketPrice Current market price\n     * @param _strikePrice CFD strike price\n     * @param _notionalAmount CFD notional amount\n     * @param _depositBalance Balances of deposits into the contract\n     * @param _isBuyer Buyer or Seller / Long or short party?\n     *\n     * @return collateral Amount of collateral for the party\n     */\n    function calculateCollateralAmount(\n        uint _strikePrice,\n        uint _marketPrice,\n        uint _notionalAmount,\n        uint _depositBalance,\n        bool _isBuyer\n    )\n        public\n        pure\n        returns (uint collateral)\n    {\n        collateral = ContractForDifferenceLibrary.calculateCollateralAmount(\n            _strikePrice,\n            _marketPrice,\n            _notionalAmount,\n            _depositBalance,\n            _isBuyer\n        );\n    }\n\n    /**\n     * @dev Calculate the cut off price for buyer or seller.\n     *\n     * This is the price that if passed would raise a liquidation event.\n     *\n     * Base Formulas are:\n     *     Buyer:  1.05 * S - depositBalanceLong  * S / N\n     *     Seller: 0.95 * S + depositBalanceShort * S / N\n     *\n     * However for Solidity we need to adjust parts by FACTOR_UINT to ensure\n     * no fractions.\n     *\n     * @param _notionalAmountDai Contract notional amount\n     * @param _depositBalance Balance of deposits for one party\n     *\n     * @return cut off price\n     */\n    function cutOffPrice(\n        uint _notionalAmountDai,\n        uint _depositBalance,\n        uint _strikePrice,\n        bool _calcForBuyerSide\n    )\n        public\n        pure\n        returns (uint price)\n    {\n        price = ContractForDifferenceLibrary.cutOffPrice(\n            _notionalAmountDai,\n            _depositBalance,\n            _strikePrice,\n            _calcForBuyerSide\n        );\n    }\n\n    /**\n     * Creator fee - 0.3% of notional.\n     */\n    function creatorFee(uint _notional) public pure returns (uint fee) {\n        fee = ContractForDifferenceLibrary.creatorFee(_notional);\n    }\n\n    /**\n     * Joiner (deposit or buy) percentage fee - 0.5% of notional.\n     */\n    function joinerFee(uint _notional) public pure returns (uint fee) {\n        fee = ContractForDifferenceLibrary.joinerFee(_notional);\n    }\n\n    /**\n     * @dev Calculate the change in contract value based on the price change.\n     * @param _currentPrice Current market price\n     */\n    function changeInDai(\n        uint _strikePrice,\n        uint _currentPrice,\n        uint _notionalAmount\n    )\n        public\n        pure\n        returns (uint change)\n    {\n        change = ContractForDifferenceLibrary.changeInDai(\n            _strikePrice,\n            _currentPrice,\n            _notionalAmount\n        );\n    }\n\n    /**\n     * @dev Return a percentage change comparing a value with a new value.\n     * @param _value The existing value to compare against\n     * @param _newValue The new value to compare the change against\n     * @return Percentage change (eg. _value = 100, _newValue = 90 then return 10)\n     */\n    function percentChange(uint _value, uint _newValue)\n        public\n        pure\n        returns (uint percent)\n    {\n        percent = ContractForDifferenceLibrary.percentChange(_value, _newValue);\n    }\n\n    /**\n     * @dev Return a percentage of a given amount.\n     * @param _amount Amount to calculate the percentage of\n     * @param _percent Percent amount (1 - 100)\n     */\n    function percentOf(uint _amount, uint _percent)\n        public\n        pure\n        returns (uint adjusted)\n    {\n        adjusted = ContractForDifferenceLibrary.percentOf(_amount, _percent);\n    }\n\n    /**\n     * Utility that given a time limit will preverve it if in the future OR\n     * set it to 0 if it's in the present or past.\n     */\n    function timeLimitFutureOrZero(\n        uint _timeLimit\n    )\n        private\n        view // not pure because of 'now'\n        returns(uint timeLimit)\n    {\n        timeLimit = (_timeLimit > now) ? _timeLimit : 0;\n    }\n\n    /**\n     * Clear all sale related state.\n     */\n    function clearSale(bool _clearBuyerSide) private {\n        if (_clearBuyerSide) {\n            buyerSaleStrikePrice = 0;\n            buyerSaleTimeLimit = 0;\n            buyerSelling = false;\n        } else {\n            sellerSaleStrikePrice = 0;\n            sellerSaleTimeLimit = 0;\n            sellerSelling = false;\n        }\n    }\n\n    /**\n     * Transfer DAI to an address.\n     */\n    function daiTransfer(address _to, uint _value) private {\n        require(\n            registry.getDAI().transfer(_to, _value),\n            REASON_DAI_TRANSFER_FAILED\n        );\n    }\n\n    /**\n     * Transfer DAI to the fees address.\n     */\n    function daiTransferToFees(uint _value) private {\n        daiTransfer(registry.getFees(), _value);\n    }\n\n    /**\n     * Claim DAI - ie. move approved DAI to this CFD contract.\n     */\n    function daiClaim(uint _value) private {\n        require(\n            registry.getDAI().transferFrom(msg.sender, address(this), _value),\n            REASON_DAI_TRANSFER_FAILED\n        );\n    }\n\n}\n",
  "sourcePath": "/home/julien/0xFutures/protocol-master/contracts/cfd/ContractForDifference.sol",
  "compiler": {
    "name": "solc",
    "version": "0.5.0+commit.1d4f565a.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.2",
  "updatedAt": "2019-04-21T18:18:05.735Z",
  "devdoc": {
    "methods": {
      "buy(bool,uint256)": {
        "details": "Buy the side in the contract that is for sale.     * Fee of 0.5% of the notional is taken.",
        "params": {
          "_buyBuyerSide": "Buying the buyer side or the seller side?",
          "_value": "DAI amount"
        }
      },
      "calculateCollateralAmount(uint256,uint256,uint256,uint256,bool)": {
        "details": "Calculate the collateral amount for one party given the current     market price and original strike price, notional amount and the     amount the party has deposited into the contract.",
        "params": {
          "_depositBalance": "Balances of deposits into the contract",
          "_isBuyer": "Buyer or Seller / Long or short party?",
          "_marketPrice": "Current market price",
          "_notionalAmount": "CFD notional amount",
          "_strikePrice": "CFD strike price"
        },
        "return": "collateral Amount of collateral for the party"
      },
      "calculateNewNotional(uint256,uint256,uint256)": {
        "details": "Calculate new notional amount after a side has been sold at a new     strike price.     * Formula is: N2 = N1 * S2 / S1 Where: N1 = previous notional S1 = previous strike price S2 = sale strike price",
        "params": {
          "_newStrikePrice": "New / Sale strike price.",
          "_oldNotional": "Existing notional.",
          "_oldStrikePrice": "Existing strike price."
        },
        "return": "newNotional Result of the calculation."
      },
      "cancelNew()": {
        "details": "Cancels a newly created contract refunding the balance to the party     that created the contract. This can only be called before a contract     is initiated. ie. between the create() and deposit() calls."
      },
      "changeInDai(uint256,uint256,uint256)": {
        "details": "Calculate the change in contract value based on the price change.",
        "params": {
          "_currentPrice": "Current market price"
        }
      },
      "changeStrikePrice(uint256)": {
        "details": "Party can update the strike price of an non-initialized contract"
      },
      "create(address,address,address,address,bytes32,uint256,uint256,bool)": {
        "details": "Create a new CFDinstance specifying the terms of the contract.     * Fee of 0.3% of the notional is taken.     * Therefore the intial deposit is _value minus these fees.",
        "params": {
          "_cfdRegistryAddr": "CFD Registry contract address",
          "_feedsAddr": "Feeds address",
          "_isBuyer": "Flag indicating if the contract creator wants to take the           buyer (true) or the seller side (false).",
          "_marketId": "Contract is for prices on this market",
          "_notionalAmountDai": "Contract amount",
          "_partyAddr": "Address of the party creating the contract",
          "_registryAddr": "Registry contract address",
          "_strikePrice": "Strike price"
        }
      },
      "createByUpgrade(address,address,address,address)": {
        "details": "Create a new CFDinstance from a previous CFD instance. This is part     of the upgrade process (see CFD.upgrade()).",
        "params": {
          "_cfdAddr": "Address of the existing / old CFD",
          "_cfdRegistryAddr": "Address of CFDRegistry contract",
          "_feedsAddr": "Address to send fees to",
          "_registryAddr": "Address of Registry contract"
        }
      },
      "cutOffPrice(uint256,uint256,uint256,bool)": {
        "details": "Calculate the cut off price for buyer or seller.     * This is the price that if passed would raise a liquidation event.     * Base Formulas are:    Buyer:  1.05 * S - depositBalanceLong  * S / N    Seller: 0.95 * S + depositBalanceShort * S / N     * However for Solidity we need to adjust parts by FACTOR_UINT to ensure no fractions.",
        "params": {
          "_depositBalance": "Balance of deposits for one party",
          "_notionalAmountDai": "Contract notional amount"
        },
        "return": "cut off price"
      },
      "deposit(uint256)": {
        "details": "Counterparty deposits their funds into the contract thereby joining and initiating the contract.     * Fee of 0.5% of the notional is taken.     * Therefore the intial deposit is _value minus these fees."
      },
      "isActive()": {
        "details": "Contract has been initiated (has 2 parties) and not yet terminated.",
        "return": "true if contract is active"
      },
      "isBuyerSelling()": {
        "details": "Is buyer / long party selling.",
        "return": "true if buyer has side up for sale"
      },
      "isContractParty(address)": {
        "details": "Check if the given address is one of the 2 parties of the contract.",
        "params": {
          "_party": "Address to check"
        },
        "return": "true if _party is either the buyer or seller."
      },
      "isSellerSelling()": {
        "details": "Is seller / short party selling.",
        "return": "true if seller has side up for sale"
      },
      "isSelling(address)": {
        "details": "If the given party is selling one side of the contract.",
        "return": "true if the given party is selling"
      },
      "liquidate()": {
        "details": "Daemons will call this routine when the market price has moved     enough that the closeRatio for this contract has been reached.     It can actually be called by anyone who is willing to pay the gas     for the liquidate. But if the market has moved past the liquidate     threshold the call will be rejected.     * This will disolve the contract and return each parties balance of collateral."
      },
      "marketPriceInRange(uint256,uint256,uint256,uint256)": {
        "details": "Checks if given parameters and given market price result in a price     inside an allowable range. This range is defined by the ContractForDifferenceLibrary.cutOffPrice     function formulas. The idea is that as parameters change - leverage,     market price etc., we must check the change doesn't result in a     liquidation event due to too little collateral.",
        "params": {
          "_marketPrice": "Current market price"
        },
        "return": "true if in range; false if not"
      },
      "percentChange(uint256,uint256)": {
        "details": "Return a percentage change comparing a value with a new value.",
        "params": {
          "_newValue": "The new value to compare the change against",
          "_value": "The existing value to compare against"
        },
        "return": "Percentage change (eg. _value = 100, _newValue = 90 then return 10)"
      },
      "percentOf(uint256,uint256)": {
        "details": "Return a percentage of a given amount.",
        "params": {
          "_amount": "Amount to calculate the percentage of",
          "_percent": "Percent amount (1 - 100)"
        }
      },
      "sellCancel()": {
        "details": "Cancel the for sale status setup by sellPrepare()"
      },
      "sellPrepare(uint256,uint256)": {
        "details": "Position in a contract can be sold to another party. This function     makes the callers side available for sale. A party can buy the side     with the buy function.",
        "params": {
          "_desiredStrikePrice": "Sellers desired sell strike price",
          "_timeLimit": "Sale available until this time in UNIX epoch seconds                 (< now for no limit)"
        }
      },
      "sellUpdate(uint256)": {
        "details": "Seller can update the price on the sale."
      },
      "status()": {
        "details": "Derive status from the state variables.",
        "return": "Status reflecting the current state."
      },
      "topup(uint256)": {
        "details": "Party adds more funds to the contract thereby increasing their     deposit balance.",
        "params": {
          "_value": "DAI amount"
        }
      },
      "transferPosition(address)": {
        "details": "Parties can transfer contract ownership to another address by     calling this function.",
        "params": {
          "_newAddress": "Addreess of the new party to swap in."
        }
      },
      "upgrade()": {
        "details": "Upgrade contract to a new version. This involves creating a new CFD     at the latest contract set - transferring over all properties and     value from this one to the new one.     An upgrade requires a call to this function from both parties. Then     upgrade will happen when the second party makes the call."
      },
      "withdraw(uint256)": {
        "details": "Party withdraws funds from the contract.     They can only withdraw down to an amount that leaves the collateral     to notional difference at 20% or more.",
        "params": {
          "_withdrawAmount": "Amount to withdraw from the deposits balance."
        }
      }
    },
    "title": "Contract for difference * Contract for difference for a given market between a \"buyer\" (long position) and \"seller\" (short position)."
  },
  "userdoc": {
    "methods": {
      "creatorFee(uint256)": {
        "notice": "Creator fee - 0.3% of notional."
      },
      "forceTerminate()": {
        "notice": "Force terminate executed by one party who will penalised 5% of their collateral. Then penalty will be sent to the counterparty."
      },
      "getCfdAttributes()": {
        "notice": "Returns an array with all the attributes of the contract (Had to split in 3 functions because of the stack limit) Max number of return values == 8"
      },
      "joinerFee(uint256)": {
        "notice": "Joiner (deposit or buy) percentage fee - 0.5% of notional."
      }
    }
  }
}