{
  "contractName": "ContractForDifference",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "seller",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "feedsAddr",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "terminated",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "FORCE_TERMINATE_PENALTY_PERCENT",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerSaleStrikePrice",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerInitialNotional",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerDepositBalance",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "upgradeCalledBy",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "notionalAmountWei",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "upgradeable",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "closed",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerSaleTimeLimit",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerInitialStrikePrice",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyer",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerInitialNotional",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerSaleStrikePrice",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "market",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "cfdRegistryAddr",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerDepositBalance",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "initiated",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerSelling",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "strikePrice",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerInitialStrikePrice",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "withdrawable",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "MINIMUM_NOTIONAL_AMOUNT_WEI",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerSaleTimeLimit",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerSelling",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "notionalAmountWei",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "deposit",
          "type": "uint256"
        }
      ],
      "name": "LogCFDCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "joiner",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amountSent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "notionalAmountWei",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "strikePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "buyerDepositBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "sellerDepositBalance",
          "type": "uint256"
        }
      ],
      "name": "LogCFDInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "LogCFDTransferPosition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        }
      ],
      "name": "LogCFDCanceledNew",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "newStrikePrice",
          "type": "uint256"
        }
      ],
      "name": "LogCFDStrikePriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "saleStrikePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "timeLimit",
          "type": "uint256"
        }
      ],
      "name": "LogCFDSale",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        }
      ],
      "name": "LogCFDSaleCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "LogCFDSaleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "newNotional",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "sellerAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "buyerDeposit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        }
      ],
      "name": "LogCFDSold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LogCFDSendCollateralFailure",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "withdrawer",
          "type": "address"
        }
      ],
      "name": "LogCFDWithrewUnsent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "isWithdraw",
          "type": "bool"
        },
        {
          "indexed": false,
          "name": "newBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        }
      ],
      "name": "LogCFDPartyBalanceUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LogCFDTransferFunds",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "buyerCollateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "sellerCollateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        }
      ],
      "name": "LogCFDClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "terminator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "terminatorAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "otherParty",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "otherPartyAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        }
      ],
      "name": "LogCFDForceTerminated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "newCFD",
          "type": "address"
        }
      ],
      "name": "LogCFDUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "remainder",
          "type": "uint256"
        }
      ],
      "name": "LogCFDRemainingBalanceUnexpected",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isActive",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isBuyerSelling",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isSellerSelling",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_party",
          "type": "address"
        }
      ],
      "name": "isSelling",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_party",
          "type": "address"
        }
      ],
      "name": "isContractParty",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_registryAddr",
          "type": "address"
        },
        {
          "name": "_cfdRegistryAddr",
          "type": "address"
        },
        {
          "name": "_feedsAddr",
          "type": "address"
        },
        {
          "name": "_partyAddr",
          "type": "address"
        },
        {
          "name": "_marketId",
          "type": "bytes32"
        },
        {
          "name": "_strikePrice",
          "type": "uint256"
        },
        {
          "name": "_notionalAmountWei",
          "type": "uint256"
        },
        {
          "name": "_isBuyer",
          "type": "bool"
        }
      ],
      "name": "create",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_cfdAddr",
          "type": "address"
        },
        {
          "name": "_registryAddr",
          "type": "address"
        },
        {
          "name": "_cfdRegistryAddr",
          "type": "address"
        },
        {
          "name": "_feedsAddr",
          "type": "address"
        }
      ],
      "name": "createByUpgrade",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCfdAttributes",
      "outputs": [
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "bytes32"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "bool"
        },
        {
          "name": "",
          "type": "bool"
        },
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCfdAttributes2",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCfdAttributes3",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        },
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "cancelNew",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "topup",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_newAddress",
          "type": "address"
        }
      ],
      "name": "transferPosition",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_desiredStrikePrice",
          "type": "uint256"
        },
        {
          "name": "_timeLimit",
          "type": "uint256"
        }
      ],
      "name": "sellPrepare",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_newPrice",
          "type": "uint256"
        }
      ],
      "name": "sellUpdate",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_newStrikePrice",
          "type": "uint256"
        }
      ],
      "name": "changeStrikePrice",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "sellCancel",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_buyBuyerSide",
          "type": "bool"
        }
      ],
      "name": "buy",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "liquidate",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "forceTerminate",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "upgrade",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "status",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "withdrawUnsent",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_marketPrice",
          "type": "uint256"
        },
        {
          "name": "_buyerDepositBalance",
          "type": "uint256"
        },
        {
          "name": "_sellerDepositBalance",
          "type": "uint256"
        },
        {
          "name": "_strikePrice",
          "type": "uint256"
        }
      ],
      "name": "marketPriceInRange",
      "outputs": [
        {
          "name": "inRange",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_oldNotional",
          "type": "uint256"
        },
        {
          "name": "_oldStrikePrice",
          "type": "uint256"
        },
        {
          "name": "_newStrikePrice",
          "type": "uint256"
        }
      ],
      "name": "calculateNewNotional",
      "outputs": [
        {
          "name": "newNotional",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_strikePrice",
          "type": "uint256"
        },
        {
          "name": "_marketPrice",
          "type": "uint256"
        },
        {
          "name": "_notionalAmount",
          "type": "uint256"
        },
        {
          "name": "_depositBalance",
          "type": "uint256"
        },
        {
          "name": "_isBuyer",
          "type": "bool"
        }
      ],
      "name": "calculateCollateralAmount",
      "outputs": [
        {
          "name": "collateral",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_notionalAmountWei",
          "type": "uint256"
        },
        {
          "name": "_depositBalance",
          "type": "uint256"
        },
        {
          "name": "_strikePrice",
          "type": "uint256"
        },
        {
          "name": "_calcForBuyerSide",
          "type": "bool"
        }
      ],
      "name": "cutOffPrice",
      "outputs": [
        {
          "name": "price",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_notional",
          "type": "uint256"
        }
      ],
      "name": "creatorFee",
      "outputs": [
        {
          "name": "fee",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_notional",
          "type": "uint256"
        }
      ],
      "name": "joinerFee",
      "outputs": [
        {
          "name": "fee",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_strikePrice",
          "type": "uint256"
        },
        {
          "name": "_currentPrice",
          "type": "uint256"
        },
        {
          "name": "_notionalAmount",
          "type": "uint256"
        }
      ],
      "name": "changeInWei",
      "outputs": [
        {
          "name": "change",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_value",
          "type": "uint256"
        },
        {
          "name": "_newValue",
          "type": "uint256"
        }
      ],
      "name": "percentChange",
      "outputs": [
        {
          "name": "percent",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_amount",
          "type": "uint256"
        },
        {
          "name": "_percent",
          "type": "uint256"
        }
      ],
      "name": "percentOf",
      "outputs": [
        {
          "name": "adjusted",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "bytecode": "",
  "deployedBytecode": "",
  "sourceMap": "1190:41269:5:-;;;5619:29;;;6031:36;;;;6216:23;5:2:-1;;;;30:1;27;20:12;5:2;6216:23:5;1190:41269;;;;;;",
  "deployedSourceMap": "1190:41269:5:-;;;;;;;;;-1:-1:-1;;;1190:41269:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4786:21;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4786:21:5;;;;;;;;-1:-1:-1;;;;;4786:21:5;;;;;;;;;;;;;;6113:24;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6113:24:5;;;;5688:22;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5688:22:5;;;;;;;;;;;;;;;;;;;;;;21686:506;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;21686:506:5;;;;;;;4548:56;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4548:56:5;;;;;;;;;;;;;;;;;;;;5396:32;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5396:32:5;;;;34427:367;;8:9:-1;5:2;;;30:1;27;20:12;5:2;34427:367:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4953:33;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4953:33:5;;;;6389:109;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6389:109:5;;;;10453:1112;;-1:-1:-1;;;;;10453:1112:5;;;;;;;;;;;;;;;;;;;;28182:1520;;8:9:-1;5:2;;;30:1;27;20:12;5:2;28182:1520:5;;;;12143:455;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12143:455:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5301:32;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5301:32:5;;;;16922:1877;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;16922:1877:5;;;;;37324:378;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;37324:378:5;;;;;;;;;6031:36;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6031:36:5;;;;39390:419;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;39390:419:5;;;;;;;;;;;;;4878:29;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4878:29:5;;;;5867:31;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5867:31:5;;;;6904:165;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6904:165:5;;;;14827:596;;8:9:-1;5:2;;;30:1;27;20:12;5:2;14827:596:5;;;;7604:129;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;7604:129:5;-1:-1:-1;;;;;7604:129:5;;;;;5655:26;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5655:26:5;;;;8608:1615;;-1:-1:-1;;;;;8608:1615:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;38301:488;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;38301:488:5;;;;;;;;;;;;;;;19376:703;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;19376:703:5;-1:-1:-1;;;;;19376:703:5;;;;;5435:30;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5435:30:5;;;;15555:1077;;;;5143:36;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5143:36:5;;;;22296:604;;;;;;4725:20;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4725:20:5;;;;4914:32;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4914:32:5;;;;5474:33;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5474:33:5;;;;39875:142;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;39875:142:5;;;;;36095:708;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;36095:708:5;;;;;;;;;;;6146:24;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6146:24:5;;;;12604:189;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12604:189:5;;;;;;;;;;;;;-1:-1:-1;;;;;12604:189:5;;;;;;;;;;;;;;;;4848:21;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4848:21:5;;;;20496:1110;;;;;;;;40110:140;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;40110:140:5;;;;;29872:2983;;8:9:-1;5:2;;;30:1;27;20:12;5:2;29872:2983:5;;;;6076:30;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6076:30:5;;;;6619:161;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6619:161:5;;;;41066:209;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;41066:209:5;;;;;;;5263:31;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5263:31:5;;;;5619:29;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5619:29:5;;;;34952:306;;8:9:-1;5:2;;;30:1;27;20:12;5:2;34952:306:5;;;;41463:203;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;41463:203:5;;;;;;;5554:24;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5554:24:5;;;;11762:375;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11762:375:5;;;;;;;;-1:-1:-1;;;;;11762:375:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5071:23;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5071:23:5;;;;5101:35;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5101:35:5;;;;23466:2812;;;;;;;;5342:45;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;5342:45:5;-1:-1:-1;;;;;5342:45:5;;;;;13067:1498;;;;7215:181;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;7215:181:5;-1:-1:-1;;;;;7215:181:5;;;;;33242:1053;;8:9:-1;5:2;;;30:1;27;20:12;5:2;33242:1053:5;;;;4611:60;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4611:60:5;;;;5514:31;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5514:31:5;;;;22989:258;;8:9:-1;5:2;;;30:1;27;20:12;5:2;22989:258:5;;;;40405:346;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;40405:346:5;;;;;;;;;5585:25;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5585:25:5;;;;4786:21;;;-1:-1:-1;;;;;4786:21:5;;:::o;6113:24::-;;;-1:-1:-1;;;;;6113:24:5;;:::o;5688:22::-;;;;;;;;;:::o;21686:506::-;21774:10;:8;:10::i;:::-;21786:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;21786:21:5;;;;;320:26:0;;;;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21827:21:5;21837:10;21827:9;:21::i;:::-;21850;;;;;;;;;;;;;;;;;;320:26:0;;;;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;-1:-1:-1;21906:29:5;;;;;;;;;;;;;;;;;21903:1;21891:13;;;21906:29;21891:13;320:26:0;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;-1:-1:-1;21971:5:5;;-1:-1:-1;;;;;21971:5:5;21957:10;:19;21953:176;;;21993:20;:32;;;21953:176;;;22061:6;;-1:-1:-1;;;;;22061:6:5;22047:10;:20;22043:86;;;22084:21;:33;;;22043:86;22144:40;;;22162:10;22144:40;;;;;;;;;;;;;;;;;;;;;357:1:0;;;;21686:506:5;;;:::o;4548:56::-;4603:1;4548:56;:::o;5396:32::-;;;;:::o;34427:367::-;34521:6;;34493;;34521;;;;;:14;;34531:4;34521:14;34517:269;;;-1:-1:-1;34557:13:5;34550:20;;34517:269;34590:9;;;;;;;:18;;34586:200;;-1:-1:-1;34630:14:5;34623:21;;34586:200;34664:16;:14;:16::i;:::-;:37;;;;34684:17;:15;:17::i;:::-;34660:126;;;-1:-1:-1;34723:11:5;34716:18;;34660:126;-1:-1:-1;34770:16:5;34660:126;34427:367;:::o;4953:33::-;;;;:::o;6389:109::-;6454:9;;6430:4;;6454:9;;;;;:17;;6467:4;6454:17;:36;;;;-1:-1:-1;6475:6:5;;;;;;;:15;6454:36;6447:43;;6389:109;:::o;10453:1112::-;10657:28;10710:8;10657:62;;10741:6;-1:-1:-1;;;;;10741:13:5;;:15;;;;;-1:-1:-1;;;10741:15:5;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10741:15:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10741:15:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10741:15:5;10732:6;:24;10787:26;;;;;;;;-1:-1:-1;;;;;10787:24:5;;;;;:26;;;;;10741:15;;10787:26;;;;;;;:24;:26;;;5:2:-1;;;;30:1;27;20:12;5:2;10787:26:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10787:26:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10787:26:5;10767:17;:46;10838:20;;;;;;;;-1:-1:-1;;;;;10838:18:5;;;;;:20;;;;;10787:26;;10838:20;;;;;;;:18;:20;;;5:2:-1;;;;30:1;27;20:12;5:2;10838:20:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10838:20:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10838:20:5;10824:11;:34;10877:14;;;;;;;;-1:-1:-1;;;;;10877:12:5;;;;;:14;;;;;10838:20;;10877:14;;;;;;;:12;:14;;;5:2:-1;;;;30:1;27;20:12;5:2;10877:14:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10877:14:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10877:14:5;10869:5;:22;;-1:-1:-1;;;;;;10869:22:5;-1:-1:-1;;;;;10869:22:5;;;;;;10911:15;;;;;;;;:13;;;;;;:15;;;;;10877:14;;10911:15;;;;;;;;:13;:15;;;5:2:-1;;;;30:1;27;20:12;5:2;10911:15:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10911:15:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10911:15:5;10902:6;:24;;-1:-1:-1;;;;;;10902:24:5;-1:-1:-1;;;;;10902:24:5;;;;;;10961:28;;;;;;;;:26;;;;;;:28;;;;;10911:15;;10961:28;;;;;;;;:26;:28;;;5:2:-1;;;;30:1;27;20:12;5:2;10961:28:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10961:28:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10961:28:5;10939:19;:50;11023:29;;;;;;;;-1:-1:-1;;;;;11023:27:5;;;;;:29;;;;;10961:28;;11023:29;;;;;;;:27;:29;;;5:2:-1;;;;30:1;27;20:12;5:2;11023:29:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;11023:29:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;11023:29:5;11000:20;:52;;;11089:32;;;;;;;;-1:-1:-1;;;;;11089:30:5;;;;;:32;;;;11023:29;;11089:32;;;;;;;:30;:32;;;5:2:-1;;;;30:1;27;20:12;5:2;11089:32:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;11089:32:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;11089:32:5;11063:23;:58;11157:29;;;;;;;;-1:-1:-1;;;;;11157:27:5;;;;;:29;;;;;11089:32;;11157:29;;;;;;;:27;:29;;;5:2:-1;;;;30:1;27;20:12;5:2;11157:29:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;11157:29:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;11157:29:5;11134:20;:52;11221:30;;;;;;;;-1:-1:-1;;;;;11221:28:5;;;;;:30;;;;;11157:29;;11221:30;;;;;;;:28;:30;;;5:2:-1;;;;30:1;27;20:12;5:2;11221:30:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;11221:30:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;11221:30:5;11197:21;:54;11289:33;;;;;;;;-1:-1:-1;;;;;11289:31:5;;;;;:33;;;;;11221:30;;11289:33;;;;;;;:31;:33;;;5:2:-1;;;;30:1;27;20:12;5:2;11289:33:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;11289:33:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;11289:33:5;11262:24;:60;11335:15;:34;;-1:-1:-1;;;;;11335:34:5;;;-1:-1:-1;;;;;;11335:34:5;;;;;;;;11380:8;:34;;;;;;;;;;;11425:9;:22;;;;;;;;;;;;;;11460:9;:16;;-1:-1:-1;;11460:16:5;;;;;11335:34;11550:6;11489:68;;;-1:-1:-1;;;;;11489:68:5;;11550:6;;;11489:68;;;;;11519:15;;;;;11489:60;;:68;;;;;11335:15;;11489:68;;;;;;;;11335:15;11519;11489:68;;;5:2:-1;;;;30:1;27;20:12;5:2;11489:68:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;11489:68:5;;;;10453:1112;;;;;:::o;28182:1520::-;28290:16;28802;29073:18;29130:14;29219;28239:10;:8;:10::i;:::-;28251:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;28251:21:5;;;;;320:26:0;;;;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;;28309:13:5;:11;:13::i;:::-;28290:32;;28485:170;28522:11;28552:19;;28590:20;;28629:11;;28485:18;:170::i;:::-;28484:171;28462:257;;;;;-1:-1:-1;;;;;28462:257:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;28821:162;28876:17;;28908:19;;28942:11;;28968:4;28821:40;:162::i;:::-;28802:181;;29108:11;29094;:25;29073:46;;29147:13;:30;;29171:6;;-1:-1:-1;;;;;29171:6:5;29147:30;;;29163:5;;-1:-1:-1;;;;;29163:5:5;29147:30;29273:22;;29130:47;;-1:-1:-1;29244:4:5;29236:21;;-1:-1:-1;;;;;;29273:11:5;;;:22;;;;;29236:21;;29273:22;;;;29236:21;29273:11;:22;;;;;;;29272:23;29268:230;;;-1:-1:-1;;;;;29312:20:5;;;;;;:12;:20;;;;;;;;;:32;;;29364:46;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;29364:46:5;;;;;;;;;29268:230;;;29448:38;;;-1:-1:-1;;;;;29448:38:5;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;29448:38:5;;;;;;;;;;29268:230;29510:6;:13;;-1:-1:-1;;29510:13:5;;;;;29541:153;29568:6;29589:13;:29;;29617:1;29589:29;;;29605:9;29589:29;29633:13;:29;;29653:9;29633:29;;;29649:1;29633:29;29677:6;;29541:153;;;-1:-1:-1;;;;;29541:153:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;28182:1520;;;;;;;:::o;12143:455::-;12306:20;;12341:21;;12377:19;;12411:20;;12446;;12481:21;;12517:23;;12555:24;;12143:455;;;;;;;;:::o;5301:32::-;;;;:::o;16922:1877::-;17044:12;;;;;17011:15;18983:1;18964:20;;;18956:29;;;;;;19004:9;;;;;;;:17;;19017:4;19004:17;18996:26;;;;;;19041:6;;;;;;;:15;19033:24;;;;;;19076:27;19092:10;19076:15;:27::i;:::-;19068:36;;;;;;;;19123:21;19133:10;19123:9;:21::i;:::-;:30;19115:39;;;;;;17073:5;;-1:-1:-1;;;;;17073:5:5;17059:10;:19;;-1:-1:-1;17059:19:5;17114:52;;17146:20;;17114:52;;;17124:19;;17114:52;17089:77;;17272:17;17254:15;:35;17250:88;;;17311:26;;;;;;;;;;;;;;;;;;;;;;;;17304:34;;-1:-1:-1;;;;;17304:34:5;;;;;;;;;;;;;;;;17311:26;;17304:34;;;;;;;;17311:26;17304:34;;17311:26;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;17250:88:5;17493:15;17473:17;:35;17452:56;;17538:13;:11;:13::i;:::-;17519:32;;17567:227;17600:11;17626:7;:45;;17652:19;;17626:45;;;17636:13;17626:45;17686:7;:46;;17719:13;17686:46;;;17696:20;;17686:46;17747:11;;17567:18;:227::i;:::-;17566:228;17562:301;;;17818:32;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;17818:32:5;;;;;;;17811:40;;-1:-1:-1;;;;;17811:40:5;;;;;;;;;;;;;;;;17818:32;;17811:40;;;;;;;;17818:32;17811:40;;17818:32;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;17562:301:5;17893:199;17962:11;;17988;18014:17;;18046:13;18074:7;17893:54;:199::i;:::-;17875:217;;18110:77;18157:17;;18176:10;18110:46;:77::i;:::-;18109:78;18105:149;;;18211:30;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;18211:30:5;;;;;;;18204:38;;-1:-1:-1;;;;;18204:38:5;;;;;;;;;;;;;;;;18211:30;;18204:38;;;;;;;;18211:30;18204:38;;18211:30;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;18105:149:5;18271:32;;:10;;:32;;;;;18287:15;;18271:32;;;;18287:15;18271:10;:32;;;;;;;18270:33;18266:270;;;18333:10;18320:24;;;;:12;:24;;;;;;;;;:42;;;18382:56;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;18382:56:5;;;;;;;;;18266:270;;;18476:48;;;18496:10;18476:48;;;;;;;;;;-1:-1:-1;;;;;;;;;;;18476:48:5;;;;;;;;;;18266:270;18552:7;18548:144;;;18576:19;:35;;;18548:144;;;18644:20;:36;;;18548:144;18784:6;;18709:82;;;18734:10;18709:82;;;;;;;;18763:4;18709:82;;;;;;;;;;;;;;;;;;;;;;;;;;;16922:1877;;;;;;;:::o;37324:378::-;37499:16;37547:147;37611:12;37638:15;37668;37547:49;:147::i;:::-;37533:161;37324:378;-1:-1:-1;;;;37324:378:5:o;6031:36::-;;;;;;-1:-1:-1;;;;;6031:36:5;;:::o;39390:419::-;39592:10;39628:173;39683:18;39716:15;39746:12;39773:17;39628:40;:173::i;:::-;39620:181;39390:419;-1:-1:-1;;;;;39390:419:5:o;4878:29::-;;;;:::o;5867:31::-;;;;;;;;;:::o;6904:165::-;6976:13;;6952:4;;6976:13;;;;;:85;;;;-1:-1:-1;7007:19:5;;:24;;:53;;-1:-1:-1;;7041:19:5;;7035:3;:25;;6904:165::o;14827:596::-;14884:9;;14904:28;;;;;;;;;;;;;;;;;-1:-1:-1;;14884:9:5;;;;;:18;;14904:28;14884:18;320:26:0;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;;14952:27:5;14968:10;14952:15;:27::i;:::-;14981:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;14981:28:5;;;;-1:-1:-1;;;;;14981:28:5;;;328:9:0;339:6;320:26;;;;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;-1:-1:-1;15082:27:5;;15053:4;15045:21;;-1:-1:-1;15082:10:5;;:27;;;;;15045:21;;15082:27;;;;15045:21;15082:10;:27;;;;;;;15081:28;15077:250;;;15139:10;15126:24;;;;:12;:24;;;;;;;;;:37;;;15183:51;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;15183:51:5;;;;;;;;;15077:250;;;15272:43;;;15292:10;15272:43;;;;;;;;;;-1:-1:-1;;;;;;;;;;;15272:43:5;;;;;;;;;;15077:250;15337:6;:13;;-1:-1:-1;;15337:13:5;;;;;15408:6;;15366:49;;;15384:10;15366:49;;;;;;;;;;;;;;;;;;;;;;;;;357:1:0;;14827:596:5;;;:::o;7604:129::-;7666:4;7700:5;;-1:-1:-1;;;;;7690:15:5;;;7700:5;;7690:15;;:35;;-1:-1:-1;7719:6:5;;-1:-1:-1;;;;;7709:16:5;;;7719:6;;7709:16;7690:35;7683:42;7604:129;-1:-1:-1;;7604:129:5:o;5655:26::-;;;;;;;;;:::o;8608:1615::-;9006:23;;;;;;;;;;;;;;;;;9047:9;;;;4662;8955:49;;;;9006:23;8955:49;320:26:0;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;;9059:59:5;9099:18;9059:39;:59::i;:::-;9047:71;-1:-1:-1;9133:9:5;:17;-1:-1:-1;9129:66:5;;9172:22;;;;;;;;;;;;;;;;;;;9165:30;;-1:-1:-1;;;;;9165:30:5;;;;;;;;;;;;;;;;9172:22;;9165:30;;;;;;;;9172:22;9165:30;;9172:22;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;9129:66:5;9242:4;9230:9;:16;9208:38;;9262:82;9309:18;9329:14;9262:46;:82::i;:::-;9261:83;9257:140;;;9366:30;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;9366:30:5;;;;;;;9359:38;;-1:-1:-1;;;;;9359:38:5;;;;;;;;;;;;;;;;9366:30;;9359:38;;;;;;;;9366:30;9359:38;;9366:30;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;9257:140:5;9414:8;9410:214;;;9439:5;:18;;-1:-1:-1;;;;;;9439:18:5;-1:-1:-1;;;;;9439:18:5;;;;;9472:19;:36;;;9410:214;;;9541:6;:19;;-1:-1:-1;;;;;;9541:19:5;-1:-1:-1;;;;;9541:19:5;;;;;9575:20;:37;;;9410:214;9636:6;:18;;;9665:17;:38;;;9714:20;:41;;;9766:21;:42;;;9821:11;:26;;;9858:23;:38;;;9907:24;:39;;;9959:15;:34;;-1:-1:-1;;;;;9959:34:5;;;-1:-1:-1;;;;;;9959:34:5;;;;;;;10004:9;:22;;;;;;;;;;;10037:8;:34;;;;;;;;;;;;;10089:126;;;;;;;;;;;;;;;;;;;;10195:9;10089:126;;;;;;;;;;;;;;8608:1615;;;;;;;;;;;;:::o;38301:488::-;38533:15;38579:202;38648:12;38675;38702:15;38732;38762:8;38579:54;:202::i;:::-;38566:215;38301:488;-1:-1:-1;;;;;;38301:488:5:o;19376:703::-;19459:6;;19476:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;19476:25:5;;;;19459:6;;;;;;:15;;19476:25;19459:15;320:26:0;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;;19521:27:5;19537:10;19521:15;:27::i;:::-;19550:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;19550:28:5;;;;-1:-1:-1;;;;;19550:28:5;;;328:9:0;339:6;320:26;;;;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;;19598:28:5;19614:11;19598:15;:28::i;:::-;19637:24;;;;;;;;;;;;;;;;;19598:37;;;19637:24;19598:37;320:26:0;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;;19681:21:5;19691:10;19681:9;:21::i;:::-;19713:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;19713:25:5;;;;19681:30;;;19713:25;19681:30;320:26:0;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;-1:-1:-1;19774:5:5;;-1:-1:-1;;;;;19774:5:5;19760:10;:19;19756:44;;;19781:5;:19;;-1:-1:-1;;;;;;19781:19:5;-1:-1:-1;;;;;19781:19:5;;;;;19756:44;19829:6;;-1:-1:-1;;;;;19829:6:5;19815:10;:20;19811:46;;;19837:6;:20;;-1:-1:-1;;;;;;19837:20:5;-1:-1:-1;;;;;19837:20:5;;;;;19811:46;19886:15;;;;;-1:-1:-1;;;;;19886:15:5;19872:10;:29;19868:56;;;19903:15;:21;;-1:-1:-1;;19903:21:5;;;19868:56;19965:15;;19935:73;;;-1:-1:-1;;;;;19935:73:5;;-1:-1:-1;;;;;19935:73:5;;;;;;;;;19965:15;;;;;19935:60;;:73;;;;;19965:15;;19935:73;;;;;;;19965:15;;19935:73;;;5:2:-1;;;;30:1;27;20:12;5:2;19935:73:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;20024:47:5;;;20047:10;20024:47;;-1:-1:-1;;;;;20024:47:5;;;;;;;;;;-1:-1:-1;20024:47:5;;;;;;;;-1:-1:-1;20024:47:5;357:1:0;;;;;;19376:703:5;;;:::o;5435:30::-;;;;:::o;15555:1077::-;15641:24;;;;;;;;;;;;;;;;;15962:12;;;;15638:1;15625:9;:14;;;15641:24;15625:14;320:26:0;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;-1:-1:-1;15685:9:5;;15704:24;;;;;;;;;;;;;;;;;15685:9;;;;;;:17;;15698:4;15685:17;;15704:24;15685:17;320:26:0;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;-1:-1:-1;15748:6:5;;15765:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;15765:25:5;;;;15748:6;;;;;;:15;;15765:25;15748:15;320:26:0;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;;15810:27:5;15826:10;15810:15;:27::i;:::-;15839:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;15839:28:5;;;;-1:-1:-1;;;;;15839:28:5;;;328:9:0;339:6;320:26;;;;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;;15887:21:5;15897:10;15887:9;:21::i;:::-;15919:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;15919:25:5;;;;15887:30;;;15919:25;15887:30;320:26:0;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;-1:-1:-1;15991:5:5;;-1:-1:-1;;;;;15991:5:5;15977:10;:19;;-1:-1:-1;16032:107:5;16129:9;15977:19;16033:80;;16093:20;;16033:80;;;16057:19;;16033:80;16032:96;:107;:96;:107;:::i;:::-;16007:132;;16224:84;16271:17;;16290;16224:46;:84::i;:::-;16223:85;16219:142;;;16330:30;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;16330:30:5;;;;;;;16323:38;;-1:-1:-1;;;;;16323:38:5;;;;;;;;;;;;;;;;16330:30;;16323:38;;;;;;;;16330:30;16323:38;;16330:30;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;16219:142:5;16378:7;16374:152;;;16402:19;:39;;;16374:152;;;16474:20;:40;;;16374:152;16617:6;;16543:81;;;16568:10;16543:81;;16580:9;16543:81;;;;16591:5;16543:81;;;;;;;;;;;;;;;;;;;;;;;;;;;357:1:0;;;;;;;;15555:1077:5;;;;:::o;5143:36::-;;;;:::o;22296:604::-;22414:9;;22434:28;;;;;;;;;;;;;;;;;22414:9;;;;;;:18;;22434:28;22414:18;320:26:0;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;-1:-1:-1;22482:6:5;;22499:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;22499:25:5;;;;22482:6;;;;;;:15;;22499:25;22482:15;320:26:0;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;;22544:27:5;22560:10;22544:15;:27::i;:::-;22573:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;22573:28:5;;;;-1:-1:-1;;;;;22573:28:5;;;328:9:0;339:6;320:26;;;;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;-1:-1:-1;22642:29:5;;;;;;;;;;;;;;;;;22639:1;22621:19;;;22642:29;22621:19;320:26:0;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;-1:-1:-1;22689:11:5;:29;;;22729:23;:41;;;22781:24;:42;;;22839:53;;;22864:10;22839:53;;;;;;;;;;;;;;;;;;;;;357:1:0;;;;;;22296:604:5;;;:::o;4725:20::-;;;-1:-1:-1;;;;;4725:20:5;;:::o;4914:32::-;;;;:::o;5474:33::-;;;;:::o;39875:142::-;39932:8;39959:50;39999:9;39959:39;:50::i;36095:708::-;36307:12;36337:16;36531:17;36356:164;36411:17;;36443:20;36478:12;36505:4;36356:40;:164::i;:::-;36337:183;;36551:166;36606:17;;36638:21;36674:12;36701:5;36551:40;:166::i;:::-;36531:186;;36753:11;36738:12;:26;:57;;;;;36783:12;36768;:27;36738:57;36728:67;36095:708;-1:-1:-1;;;;;;;36095:708:5:o;6146:24::-;;;-1:-1:-1;;;;;6146:24:5;;:::o;12604:189::-;12734:10;;;;;;;;12759:15;;;;-1:-1:-1;;;;;12759:15:5;;12604:189::o;4848:21::-;;;;:::o;20496:1110::-;20978:14;20613:27;20629:10;20613:15;:27::i;:::-;20642:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;20642:28:5;;;;-1:-1:-1;;;;;20642:28:5;;;328:9:0;339:6;320:26;;;;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;;20690:10:5;:8;:10::i;:::-;20702:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;20702:21:5;;;;;320:26:0;;;;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;;20799:21:5;20809:10;20799:9;:21::i;:::-;20831:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;20831:25:5;;;;20799:30;;;20831:25;20799:30;320:26:0;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;-1:-1:-1;20901:29:5;;;;;;;;;;;;;;;;;20898:1;20876:23;;;20901:29;20876:23;320:26:0;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;;20995:33:5;21017:10;20995:21;:33::i;:::-;21057:5;;20978:50;;-1:-1:-1;;;;;;21057:5:5;21043:10;:19;21039:356;;;21079:12;:19;;-1:-1:-1;;21079:19:5;21094:4;21079:19;;;21113:20;:42;;;21170:18;:30;;;21039:356;;;21236:6;;-1:-1:-1;;;;;21236:6:5;21222:10;:20;21218:177;;;21259:13;:20;;-1:-1:-1;;21259:20:5;;;;;21294:21;:43;;;21352:19;:31;;;21218:177;21437:15;;21407:71;;;;;;21467:10;21407:71;;;;;;-1:-1:-1;;;;;21437:15:5;;;;21407:59;;:71;;;;;21437:15;;21407:71;;;;;;;;21437:15;;21407:71;;;5:2:-1;;;;30:1;27;20:12;5:2;21407:71:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;21494:104:5;;;21519:10;21494:104;;;;;;;;;;;;;;;;;;-1:-1:-1;21494:104:5;;;;;;;-1:-1:-1;21494:104:5;357:1:0;;;;;;20496:1110:5;;;;;:::o;40110:140::-;40166:8;40193:49;40232:9;40193:38;:49::i;29872:2983::-;30062:16;30105:24;30164:20;30400:21;30878;31231:12;29934:10;:8;:10::i;:::-;29946:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;29946:21:5;;;;;320:26:0;;;;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;;29987:27:5;30003:10;29987:15;:27::i;:::-;30016:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;30016:28:5;;;;-1:-1:-1;;;;;30016:28:5;;;328:9:0;339:6;320:26;;;;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;;30081:13:5;:11;:13::i;:::-;30146:5;;30256:11;;30308:17;;30340:19;;30062:32;;-1:-1:-1;;;;;;30146:5:5;;;30132:10;:19;;-1:-1:-1;30187:202:5;;30256:11;;30062:32;;30146:5;30187:54;:202::i;:::-;30164:225;;30424:204;30493:11;;30519;30545:17;;30577:20;;30612:5;30424:54;:204::i;:::-;30400:228;-1:-1:-1;30902:64:5;30400:228;30902:42;30910:4;30902:21;30928:15;30902:42;:25;:42;:::i;:::-;:46;:64;:46;:64;:::i;:::-;30878:88;-1:-1:-1;30981:21:5;;30977:109;;31024:50;;;;;;;;;;;;;;;;;30977:109;31096:8;;;;;;;;;-1:-1:-1;;;;;31096:8:5;-1:-1:-1;;;;;31096:16:5;;:18;;;;;-1:-1:-1;;;31096:18:5;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;31096:18:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;31096:18:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;31096:18:5;:45;;-1:-1:-1;;;;;31096:27:5;;;;:45;;;;;31124:16;;31096:45;;;;31124:16;31096:27;:45;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;31096:45:5;31246:166;31299:19;:56;;31339:16;31299:56;;;31321:15;31299:56;4603:1;31246:38;:166::i;:::-;31231:181;;31427:19;31423:303;;;31481:28;:15;31501:7;31481:28;:19;:28;:::i;:::-;31463:46;-1:-1:-1;31543:29:5;:16;31564:7;31543:29;:20;:29;:::i;:::-;31524:48;;31423:303;;;31623:28;:15;31643:7;31623:28;:19;:28;:::i;:::-;31605:46;-1:-1:-1;31685:29:5;:16;31706:7;31685:29;:20;:29;:::i;:::-;31666:48;;31423:303;32031:5;;;:27;;-1:-1:-1;;;;;32031:5:5;;;;:27;;;;;32042:15;;32031:27;:5;:27;32042:15;32031:5;:27;;;;;;;32030:28;32026:250;;;32075:19;32088:5;;-1:-1:-1;;;;;32088:5:5;;;32075:19;;:12;:19;;;;;;;;:37;;;32160:5;;32132:51;;32160:5;;32132:51;;;;;;;;;-1:-1:-1;;;;;;;;;;;32132:51:5;;;;;;;;;;32026:250;;;32241:5;;32221:43;;;-1:-1:-1;;;;;32241:5:5;;;32221:43;;;;;;;;;;-1:-1:-1;;;;;;;;;;;32221:43:5;;;;;;;;;32026:250;32293:6;;:29;;-1:-1:-1;;;;;32293:6:5;;;;:29;;;;;32305:16;;32293:6;:29;:6;:29;32305:16;32293:6;:29;;;;;;;32292:30;32288:258;;;32352:6;;;-1:-1:-1;;;;;32352:6:5;;;32339:20;;;;:12;:20;;;;;;;;;:39;;;32426:6;;32398:53;;32426:6;;32398:53;;;;;;;;;;-1:-1:-1;;;;;;;;;;;32398:53:5;;;;;;;;;;32288:258;;;32509:6;;32489:45;;;-1:-1:-1;;;;;32509:6:5;;;32489:45;;;;;;;;;;-1:-1:-1;;;;;;;;;;;32489:45:5;;;;;;;;;32288:258;32558:10;:17;;-1:-1:-1;;;;32558:17:5;;;;;32586:13;;;;;32612:235;;;;32677:5;;;32701:6;32727;;32655:79;;;-1:-1:-1;;;;;32677:5:5;;;32655:79;;;;;;;;32701:6;;;;32655:79;;;;;;;;;;;;;;;;;;;;;;;;;32612:235;;;32790:6;;;32816:5;32840:6;;32768:79;;;-1:-1:-1;;;;;32790:6:5;;;32768:79;;;;;;;;32816:5;;;;32768:79;;;;;;;;;;;;;;;;;;;;;;;;;32612:235;357:1:0;;29872:2983:5;;;;;;;;:::o;6076:30::-;;;-1:-1:-1;;;;;6076:30:5;;:::o;6619:161::-;6690:12;;6666:4;;6690:12;;:82;;;;-1:-1:-1;6720:18:5;;:23;;:51;;-1:-1:-1;;6753:18:5;;6747:3;:24;;6619:161::o;41066:209::-;41166:12;41206:61;41249:6;41257:9;41206:42;:61::i;:::-;41196:71;41066:209;-1:-1:-1;;;41066:209:5:o;5263:31::-;;;;:::o;5619:29::-;;;;;;;;;:::o;34952:306::-;35027:10;35088:11;35014:24;;;:12;:24;;;;;;;;;35044:26;;;;;;;;;;;;;;;;;;;;;;;;;;35014:28;-1:-1:-1;35014:28:5;35044:26;35014:28;320:26:0;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;-1:-1:-1;35115:10:5;35102:24;;;;:12;:24;;;;;;;;35137:28;;;;35176:27;;35102:24;;-1:-1:-1;35176:27:5;;;;;35102:24;;35176:27;;35102:24;35176:27;35102:24;35115:10;35176:27;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;35219:31:5;;;35239:10;35219:31;;;;;;;;;;;;;34952:306;;;:::o;41463:203::-;41559:13;41601:57;41640:7;41649:8;41601:38;:57::i;5554:24::-;;;;;;:::o;11762:375::-;11838:7;11935:5;;;11955:6;11976;;11997:11;;12023:17;;12055:12;;11838:7;;;;;;;;;;;;;;-1:-1:-1;;;;;11935:5:5;;;;11955:6;;11976;11997:11;12023:17;12055:12;;;;;11935:5;12082:13;;;12110:8;:6;:8::i;:::-;11913:216;;;;-1:-1:-1;11913:216:5;;-1:-1:-1;11913:216:5;;-1:-1:-1;11913:216:5;-1:-1:-1;11913:216:5;-1:-1:-1;11913:216:5;-1:-1:-1;11913:216:5;;-1:-1:-1;11762:375:5;-1:-1:-1;11762:375:5:o;5071:23::-;;;;:::o;5101:35::-;;;;:::o;23466:2812::-;23591:9;23859:19;24063:16;24106:19;24682:20;24746:27;24939;25061:16;23560:13;26436:10;:8;:10::i;:::-;26428:19;;;;;;;;26466:41;26476:13;:30;;26500:6;;-1:-1:-1;;;;;26500:6:5;26476:30;;;26492:5;;-1:-1:-1;;;;;26492:5:5;26476:30;26466:9;:41::i;:::-;26458:50;;;;;;;;26527:27;26543:10;26527:15;:27::i;:::-;:36;26519:45;;;;;;23603:57;23642:17;;23603:38;:57::i;:::-;23591:69;-1:-1:-1;23675:9:5;:17;-1:-1:-1;23671:66:5;;23714:22;;;;;;;;;;;;;;;;;;;23707:30;;-1:-1:-1;;;;;23707:30:5;;;;;;;;;;;;;;;;23714:22;;23707:30;;;;;;;;23714:22;23707:30;;23714:22;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;23671:66:5;23750:8;;;;;;;;;-1:-1:-1;;;;;23750:8:5;-1:-1:-1;;;;;23750:16:5;;:18;;;;;-1:-1:-1;;;23750:18:5;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;23750:18:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;23750:18:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;23750:18:5;:33;;-1:-1:-1;;;;;23750:27:5;;;;:33;;;;;23778:4;;23750:33;;;;23778:4;23750:27;:33;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;23881:19:5;:9;23895:4;23881:19;:13;:19;:::i;:::-;23859:41;;23916:81;23963:17;;23982:14;23916:46;:81::i;:::-;23915:82;23911:139;;;24019:30;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;24019:30:5;;;;;;;24012:38;;-1:-1:-1;;;;;24012:38:5;;;;;;;;;;;;;;;;24019:30;;24012:38;;;;;;;;24019:30;24012:38;;24019:30;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;23911:139:5;24082:13;:11;:13::i;:::-;24063:32;;24128:13;:86;;24193:21;;24128:86;;;24157:20;;24128:86;24106:108;;24293:250;24326:11;24352:13;:52;;24385:19;;24352:52;;;24368:14;24352:52;24419:13;:53;;24458:14;24419:53;;;24435:20;;24419:53;24487:14;24293:18;:250::i;:::-;24292:251;24288:324;;;24567:32;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;24567:32:5;;;;;;;24560:40;;-1:-1:-1;;;;;24560:40:5;;;;;;;;;;;;;;;;24567:32;;24560:40;;;;;;;;24567:32;24560:40;;24567:32;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;24288:324:5;24705:13;:30;;24729:6;;-1:-1:-1;;;;;24729:6:5;24705:30;;;24721:5;;-1:-1:-1;;;;;24721:5:5;24705:30;24682:53;;24776:111;24807:13;24835:14;24864:12;24776:16;:111::i;:::-;24746:141;-1:-1:-1;24969:41:5;24977:4;24969:21;24995:14;24969:41;:25;:41;:::i;:::-;24939:71;;25080:147;25144:17;;25176:11;;25202:14;25080:49;:147::i;:::-;25061:166;;25244:13;25240:548;;;25274:5;:18;;-1:-1:-1;;;;;;25274:18:5;25282:10;25274:18;;;25307:19;:36;;;25358:23;:40;;;25413:20;:34;;;25462:20;:45;;;25240:548;;;25540:6;:19;;-1:-1:-1;;;;;;25540:19:5;25549:10;25540:19;;;25574:20;:37;;;25626:24;:41;;;25682:21;:35;;;25732:19;:44;;;25240:548;25800:11;:28;;;25839:17;:31;;;25883:24;25893:13;25883:9;:24::i;:::-;25997:15;;-1:-1:-1;;;;;25997:31:5;;;:15;;;;;:31;25993:85;;;26045:15;:21;;-1:-1:-1;;26045:21:5;;;25993:85;26120:15;;26090:72;;;-1:-1:-1;;;;;26090:72:5;;26151:10;26090:72;;;;;;-1:-1:-1;;;;;26120:15:5;;;;26090:60;;:72;;;;;26120:15;;26090:72;;;;;;;;26120:15;;26090:72;;;5:2:-1;;;;30:1;27;20:12;5:2;26090:72:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;26263:6:5;;26178:92;;;26189:10;26178:92;;-1:-1:-1;;;;;26178:92:5;;;;;;;;;;;;;;;;;;26252:9;26178:92;;;;;;;;;;;;;;-1:-1:-1;26178:92:5;;;;;;;-1:-1:-1;26178:92:5;23466:2812;;;;;;;;;;:::o;5342:45::-;;;;;;;;;;;;;:::o;13067:1498::-;13139:9;;13159:28;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;13139:9:5;;;;;:18;;13159:28;13139:18;320:26:0;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;-1:-1:-1;13207:6:5;;13224:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;13224:25:5;;;;13207:6;;;;;;:15;;13224:25;13207:15;320:26:0;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;;13302:27:5;13318:10;13302:15;:27::i;:::-;13340:24;;;;;;;;;;;;;;;;;13302:36;;;13340:24;13302:36;320:26:0;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;;13438:57:5;13477:17;;13438:38;:57::i;:::-;13420:75;-1:-1:-1;13510:9:5;:23;-1:-1:-1;13506:72:5;;13555:22;;;;;;;;;;;;;;;;;;;13548:30;;-1:-1:-1;;;;;13548:30:5;;;;;;;;;;;;;;;;13555:22;;13548:30;;;;;;;;13555:22;13548:30;;13555:22;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;13506:72:5;13625:10;13613:9;:22;13591:44;;13651:81;13698:17;;13717:14;13651:46;:81::i;:::-;13650:82;13646:139;;;13754:30;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;13754:30:5;;;;;;;13747:38;;-1:-1:-1;;;;;13747:38:5;;;;;;;;;;;;;;;;13754:30;;13747:38;;;;;;;;13754:30;13747:38;;13754:30;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;13646:139:5;13802:5;;-1:-1:-1;;;;;13802:5:5;:12;13798:218;;;13831:5;:18;;-1:-1:-1;;;;;;13831:18:5;13839:10;13831:18;;;13864:19;:36;;;13798:218;;;13933:6;:19;;-1:-1:-1;;;;;;13933:19:5;13942:10;13933:19;;;13967:20;:37;;;13798:218;14058:58;14098:17;;14058:39;:58::i;:::-;14045:10;:71;14028:88;;14127:8;;;;;;;;;-1:-1:-1;;;;;14127:8:5;-1:-1:-1;;;;;14127:16:5;;:18;;;;;-1:-1:-1;;;14127:18:5;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;14127:18:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;14127:18:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;14127:18:5;:38;;-1:-1:-1;;;;;14127:27:5;;;;:38;;;;;14155:9;;14127:38;;;;14155:9;14127:27;:38;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;14178:9:5;:16;;-1:-1:-1;;14178:16:5;;;;;14235:15;;14205:72;;;-1:-1:-1;;;;;14205:72:5;;14266:10;14205:72;;;;;;-1:-1:-1;;;;;14235:15:5;;;;14205:60;;:72;;;;;14178:16;;14205:72;;;;;;;;14178:16;14235:15;14205:72;;;5:2:-1;;;;30:1;27;20:12;5:2;14205:72:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;14372:5:5;;;14392:6;14413;;14434:17;;14466:11;;14492:19;;14526:20;;14293:264;;;14323:10;14293:264;;14348:9;14293:264;;;;-1:-1:-1;;;;;14372:5:5;;;14293:264;;;;14392:6;;;;14293:264;;;;;;;;;;;;;;;;;;;;;;;;;;14372:5;14293:264;;;;;;;-1:-1:-1;14293:264:5;;;;;;;-1:-1:-1;14293:264:5;357:1:0;;;;13067:1498:5;;;;;:::o;7215:181::-;7271:4;7306:5;;-1:-1:-1;;;;;7296:15:5;;;7306:5;;7296:15;:35;;;;;7315:16;:14;:16::i;:::-;7295:93;;;-1:-1:-1;7360:6:5;;-1:-1:-1;;;;;7350:16:5;;;7360:6;;7350:16;:37;;;;;7370:17;:15;:17::i;33242:1053::-;34001:24;34069:14;33297:27;33313:10;33297:15;:27::i;:::-;33326:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;33326:28:5;;;;-1:-1:-1;;;;;33326:28:5;;;328:9:0;339:6;320:26;;;;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;;33374:10:5;:8;:10::i;:::-;33386:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;33386:21:5;;;;;320:26:0;;;;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;;33427:21:5;33437:10;33427:9;:21::i;:::-;33459:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;33459:25:5;;;;33427:30;;;33459:25;33427:30;320:26:0;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;-1:-1:-1;33518:15:5;;33535:26;;;;;;;;;;;;;;;;;33518:15;;;;-1:-1:-1;;;;;33518:15:5;33504:10;:29;;;33535:26;33504:29;320:26:0;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;;33607:8:5;;;;;;;;;-1:-1:-1;;;;;33607:8:5;-1:-1:-1;;;;;33607:28:5;;:30;;;;;-1:-1:-1;;;33607:30:5;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;33607:30:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;33607:30:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;33607:30:5;33581:8;;:22;;;;;;33598:4;33581:22;;;;;;-1:-1:-1;;;;;33581:56:5;;;;:8;;;;:16;;:22;;;;;33607:30;;33581:22;;;;;;;;:8;:22;;;5:2:-1;;;;30:1;27;20:12;5:2;33581:22:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;33581:22:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;33581:22:5;33639:29;;;;;;;;;;;;;33581:22;33639:29;;;-1:-1:-1;;;;;33581:56:5;;;;;;;;;33639:29;33581:56;320:26:0;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;-1:-1:-1;33739:15:5;;;;;-1:-1:-1;;;;;33739:15:5;:22;33735:104;;;33778:15;:28;;-1:-1:-1;;33778:28:5;33796:10;33778:28;;;;;33821:7;;33735:104;33972:11;:18;;-1:-1:-1;;33972:18:5;;;;;34028:8;;:30;;;;;;;;-1:-1:-1;;;;;34028:8:5;;;;:28;;:30;;;;;;;;;;;;;;;:8;:30;;;5:2:-1;;;;30:1;27;20:12;5:2;34028:30:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;34028:30:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;34028:30:5;34086:107;;;;;;;;34028:30;;-1:-1:-1;;;;;;34086:76:5;;;;;34177:4;34169:21;;34086:107;;;;;34028:30;;34086:107;;;;;;;34169:21;34086:76;:107;;;5:2:-1;;;;30:1;27;20:12;5:2;34086:107:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;34086:107:5;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;34086:107:5;34204:11;:19;;-1:-1:-1;;34234:13:5;;;;;34265:22;;;-1:-1:-1;;;;;34265:22:5;;;;;;34086:107;;-1:-1:-1;34265:22:5;;;;;;34086:107;34265:22;;;357:1:0;;;;;;;;;33242:1053:5;;;;:::o;4611:60::-;4662:9;4611:60;:::o;5514:31::-;;;;:::o;22989:258::-;23047:10;:8;:10::i;:::-;23059:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;23059:21:5;;;;;320:26:0;;;;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;;23100:21:5;23110:10;23100:9;:21::i;:::-;23123;;;;;;;;;;;;;;;;;;320:26:0;;;;;;;-1:-1:-1;;;;;320:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;320:26:0;-1:-1:-1;23186:5:5;;23162:30;;-1:-1:-1;;;;;23186:5:5;23172:10;:19;23162:9;:30::i;:::-;23208:31;;;23228:10;23208:31;;;;;;;;;;;;;357:1:0;;22989:258:5;;:::o;40405:346::-;40569:11;40607:136;40662:12;40689:13;40717:15;40607:40;:136::i;5585:25::-;;;;;;;;;:::o;35340:212::-;35492:9;;35508:6;;35486:29;;;;;;;;;;;;;;;35413:10;;;;-1:-1:-1;;;;;35492:9:5;;;;35486:21;;:29;;;;;;;;;;35492:9;35486:29;;;5:2:-1;;;;30:1;27;20:12;5:2;35486:29:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;35486:29:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;35486:29:5;;35340:212;-1:-1:-1;;35340:212:5:o;6601:1114:7:-;6805:10;6895:24;7031:22;7168:15;6923:17;6922:98;;1194:24;6922:98;;;1113:25;6922:98;6895:125;-1:-1:-1;400:8:7;7057:34;;;7056:50;7031:75;;400:8;7250:18;400:8;7220:12;:26;7201:15;:46;:67;;;;;;;;7186:107;;;;;;;;7168:125;;7449:17;:51;;;;;7483:17;7470:10;:30;7449:51;7445:78;;;7522:1;7515:8;;;;7445:78;7597:17;7596:111;;7697:10;7677:17;:30;7596:111;;;7651:10;7631:17;:30;7596:111;7588:119;;6601:1114;;;;;;;;;;:::o;4653:1000::-;4887:15;400:8;5229:33;;;;5286:12;;5322;;5358:15;;4887;;;;400:8;5286:12;5426:6;;;5425:21;;5424:28;;;;;;;;5419:1;:34;:47;;;;;;;;5404:86;;;;;;;;5387:103;;5521:8;:42;;5553:10;5549:1;:14;5521:42;;;5536:10;5532:1;:14;5521:42;5501:62;-1:-1:-1;5600:1:7;5583:18;;;5576:26;;;;5631:13;4653:1000;-1:-1:-1;;;;;;;;;;;4653:1000:7:o;5661:337::-;5799:12;5851:54;5861:15;564:2;5851:9;:54::i;:::-;5840:7;:65;;5839:151;;;;;5935:54;5945:15;640:3;5935:9;:54::i;:::-;5924:7;:65;;5829:161;5661:337;-1:-1:-1;;;5661:337:7:o;2153:379::-;2330:16;400:8;2393:104;2465:15;2429:32;:15;400:8;2429:32;:19;:32;:::i;:::-;:52;;;;;;;2393:12;;2429:52;;2393:104;:16;:104;:::i;:::-;2378:146;;;;;;;;;2153:379;-1:-1:-1;;;;2153:379:7:o;1295:122::-;1354:8;1407:2;1381:23;1391:9;1402:1;1381:9;:23::i;:::-;:28;;;;;;;;;1295:122;-1:-1:-1;;1295:122:7:o;1238:128:9:-;1319:7;;;1339;;;;1332:15;;;41821:228:5;41962:14;42020:3;42007:10;:16;42006:35;;42040:1;42006:35;;;-1:-1:-1;42027:10:5;41821:228::o;1510:121:7:-;1568:8;1621:2;1595:23;1605:9;1616:1;1595:9;:23::i;1060:116:9:-;1120:7;1142:8;;;;1135:16;;;;-1:-1:-1;1164:7:9;;;1060:116::o;3880:174:7:-;4043:3;4021:18;;4020:26;;3880:174::o;3329:363::-;3431:12;3505:16;3563:14;3475:9;3465:6;:19;3461:33;;;3493:1;3486:8;;;;3461:33;3545:6;3528:9;3524:28;3505:47;;3607:6;3581:12;3596:3;3581:18;3580:34;;;;;;;;3563:51;;3654:1;3641:10;:14;3640:43;;3673:10;3672:11;;3640:43;;;3659:10;3640:43;3625:59;;3329:363;;;;;;;:::o;26781:913:5:-;26938:27;27077:251;27146:11;;27172:14;27201:17;;27233:12;:57;;27270:20;;27233:57;;;27248:19;;27233:57;27305:12;27077:54;:251::i;:::-;27386:41;;27052:276;;-1:-1:-1;;;;;;27386:17:5;;;:41;;;;;27052:276;;27386:41;;;;27052:276;27386:17;:41;;;;;;;27385:42;27381:306;;;-1:-1:-1;;;;;27444:26:5;;;;;;:12;:26;;;;;;;;;:51;;;27515:65;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;27515:65:5;;;;;;;;;27381:306;;;27618:57;;;-1:-1:-1;;;;;27618:57:5;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;27618:57:5;;;;;;;;;;26781:913;;;;;:::o;42113:343::-;42177:15;42173:276;;;42232:1;42209:20;:24;;;42248:18;:22;42285:12;:20;;-1:-1:-1;;42285:20:5;;;42173:276;;;42362:1;42338:21;:25;;;42378:19;:23;42416:13;:21;;-1:-1:-1;;42416:21:5;;;42173:276;42113:343;:::o;2687:327:7:-;2853:11;2882:18;2903:42;2917:12;2931:13;2903;:42::i;:::-;2882:63;;2965:41;2975:15;2992:13;2965:9;:41::i;203:380:9:-;263:9;489:7;;485:36;;;-1:-1:-1;513:1:9;506:8;;485:36;-1:-1:-1;531:7:9;;;536:2;531;:7;551:6;;;;;;;;:12;544:20;;",
  "source": "pragma solidity ^0.4.23;\r\npragma experimental \"v0.5.0\";\r\n\r\nimport \"openzeppelin-solidity/contracts/math/SafeMath.sol\";\r\nimport \"../DBC.sol\";\r\nimport \"../Feeds.sol\";\r\nimport \"../Registry.sol\";\r\nimport \"./ContractForDifferenceFactory.sol\";\r\nimport \"./ContractForDifferenceRegistry.sol\";\r\nimport \"./ContractForDifferenceLibrary.sol\";\r\n\r\n\r\n/*\r\n * SOLIUM DISABLE: \r\n *\r\n *   error-reason - as if we use reasons in all revert/require's \r\n *      then the contract create tx will exceed the current main net block gas \r\n *      limit. For now we put reasons in a select few places. In the future the\r\n *      contract could be broken down into multiple contracts\r\n *\r\n *   security/no-send - using send instead of transfer as we'd like to log an \r\n *      event on failure. See each send() below.\r\n *\r\n *   security/no-block-members - we need to use 'now' in order to set a time \r\n *       limit.\r\n */\r\n\r\n /* solium-disable error-reason */\r\n /* solium-disable security/no-block-members */\r\n /* solium-disable security/no-send */\r\n\r\n/**\r\n * @title Contract for difference\r\n *\r\n * Contract for difference for a given market between a\r\n * \"buyer\" (long position) and \"seller\" (short position).\r\n */\r\ncontract ContractForDifference is DBC {\r\n    using SafeMath for uint;\r\n\r\n    /*\r\n     * Events\r\n     */\r\n\r\n    event LogCFDCreated(\r\n        address creator,\r\n        bytes32 market,\r\n        uint notionalAmountWei,\r\n        uint deposit\r\n    );\r\n    event LogCFDInitiated(\r\n        address joiner,\r\n        uint amountSent,\r\n        address buyer,\r\n        address seller,\r\n        bytes32 market,\r\n        uint notionalAmountWei,\r\n        uint strikePrice,\r\n        uint buyerDepositBalance,\r\n        uint sellerDepositBalance\r\n    );\r\n    event LogCFDTransferPosition(address oldOwner, address newOwner);\r\n    event LogCFDCanceledNew(address party, uint amount, bytes32 market);\r\n    event LogCFDStrikePriceUpdated(address party, uint newStrikePrice);\r\n\r\n    event LogCFDSale(\r\n        address party,\r\n        uint saleStrikePrice,\r\n        uint timeLimit\r\n    );\r\n    event LogCFDSaleCancelled(address party);\r\n    event LogCFDSaleUpdated(address party, uint newPrice);\r\n    event LogCFDSold(address to, address by, uint newNotional, uint sellerAmount, uint buyerDeposit, bytes32 market);\r\n\r\n    event LogCFDSendCollateralFailure(address receiver, uint amount);\r\n    event LogCFDWithrewUnsent(address withdrawer);\r\n\r\n    event LogCFDPartyBalanceUpdate(address party, uint amount, bool isWithdraw, uint newBalance, bytes32 market);\r\n    event LogCFDTransferFunds(address receiver, uint amount);\r\n\r\n    event LogCFDClosed(address winner, uint buyerCollateral, uint sellerCollateral, bytes32 market);\r\n    event LogCFDForceTerminated(address terminator, uint terminatorAmount, address otherParty, uint otherPartyAmount, bytes32 market);\r\n    event LogCFDUpgraded(address newCFD);\r\n    event LogCFDRemainingBalanceUnexpected(uint remainder);\r\n\r\n    enum Status {\r\n        CREATED,\r\n        INITIATED,\r\n        SALE,\r\n        CLOSED\r\n    }\r\n\r\n    /*\r\n     * Constants\r\n     */\r\n\r\n    string constant REASON_NOTIONAL_TOO_LOW = \"Notional below minimum\";\r\n    string constant REASON_FEES_NOT_ENOUGH = \"Not enough sent to cover fees\";\r\n    string constant REASON_COLLATERAL_RANGE_FAILED = \"collateralInRange false\";\r\n    string constant REASON_MUST_NOT_BE_INITIATED = \"Must not be initiated\";\r\n    string constant REASON_MUST_NOT_BE_CLOSED = \"Must not be closed\";\r\n    string constant REASON_MUST_NOT_BE_PARTY = \"Contract party can't call this\";\r\n    string constant REASON_MUST_BE_INITIATED = \"Must be initiated\";\r\n    string constant REASON_MUST_BE_SELLER = \"msg.sender must be seller\";\r\n    string constant REASON_MUST_NOT_BE_SELLER = \"msg.sender must not be seller\";\r\n    string constant REASON_MUST_BE_ON_SALE = \"Must be on sale\";\r\n    string constant REASON_MUST_BE_POSITIVE_PRICE = \"Price must be > 0\";\r\n    string constant REASON_ONLY_CONTRACT_PARTIES = \"Only contract parties can do this\";\r\n    string constant REASON_MUST_BE_ACTIVE = \"Must be active\";\r\n    string constant REASON_MARKET_PRICE_RANGE_FAILED = \"collateralInRange false\";\r\n    string constant REASON_WITHDRAW_NOT_ENOUGH = \"Can't withdraw more then available\";\r\n    string constant REASON_AMOUNT_NOT_ENOUGH = \"Amount not enough\";\r\n    string constant REASON_UPGRADE_ALREADY_SET = \"msg.sender already called\";\r\n    string constant REASON_UPGRADE_ALREADY_LATEST = \"Already at latest version\";\r\n    string constant REASON_TRANSFER_TO_EXISTING_PARTY = \"Can't transfer to existing party\";\r\n\r\n    uint public constant FORCE_TERMINATE_PENALTY_PERCENT = 5;\r\n    uint public constant MINIMUM_NOTIONAL_AMOUNT_WEI = 10 finney;\r\n\r\n\r\n    /*\r\n     * State variables\r\n     */\r\n\r\n    address public buyer;                           // long\r\n    address public seller;                          // short\r\n    bytes32 public market;\r\n\r\n    uint public notionalAmountWei;\r\n    uint public buyerInitialNotional;\r\n    uint public sellerInitialNotional;\r\n\r\n    // format of strike prices as in Feeds contract - see Feeds.decimals()\r\n    uint public strikePrice;\r\n    uint public buyerInitialStrikePrice;\r\n    uint public sellerInitialStrikePrice;\r\n\r\n    // balances of amounts actually deposited/withdrawn from the contract\r\n    uint public buyerDepositBalance;\r\n    uint public sellerDepositBalance;\r\n\r\n    mapping (address => uint) public withdrawable;\r\n\r\n    uint public buyerSaleStrikePrice;\r\n    uint public buyerSaleTimeLimit;\r\n\r\n    uint public sellerSaleStrikePrice;\r\n    uint public sellerSaleTimeLimit;\r\n\r\n    bool public buyerSelling;\r\n    bool public sellerSelling;\r\n\r\n    bool public initiated = false;\r\n    bool public closed = false;\r\n    bool public terminated;\r\n\r\n    // set to true for a short period of time - when second party has called\r\n    // upgrade and upgrade has called the new factory to do the work\r\n    bool public upgradeable = false;\r\n\r\n    // set to first party that calls upgrade\r\n    // enables identification of who called and that it has been called once\r\n    address public upgradeCalledBy = 0x0;\r\n\r\n    address public cfdRegistryAddr;\r\n    address public feedsAddr;\r\n\r\n    Registry public registry;\r\n\r\n    /*\r\n     * Functions\r\n     */\r\n\r\n    constructor() public {}\r\n\r\n    /**\r\n     * @dev Contract has been initiated (has 2 parties) and not yet terminated.\r\n     * @return true if contract is active\r\n     */\r\n    function isActive() public view returns (bool) {\r\n        return initiated == true && closed == false;\r\n    }\r\n\r\n    /**\r\n     * @dev Is buyer / long party selling.\r\n     * @return true if buyer has side up for sale\r\n     */\r\n    function isBuyerSelling() public view returns (bool) {\r\n        return buyerSelling &&\r\n            (buyerSaleTimeLimit == 0 || now < buyerSaleTimeLimit);\r\n    }\r\n\r\n    /**\r\n     * @dev Is seller / short party selling.\r\n     * @return true if seller has side up for sale\r\n     */\r\n    function isSellerSelling() public view returns (bool) {\r\n        return sellerSelling &&\r\n            (sellerSaleTimeLimit == 0 || now < sellerSaleTimeLimit);\r\n    }\r\n\r\n    /**\r\n     * @dev If the given party is selling one side of the contract.\r\n     * @return true if the given party is selling\r\n     */\r\n    function isSelling(address _party) public view returns (bool) {\r\n        return (_party == buyer && isBuyerSelling()) ||\r\n            (_party == seller && isSellerSelling());\r\n    }\r\n\r\n    /**\r\n     * @dev Check if the given address is one of the 2 parties of the contract.\r\n     * @param _party Address to check\r\n     * @return true if _party is either the buyer or seller.\r\n     */\r\n    function isContractParty(address _party) public view returns (bool) {\r\n        return _party == buyer || _party == seller;\r\n    }\r\n\r\n    /**\r\n     * @dev Create a new CFDinstance specifying the terms of the contract.\r\n     *\r\n     * Fee of 0.3% of the notional is taken.\r\n     *\r\n     * Therefore the intial deposit is msg.value minus these fees.\r\n     *\r\n     * @param _registryAddr Registry contract address\r\n     * @param _cfdRegistryAddr CFD Registry contract address\r\n     * @param _feedsAddr Feeds address\r\n     * @param _partyAddr Address of the party creating the contract\r\n     * @param _marketId Contract is for prices on this market\r\n     * @param _strikePrice Agreed initial price for the contract (compatible\r\n                with Feeds stored price - see Feeds.decimals() adjustment)\r\n     * @param _notionalAmountWei Contract amount\r\n     * @param _isBuyer Flag indicating if the contract creator wants to take the\r\n     *            buyer (true) or the seller side (false).\r\n     */\r\n    function create(\r\n        address _registryAddr,\r\n        address _cfdRegistryAddr,\r\n        address _feedsAddr,\r\n        address _partyAddr, // msg.sender calling the Factory\r\n        bytes32 _marketId,\r\n        uint _strikePrice,\r\n        uint _notionalAmountWei,\r\n        bool _isBuyer\r\n    )\r\n        public\r\n        payable\r\n        pre_cond(_notionalAmountWei >= MINIMUM_NOTIONAL_AMOUNT_WEI, REASON_NOTIONAL_TOO_LOW)\r\n    {\r\n        uint fees = ContractForDifferenceLibrary.creatorFee(_notionalAmountWei);\r\n        if (msg.value <= fees)\r\n            revert(REASON_FEES_NOT_ENOUGH);\r\n\r\n        uint collateralSent = msg.value - fees;\r\n        if (!ContractForDifferenceLibrary.collateralInRange(_notionalAmountWei, collateralSent))\r\n            revert(REASON_COLLATERAL_RANGE_FAILED);\r\n\r\n        if (_isBuyer) {\r\n            buyer = _partyAddr;\r\n            buyerDepositBalance = collateralSent;\r\n        } else {\r\n            seller = _partyAddr;\r\n            sellerDepositBalance = collateralSent;\r\n        }\r\n\r\n        market = _marketId;\r\n        notionalAmountWei = _notionalAmountWei;\r\n        buyerInitialNotional = _notionalAmountWei;\r\n        sellerInitialNotional = _notionalAmountWei;\r\n\r\n        strikePrice = _strikePrice;\r\n        buyerInitialStrikePrice = _strikePrice;\r\n        sellerInitialStrikePrice = _strikePrice;\r\n\r\n        cfdRegistryAddr = _cfdRegistryAddr;\r\n        feedsAddr = _feedsAddr;\r\n        registry = Registry(_registryAddr);\r\n\r\n        emit LogCFDCreated(\r\n            _partyAddr,\r\n            market,\r\n            notionalAmountWei,\r\n            msg.value\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Create a new CFDinstance from a previous CFD instance. This is part\r\n     *      of the upgrade process (see CFD.upgrade()).\r\n     *\r\n     * @param _cfdAddr Address of the existing / old CFD\r\n     */\r\n    function createByUpgrade(\r\n        address _cfdAddr,\r\n        address _registryAddr,\r\n        address _cfdRegistryAddr,\r\n        address _feedsAddr\r\n    )\r\n        public\r\n        payable\r\n    {\r\n        ContractForDifference oldCfd = ContractForDifference(_cfdAddr);\r\n\r\n        market = oldCfd.market();\r\n        notionalAmountWei = oldCfd.notionalAmountWei();\r\n        strikePrice = oldCfd.strikePrice();\r\n        buyer = oldCfd.buyer();\r\n        seller = oldCfd.seller();\r\n\r\n        buyerDepositBalance = oldCfd.buyerDepositBalance();\r\n        buyerInitialNotional = oldCfd.buyerInitialNotional();\r\n        buyerInitialStrikePrice = oldCfd.buyerInitialStrikePrice();\r\n\r\n        sellerDepositBalance = oldCfd.sellerDepositBalance();\r\n        sellerInitialNotional = oldCfd.sellerInitialNotional();\r\n        sellerInitialStrikePrice = oldCfd.sellerInitialStrikePrice();\r\n\r\n        cfdRegistryAddr = _cfdRegistryAddr;\r\n        registry = Registry(_registryAddr);\r\n        feedsAddr = _feedsAddr;\r\n\r\n        initiated = true;\r\n\r\n        ContractForDifferenceRegistry(cfdRegistryAddr).registerParty(seller);\r\n    }\r\n\r\n    /**\r\n     * Returns an array with all the attributes of the contract\r\n     * (Had to split in 3 functions because of the stack limit)\r\n     * Max number of return values == 8\r\n     */\r\n    function getCfdAttributes()\r\n        public\r\n        view\r\n        returns (address, address, bytes32, uint, uint, bool, bool, Status)\r\n    {\r\n        return (\r\n            buyer,\r\n            seller,\r\n            market,\r\n            strikePrice,\r\n            notionalAmountWei,\r\n            buyerSelling,\r\n            sellerSelling,\r\n            status()\r\n        );\r\n    }\r\n    function getCfdAttributes2()\r\n        public\r\n        view\r\n        returns (uint, uint, uint, uint, uint, uint, uint, uint)\r\n    {\r\n        return (\r\n            buyerInitialNotional,\r\n            sellerInitialNotional,\r\n            buyerDepositBalance,\r\n            sellerDepositBalance,\r\n            buyerSaleStrikePrice,\r\n            sellerSaleStrikePrice,\r\n            buyerInitialStrikePrice,\r\n            sellerInitialStrikePrice\r\n        );\r\n    }\r\n    function getCfdAttributes3()\r\n        public\r\n        view\r\n        returns (bool, address)\r\n    {\r\n        return (\r\n            terminated,\r\n            upgradeCalledBy\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Counterparty deposits their funds into the contract thereby joining\r\n     * and initiating the contract.\r\n     *\r\n     * Fee of 0.5% of the notional is taken.\r\n     *\r\n     * Therefore the intial deposit is msg.value minus these fees.\r\n     */\r\n    function deposit()\r\n        external\r\n        payable\r\n        pre_cond(initiated == false, REASON_MUST_NOT_BE_INITIATED)\r\n        pre_cond(closed == false, REASON_MUST_NOT_BE_CLOSED) // cancelNew has not been called\r\n        pre_cond(isContractParty(msg.sender) == false, REASON_MUST_NOT_BE_PARTY) // reject contract creator depositing\r\n    {\r\n        uint joinerFees = ContractForDifferenceLibrary.joinerFee(notionalAmountWei);\r\n        if (msg.value <= joinerFees)\r\n            revert(REASON_FEES_NOT_ENOUGH);\r\n\r\n        uint collateralSent = msg.value - joinerFees;\r\n        if (!ContractForDifferenceLibrary.collateralInRange(notionalAmountWei, collateralSent))\r\n            revert(REASON_COLLATERAL_RANGE_FAILED);\r\n\r\n        if (buyer == 0x0) {\r\n            buyer = msg.sender;\r\n            buyerDepositBalance = collateralSent;\r\n        } else {\r\n            seller = msg.sender;\r\n            sellerDepositBalance = collateralSent;\r\n        }\r\n\r\n        uint feeAmount = joinerFees + ContractForDifferenceLibrary.creatorFee(notionalAmountWei);\r\n        registry.getFees().transfer(feeAmount);\r\n\r\n        initiated = true;\r\n        ContractForDifferenceRegistry(cfdRegistryAddr).registerParty(msg.sender);\r\n        emit LogCFDInitiated(\r\n            msg.sender,\r\n            msg.value,\r\n            buyer,\r\n            seller,\r\n            market,\r\n            notionalAmountWei,\r\n            strikePrice,\r\n            buyerDepositBalance,\r\n            sellerDepositBalance\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Cancels a newly created contract refunding the balance to the party\r\n     *      that created the contract. This can only be called before a contract\r\n     *      is initiated. ie. between the create() and deposit() calls.\r\n     */\r\n    function cancelNew()\r\n        external\r\n        pre_cond(initiated == false, REASON_MUST_NOT_BE_INITIATED)\r\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\r\n    {\r\n        uint amountSent = address(this).balance;\r\n        if (!msg.sender.send(amountSent)) {\r\n            withdrawable[msg.sender] = amountSent;\r\n            emit LogCFDSendCollateralFailure(msg.sender, amountSent);\r\n        } else {\r\n            emit LogCFDTransferFunds(msg.sender, amountSent);\r\n        }\r\n        closed = true;\r\n        emit LogCFDCanceledNew(msg.sender, amountSent, market);\r\n    }\r\n\r\n    /**\r\n     * @dev Party adds more funds to the contract thereby increasing their\r\n     *      deposit balance.\r\n     */\r\n    function topup()\r\n        external\r\n        payable\r\n        pre_cond(msg.value >= 1, REASON_AMOUNT_NOT_ENOUGH)\r\n        pre_cond(initiated == true, REASON_MUST_BE_INITIATED)\r\n        pre_cond(closed == false, REASON_MUST_NOT_BE_CLOSED)\r\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\r\n        pre_cond(isSelling(msg.sender) == false, REASON_MUST_NOT_BE_SELLER)\r\n    {\r\n        bool isBuyer = msg.sender == buyer;\r\n        uint newDepositBalance = (isBuyer ? \r\n            buyerDepositBalance : \r\n            sellerDepositBalance\r\n        ).add(msg.value);\r\n\r\n        // check topup doesn't make collateral exceed the maximum\r\n        if (!ContractForDifferenceLibrary.collateralInRange(notionalAmountWei, newDepositBalance))\r\n            revert(REASON_COLLATERAL_RANGE_FAILED);\r\n\r\n        if (isBuyer) {\r\n            buyerDepositBalance = newDepositBalance;\r\n        } else {\r\n            sellerDepositBalance = newDepositBalance;\r\n        }\r\n\r\n        emit LogCFDPartyBalanceUpdate(msg.sender, msg.value, false, newDepositBalance, market);\r\n    }\r\n\r\n    /**\r\n     * @dev Party withdraws funds from the contract.\r\n     *      They can only withdraw down to an amount that leaves the collateral\r\n     *      to notional difference at 20% or more.\r\n     * @param _withdrawAmount Amount to withdraw from the deposits balance.\r\n     */\r\n    function withdraw(uint _withdrawAmount)\r\n        external\r\n        assertWithdrawPreCond(_withdrawAmount)\r\n    {\r\n        bool isBuyer = msg.sender == buyer;\r\n        uint currentDepositBal = isBuyer ? buyerDepositBalance : sellerDepositBalance;\r\n\r\n        // first simple check that can't withdraw more then deposited\r\n        if (_withdrawAmount > currentDepositBal)\r\n            revert(REASON_WITHDRAW_NOT_ENOUGH);\r\n\r\n        // second a more precise check that the collateral at new balance will remain above the min\r\n        uint newDepositBal = currentDepositBal - _withdrawAmount;\r\n        uint marketPrice = latestPrice();\r\n        if (!marketPriceInRange(\r\n            marketPrice,\r\n            isBuyer ? newDepositBal : buyerDepositBalance,\r\n            isBuyer ? sellerDepositBalance : newDepositBal,\r\n            strikePrice // unchanged on withdraw\r\n        )) {\r\n            revert(REASON_MARKET_PRICE_RANGE_FAILED);\r\n        }\r\n\r\n        uint collateral = ContractForDifferenceLibrary.calculateCollateralAmount(\r\n            strikePrice,\r\n            marketPrice,\r\n            notionalAmountWei,\r\n            newDepositBal,\r\n            isBuyer\r\n        );\r\n\r\n        if (!ContractForDifferenceLibrary.collateralInRange(notionalAmountWei, collateral)) {\r\n            revert(REASON_COLLATERAL_RANGE_FAILED);\r\n        }\r\n\r\n        if (!msg.sender.send(_withdrawAmount)) {\r\n            withdrawable[msg.sender] = _withdrawAmount;\r\n            emit LogCFDSendCollateralFailure(msg.sender, _withdrawAmount);\r\n        } else {\r\n            emit LogCFDTransferFunds(msg.sender, _withdrawAmount);\r\n        }\r\n\r\n        if (isBuyer) {\r\n            buyerDepositBalance = newDepositBal;\r\n        } else {\r\n            sellerDepositBalance = newDepositBal;\r\n        }\r\n\r\n        emit LogCFDPartyBalanceUpdate(msg.sender, _withdrawAmount, true, newDepositBal, market);\r\n    }\r\n\r\n    /* NOTE: Split off into modifier to work around 'stack too deep' error */\r\n    modifier assertWithdrawPreCond(uint _withdrawAmount) \r\n    {\r\n        require(_withdrawAmount >= 1);\r\n        require(initiated == true);\r\n        require(closed == false);\r\n        require(isContractParty(msg.sender));\r\n        require(isSelling(msg.sender) == false);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Parties can transfer contract ownership to another address by\r\n     *      calling this function.\r\n     * @param _newAddress Addreess of the new party to swap in.\r\n     */\r\n    function transferPosition(address _newAddress)\r\n        external\r\n        pre_cond(closed == false, REASON_MUST_NOT_BE_CLOSED)\r\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\r\n        pre_cond(isContractParty(_newAddress) == false, REASON_MUST_NOT_BE_PARTY)\r\n        pre_cond(isSelling(msg.sender) == false, REASON_MUST_NOT_BE_SELLER)\r\n    {\r\n        if (msg.sender == buyer) buyer = _newAddress;\r\n        if (msg.sender == seller) seller = _newAddress;\r\n        if (msg.sender == upgradeCalledBy) upgradeCalledBy = 0x0;\r\n        ContractForDifferenceRegistry(cfdRegistryAddr).registerParty(_newAddress);\r\n        emit LogCFDTransferPosition(msg.sender, _newAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev Position in a contract can be sold to another party. This function\r\n     *      makes the callers side available for sale. A party can buy the side\r\n     *      with the buy function.\r\n     * @param _desiredStrikePrice Sellers desired sell strike price\r\n     * @param _timeLimit Sale available until this time in UNIX epoch seconds\r\n     *                  (< now for no limit)\r\n     */\r\n    function sellPrepare(uint _desiredStrikePrice, uint _timeLimit)\r\n        external\r\n        payable\r\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\r\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\r\n        // reject already marked selling by the caller\r\n        pre_cond(isSelling(msg.sender) == false, REASON_MUST_NOT_BE_SELLER)\r\n        pre_cond(_desiredStrikePrice > 0, REASON_MUST_BE_POSITIVE_PRICE)\r\n    {\r\n        // mark side on sale\r\n        uint timeLimit = timeLimitFutureOrZero(_timeLimit);\r\n        if (msg.sender == buyer) {\r\n            buyerSelling = true;\r\n            buyerSaleStrikePrice = _desiredStrikePrice;\r\n            buyerSaleTimeLimit = timeLimit;\r\n        } else if (msg.sender == seller) {\r\n            sellerSelling = true;\r\n            sellerSaleStrikePrice = _desiredStrikePrice;\r\n            sellerSaleTimeLimit = timeLimit;\r\n        }\r\n\r\n        ContractForDifferenceRegistry(cfdRegistryAddr).registerSale(msg.sender);\r\n        emit LogCFDSale(\r\n            msg.sender,\r\n            _desiredStrikePrice,\r\n            timeLimit\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Seller can update the price on the sale.\r\n     */\r\n    function sellUpdate(\r\n        uint _newPrice\r\n    )\r\n        external\r\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\r\n        pre_cond(isSelling(msg.sender), REASON_MUST_BE_SELLER)\r\n        pre_cond(_newPrice > 0, REASON_MUST_BE_POSITIVE_PRICE)\r\n    {\r\n        if (msg.sender == buyer) {\r\n            buyerSaleStrikePrice = _newPrice;\r\n        } else if (msg.sender == seller) {\r\n            sellerSaleStrikePrice = _newPrice;\r\n        }\r\n        emit LogCFDSaleUpdated(msg.sender, _newPrice);\r\n    }\r\n\r\n    /**\r\n     * @dev Party can update the strike price of an non-initialized contract\r\n     */\r\n    function changeStrikePrice(\r\n        uint _newStrikePrice\r\n    )\r\n        external\r\n        payable\r\n        pre_cond(initiated == false, REASON_MUST_NOT_BE_INITIATED)\r\n        pre_cond(closed == false, REASON_MUST_NOT_BE_CLOSED)\r\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\r\n        pre_cond(_newStrikePrice > 0, REASON_MUST_BE_POSITIVE_PRICE)\r\n    {\r\n        strikePrice = _newStrikePrice;\r\n        buyerInitialStrikePrice = _newStrikePrice;\r\n        sellerInitialStrikePrice = _newStrikePrice;\r\n        emit LogCFDStrikePriceUpdated(msg.sender, _newStrikePrice);\r\n    }\r\n\r\n    /**\r\n     * @dev Cancel the for sale status setup by sellPrepare()\r\n     */\r\n    function sellCancel()\r\n        external\r\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\r\n        pre_cond(isSelling(msg.sender), REASON_MUST_BE_SELLER)\r\n    {\r\n        clearSale(msg.sender == buyer);\r\n        emit LogCFDSaleCancelled(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Buy the side in the contract that is for sale.\r\n     *\r\n     * Fee of 0.5% of the notional is taken.\r\n     *\r\n     * @param _buyBuyerSide Buying the buyer side or the seller side?\r\n     */\r\n    function buy(bool _buyBuyerSide)\r\n        external\r\n        payable\r\n        assertBuyPreCond(_buyBuyerSide)\r\n    {\r\n        uint fees = ContractForDifferenceLibrary.joinerFee(notionalAmountWei);\r\n        if (msg.value <= fees)\r\n            revert(REASON_FEES_NOT_ENOUGH);\r\n\r\n        registry.getFees().transfer(fees);\r\n\r\n        // check sent collateral falls in the allowable range\r\n        uint collateralSent = msg.value.sub(fees);\r\n        if (!ContractForDifferenceLibrary.collateralInRange(notionalAmountWei, collateralSent))\r\n            revert(REASON_COLLATERAL_RANGE_FAILED);\r\n\r\n        uint marketPrice = latestPrice();\r\n        uint newStrikePrice = _buyBuyerSide ?\r\n            buyerSaleStrikePrice :\r\n            sellerSaleStrikePrice;\r\n\r\n        // check new parameters fall in the allowable range\r\n        if (!marketPriceInRange(\r\n            marketPrice,\r\n            _buyBuyerSide ? collateralSent : buyerDepositBalance,\r\n            _buyBuyerSide ? sellerDepositBalance : collateralSent,\r\n            newStrikePrice // buying at this strike price\r\n        )) {\r\n            revert(REASON_MARKET_PRICE_RANGE_FAILED);\r\n        }\r\n\r\n        // transfer to selling party and to fees address\r\n        address sellingParty = _buyBuyerSide ? buyer : seller;\r\n        uint sellingPartyCollateral = buyTransferFunds(\r\n            _buyBuyerSide,\r\n            newStrikePrice,\r\n            sellingParty\r\n        );\r\n\r\n        // set new party and balances\r\n        uint remainingPartyDeposits = address(this).balance.sub(collateralSent);\r\n\r\n        // new notional amount value\r\n        uint newNotional = ContractForDifferenceLibrary.calculateNewNotional(\r\n            notionalAmountWei,\r\n            strikePrice,\r\n            newStrikePrice\r\n        );\r\n\r\n        if (_buyBuyerSide) {\r\n            buyer = msg.sender;\r\n            buyerDepositBalance = collateralSent;\r\n            buyerInitialStrikePrice = newStrikePrice;\r\n            buyerInitialNotional = newNotional;\r\n            sellerDepositBalance = remainingPartyDeposits;\r\n        } else {\r\n            seller = msg.sender;\r\n            sellerDepositBalance = collateralSent;\r\n            sellerInitialStrikePrice = newStrikePrice;\r\n            sellerInitialNotional = newNotional;\r\n            buyerDepositBalance = remainingPartyDeposits;\r\n        }\r\n\r\n        strikePrice = newStrikePrice;\r\n        notionalAmountWei = newNotional;\r\n\r\n        clearSale(_buyBuyerSide);\r\n\r\n        // clean up upgradeCalledBy if the departing party had set that\r\n        if (upgradeCalledBy == sellingParty) {\r\n            upgradeCalledBy = 0x0;\r\n        }\r\n\r\n        ContractForDifferenceRegistry(cfdRegistryAddr).registerParty(msg.sender);\r\n        emit LogCFDSold(msg.sender, sellingParty, newNotional, sellingPartyCollateral, msg.value, market);\r\n    }\r\n\r\n    /* NOTE: Split off into modifier to work around 'stack too deep' error */\r\n    modifier assertBuyPreCond(bool _buyBuyerSide) \r\n    {\r\n        require(isActive());\r\n        require(isSelling(_buyBuyerSide ? buyer : seller));\r\n        require(isContractParty(msg.sender) == false);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Does all transfers of funds related to the buy().\r\n     *\r\n     * Transfer logic split off in seperate function ONLY to workaround\r\n     * 'Stack too deep' limit.\r\n     */\r\n    function buyTransferFunds(\r\n        bool buyBuyerSide,\r\n        uint newStrikePrice,\r\n        address sellingParty\r\n    )\r\n        private\r\n        returns (uint sellingPartyCollateral)\r\n    {\r\n        // determine collateral amount to send to the selling party\r\n        sellingPartyCollateral = ContractForDifferenceLibrary.calculateCollateralAmount(\r\n            strikePrice,\r\n            newStrikePrice,\r\n            notionalAmountWei,\r\n            buyBuyerSide ? buyerDepositBalance : sellerDepositBalance,\r\n            buyBuyerSide\r\n        );\r\n\r\n        // send money to selling party\r\n        if (!sellingParty.send(sellingPartyCollateral)) {\r\n            withdrawable[sellingParty] = sellingPartyCollateral;\r\n            emit LogCFDSendCollateralFailure(sellingParty, sellingPartyCollateral);\r\n        } else {\r\n            emit LogCFDTransferFunds(sellingParty, sellingPartyCollateral);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Daemons will call this routine when the market price has moved\r\n     *      enough that the closeRatio for this contract has been reached.\r\n     *      It can actually be called by anyone who is willing to pay the gas\r\n     *      for the liquidate. But if the market has moved past the liquidate\r\n     *      threshold the call will be rejected.\r\n     *\r\n     * This will disolve the contract and return each parties balance of\r\n     * collateral.\r\n     */\r\n    function liquidate()\r\n        external\r\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\r\n    {\r\n        uint marketPrice = latestPrice();\r\n\r\n        // #11 double check the 5% threshold was crossed, if not then REJECT\r\n        // (can only liquidate if out of range)\r\n        require(\r\n            !marketPriceInRange(\r\n                marketPrice,\r\n                buyerDepositBalance,\r\n                sellerDepositBalance,\r\n                strikePrice\r\n            ), \r\n            \"Liquidate threshold not yet reached\"\r\n        );\r\n\r\n        // fetch one of the cutoffs to determine which is the winner\r\n        uint buyerCutOff = ContractForDifferenceLibrary.cutOffPrice(\r\n            notionalAmountWei,\r\n            buyerDepositBalance,\r\n            strikePrice,\r\n            true\r\n        );\r\n\r\n        // if buyer cutoff still in range then buyer wins, otherwise seller\r\n        bool winnerIsBuyer = marketPrice > buyerCutOff;\r\n        address winner = winnerIsBuyer ? buyer : seller;\r\n\r\n        // winner takes all\r\n        uint remaining = address(this).balance;\r\n        if (!winner.send(remaining)) {\r\n            withdrawable[winner] = remaining;\r\n            emit LogCFDSendCollateralFailure(winner, remaining);\r\n        } else {\r\n            emit LogCFDTransferFunds(winner, remaining);\r\n        }\r\n\r\n        closed = true;\r\n\r\n        emit LogCFDClosed(\r\n            winner,\r\n            winnerIsBuyer ? remaining : 0,\r\n            winnerIsBuyer ? 0 : remaining,\r\n            market\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Force terminate executed by one party who will penalised 5% of their\r\n     * collateral. Then penalty will be sent to the counterparty.\r\n     */\r\n    function forceTerminate()\r\n        external\r\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\r\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\r\n    {\r\n        uint marketPrice = latestPrice();\r\n        bool forcingPartyIsBuyer = msg.sender == buyer;\r\n\r\n        uint buyerCollateral = ContractForDifferenceLibrary.calculateCollateralAmount(\r\n            strikePrice,\r\n            marketPrice,\r\n            notionalAmountWei,\r\n            buyerDepositBalance,\r\n            true\r\n        );\r\n        uint sellerCollateral = ContractForDifferenceLibrary.calculateCollateralAmount(\r\n            strikePrice,\r\n            marketPrice,\r\n            notionalAmountWei,\r\n            sellerDepositBalance,\r\n            false\r\n        );\r\n\r\n        //\r\n        // calculate and check the remainder - it should be equal to zero\r\n        //\r\n        // if not expected log the event and transfer the remainder to fees - it\r\n        //     will be sorted out manually\r\n        //\r\n        uint balanceRemainder = address(this).balance.sub(buyerCollateral).sub(sellerCollateral);\r\n        if (balanceRemainder != 0) {\r\n            emit LogCFDRemainingBalanceUnexpected(balanceRemainder);\r\n        }\r\n        registry.getFees().transfer(balanceRemainder);\r\n\r\n        // penalise the force terminator 5% and give it to the counterparty\r\n        uint penalty = ContractForDifferenceLibrary.percentOf(\r\n            forcingPartyIsBuyer ? buyerCollateral : sellerCollateral,\r\n            FORCE_TERMINATE_PENALTY_PERCENT\r\n        );\r\n        if (forcingPartyIsBuyer) {\r\n            buyerCollateral = buyerCollateral.sub(penalty);\r\n            sellerCollateral = sellerCollateral.add(penalty);\r\n        } else {\r\n            buyerCollateral = buyerCollateral.add(penalty);\r\n            sellerCollateral = sellerCollateral.sub(penalty);\r\n        }\r\n\r\n        // Send collateral amounts back each party.\r\n        //\r\n        // If a send fails then log the failure and make the amount available\r\n        // for withdrawal.\r\n        //\r\n        // NOTE: send here gets only 2100 gas so these calls are not at risk of\r\n        // reentrancy\r\n        if (!buyer.send(buyerCollateral)) {\r\n            withdrawable[buyer] = buyerCollateral;\r\n            emit LogCFDSendCollateralFailure(buyer, buyerCollateral);\r\n        } else {\r\n            emit LogCFDTransferFunds(buyer, buyerCollateral);\r\n        }\r\n\r\n        if (!seller.send(sellerCollateral)) {\r\n            withdrawable[seller] = sellerCollateral;\r\n            emit LogCFDSendCollateralFailure(seller, sellerCollateral);\r\n        } else {\r\n            emit LogCFDTransferFunds(seller, sellerCollateral);\r\n        }\r\n\r\n        terminated = true;\r\n        closed = true;\r\n\r\n        if (forcingPartyIsBuyer)\r\n            emit LogCFDForceTerminated(buyer, buyerCollateral, seller, sellerCollateral, market);\r\n        else\r\n            emit LogCFDForceTerminated(seller, sellerCollateral, buyer, buyerCollateral, market);\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrade contract to a new version. This involves creating a new CFD\r\n     *      at the latest contract set - transferring over all properties and\r\n     *      value from this one to the new one.\r\n     *      An upgrade requires a call to this function from both parties. Then\r\n     *      upgrade will happen when the second party makes the call.\r\n     */\r\n    function upgrade()\r\n        external\r\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\r\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\r\n        pre_cond(isSelling(msg.sender) == false, REASON_MUST_NOT_BE_SELLER)\r\n        pre_cond(msg.sender != upgradeCalledBy, REASON_UPGRADE_ALREADY_SET)\r\n        pre_cond(registry.allCFDs(this) != registry.getCFDFactoryLatest(), REASON_UPGRADE_ALREADY_LATEST)\r\n    {\r\n        // 1st call to initiate upgrade process\r\n        if (upgradeCalledBy == 0x0) {\r\n            upgradeCalledBy = msg.sender;\r\n            return;\r\n        }\r\n\r\n        // if here then then this is the 2nd call, invoked by the opposite, so\r\n        // kick off the upgrade process\r\n        upgradeable = true;\r\n        address cfdFactoryLatest = registry.getCFDFactoryLatest();\r\n        address newCfd = ContractForDifferenceFactory(cfdFactoryLatest).\r\n            createByUpgrade.value(address(this).balance)();\r\n        upgradeable = false;\r\n        closed = true;\r\n\r\n        emit LogCFDUpgraded(newCfd);\r\n    }\r\n\r\n    /**\r\n     * @dev Derive status from the state variables.\r\n     * @return Status reflecting the current state.\r\n     */\r\n    function status()\r\n        public\r\n        view\r\n        returns (Status)\r\n    {\r\n        if (closed == true)\r\n            return Status.CLOSED;\r\n        else if (initiated == false)\r\n            return Status.CREATED;\r\n        else if (isBuyerSelling() || isSellerSelling())\r\n            return Status.SALE;\r\n        else\r\n            return Status.INITIATED;\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw funds that failed to send in a previous a transaction.\r\n     *\r\n     * See event LogCFDSendCollateralFailure.\r\n     */\r\n    function withdrawUnsent()\r\n        external\r\n        pre_cond(withdrawable[msg.sender] > 0, REASON_WITHDRAW_NOT_ENOUGH)\r\n    {\r\n        uint amount = withdrawable[msg.sender];\r\n        withdrawable[msg.sender] = 0;\r\n        msg.sender.transfer(amount);\r\n        emit LogCFDWithrewUnsent(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * Get the latest read for the market of this CFD.\r\n     */\r\n    function latestPrice()\r\n        internal\r\n        view\r\n        returns (uint price)\r\n    {\r\n        uint marketPrice;\r\n        (marketPrice, ) = Feeds(feedsAddr).read(market);\r\n        return marketPrice;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if given parameters and given market price result in a price\r\n     *      inside an allowable range. This range is defined by the ContractForDifferenceLibrary.cutOffPrice\r\n     *      function formulas. The idea is that as parameters change - leverage,\r\n     *      market price etc., we must check the change doesn't result in a\r\n     *      liquidation event due to too little collateral.\r\n     *\r\n     * @param _marketPrice Current market price\r\n     * @return true if in range; false if not\r\n     */\r\n\r\n    function marketPriceInRange(\r\n        uint _marketPrice,\r\n        uint _buyerDepositBalance,\r\n        uint _sellerDepositBalance,\r\n        uint _strikePrice\r\n    )\r\n        public\r\n        view\r\n        returns (bool inRange)\r\n    {\r\n        uint buyerCutOff = ContractForDifferenceLibrary.cutOffPrice(\r\n            notionalAmountWei,\r\n            _buyerDepositBalance,\r\n            _strikePrice,\r\n            true\r\n        );\r\n        uint sellerCutOff = ContractForDifferenceLibrary.cutOffPrice(\r\n            notionalAmountWei,\r\n            _sellerDepositBalance,\r\n            _strikePrice,\r\n            false\r\n        );\r\n        inRange = _marketPrice > buyerCutOff && _marketPrice < sellerCutOff;\r\n    }\r\n\r\n   /**\r\n     * @dev Calculate new notional amount after a side has been sold at a new\r\n     *      strike price.\r\n     *\r\n     * Formula is:\r\n     *  N2 = N1 * S2 / S1\r\n     * Where:\r\n     *  N1 = previous notional\r\n     *  S1 = previous strike price\r\n     *  S2 = sale strike price\r\n     *\r\n     * @param _oldNotional Existing notional.\r\n     * @param _oldStrikePrice Existing strike price.\r\n     * @param _newStrikePrice New / Sale strike price.\r\n     * @return newNotional Result of the calculation.\r\n     */\r\n    function calculateNewNotional(\r\n        uint _oldNotional,\r\n        uint _oldStrikePrice,\r\n        uint _newStrikePrice\r\n    )\r\n        public\r\n        pure\r\n        returns (uint newNotional)\r\n    {\r\n        newNotional = ContractForDifferenceLibrary.calculateNewNotional(\r\n            _oldNotional,\r\n            _oldStrikePrice,\r\n            _newStrikePrice\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate the collateral amount for one party given the current\r\n     *      market price and original strike price, notional amount and the\r\n     *      amount the party has deposited into the contract.\r\n     *\r\n     * @param _marketPrice Current market price\r\n     * @param _strikePrice CFD strike price\r\n     * @param _notionalAmount CFD notional amount\r\n     * @param _depositBalance Balances of deposits into the contract\r\n     * @param _isBuyer Buyer or Seller / Long or short party?\r\n     *\r\n     * @return collateral Amount of collateral for the party\r\n     */\r\n    function calculateCollateralAmount(\r\n        uint _strikePrice,\r\n        uint _marketPrice,\r\n        uint _notionalAmount,\r\n        uint _depositBalance,\r\n        bool _isBuyer\r\n    )\r\n        public\r\n        pure\r\n        returns (uint collateral)\r\n    {\r\n        collateral = ContractForDifferenceLibrary.calculateCollateralAmount(\r\n            _strikePrice,\r\n            _marketPrice,\r\n            _notionalAmount,\r\n            _depositBalance,\r\n            _isBuyer\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate the cut off price for buyer or seller.\r\n     *\r\n     * This is the price that if passed would raise a liquidation event.\r\n     *\r\n     * Base Formulas are:\r\n     *     Buyer:  1.05 * S - depositBalanceLong  * S / N\r\n     *     Seller: 0.95 * S + depositBalanceShort * S / N\r\n     *\r\n     * However for Solidity we need to adjust parts by FACTOR_UINT to ensure\r\n     * no fractions.\r\n     *\r\n     * @param _notionalAmountWei Contract notional amount\r\n     * @param _depositBalance Balance of deposits for one party\r\n     *\r\n     * @return cut off price\r\n     */\r\n    function cutOffPrice(\r\n        uint _notionalAmountWei,\r\n        uint _depositBalance,\r\n        uint _strikePrice,\r\n        bool _calcForBuyerSide\r\n    )\r\n        public\r\n        pure\r\n        returns (uint price)\r\n    {\r\n        price = ContractForDifferenceLibrary.cutOffPrice(\r\n            _notionalAmountWei,\r\n            _depositBalance,\r\n            _strikePrice,\r\n            _calcForBuyerSide\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Creator fee - 0.3% of notional.\r\n     */\r\n    function creatorFee(uint _notional) public pure returns (uint fee) {\r\n        fee = ContractForDifferenceLibrary.creatorFee(_notional);\r\n    }\r\n\r\n    /**\r\n     * Joiner (deposit or buy) percentage fee - 0.5% of notional.\r\n     */\r\n    function joinerFee(uint _notional) public pure returns (uint fee) {\r\n        fee = ContractForDifferenceLibrary.joinerFee(_notional);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate the change in contract value based on the price change.\r\n     * @param _currentPrice Current market price\r\n     */\r\n    function changeInWei(\r\n        uint _strikePrice,\r\n        uint _currentPrice,\r\n        uint _notionalAmount\r\n    )\r\n        public\r\n        pure\r\n        returns (uint change)\r\n    {\r\n        change = ContractForDifferenceLibrary.changeInWei(\r\n            _strikePrice,\r\n            _currentPrice,\r\n            _notionalAmount\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Return a percentage change comparing a value with a new value.\r\n     * @param _value The existing value to compare against\r\n     * @param _newValue The new value to compare the change against\r\n     * @return Percentage change (eg. _value = 100, _newValue = 90 then return 10)\r\n     */\r\n    function percentChange(uint _value, uint _newValue)\r\n        public\r\n        pure\r\n        returns (uint percent)\r\n    {\r\n        percent = ContractForDifferenceLibrary.percentChange(_value, _newValue);\r\n    }\r\n\r\n    /**\r\n     * @dev Return a percentage of a given amount.\r\n     * @param _amount Amount to calculate the percentage of\r\n     * @param _percent Percent amount (1 - 100)\r\n     */\r\n    function percentOf(uint _amount, uint _percent)\r\n        public\r\n        pure\r\n        returns (uint adjusted)\r\n    {\r\n        adjusted = ContractForDifferenceLibrary.percentOf(_amount, _percent);\r\n    }\r\n\r\n    /**\r\n     * Utility that given a time limit will preverve it if in the future OR\r\n     * set it to 0 if it's in the present or past.\r\n     */\r\n    function timeLimitFutureOrZero(\r\n        uint _timeLimit\r\n    )\r\n        private\r\n        view // not pure because of 'now'\r\n        returns(uint timeLimit)\r\n    {\r\n        timeLimit = (_timeLimit > now) ? _timeLimit : 0;\r\n    }\r\n\r\n    /**\r\n     * Clear all sale related state.\r\n     */\r\n    function clearSale(bool _clearBuyerSide) private {\r\n        if (_clearBuyerSide) {\r\n            buyerSaleStrikePrice = 0;\r\n            buyerSaleTimeLimit = 0;\r\n            buyerSelling = false;\r\n        } else {\r\n            sellerSaleStrikePrice = 0;\r\n            sellerSaleTimeLimit = 0;\r\n            sellerSelling = false;\r\n        }\r\n    }\r\n}\r\n",
  "sourcePath": "D:\\Users\\Julien\\Desktop\\Work\\0xFutures\\protocol\\contracts\\cfd\\ContractForDifference.sol",
  "compiler": {
    "name": "solc",
    "version": "0.4.24+commit.e67f0147.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "2.0.1",
  "updatedAt": "2018-12-11T13:18:02.973Z"
}