{
  "contractName": "ContractForDifference",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "seller",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "feedsAddr",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "terminated",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "FORCE_TERMINATE_PENALTY_PERCENT",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerSaleStrikePrice",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerInitialNotional",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerDepositBalance",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "upgradeCalledBy",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "notionalAmountWei",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "upgradeable",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "closed",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerSaleTimeLimit",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerInitialStrikePrice",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyer",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerInitialNotional",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerSaleStrikePrice",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "market",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "cfdRegistryAddr",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerDepositBalance",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "initiated",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerSelling",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "strikePrice",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "buyerInitialStrikePrice",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "withdrawable",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "MINIMUM_NOTIONAL_AMOUNT_WEI",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerSaleTimeLimit",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "sellerSelling",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "notionalAmountWei",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "deposit",
          "type": "uint256"
        }
      ],
      "name": "LogCFDCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "joiner",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amountSent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "notionalAmountWei",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "strikePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "buyerDepositBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "sellerDepositBalance",
          "type": "uint256"
        }
      ],
      "name": "LogCFDInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "LogCFDTransferPosition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        }
      ],
      "name": "LogCFDCanceledNew",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "newStrikePrice",
          "type": "uint256"
        }
      ],
      "name": "LogCFDStrikePriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "saleStrikePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "timeLimit",
          "type": "uint256"
        }
      ],
      "name": "LogCFDSale",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        }
      ],
      "name": "LogCFDSaleCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "LogCFDSaleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "newNotional",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "sellerAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "buyerDeposit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        }
      ],
      "name": "LogCFDSold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LogCFDSendCollateralFailure",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "withdrawer",
          "type": "address"
        }
      ],
      "name": "LogCFDWithrewUnsent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "isWithdraw",
          "type": "bool"
        },
        {
          "indexed": false,
          "name": "newBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        }
      ],
      "name": "LogCFDPartyBalanceUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LogCFDTransferFunds",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "buyerCollateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "sellerCollateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        }
      ],
      "name": "LogCFDClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "terminator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "terminatorAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "otherParty",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "otherPartyAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "market",
          "type": "bytes32"
        }
      ],
      "name": "LogCFDForceTerminated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "newCFD",
          "type": "address"
        }
      ],
      "name": "LogCFDUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "remainder",
          "type": "uint256"
        }
      ],
      "name": "LogCFDRemainingBalanceUnexpected",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isActive",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isBuyerSelling",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isSellerSelling",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_party",
          "type": "address"
        }
      ],
      "name": "isSelling",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_party",
          "type": "address"
        }
      ],
      "name": "isContractParty",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_registryAddr",
          "type": "address"
        },
        {
          "name": "_cfdRegistryAddr",
          "type": "address"
        },
        {
          "name": "_feedsAddr",
          "type": "address"
        },
        {
          "name": "_partyAddr",
          "type": "address"
        },
        {
          "name": "_marketId",
          "type": "bytes32"
        },
        {
          "name": "_strikePrice",
          "type": "uint256"
        },
        {
          "name": "_notionalAmountWei",
          "type": "uint256"
        },
        {
          "name": "_isBuyer",
          "type": "bool"
        }
      ],
      "name": "create",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_cfdAddr",
          "type": "address"
        },
        {
          "name": "_registryAddr",
          "type": "address"
        },
        {
          "name": "_cfdRegistryAddr",
          "type": "address"
        },
        {
          "name": "_feedsAddr",
          "type": "address"
        }
      ],
      "name": "createByUpgrade",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCfdAttributes",
      "outputs": [
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "bytes32"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "bool"
        },
        {
          "name": "",
          "type": "bool"
        },
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCfdAttributes2",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCfdAttributes3",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        },
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "cancelNew",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "topup",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_newAddress",
          "type": "address"
        }
      ],
      "name": "transferPosition",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_desiredStrikePrice",
          "type": "uint256"
        },
        {
          "name": "_timeLimit",
          "type": "uint256"
        }
      ],
      "name": "sellPrepare",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_newPrice",
          "type": "uint256"
        }
      ],
      "name": "sellUpdate",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_newStrikePrice",
          "type": "uint256"
        }
      ],
      "name": "changeStrikePrice",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "sellCancel",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_buyBuyerSide",
          "type": "bool"
        }
      ],
      "name": "buy",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "liquidate",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "forceTerminate",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "upgrade",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "status",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "withdrawUnsent",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_marketPrice",
          "type": "uint256"
        },
        {
          "name": "_buyerDepositBalance",
          "type": "uint256"
        },
        {
          "name": "_sellerDepositBalance",
          "type": "uint256"
        },
        {
          "name": "_strikePrice",
          "type": "uint256"
        }
      ],
      "name": "marketPriceInRange",
      "outputs": [
        {
          "name": "inRange",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_oldNotional",
          "type": "uint256"
        },
        {
          "name": "_oldStrikePrice",
          "type": "uint256"
        },
        {
          "name": "_newStrikePrice",
          "type": "uint256"
        }
      ],
      "name": "calculateNewNotional",
      "outputs": [
        {
          "name": "newNotional",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_strikePrice",
          "type": "uint256"
        },
        {
          "name": "_marketPrice",
          "type": "uint256"
        },
        {
          "name": "_notionalAmount",
          "type": "uint256"
        },
        {
          "name": "_depositBalance",
          "type": "uint256"
        },
        {
          "name": "_isBuyer",
          "type": "bool"
        }
      ],
      "name": "calculateCollateralAmount",
      "outputs": [
        {
          "name": "collateral",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_notionalAmountWei",
          "type": "uint256"
        },
        {
          "name": "_depositBalance",
          "type": "uint256"
        },
        {
          "name": "_strikePrice",
          "type": "uint256"
        },
        {
          "name": "_calcForBuyerSide",
          "type": "bool"
        }
      ],
      "name": "cutOffPrice",
      "outputs": [
        {
          "name": "price",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_notional",
          "type": "uint256"
        }
      ],
      "name": "creatorFee",
      "outputs": [
        {
          "name": "fee",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_notional",
          "type": "uint256"
        }
      ],
      "name": "joinerFee",
      "outputs": [
        {
          "name": "fee",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_strikePrice",
          "type": "uint256"
        },
        {
          "name": "_currentPrice",
          "type": "uint256"
        },
        {
          "name": "_notionalAmount",
          "type": "uint256"
        }
      ],
      "name": "changeInWei",
      "outputs": [
        {
          "name": "change",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_value",
          "type": "uint256"
        },
        {
          "name": "_newValue",
          "type": "uint256"
        }
      ],
      "name": "percentChange",
      "outputs": [
        {
          "name": "percent",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_amount",
          "type": "uint256"
        },
        {
          "name": "_percent",
          "type": "uint256"
        }
      ],
      "name": "percentOf",
      "outputs": [
        {
          "name": "adjusted",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "bytecode": "0x6080604052601080547fffffffffffff000000000000000000000000000000000000000000ff0000ffff16905534801561003857600080fd5b50614ad5806100486000396000f3006080604052600436106102c65763ffffffff60e060020a60003504166308551a5381146102cb5780630a10ff5f146102fc578063194307bf146103115780631a9fddf21461033a5780631bcccdf7146103545780631bdfca011461037b578063200d2ed21461039057806322e20d2a146103c957806322f3e2d4146103de5780632802759b146103f357806328a07025146104195780632a6d096f1461042e5780632d4dce7d146104845780632e1a7d4d146104995780632f301a78146104b1578063333c9dda146104cf578063393d8533146104e45780633c79ad641461050757806341c20c8e1461051c57806346f33a6d14610531578063497b13d3146105465780635407baea1461055b578063597e1fb51461057c5780635df0d4cd146105915780635dfa360a146105c55780635e24e35d146105eb5780636182fab31461060c57806369774c2d146106215780636a8100b2146106295780637028875e1461063e5780637150d8ae146106495780637185b30c1461065e578063785619391461067357806378c3829b146106885780637af5cde9146106a05780637b103999146106c15780637d21f950146106d657806380f556051461070e578063818197ea146107235780638505571e1461073157806393a965121461074957806398074eb41461075e57806398531f28146107735780639c03d24a146107885780639dec1430146107a35780639f118536146107b8578063a22adf3b146107cd578063a6f40821146107e2578063ae3cde59146107fd578063c2ef94f614610812578063c52987cf1461088e578063c93c88d7146108a3578063c9e25251146108b8578063ce513b6f146108c5578063d0e30db0146108e6578063d525be32146108ee578063d55ec6971461090f578063de46da8014610924578063df0fdcdc14610939578063f797efda1461094e578063f7d740ac14610963578063fe2e569914610981575b600080fd5b3480156102d757600080fd5b506102e0610996565b60408051600160a060020a039092168252519081900360200190f35b34801561030857600080fd5b506102e06109a5565b34801561031d57600080fd5b506103266109b4565b604080519115158252519081900360200190f35b34801561034657600080fd5b506103526004356109c5565b005b34801561036057600080fd5b50610369610c15565b60408051918252519081900360200190f35b34801561038757600080fd5b50610369610c1a565b34801561039c57600080fd5b506103a5610c20565b604051808260038111156103b557fe5b60ff16815260200191505060405180910390f35b3480156103d557600080fd5b50610369610c86565b3480156103ea57600080fd5b50610326610c8c565b610352600160a060020a0360043581169060243581169060443581169060643516610cbb565b34801561042557600080fd5b50610352611357565b34801561043a57600080fd5b506104436115ea565b604080519889526020890197909752878701959095526060870193909352608086019190915260a085015260c084015260e083015251908190036101000190f35b34801561049057600080fd5b5061036961160c565b3480156104a557600080fd5b50610352600435611612565b3480156104bd57600080fd5b50610369600435602435604435611982565b3480156104db57600080fd5b506102e0611997565b3480156104f057600080fd5b5061036960043560243560443560643515156119b0565b34801561051357600080fd5b506103696119c7565b34801561052857600080fd5b506103266119cd565b34801561053d57600080fd5b506103266119df565b34801561055257600080fd5b50610352611a07565b34801561056757600080fd5b50610326600160a060020a0360043516611c1a565b34801561058857600080fd5b50610326611c4a565b610352600160a060020a036004358116906024358116906044358116906064351660843560a43560c43560e4351515611c5a565b3480156105d157600080fd5b506103696004356024356044356064356084351515611eff565b3480156105f757600080fd5b50610352600160a060020a0360043516611f18565b34801561061857600080fd5b50610369612294565b61035261229a565b34801561063557600080fd5b5061036961267c565b610352600435612682565b34801561065557600080fd5b506102e061290b565b34801561066a57600080fd5b5061036961291a565b34801561067f57600080fd5b50610369612920565b34801561069457600080fd5b50610369600435612926565b3480156106ac57600080fd5b50610326600435602435604435606435612931565b3480156106cd57600080fd5b506102e0612971565b3480156106e257600080fd5b506106eb612980565b604080519215158352600160a060020a0390911660208301528051918290030190f35b34801561071a57600080fd5b506103696129a6565b6103526004356024356129ac565b34801561073d57600080fd5b50610369600435612cfa565b34801561075557600080fd5b50610352612d05565b34801561076a57600080fd5b506102e061324e565b34801561077f57600080fd5b5061032661325d565b34801561079457600080fd5b50610369600435602435613280565b3480156107af57600080fd5b50610369613293565b3480156107c457600080fd5b50610326613299565b3480156107d957600080fd5b506103526132a8565b3480156107ee57600080fd5b506103696004356024356133e7565b34801561080957600080fd5b506103266133f3565b34801561081e57600080fd5b506108276133fc565b60408051600160a060020a03808b16825289166020820152908101879052606081018690526080810185905283151560a082015282151560c082015260e0810182600381111561087357fe5b60ff1681526020019850505050505050505060405180910390f35b34801561089a57600080fd5b5061036961345a565b3480156108af57600080fd5b50610369613460565b6103526004351515613466565b3480156108d157600080fd5b50610369600160a060020a0360043516613932565b610352613944565b3480156108fa57600080fd5b50610326600160a060020a0360043516613e1d565b34801561091b57600080fd5b50610352613e64565b34801561093057600080fd5b5061036961441f565b34801561094557600080fd5b5061036961442a565b34801561095a57600080fd5b50610352614430565b34801561096f57600080fd5b5061036960043560243560443561458f565b34801561098d57600080fd5b5061032661459c565b600154600160a060020a031681565b601254600160a060020a031681565b601054640100000000900460ff1681565b6109cd610c8c565b60408051808201909152600e8152600080516020614a2a833981519152602082015280821515610a7e5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610a43578181015183820152602001610a2b565b50505050905090810190601f168015610a705780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50610a8833613e1d565b60408051808201909152601981527f6d73672e73656e646572206d7573742062652073656c6c657200000000000000602082015280821515610b0f5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a43578181015183820152602001610a2b565b5060408051808201909152601181527f5072696365206d757374206265203e2030000000000000000000000000000000602082015260008611908082610b9a5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a43578181015183820152602001610a2b565b50600054600160a060020a0316331415610bb857600c879055610bd1565b600154600160a060020a0316331415610bd157600e8790555b604080513381526020810189905281517fbbee2154904c4910310beb779cb9f970f5faa539a34158662d3963477f19ce31929181900390910190a150505050505050565b600581565b600c5481565b6010546000906301000000900460ff16151560011415610c4257506003610c83565b60105462010000900460ff161515610c5c57506000610c83565b610c6461325d565b80610c725750610c726119df565b15610c7f57506002610c83565b5060015b90565b60055481565b60105460009062010000900460ff1615156001148015610cb657506010546301000000900460ff16155b905090565b600084905080600160a060020a03166380f556056040518163ffffffff1660e060020a02815260040160206040518083038186803b158015610cfc57600080fd5b505afa158015610d10573d6000803e3d6000fd5b505050506040513d6020811015610d2657600080fd5b5051600255604080517f3c79ad640000000000000000000000000000000000000000000000000000000081529051600160a060020a03831691633c79ad64916004808301926020929190829003018186803b158015610d8457600080fd5b505afa158015610d98573d6000803e3d6000fd5b505050506040513d6020811015610dae57600080fd5b5051600355604080517fc52987cf0000000000000000000000000000000000000000000000000000000081529051600160a060020a0383169163c52987cf916004808301926020929190829003018186803b158015610e0c57600080fd5b505afa158015610e20573d6000803e3d6000fd5b505050506040513d6020811015610e3657600080fd5b5051600655604080517f7150d8ae0000000000000000000000000000000000000000000000000000000081529051600160a060020a03831691637150d8ae916004808301926020929190829003018186803b158015610e9457600080fd5b505afa158015610ea8573d6000803e3d6000fd5b505050506040513d6020811015610ebe57600080fd5b505160008054600160a060020a031916600160a060020a03928316179055604080517f08551a530000000000000000000000000000000000000000000000000000000081529051918316916308551a5391600480820192602092909190829003018186803b158015610f2f57600080fd5b505afa158015610f43573d6000803e3d6000fd5b505050506040513d6020811015610f5957600080fd5b505160018054600160a060020a031916600160a060020a03928316179055604080517f9dec1430000000000000000000000000000000000000000000000000000000008152905191831691639dec143091600480820192602092909190829003018186803b158015610fca57600080fd5b505afa158015610fde573d6000803e3d6000fd5b505050506040513d6020811015610ff457600080fd5b5051600955604080517f7185b30c0000000000000000000000000000000000000000000000000000000081529051600160a060020a03831691637185b30c916004808301926020929190829003018186803b15801561105257600080fd5b505afa158015611066573d6000803e3d6000fd5b505050506040513d602081101561107c57600080fd5b50516004908155604080517fc93c88d70000000000000000000000000000000000000000000000000000000081529051600160a060020a0384169263c93c88d792808201926020929091829003018186803b1580156110da57600080fd5b505afa1580156110ee573d6000803e3d6000fd5b505050506040513d602081101561110457600080fd5b5051600755604080517f2d4dce7d0000000000000000000000000000000000000000000000000000000081529051600160a060020a03831691632d4dce7d916004808301926020929190829003018186803b15801561116257600080fd5b505afa158015611176573d6000803e3d6000fd5b505050506040513d602081101561118c57600080fd5b5051600a55604080517f22e20d2a0000000000000000000000000000000000000000000000000000000081529051600160a060020a038316916322e20d2a916004808301926020929190829003018186803b1580156111ea57600080fd5b505afa1580156111fe573d6000803e3d6000fd5b505050506040513d602081101561121457600080fd5b5051600555604080517f6a8100b20000000000000000000000000000000000000000000000000000000081529051600160a060020a03831691636a8100b2916004808301926020929190829003018186803b15801561127257600080fd5b505afa158015611286573d6000803e3d6000fd5b505050506040513d602081101561129c57600080fd5b505160085560118054600160a060020a03808616600160a060020a0319928316179283905560138054888316908416179055601280548683169316929092179091556010805462ff00001916620100001790556001546040805160e160020a6340f46fd102815291831660048301525192909116916381e8dfa29160248082019260009290919082900301818387803b15801561133857600080fd5b505af115801561134c573d6000803e3d6000fd5b505050505050505050565b6000806000806000611367610c8c565b60408051808201909152600e8152600080516020614a2a8339815191526020820152808215156113dc5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a43578181015183820152602001610a2b565b506113e56145aa565b96506113f987600954600a54600654612931565b15611474576040805160e560020a62461bcd02815260206004820152602360248201527f4c6971756964617465207468726573686f6c64206e6f7420796574207265616360448201527f6865640000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6114876003546009546006546001614644565b95508587119450846114a457600154600160a060020a03166114b1565b600054600160a060020a03165b60405190945030319350600160a060020a0385169084156108fc029085906000818181858888f19350505050151561152b57600160a060020a0384166000818152600b6020908152604091829020869055815192835282018590528051600080516020614a6a8339815191529281900390910190a161155e565b60408051600160a060020a0386168152602081018590528151600080516020614a0a833981519152929181900390910190a15b6010805463ff000000191663010000001790557faa0254c6ef7b0f13349b08e091c677fb9d83e5829f3e697eee7127c0702292b3848661159f5760006115a1565b845b876115ac57856115af565b60005b60025460408051600160a060020a0390951685526020850193909352838301919091526060830152519081900360800190a150505050505050565b600454600554600954600a54600c54600e546007546008549091929394959697565b600a5481565b60008080808085600181101561162757600080fd5b60105462010000900460ff16151560011461164157600080fd5b6010546301000000900460ff161561165857600080fd5b61166133611c1a565b151561166c57600080fd5b61167533613e1d565b1561167f57600080fd5b600054600160a060020a0316331495508561169c57600a546116a0565b6009545b94508487111561174d5760408051606081018252602281527f43616e2774207769746864726177206d6f7265207468656e20617661696c616260208083019182527f6c6500000000000000000000000000000000000000000000000000000000000083850152925160e560020a62461bcd02815260048101938452825160248201528251929392839260449092019190808383600083811015610a43578181015183820152602001610a2b565b868503935061175a6145aa565b9250611786838761176d5760095461176f565b855b8861177a578661177e565b600a545b600654612931565b15156117f757604080518082018252601781526000805160206149ca8339815191526020808301918252925160e560020a62461bcd02815260048101938452825160248201528251929392839260449092019190808383600083811015610a43578181015183820152602001610a2b565b61180860065484600354878a6146e3565b915061181660035483614753565b151561188757604080518082018252601781526000805160206149ca8339815191526020808301918252925160e560020a62461bcd02815260048101938452825160248201528251929392839260449092019190808383600083811015610a43578181015183820152602001610a2b565b604051339088156108fc029089906000818181858888f1935050505015156118e857336000818152600b60209081526040918290208a9055815192835282018990528051600080516020614a6a8339815191529281900390910190a1611912565b60408051338152602081018990528151600080516020614a0a833981519152929181900390910190a15b8515611922576009849055611928565b600a8490555b60025460408051338152602081018a9052600181830152606081018790526080810192909252517fea455ea564b4652eabbfbcf652bb6439ed6f6edea8eb0525f2becb5aec40c8649181900360a00190a150505050505050565b600061198f848484614780565b949350505050565b60105466010000000000009004600160a060020a031681565b60006119be85858585614644565b95945050505050565b60035481565b60105465010000000000900460ff1681565b601054600090610100900460ff168015610cb65750600f541580610cb6575050600f54421090565b60105460408051808201909152601581527f4d757374206e6f7420626520696e697469617465640000000000000000000000602082015260009162010000900460ff1615908082611a9d5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a43578181015183820152602001610a2b565b50611aa733611c1a565b60606040519081016040528060218152602001600080516020614a8a833981519152815260200160f860020a6073028152508181901515611b2d5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a43578181015183820152602001610a2b565b5060405130319550339086156108fc029087906000818181858888f193505050501515611b9357336000818152600b6020908152604091829020889055815192835282018790528051600080516020614a6a8339815191529281900390910190a1611bbd565b60408051338152602081018790528151600080516020614a0a833981519152929181900390910190a15b6010805463ff00000019166301000000179055600254604080513381526020810188905280820192909252517f6407ec2a4ae9d6ab72d4d8edded079bc20dae08edf3fcedd15fa606583efd1449181900360600190a15050505050565b60008054600160a060020a0383811691161480611c445750600154600160a060020a038381169116145b92915050565b6010546301000000900460ff1681565b60408051808201909152601681527f4e6f74696f6e616c2062656c6f77206d696e696d756d0000000000000000000060208201526000908190662386f26fc10000851015908082611cf05760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a43578181015183820152602001610a2b565b50611cfa866147ca565b9350348410611d8057604080518082018252601d81527f4e6f7420656e6f7567682073656e7420746f20636f76657220666565730000006020808301918252925160e560020a62461bcd02815260048101938452825160248201528251929392839260449092019190808383600083811015610a43578181015183820152602001610a2b565b8334039250611d8f8684614753565b1515611e0057604080518082018252601781526000805160206149ca8339815191526020808301918252925160e560020a62461bcd02815260048101938452825160248201528251929392839260449092019190808383600083811015610a43578181015183820152602001610a2b565b8415611e2b5760008054600160a060020a031916600160a060020a038b161790556009839055611e4c565b60018054600160a060020a031916600160a060020a038b16179055600a8390555b600288905560038690556004869055600586905560068790556007879055600887905560118054600160a060020a03808e16600160a060020a031992831617909255601280548d8416908316179055601380548f8416921691909117905560408051918b168252602082018a9052818101889052346060830152517f69d73ba3035242abcb4cbe9e73c2317a193d589f1ab392766a856075e4a5ea9d9181900360800190a1505050505050505050505050565b6000611f0e86868686866146e3565b9695505050505050565b60105460408051808201909152601281526000805160206149ea8339815191526020820152630100000090910460ff1615908082611f9b5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a43578181015183820152602001610a2b565b50611fa533611c1a565b60606040519081016040528060218152602001600080516020614a8a833981519152815260200160f860020a607302815250818190151561202b5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a43578181015183820152602001610a2b565b5061203585611c1a565b60408051808201909152601e81527f436f6e74726163742070617274792063616e27742063616c6c20746869730000602082015290159080826120bd5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a43578181015183820152602001610a2b565b506120c733613e1d565b60408051808201909152601d8152600080516020614a4a8339815191526020820152901590808261213d5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a43578181015183820152602001610a2b565b50600054600160a060020a031633141561216d5760008054600160a060020a031916600160a060020a038b161790555b600154600160a060020a031633141561219c5760018054600160a060020a031916600160a060020a038b161790555b60105466010000000000009004600160a060020a03163314156121dd576010805479ffffffffffffffffffffffffffffffffffffffff000000000000191690555b6011546040805160e160020a6340f46fd1028152600160a060020a038c81166004830152915191909216916381e8dfa291602480830192600092919082900301818387803b15801561222e57600080fd5b505af1158015612242573d6000803e3d6000fd5b505060408051338152600160a060020a038d16602082015281517fce6084c9f950738add8e5747a76463fe6d6652d782d26beabe2b69029391a5df9450908190039091019150a1505050505050505050565b600d5481565b60408051808201909152601181527f416d6f756e74206e6f7420656e6f75676800000000000000000000000000000060208201526000908190600134101590808261232a5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a43578181015183820152602001610a2b565b5060105460408051808201909152601181527f4d75737420626520696e6974696174656400000000000000000000000000000060208201526201000090910460ff1615156001149080826123c35760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a43578181015183820152602001610a2b565b5060105460408051808201909152601281526000805160206149ea8339815191526020820152630100000090910460ff16159080826124475760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a43578181015183820152602001610a2b565b5061245133611c1a565b60606040519081016040528060218152602001600080516020614a8a833981519152815260200160f860020a60730281525081819015156124d75760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a43578181015183820152602001610a2b565b506124e133613e1d565b60408051808201909152601d8152600080516020614a4a833981519152602082015290159080826125575760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a43578181015183820152602001610a2b565b50600054600160a060020a031633149b50612589348d61257957600a5461257d565b6009545b9063ffffffff6147e916565b9a506125976003548c614753565b151561260857604080518082018252601781526000805160206149ca8339815191526020808301918252925160e560020a62461bcd02815260048101938452825160248201528251929392839260449092019190808383600083811015610a43578181015183820152602001610a2b565b8b156126185760098b905561261e565b600a8b90555b60025460408051338152346020820152600081830152606081018e90526080810192909252517fea455ea564b4652eabbfbcf652bb6439ed6f6edea8eb0525f2becb5aec40c8649181900360a00190a1505050505050505050505050565b60085481565b60105460408051808201909152601581527f4d757374206e6f7420626520696e69746961746564000000000000000000000060208201526201000090910460ff16159080826127165760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a43578181015183820152602001610a2b565b5060105460408051808201909152601281526000805160206149ea8339815191526020820152630100000090910460ff161590808261279a5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a43578181015183820152602001610a2b565b506127a433611c1a565b60606040519081016040528060218152602001600080516020614a8a833981519152815260200160f860020a607302815250818190151561282a5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a43578181015183820152602001610a2b565b5060408051808201909152601181527f5072696365206d757374206265203e20300000000000000000000000000000006020820152600088119080826128b55760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a43578181015183820152602001610a2b565b5060068990556007899055600889905560408051338152602081018b905281517fe77dd1d532a40e832a7a0938f6bcc6e7724487734f75f6b1f84dfeddcc32c47c929181900390910190a1505050505050505050565b600054600160a060020a031681565b60045481565b600e5481565b6000611c44826147ca565b600080600061294560035487866001614644565b915061295660035486866000614644565b9050818711801561296657508087105b979650505050505050565b601354600160a060020a031681565b601054640100000000810460ff16916601000000000000909104600160a060020a031690565b60025481565b60006129b733611c1a565b60606040519081016040528060218152602001600080516020614a8a833981519152815260200160f860020a6073028152508181901515612a3d5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a43578181015183820152602001610a2b565b50612a46610c8c565b60408051808201909152600e8152600080516020614a2a833981519152602082015280821515612abb5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a43578181015183820152602001610a2b565b50612ac533613e1d565b60408051808201909152601d8152600080516020614a4a83398151915260208201529015908082612b3b5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a43578181015183820152602001610a2b565b5060408051808201909152601181527f5072696365206d757374206265203e2030000000000000000000000000000000602082015260008a11908082612bc65760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a43578181015183820152602001610a2b565b50612bd08a6147f6565b600054909950600160a060020a0316331415612c02576010805460ff19166001179055600c8b9055600d899055612c2f565b600154600160a060020a0316331415612c2f576010805461ff001916610100179055600e8b9055600f8990555b601154604080517f62c597040000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a03909216916362c597049160248082019260009290919082900301818387803b158015612c9457600080fd5b505af1158015612ca8573d6000803e3d6000fd5b505060408051338152602081018f90528082018d905290517fb5d6baf622d177db5af6d250d11c52507155dbc0359dd6ab5f7c65ca36c4ffc19350908190036060019150a15050505050505050505050565b6000611c448261480a565b600080600080600080612d16610c8c565b60408051808201909152600e8152600080516020614a2a833981519152602082015280821515612d8b5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a43578181015183820152602001610a2b565b50612d9533611c1a565b60606040519081016040528060218152602001600080516020614a8a833981519152815260200160f860020a6073028152508181901515612e1b5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a43578181015183820152602001610a2b565b50612e246145aa565b600054600654600354600954939d50600160a060020a0390921633149b50612e519290918d9160016146e3565b9750612e676006548b600354600a5460006146e3565b9650612e8a87612e7e30318b63ffffffff61481916565b9063ffffffff61481916565b95508515612ec6576040805187815290517fec6a0b860bf684f74dbe39a6138edd92b8c04da302be601f5a4cfea6099b31aa9181900360200190a15b601360009054906101000a9004600160a060020a0316600160a060020a031663db8d55f16040518163ffffffff1660e060020a02815260040160206040518083038186803b158015612f1757600080fd5b505afa158015612f2b573d6000803e3d6000fd5b505050506040513d6020811015612f4157600080fd5b5051604051600160a060020a039091169087156108fc029088906000818181858888f19350505050158015612f7a573d6000803e3d6000fd5b50612f9289612f895787612f8b565b885b600561482b565b94508815612fc357612faa888663ffffffff61481916565b9750612fbc878663ffffffff6147e916565b9650612fe8565b612fd3888663ffffffff6147e916565b9750612fe5878663ffffffff61481916565b96505b60008054604051600160a060020a03909116918a156108fc02918b91818181858888f1935050505015156130635760008054600160a060020a039081168252600b602090815260408084208c9055925483519216825281018a90528151600080516020614a6a833981519152929181900390910190a1613099565b60005460408051600160a060020a039092168252602082018a90528051600080516020614a0a8339815191529281900390910190a15b600154604051600160a060020a039091169088156108fc029089906000818181858888f19350505050151561311a5760018054600160a060020a039081166000908152600b60209081526040918290208b905592548151921682529181018990528151600080516020614a6a833981519152929181900390910190a1613150565b60015460408051600160a060020a039092168252602082018990528051600080516020614a0a8339815191529281900390910190a15b6010805463ff0000001964ff00000000199091166401000000001716630100000017905588156131e05760005460015460025460408051600160a060020a039485168152602081018d90529290931682840152606082018a9052608082015290517f81bf0ecca77d43968d8c2687fe97a6d65b62e33063055c15042f5d5fd63abe289181900360a00190a1613242565b60015460005460025460408051600160a060020a039485168152602081018c90529290931682840152606082018b9052608082015290517f81bf0ecca77d43968d8c2687fe97a6d65b62e33063055c15042f5d5fd63abe289181900360a00190a15b50505050505050505050565b601154600160a060020a031681565b60105460009060ff168015610cb65750600d541580610cb6575050600d54421090565b600061328c8383614833565b9392505050565b60095481565b60105462010000900460ff1681565b336000908152600b60209081526040808320548151606081018352602281527f43616e2774207769746864726177206d6f7265207468656e20617661696c6162938101939093527f6c6500000000000000000000000000000000000000000000000000000000000091830191909152821090808261336b5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a43578181015183820152602001610a2b565b50336000818152600b6020526040808220805490839055905190955085156108fc0291869190818181858888f193505050501580156133ae573d6000803e3d6000fd5b506040805133815290517f3ef7bff25df38b9add5e98e973461b317065e20d0cf12640b2be5dd4179bd1379181900360200190a1505050565b600061328c838361482b565b60105460ff1681565b600080546001546002546006546003546010548695869586958695869586958695600160a060020a0390811695169392919060ff80821691610100900416613442610c20565b969f959e50939c50919a509850965094509092509050565b60065481565b60075481565b6000806000806000806000808861347b610c8c565b151561348657600080fd5b6134b18161349f57600154600160a060020a03166134ac565b600054600160a060020a03165b613e1d565b15156134bc57600080fd5b6134c533611c1a565b156134cf57600080fd5b6134da60035461480a565b985034891061356057604080518082018252601d81527f4e6f7420656e6f7567682073656e7420746f20636f76657220666565730000006020808301918252925160e560020a62461bcd02815260048101938452825160248201528251929392839260449092019190808383600083811015610a43578181015183820152602001610a2b565b601360009054906101000a9004600160a060020a0316600160a060020a031663db8d55f16040518163ffffffff1660e060020a02815260040160206040518083038186803b1580156135b157600080fd5b505afa1580156135c5573d6000803e3d6000fd5b505050506040513d60208110156135db57600080fd5b5051604051600160a060020a03909116908a156108fc02908b906000818181858888f19350505050158015613614573d6000803e3d6000fd5b50613625348a63ffffffff61481916565b975061363360035489614753565b15156136a457604080518082018252601781526000805160206149ca8339815191526020808301918252925160e560020a62461bcd02815260048101938452825160248201528251929392839260449092019190808383600083811015610a43578181015183820152602001610a2b565b6136ac6145aa565b9650896136bb57600e546136bf565b600c545b95506136e9878b6136d2576009546136d4565b895b8c6136df578a6136e3565b600a545b89612931565b151561375a57604080518082018252601781526000805160206149ca8339815191526020808301918252925160e560020a62461bcd02815260048101938452825160248201528251929392839260449092019190808383600083811015610a43578181015183820152602001610a2b565b8961377057600154600160a060020a031661377d565b600054600160a060020a03165b945061378a8a878761487d565b935061379d30318963ffffffff61481916565b92506137ae60035460065488614780565b915089156137e15760008054600160a060020a03191633179055600988905560078690556004829055600a839055613808565b60018054600160a060020a03191633179055600a8890556008869055600582905560098390555b6006869055600382905561381b8a61494f565b601054600160a060020a03868116660100000000000090920416141561385f576010805479ffffffffffffffffffffffffffffffffffffffff000000000000191690555b6011546040805160e160020a6340f46fd10281523360048201529051600160a060020a03909216916381e8dfa29160248082019260009290919082900301818387803b1580156138ae57600080fd5b505af11580156138c2573d6000803e3d6000fd5b505060025460408051338152600160a060020a038a1660208201528082018790526060810189905234608082015260a0810192909252517fd356d730a2af36f9a0a6dfacdadfec02dd284bedaf298f1f5894a869abb3b63693509081900360c0019150a150505050505050505050565b600b6020526000908152604090205481565b60105460408051808201909152601581527f4d757374206e6f7420626520696e69746961746564000000000000000000000060208201526000918291829162010000900460ff16159080826139de5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a43578181015183820152602001610a2b565b5060105460408051808201909152601281526000805160206149ea8339815191526020820152630100000090910460ff1615908082613a625760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a43578181015183820152602001610a2b565b50613a6c33611c1a565b60408051808201909152601e81527f436f6e74726163742070617274792063616e27742063616c6c2074686973000060208201529015908082613af45760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a43578181015183820152602001610a2b565b50613b0060035461480a565b9850348910613b8657604080518082018252601d81527f4e6f7420656e6f7567682073656e7420746f20636f76657220666565730000006020808301918252925160e560020a62461bcd02815260048101938452825160248201528251929392839260449092019190808383600083811015610a43578181015183820152602001610a2b565b8834039750613b9760035489614753565b1515613c0857604080518082018252601781526000805160206149ca8339815191526020808301918252925160e560020a62461bcd02815260048101938452825160248201528251929392839260449092019190808383600083811015610a43578181015183820152602001610a2b565b600054600160a060020a03161515613c365760008054600160a060020a031916331790556009889055613c4e565b60018054600160a060020a03191633179055600a8890555b613c596003546147ca565b89019650601360009054906101000a9004600160a060020a0316600160a060020a031663db8d55f16040518163ffffffff1660e060020a02815260040160206040518083038186803b158015613cae57600080fd5b505afa158015613cc2573d6000803e3d6000fd5b505050506040513d6020811015613cd857600080fd5b5051604051600160a060020a039091169088156108fc029089906000818181858888f19350505050158015613d11573d6000803e3d6000fd5b506010805462ff00001916620100001790556011546040805160e160020a6340f46fd10281523360048201529051600160a060020a03909216916381e8dfa29160248082019260009290919082900301818387803b158015613d7257600080fd5b505af1158015613d86573d6000803e3d6000fd5b5050600054600154600254600354600654600954600a5460408051338152346020820152600160a060020a0398891681830152969097166060870152608086019490945260a085019290925260c084015260e083015261010082015290517f94bdcbfe1580a4a1b6292d3543b07391ef8e107a5168feefc7412f3da94ebe31935090819003610120019150a1505050505050505050565b60008054600160a060020a038381169116148015613e3e5750613e3e61325d565b80611c445750600154600160a060020a038381169116148015611c445750611c446119df565b600080613e7033611c1a565b60606040519081016040528060218152602001600080516020614a8a833981519152815260200160f860020a6073028152508181901515613ef65760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a43578181015183820152602001610a2b565b50613eff610c8c565b60408051808201909152600e8152600080516020614a2a833981519152602082015280821515613f745760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a43578181015183820152602001610a2b565b50613f7e33613e1d565b60408051808201909152601d8152600080516020614a4a83398151915260208201529015908082613ff45760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a43578181015183820152602001610a2b565b5060105460408051808201909152601981527f6d73672e73656e64657220616c72656164792063616c6c65640000000000000060208201526601000000000000909104600160a060020a03163314159080826140955760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a43578181015183820152602001610a2b565b50601360009054906101000a9004600160a060020a0316600160a060020a03166323ec7f2a6040518163ffffffff1660e060020a02815260040160206040518083038186803b1580156140e757600080fd5b505afa1580156140fb573d6000803e3d6000fd5b505050506040513d602081101561411157600080fd5b5051601354604080517f0c5a95f80000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a039384169390921691630c5a95f891602480820192602092909190829003018186803b15801561417b57600080fd5b505afa15801561418f573d6000803e3d6000fd5b505050506040513d60208110156141a557600080fd5b505160408051808201909152601981527f416c7265616479206174206c61746573742076657273696f6e000000000000006020820152600160a060020a03909116919091141590808261423d5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a43578181015183820152602001610a2b565b5060105466010000000000009004600160a060020a0316151561428d576010805479ffffffffffffffffffffffffffffffffffffffff000000000000191633660100000000000002179055614411565b6010805465ff0000000000191665010000000000179055601354604080517f23ec7f2a0000000000000000000000000000000000000000000000000000000081529051600160a060020a03909216916323ec7f2a91600480820192602092909190829003018186803b15801561430257600080fd5b505afa158015614316573d6000803e3d6000fd5b505050506040513d602081101561432c57600080fd5b5051604080517f165ae0fc0000000000000000000000000000000000000000000000000000000081529051919d50600160a060020a038e169163165ae0fc91303191600480830192602092919082900301818588803b15801561438e57600080fd5b505af11580156143a2573d6000803e3d6000fd5b50505050506040513d60208110156143b957600080fd5b50516010805465ff00ff0000001916630100000017905560408051600160a060020a03831681529051919c507fbf44b7c20b944f553303a3ec7caff0a29f0378e297b7d9dc5b1267d359b7ea6c919081900360200190a15b505050505050505050505050565b662386f26fc1000081565b600f5481565b614438610c8c565b60408051808201909152600e8152600080516020614a2a8339815191526020820152808215156144ad5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a43578181015183820152602001610a2b565b506144b733613e1d565b60408051808201909152601981527f6d73672e73656e646572206d7573742062652073656c6c65720000000000000060208201528082151561453e5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a43578181015183820152602001610a2b565b5060005461455690600160a060020a0316331461494f565b6040805133815290517f82229214624615d3bbec967c7100737095261ce7b7cf043d442f92d635b737619181900360200190a150505050565b600061198f848484614987565b601054610100900460ff1681565b601254600254604080517f61da1439000000000000000000000000000000000000000000000000000000008152600481019290925280516000938493600160a060020a03909116926361da143992602480840193829003018186803b15801561461257600080fd5b505afa158015614626573d6000803e3d6000fd5b505050506040513d604081101561463c57600080fd5b505192915050565b6000806000808461465e5768052663ccab1e1c0000614669565b6805b12aefafa80400005b925068056bc75e2d6310000086840204915068056bc75e2d631000008868056bc75e2d631000008802890281151561469d57fe5b048115156146a757fe5b0490508480156146b657508181115b156146c457600093506146d8565b846146d1578082016146d5565b8082035b93505b505050949350505050565b600068056bc75e2d6310000084810290879087908690859081908086808703820281151561470d57fe5b05880281151561471957fe5b0581151561472357fe5b0591508761473357818303614737565b8183015b9050600081121561474457fe5b9b9a5050505050505050505050565b600061476083601461482b565b821015801561328c5750614776836101f461482b565b8211159392505050565b600068056bc75e2d631000006147b8846147a0858463ffffffff6149a016565b8115156147a957fe5b8791900463ffffffff6149a016565b8115156147c157fe5b04949350505050565b6000600a6147d983600361482b565b8115156147e257fe5b0492915050565b81810182811015611c4457fe5b6000428211614806576000611c44565b5090565b6000600a6147d983600561482b565b60008282111561482557fe5b50900390565b606491020490565b6000806000838514156148495760009250614875565b8484039150848260640281151561485c57fe5b059050600081136148705780600003614872565b805b92505b505092915050565b60006148a0600654846003548761489657600a5461489a565b6009545b886146e3565b604051909150600160a060020a0383169082156108fc029083906000818181858888f19350505050151561491657600160a060020a0382166000818152600b6020908152604091829020849055815192835282018390528051600080516020614a6a8339815191529281900390910190a161328c565b60408051600160a060020a0384168152602081018390528151600080516020614a0a833981519152929181900390910190a19392505050565b801561496e576000600c819055600d556010805460ff19169055614984565b6000600e819055600f556010805461ff00191690555b50565b6000806149948585614833565b90506119be838261482b565b60008215156149b157506000611c44565b508181028183828115156149c157fe5b0414611c4457fe00636f6c6c61746572616c496e52616e67652066616c73650000000000000000004d757374206e6f7420626520636c6f7365640000000000000000000000000000ae0c91484288809ae2c2fb81551bd9d06d4d3bcbbce87f3c5a3d5775f299358b4d757374206265206163746976650000000000000000000000000000000000006d73672e73656e646572206d757374206e6f742062652073656c6c65720000004ef7babf760ae67aea11df6f2f8872dd3c883143d490e6cd77f9a4b709dc70d64f6e6c7920636f6e747261637420706172746965732063616e20646f20746869a165627a7a72305820a453eefbcc224eba5452659661ca511aed33e044d78565eea56c89e971e471ea0029",
  "deployedBytecode": "",
  "sourceMap": "1153:40083:5:-;;;5467:29;;;5869:36;;;;6043:23;5:2:-1;;;;30:1;27;20:12;5:2;6043:23:5;1153:40083;;;;;;",
  "deployedSourceMap": "1153:40083:5:-;;;;;;;;;-1:-1:-1;;;1153:40083:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4661:21;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4661:21:5;;;;;;;;-1:-1:-1;;;;;4661:21:5;;;;;;;;;;;;;;5948:24;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5948:24:5;;;;5534:22;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5534:22:5;;;;;;;;;;;;;;;;;;;;;;21081:492;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;21081:492:5;;;;;;;4432:56;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4432:56:5;;;;;;;;;;;;;;;;;;;;5253:32;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5253:32:5;;;;33472:354;;8:9:-1;5:2;;;30:1;27;20:12;5:2;33472:354:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4823:33;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4823:33:5;;;;6210:107;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6210:107:5;;;;10159:1080;;-1:-1:-1;;;;;10159:1080:5;;;;;;;;;;;;;;;;;;;;27395:1473;;8:9:-1;5:2;;;30:1;27;20:12;5:2;27395:1473:5;;;;11794:440;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11794:440:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5162:32;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5162:32:5;;;;16438:1828;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;16438:1828:5;;;;;36274:364;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;36274:364:5;;;;;;;;;5869:36;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5869:36:5;;;;38274:403;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;38274:403:5;;;;;;;;;;;;;4750:29;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4750:29:5;;;;5709:31;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5709:31:5;;;;6708:162;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6708:162:5;;;;14397:582;;8:9:-1;5:2;;;30:1;27;20:12;5:2;14397:582:5;;;;7389:127;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;7389:127:5;-1:-1:-1;;;;;7389:127:5;;;;;5502:26;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5502:26:5;;;;8371:1566;;-1:-1:-1;;;;;8371:1566:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;37222:470;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;37222:470:5;;;;;;;;;;;;;;;18825:691;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;18825:691:5;-1:-1:-1;;;;;18825:691:5;;;;;5291:30;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5291:30:5;;;;15105:1051;;;;5008:36;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5008:36:5;;;;21672:590;;;;;;4601:20;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4601:20:5;;;;4785:32;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4785:32:5;;;;5328:33;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5328:33:5;;;;38738:140;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;38738:140:5;;;;;35086:685;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;35086:685:5;;;;;;;;;;;5979:24;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5979:24:5;;;;12239:180;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12239:180:5;;;;;;;;;;;;;-1:-1:-1;;;;;12239:180:5;;;;;;;;;;;;;;;;4722:21;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4722:21:5;;;;19923:1083;;;;;;;;38966:138;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;38966:138:5;;;;;29032:2907;;8:9:-1;5:2;;;30:1;27;20:12;5:2;29032:2907:5;;;;5912:30;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5912:30:5;;;;6432:158;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6432:158:5;;;;39892:203;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;39892:203:5;;;;;;;5125:31;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5125:31:5;;;;5467:29;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5467:29:5;;;;33977:298;;8:9:-1;5:2;;;30:1;27;20:12;5:2;33977:298:5;;;;40276:197;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;40276:197:5;;;;;;;5405:24;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5405:24:5;;;;11429:360;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11429:360:5;;;;;;;;-1:-1:-1;;;;;11429:360:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4938:23;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4938:23:5;;;;4967:35;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4967:35:5;;;;22807:2737;;;;;;;;5201:45;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;5201:45:5;-1:-1:-1;;;;;5201:45:5;;;;;12683:1459;;;;7010:178;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;7010:178:5;-1:-1:-1;;;;;7010:178:5;;;;;32317:1029;;8:9:-1;5:2;;;30:1;27;20:12;5:2;32317:1029:5;;;;4494:60;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4494:60:5;;;;5367:31;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5367:31:5;;;;22346:251;;8:9:-1;5:2;;;30:1;27;20:12;5:2;22346:251:5;;;;39253:332;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;39253:332:5;;;;;;;;;5435:25;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5435:25:5;;;;4661:21;;;-1:-1:-1;;;;;4661:21:5;;:::o;5948:24::-;;;-1:-1:-1;;;;;5948:24:5;;:::o;5534:22::-;;;;;;;;;:::o;21081:492::-;21165:10;:8;:10::i;:::-;21177:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;21177:21:5;;;;;309:26:0;;;;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21217:21:5;21227:10;21217:9;:21::i;:::-;21240;;;;;;;;;;;;;;;;;;309:26:0;;;;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;-1:-1:-1;21295:29:5;;;;;;;;;;;;;;;;;21292:1;21280:13;;;21295:29;21280:13;309:26:0;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;-1:-1:-1;21358:5:5;;-1:-1:-1;;;;;21358:5:5;21344:10;:19;21340:172;;;21379:20;:32;;;21340:172;;;21446:6;;-1:-1:-1;;;;;21446:6:5;21432:10;:20;21428:84;;;21468:21;:33;;;21428:84;21526:40;;;21544:10;21526:40;;;;;;;;;;;;;;;;;;;;;345:1:0;;;;21081:492:5;;;:::o;4432:56::-;4487:1;4432:56;:::o;5253:32::-;;;;:::o;33472:354::-;33561:6;;33535;;33561;;;;;:14;;33571:4;33561:14;33557:262;;;-1:-1:-1;33596:13:5;33589:20;;33557:262;33628:9;;;;;;;:18;;33624:195;;-1:-1:-1;33667:14:5;33660:21;;33624:195;33700:16;:14;:16::i;:::-;:37;;;;33720:17;:15;:17::i;:::-;33696:123;;;-1:-1:-1;33758:11:5;33751:18;;33696:123;-1:-1:-1;33803:16:5;33696:123;33472:354;:::o;4823:33::-;;;;:::o;6210:107::-;6274:9;;6251:4;;6274:9;;;;;:17;;6287:4;6274:17;:36;;;;-1:-1:-1;6295:6:5;;;;;;;:15;6274:36;6267:43;;6210:107;:::o;10159:1080::-;10354:28;10407:8;10354:62;;10436:6;-1:-1:-1;;;;;10436:13:5;;:15;;;;;-1:-1:-1;;;10436:15:5;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10436:15:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10436:15:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10436:15:5;10427:6;:24;10481:26;;;;;;;;-1:-1:-1;;;;;10481:24:5;;;;;:26;;;;;10436:15;;10481:26;;;;;;;:24;:26;;;5:2:-1;;;;30:1;27;20:12;5:2;10481:26:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10481:26:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10481:26:5;10461:17;:46;10531:20;;;;;;;;-1:-1:-1;;;;;10531:18:5;;;;;:20;;;;;10481:26;;10531:20;;;;;;;:18;:20;;;5:2:-1;;;;30:1;27;20:12;5:2;10531:20:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10531:20:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10531:20:5;10517:11;:34;10569:14;;;;;;;;-1:-1:-1;;;;;10569:12:5;;;;;:14;;;;;10531:20;;10569:14;;;;;;;:12;:14;;;5:2:-1;;;;30:1;27;20:12;5:2;10569:14:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10569:14:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10569:14:5;10561:5;:22;;-1:-1:-1;;;;;;10561:22:5;-1:-1:-1;;;;;10561:22:5;;;;;;10602:15;;;;;;;;:13;;;;;;:15;;;;;10569:14;;10602:15;;;;;;;;:13;:15;;;5:2:-1;;;;30:1;27;20:12;5:2;10602:15:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10602:15:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10602:15:5;10593:6;:24;;-1:-1:-1;;;;;;10593:24:5;-1:-1:-1;;;;;10593:24:5;;;;;;10650:28;;;;;;;;:26;;;;;;:28;;;;;10602:15;;10650:28;;;;;;;;:26;:28;;;5:2:-1;;;;30:1;27;20:12;5:2;10650:28:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10650:28:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10650:28:5;10628:19;:50;10711:29;;;;;;;;-1:-1:-1;;;;;10711:27:5;;;;;:29;;;;;10650:28;;10711:29;;;;;;;:27;:29;;;5:2:-1;;;;30:1;27;20:12;5:2;10711:29:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10711:29:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10711:29:5;10688:20;:52;;;10776:32;;;;;;;;-1:-1:-1;;;;;10776:30:5;;;;;:32;;;;10711:29;;10776:32;;;;;;;:30;:32;;;5:2:-1;;;;30:1;27;20:12;5:2;10776:32:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10776:32:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10776:32:5;10750:23;:58;10842:29;;;;;;;;-1:-1:-1;;;;;10842:27:5;;;;;:29;;;;;10776:32;;10842:29;;;;;;;:27;:29;;;5:2:-1;;;;30:1;27;20:12;5:2;10842:29:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10842:29:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10842:29:5;10819:20;:52;10905:30;;;;;;;;-1:-1:-1;;;;;10905:28:5;;;;;:30;;;;;10842:29;;10905:30;;;;;;;:28;:30;;;5:2:-1;;;;30:1;27;20:12;5:2;10905:30:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10905:30:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10905:30:5;10881:21;:54;10972:33;;;;;;;;-1:-1:-1;;;;;10972:31:5;;;;;:33;;;;;10905:30;;10972:33;;;;;;;:31;:33;;;5:2:-1;;;;30:1;27;20:12;5:2;10972:33:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10972:33:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10972:33:5;10945:24;:60;11016:15;:34;;-1:-1:-1;;;;;11016:34:5;;;-1:-1:-1;;;;;;11016:34:5;;;;;;;;11060:8;:34;;;;;;;;;;;11104:9;:22;;;;;;;;;;;;;;11137:9;:16;;-1:-1:-1;;11137:16:5;;;;;11016:34;11225:6;11164:68;;;-1:-1:-1;;;;;11164:68:5;;11225:6;;;11164:68;;;;;11194:15;;;;;11164:60;;:68;;;;;11016:15;;11164:68;;;;;;;;11016:15;11194;11164:68;;;5:2:-1;;;;30:1;27;20:12;5:2;11164:68:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;11164:68:5;;;;10159:1080;;;;;:::o;27395:1473::-;27499:16;27996;28259:18;28315:14;28401;27450:10;:8;:10::i;:::-;27462:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;27462:21:5;;;;;309:26:0;;;;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;;27518:13:5;:11;:13::i;:::-;27499:32;;27689:165;27725:11;27754:19;;27791:20;;27829:11;;27689:18;:165::i;:::-;27688:166;27667:249;;;;;-1:-1:-1;;;;;27667:249:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;28015:157;28069:17;;28100:19;;28133:11;;28158:4;28015:40;:157::i;:::-;27996:176;;28294:11;28280;:25;28259:46;;28332:13;:30;;28356:6;;-1:-1:-1;;;;;28356:6:5;28332:30;;;28348:5;;-1:-1:-1;;;;;28348:5:5;28332:30;28454:22;;28315:47;;-1:-1:-1;28426:4:5;28418:21;;-1:-1:-1;;;;;;28454:11:5;;;:22;;;;;28418:21;;28454:22;;;;28418:21;28454:11;:22;;;;;;;28453:23;28449:225;;;-1:-1:-1;;;;;28492:20:5;;;;;;:12;:20;;;;;;;;;:32;;;28543:46;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;28543:46:5;;;;;;;;;28449:225;;;28625:38;;;-1:-1:-1;;;;;28625:38:5;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;28625:38:5;;;;;;;;;;28449:225;28684:6;:13;;-1:-1:-1;;28684:13:5;;;;;28713:148;28739:6;28759:13;:29;;28787:1;28759:29;;;28775:9;28759:29;28802:13;:29;;28822:9;28802:29;;;28818:1;28802:29;28845:6;;28713:148;;;-1:-1:-1;;;;;28713:148:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27395:1473;;;;;;;:::o;11794:440::-;11951:20;;11985:21;;12020:19;;12053:20;;12087;;12121:21;;12156:23;;12193:24;;11794:440;;;;;;;;:::o;5162:32::-;;;;:::o;16438:1828::-;16556:12;;;;;16525:15;18445:1;18426:20;;;18418:29;;;;;;18465:9;;;;;;;:17;;18478:4;18465:17;18457:26;;;;;;18501:6;;;;;;;:15;18493:24;;;;;;18535:27;18551:10;18535:15;:27::i;:::-;18527:36;;;;;;;;18581:21;18591:10;18581:9;:21::i;:::-;:30;18573:39;;;;;;16585:5;;-1:-1:-1;;;;;16585:5:5;16571:10;:19;;-1:-1:-1;16571:19:5;16625:52;;16657:20;;16625:52;;;16635:19;;16625:52;16600:77;;16780:17;16762:15;:35;16758:87;;;16818:26;;;;;;;;;;;;;;;;;;;;;;;;16811:34;;-1:-1:-1;;;;;16811:34:5;;;;;;;;;;;;;;;;16818:26;;16811:34;;;;;;;;16818:26;16811:34;;16818:26;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;16758:87:5;16997:15;16977:17;:35;16956:56;;17041:13;:11;:13::i;:::-;17022:32;;17069:222;17101:11;17126:7;:45;;17152:19;;17126:45;;;17136:13;17126:45;17185:7;:46;;17218:13;17185:46;;;17195:20;;17185:46;17245:11;;17069:18;:222::i;:::-;17068:223;17064:294;;;17314:32;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;17314:32:5;;;;;;;17307:40;;-1:-1:-1;;;;;17307:40:5;;;;;;;;;;;;;;;;17314:32;;17307:40;;;;;;;;17314:32;17307:40;;17314:32;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;17064:294:5;17386:193;17454:11;;17479;17504:17;;17535:13;17562:7;17386:54;:193::i;:::-;17368:211;;17595:77;17642:17;;17661:10;17595:46;:77::i;:::-;17594:78;17590:147;;;17695:30;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;17695:30:5;;;;;;;17688:38;;-1:-1:-1;;;;;17688:38:5;;;;;;;;;;;;;;;;17695:30;;17688:38;;;;;;;;17695:30;17688:38;;17695:30;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;17590:147:5;17752:32;;:10;;:32;;;;;17768:15;;17752:32;;;;17768:15;17752:10;:32;;;;;;;17751:33;17747:265;;;17813:10;17800:24;;;;:12;:24;;;;;;;;;:42;;;17861:56;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;17861:56:5;;;;;;;;;17747:265;;;17953:48;;;17973:10;17953:48;;;;;;;;;;-1:-1:-1;;;;;;;;;;;17953:48:5;;;;;;;;;;17747:265;18026:7;18022:140;;;18049:19;:35;;;18022:140;;;18115:20;:36;;;18022:140;18252:6;;18177:82;;;18202:10;18177:82;;;;;;;;18231:4;18177:82;;;;;;;;;;;;;;;;;;;;;;;;;;;16438:1828;;;;;;;:::o;36274:364::-;36442:16;36488:143;36551:12;36577:15;36606;36488:49;:143::i;:::-;36474:157;36274:364;-1:-1:-1;;;;36274:364:5:o;5869:36::-;;;;;;-1:-1:-1;;;;;5869:36:5;;:::o;38274:403::-;38468:10;38502:168;38556:18;38588:15;38617:12;38643:17;38502:40;:168::i;:::-;38494:176;38274:403;-1:-1:-1;;;;;38274:403:5:o;4750:29::-;;;;:::o;5709:31::-;;;;;;;;;:::o;6708:162::-;6779:13;;6756:4;;6779:13;;;;;:84;;;;-1:-1:-1;6809:19:5;;:24;;:53;;-1:-1:-1;;6843:19:5;;6837:3;:25;;6708:162::o;14397:582::-;14452:9;;14472:28;;;;;;;;;;;;;;;;;-1:-1:-1;;14452:9:5;;;;;:18;;14472:28;14452:18;309:26:0;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;;14519:27:5;14535:10;14519:15;:27::i;:::-;14548:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;14548:28:5;;;;-1:-1:-1;;;;;14548:28:5;;;317:9:0;328:6;309:26;;;;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;-1:-1:-1;14646:27:5;;14618:4;14610:21;;-1:-1:-1;14646:10:5;;:27;;;;;14610:21;;14646:27;;;;14610:21;14646:10;:27;;;;;;;14645:28;14641:245;;;14702:10;14689:24;;;;:12;:24;;;;;;;;;:37;;;14745:51;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;14745:51:5;;;;;;;;;14641:245;;;14832:43;;;14852:10;14832:43;;;;;;;;;;-1:-1:-1;;;;;;;;;;;14832:43:5;;;;;;;;;;14641:245;14895:6;:13;;-1:-1:-1;;14895:13:5;;;;;14965:6;;14923:49;;;14941:10;14923:49;;;;;;;;;;;;;;;;;;;;;;;;;345:1:0;;14397:582:5;;;:::o;7389:127::-;7451:4;7484:5;;-1:-1:-1;;;;;7474:15:5;;;7484:5;;7474:15;;:35;;-1:-1:-1;7503:6:5;;-1:-1:-1;;;;;7493:16:5;;;7503:6;;7493:16;7474:35;7467:42;7389:127;-1:-1:-1;;7389:127:5:o;5502:26::-;;;;;;;;;:::o;8371:1566::-;8757:23;;;;;;;;;;;;;;;;;8796:9;;;;4545;8706:49;;;;8757:23;8706:49;309:26:0;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;;8808:59:5;8848:18;8808:39;:59::i;:::-;8796:71;-1:-1:-1;8881:9:5;:17;-1:-1:-1;8877:65:5;;8919:22;;;;;;;;;;;;;;;;;;;8912:30;;-1:-1:-1;;;;;8912:30:5;;;;;;;;;;;;;;;;8919:22;;8912:30;;;;;;;;8919:22;8912:30;;8919:22;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;8877:65:5;8987:4;8975:9;:16;8953:38;;9006:82;9053:18;9073:14;9006:46;:82::i;:::-;9005:83;9001:139;;;9109:30;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;9109:30:5;;;;;;;9102:38;;-1:-1:-1;;;;;9102:38:5;;;;;;;;;;;;;;;;9109:30;;9102:38;;;;;;;;9109:30;9102:38;;9109:30;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;9001:139:5;9155:8;9151:208;;;9179:5;:18;;-1:-1:-1;;;;;;9179:18:5;-1:-1:-1;;;;;9179:18:5;;;;;9211:19;:36;;;9151:208;;;9278:6;:19;;-1:-1:-1;;;;;;9278:19:5;-1:-1:-1;;;;;9278:19:5;;;;;9311:20;:37;;;9151:208;9369:6;:18;;;9397:17;:38;;;9445:20;:41;;;9496:21;:42;;;9549:11;:26;;;9585:23;:38;;;9633:24;:39;;;9683:15;:34;;-1:-1:-1;;;;;9683:34:5;;;-1:-1:-1;;;;;;9683:34:5;;;;;;;9727:9;:22;;;;;;;;;;;9759:8;:34;;;;;;;;;;;;;9809:121;;;;;;;;;;;;;;;;;;;;9911:9;9809:121;;;;;;;;;;;;;;8371:1566;;;;;;;;;;;;:::o;37222:470::-;37445:15;37489:196;37557:12;37583;37609:15;37638;37667:8;37489:54;:196::i;:::-;37476:209;37222:470;-1:-1:-1;;;;;;37222:470:5:o;18825:691::-;18906:6;;18923:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;18923:25:5;;;;18906:6;;;;;;:15;;18923:25;18906:15;309:26:0;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;;18967:27:5;18983:10;18967:15;:27::i;:::-;18996:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;18996:28:5;;;;-1:-1:-1;;;;;18996:28:5;;;317:9:0;328:6;309:26;;;;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;;19043:28:5;19059:11;19043:15;:28::i;:::-;19082:24;;;;;;;;;;;;;;;;;19043:37;;;19082:24;19043:37;309:26:0;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;;19125:21:5;19135:10;19125:9;:21::i;:::-;19157:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;19157:25:5;;;;19125:30;;;19157:25;19125:30;309:26:0;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;-1:-1:-1;19216:5:5;;-1:-1:-1;;;;;19216:5:5;19202:10;:19;19198:44;;;19223:5;:19;;-1:-1:-1;;;;;;19223:19:5;-1:-1:-1;;;;;19223:19:5;;;;;19198:44;19270:6;;-1:-1:-1;;;;;19270:6:5;19256:10;:20;19252:46;;;19278:6;:20;;-1:-1:-1;;;;;;19278:20:5;-1:-1:-1;;;;;19278:20:5;;;;;19252:46;19326:15;;;;;-1:-1:-1;;;;;19326:15:5;19312:10;:29;19308:56;;;19343:15;:21;;-1:-1:-1;;19343:21:5;;;19308:56;19404:15;;19374:73;;;-1:-1:-1;;;;;19374:73:5;;-1:-1:-1;;;;;19374:73:5;;;;;;;;;19404:15;;;;;19374:60;;:73;;;;;19404:15;;19374:73;;;;;;;19404:15;;19374:73;;;5:2:-1;;;;30:1;27;20:12;5:2;19374:73:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;19462:47:5;;;19485:10;19462:47;;-1:-1:-1;;;;;19462:47:5;;;;;;;;;;-1:-1:-1;19462:47:5;;;;;;;;-1:-1:-1;19462:47:5;345:1:0;;;;;;18825:691:5;;;:::o;5291:30::-;;;;:::o;15105:1051::-;15188:24;;;;;;;;;;;;;;;;;15503:12;;;;15185:1;15172:9;:14;;;15188:24;15172:14;309:26:0;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;-1:-1:-1;15231:9:5;;15250:24;;;;;;;;;;;;;;;;;15231:9;;;;;;:17;;15244:4;15231:17;;15250:24;15231:17;309:26:0;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;-1:-1:-1;15293:6:5;;15310:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;15310:25:5;;;;15293:6;;;;;;:15;;15310:25;15293:15;309:26:0;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;;15354:27:5;15370:10;15354:15;:27::i;:::-;15383:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;15383:28:5;;;;-1:-1:-1;;;;;15383:28:5;;;317:9:0;328:6;309:26;;;;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;;15430:21:5;15440:10;15430:9;:21::i;:::-;15462:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;15462:25:5;;;;15430:30;;;15462:25;15430:30;309:26:0;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;-1:-1:-1;15532:5:5;;-1:-1:-1;;;;;15532:5:5;15518:10;:19;;-1:-1:-1;15572:104:5;15666:9;15518:19;15573:78;;15631:20;;15573:78;;;15596:19;;15573:78;15572:93;:104;:93;:104;:::i;:::-;15547:129;;15758:84;15805:17;;15824;15758:46;:84::i;:::-;15757:85;15753:141;;;15863:30;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;15863:30:5;;;;;;;15856:38;;-1:-1:-1;;;;;15856:38:5;;;;;;;;;;;;;;;;15863:30;;15856:38;;;;;;;;15863:30;15856:38;;15863:30;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;15753:141:5;15909:7;15905:148;;;15932:19;:39;;;15905:148;;;16002:20;:40;;;15905:148;16142:6;;16068:81;;;16093:10;16068:81;;16105:9;16068:81;;;;16116:5;16068:81;;;;;;;;;;;;;;;;;;;;;;;;;;;345:1:0;;;;;;;;15105:1051:5;;;;:::o;5008:36::-;;;;:::o;21672:590::-;21785:9;;21805:28;;;;;;;;;;;;;;;;;21785:9;;;;;;:18;;21805:28;21785:18;309:26:0;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;-1:-1:-1;21852:6:5;;21869:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;21869:25:5;;;;21852:6;;;;;;:15;;21869:25;21852:15;309:26:0;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;;21913:27:5;21929:10;21913:15;:27::i;:::-;21942:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;21942:28:5;;;;-1:-1:-1;;;;;21942:28:5;;;317:9:0;328:6;309:26;;;;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;-1:-1:-1;22010:29:5;;;;;;;;;;;;;;;;;22007:1;21989:19;;;22010:29;21989:19;309:26:0;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;-1:-1:-1;22055:11:5;:29;;;22094:23;:41;;;22145:24;:42;;;22202:53;;;22227:10;22202:53;;;;;;;;;;;;;;;;;;;;;345:1:0;;;;;;21672:590:5;;;:::o;4601:20::-;;;-1:-1:-1;;;;;4601:20:5;;:::o;4785:32::-;;;;:::o;5328:33::-;;;;:::o;38738:140::-;38795:8;38821:50;38861:9;38821:39;:50::i;35086:685::-;35290:12;35318:16;35506:17;35337:159;35391:17;;35422:20;35456:12;35482:4;35337:40;:159::i;:::-;35318:178;;35526:161;35580:17;;35611:21;35646:12;35672:5;35526:40;:161::i;:::-;35506:181;;35722:11;35707:12;:26;:57;;;;;35752:12;35737;:27;35707:57;35697:67;35086:685;-1:-1:-1;;;;;;;35086:685:5:o;5979:24::-;;;-1:-1:-1;;;;;5979:24:5;;:::o;12239:180::-;12363:10;;;;;;;;12387:15;;;;-1:-1:-1;;;;;12387:15:5;;12239:180::o;4722:21::-;;;;:::o;19923:1083::-;20395:14;20037:27;20053:10;20037:15;:27::i;:::-;20066:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;20066:28:5;;;;-1:-1:-1;;;;;20066:28:5;;;317:9:0;328:6;309:26;;;;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;;20113:10:5;:8;:10::i;:::-;20125:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;20125:21:5;;;;;309:26:0;;;;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;;20220:21:5;20230:10;20220:9;:21::i;:::-;20252:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;20252:25:5;;;;20220:30;;;20252:25;20220:30;309:26:0;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;-1:-1:-1;20321:29:5;;;;;;;;;;;;;;;;;20318:1;20296:23;;;20321:29;20296:23;309:26:0;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;;20412:33:5;20434:10;20412:21;:33::i;:::-;20473:5;;20395:50;;-1:-1:-1;;;;;;20473:5:5;20459:10;:19;20455:348;;;20494:12;:19;;-1:-1:-1;;20494:19:5;20509:4;20494:19;;;20527:20;:42;;;20583:18;:30;;;20455:348;;;20648:6;;-1:-1:-1;;;;;20648:6:5;20634:10;:20;20630:173;;;20670:13;:20;;-1:-1:-1;;20670:20:5;;;;;20704:21;:43;;;20761:19;:31;;;20630:173;20843:15;;20813:71;;;;;;20873:10;20813:71;;;;;;-1:-1:-1;;;;;20843:15:5;;;;20813:59;;:71;;;;;20843:15;;20813:71;;;;;;;;20843:15;;20813:71;;;5:2:-1;;;;30:1;27;20:12;5:2;20813:71:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;20899:100:5;;;20923:10;20899:100;;;;;;;;;;;;;;;;;;-1:-1:-1;20899:100:5;;;;;;;-1:-1:-1;20899:100:5;345:1:0;;;;;;19923:1083:5;;;;;:::o;38966:138::-;39022:8;39048:49;39087:9;39048:38;:49::i;29032:2907::-;29217:16;29259:24;29316:20;29545:21;30009;30355:12;29092:10;:8;:10::i;:::-;29104:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;29104:21:5;;;;;309:26:0;;;;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;;29144:27:5;29160:10;29144:15;:27::i;:::-;29173:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;29173:28:5;;;;-1:-1:-1;;;;;29173:28:5;;;317:9:0;328:6;309:26;;;;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;;29236:13:5;:11;:13::i;:::-;29300:5;;29407:11;;29457:17;;29488:19;;29217:32;;-1:-1:-1;;;;;;29300:5:5;;;29286:10;:19;;-1:-1:-1;29339:196:5;;29407:11;;29217:32;;29300:5;29339:54;:196::i;:::-;29316:219;;29569:198;29637:11;;29662;29687:17;;29718:20;;29752:5;29569:54;:198::i;:::-;29545:222;-1:-1:-1;30033:64:5;29545:222;30033:42;30041:4;30033:21;30059:15;30033:42;:25;:42;:::i;:::-;:46;:64;:46;:64;:::i;:::-;30009:88;-1:-1:-1;30111:21:5;;30107:107;;30153:50;;;;;;;;;;;;;;;;;30107:107;30223:8;;;;;;;;;-1:-1:-1;;;;;30223:8:5;-1:-1:-1;;;;;30223:16:5;;:18;;;;;-1:-1:-1;;;30223:18:5;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;30223:18:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;30223:18:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;30223:18:5;:45;;-1:-1:-1;;;;;30223:27:5;;;;:45;;;;;30251:16;;30223:45;;;;30251:16;30223:27;:45;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;30223:45:5;30370:163;30422:19;:56;;30462:16;30422:56;;;30444:15;30422:56;4487:1;30370:38;:163::i;:::-;30355:178;;30547:19;30543:297;;;30600:28;:15;30620:7;30600:28;:19;:28;:::i;:::-;30582:46;-1:-1:-1;30661:29:5;:16;30682:7;30661:29;:20;:29;:::i;:::-;30642:48;;30543:297;;;30739:28;:15;30759:7;30739:28;:19;:28;:::i;:::-;30721:46;-1:-1:-1;30800:29:5;:16;30821:7;30800:29;:20;:29;:::i;:::-;30781:48;;30543:297;31136:5;;;:27;;-1:-1:-1;;;;;31136:5:5;;;;:27;;;;;31147:15;;31136:27;:5;:27;31147:15;31136:5;:27;;;;;;;31135:28;31131:245;;;31179:19;31192:5;;-1:-1:-1;;;;;31192:5:5;;;31179:19;;:12;:19;;;;;;;;:37;;;31263:5;;31235:51;;31263:5;;31235:51;;;;;;;;;-1:-1:-1;;;;;;;;;;;31235:51:5;;;;;;;;;;31131:245;;;31342:5;;31322:43;;;-1:-1:-1;;;;;31342:5:5;;;31322:43;;;;;;;;;;-1:-1:-1;;;;;;;;;;;31322:43:5;;;;;;;;;31131:245;31391:6;;:29;;-1:-1:-1;;;;;31391:6:5;;;;:29;;;;;31403:16;;31391:6;:29;:6;:29;31403:16;31391:6;:29;;;;;;;31390:30;31386:253;;;31449:6;;;-1:-1:-1;;;;;31449:6:5;;;31436:20;;;;:12;:20;;;;;;;;;:39;;;31522:6;;31494:53;;31522:6;;31494:53;;;;;;;;;;-1:-1:-1;;;;;;;;;;;31494:53:5;;;;;;;;;;31386:253;;;31603:6;;31583:45;;;-1:-1:-1;;;;;31603:6:5;;;31583:45;;;;;;;;;;-1:-1:-1;;;;;;;;;;;31583:45:5;;;;;;;;;31386:253;31649:10;:17;;-1:-1:-1;;;;31649:17:5;;;;;31676:13;;;;;31700:232;;;;31764:5;;;31788:6;31814;;31742:79;;;-1:-1:-1;;;;;31764:5:5;;;31742:79;;;;;;;;31788:6;;;;31742:79;;;;;;;;;;;;;;;;;;;;;;;;;31700:232;;;31875:6;;;31901:5;31925:6;;31853:79;;;-1:-1:-1;;;;;31875:6:5;;;31853:79;;;;;;;;31901:5;;;;31853:79;;;;;;;;;;;;;;;;;;;;;;;;;31700:232;345:1:0;;29032:2907:5;;;;;;;;:::o;5912:30::-;;;-1:-1:-1;;;;;5912:30:5;;:::o;6432:158::-;6502:12;;6479:4;;6502:12;;:81;;;;-1:-1:-1;6531:18:5;;:23;;:51;;-1:-1:-1;;6564:18:5;;6558:3;:24;;6432:158::o;39892:203::-;39989:12;40027:61;40070:6;40078:9;40027:42;:61::i;:::-;40017:71;39892:203;-1:-1:-1;;;39892:203:5:o;5125:31::-;;;;:::o;5467:29::-;;;;;;;;;:::o;33977:298::-;34050:10;34109:11;34037:24;;;:12;:24;;;;;;;;;34067:26;;;;;;;;;;;;;;;;;;;;;;;;;;34037:28;-1:-1:-1;34037:28:5;34067:26;34037:28;309:26:0;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;-1:-1:-1;34136:10:5;34123:24;;;;:12;:24;;;;;;;;34157:28;;;;34195:27;;34123:24;;-1:-1:-1;34195:27:5;;;;;34123:24;;34195:27;;34123:24;34195:27;34123:24;34136:10;34195:27;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;34237:31:5;;;34257:10;34237:31;;;;;;;;;;;;;33977:298;;;:::o;40276:197::-;40369:13;40409:57;40448:7;40457:8;40409:38;:57::i;5405:24::-;;;;;;:::o;11429:360::-;11502:7;11596:5;;;11615:6;11635;;11655:11;;11680:17;;11711:12;;11502:7;;;;;;;;;;;;;;-1:-1:-1;;;;;11596:5:5;;;;11615:6;;11635;11655:11;11680:17;11711:12;;;;;11596:5;11737:13;;;11764:8;:6;:8::i;:::-;11575:207;;;;-1:-1:-1;11575:207:5;;-1:-1:-1;11575:207:5;;-1:-1:-1;11575:207:5;-1:-1:-1;11575:207:5;-1:-1:-1;11575:207:5;-1:-1:-1;11575:207:5;;-1:-1:-1;11429:360:5;-1:-1:-1;11429:360:5:o;4938:23::-;;;;:::o;4967:35::-;;;;:::o;22807:2737::-;22927:9;23188:19;23388:16;23430:19;23991:20;24054:27;24240;24359:16;22898:13;25697:10;:8;:10::i;:::-;25689:19;;;;;;;;25726:41;25736:13;:30;;25760:6;;-1:-1:-1;;;;;25760:6:5;25736:30;;;25752:5;;-1:-1:-1;;;;;25752:5:5;25736:30;25726:9;:41::i;:::-;25718:50;;;;;;;;25786:27;25802:10;25786:15;:27::i;:::-;:36;25778:45;;;;;;22939:57;22978:17;;22939:38;:57::i;:::-;22927:69;-1:-1:-1;23010:9:5;:17;-1:-1:-1;23006:65:5;;23048:22;;;;;;;;;;;;;;;;;;;23041:30;;-1:-1:-1;;;;;23041:30:5;;;;;;;;;;;;;;;;23048:22;;23041:30;;;;;;;;23048:22;23041:30;;23048:22;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;23006:65:5;23082:8;;;;;;;;;-1:-1:-1;;;;;23082:8:5;-1:-1:-1;;;;;23082:16:5;;:18;;;;;-1:-1:-1;;;23082:18:5;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;23082:18:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;23082:18:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;23082:18:5;:33;;-1:-1:-1;;;;;23082:27:5;;;;:33;;;;;23110:4;;23082:33;;;;23110:4;23082:27;:33;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;23210:19:5;:9;23224:4;23210:19;:13;:19;:::i;:::-;23188:41;;23244:81;23291:17;;23310:14;23244:46;:81::i;:::-;23243:82;23239:138;;;23346:30;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;23346:30:5;;;;;;;23339:38;;-1:-1:-1;;;;;23339:38:5;;;;;;;;;;;;;;;;23346:30;;23339:38;;;;;;;;23346:30;23339:38;;23346:30;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;23239:138:5;23407:13;:11;:13::i;:::-;23388:32;;23452:13;:84;;23515:21;;23452:84;;;23480:20;;23452:84;23430:106;;23612:245;23644:11;23669:13;:52;;23702:19;;23669:52;;;23685:14;23669:52;23735:13;:53;;23774:14;23735:53;;;23751:20;;23735:53;23802:14;23612:18;:245::i;:::-;23611:246;23607:317;;;23880:32;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;23880:32:5;;;;;;;23873:40;;-1:-1:-1;;;;;23873:40:5;;;;;;;;;;;;;;;;23880:32;;23873:40;;;;;;;;23880:32;23873:40;;23880:32;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;23607:317:5;24014:13;:30;;24038:6;;-1:-1:-1;;;;;24038:6:5;24014:30;;;24030:5;;-1:-1:-1;;;;;24030:5:5;24014:30;23991:53;;24084:107;24114:13;24141:14;24169:12;24084:16;:107::i;:::-;24054:137;-1:-1:-1;24270:41:5;24278:4;24270:21;24296:14;24270:41;:25;:41;:::i;:::-;24240:71;;24378:143;24441:17;;24472:11;;24497:14;24378:49;:143::i;:::-;24359:162;;24536:13;24532:536;;;24565:5;:18;;-1:-1:-1;;;;;;24565:18:5;24573:10;24565:18;;;24597:19;:36;;;24647:23;:40;;;24701:20;:34;;;24749:20;:45;;;24532:536;;;24825:6;:19;;-1:-1:-1;;;;;;24825:19:5;24834:10;24825:19;;;24858:20;:37;;;24909:24;:41;;;24964:21;:35;;;25013:19;:44;;;24532:536;25078:11;:28;;;25116:17;:31;;;25158:24;25168:13;25158:9;:24::i;:::-;25269:15;;-1:-1:-1;;;;;25269:31:5;;;:15;;;;;:31;25265:83;;;25316:15;:21;;-1:-1:-1;;25316:21:5;;;25265:83;25388:15;;25358:72;;;-1:-1:-1;;;;;25358:72:5;;25419:10;25358:72;;;;;;-1:-1:-1;;;;;25388:15:5;;;;25358:60;;:72;;;;;25388:15;;25358:72;;;;;;;;25388:15;;25358:72;;;5:2:-1;;;;30:1;27;20:12;5:2;25358:72:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;25530:6:5;;25445:92;;;25456:10;25445:92;;-1:-1:-1;;;;;25445:92:5;;;;;;;;;;;;;;;;;;25519:9;25445:92;;;;;;;;;;;;;;-1:-1:-1;25445:92:5;;;;;;;-1:-1:-1;25445:92:5;22807:2737;;;;;;;;;;:::o;5201:45::-;;;;;;;;;;;;;:::o;12683:1459::-;12752:9;;12772:28;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;12752:9:5;;;;;:18;;12772:28;12752:18;309:26:0;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;-1:-1:-1;12819:6:5;;12836:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;12836:25:5;;;;12819:6;;;;;;:15;;12836:25;12819:15;309:26:0;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;;12913:27:5;12929:10;12913:15;:27::i;:::-;12951:24;;;;;;;;;;;;;;;;;12913:36;;;12951:24;12913:36;309:26:0;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;;13047:57:5;13086:17;;13047:38;:57::i;:::-;13029:75;-1:-1:-1;13118:9:5;:23;-1:-1:-1;13114:71:5;;13162:22;;;;;;;;;;;;;;;;;;;13155:30;;-1:-1:-1;;;;;13155:30:5;;;;;;;;;;;;;;;;13162:22;;13155:30;;;;;;;;13162:22;13155:30;;13162:22;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;13114:71:5;13230:10;13218:9;:22;13196:44;;13255:81;13302:17;;13321:14;13255:46;:81::i;:::-;13254:82;13250:138;;;13357:30;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;13357:30:5;;;;;;;13350:38;;-1:-1:-1;;;;;13350:38:5;;;;;;;;;;;;;;;;13357:30;;13350:38;;;;;;;;13357:30;13350:38;;13357:30;-1:-1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;13250:138:5;13403:5;;-1:-1:-1;;;;;13403:5:5;:12;13399:212;;;13431:5;:18;;-1:-1:-1;;;;;;13431:18:5;13439:10;13431:18;;;13463:19;:36;;;13399:212;;;13530:6;:19;;-1:-1:-1;;;;;;13530:19:5;13539:10;13530:19;;;13563:20;:37;;;13399:212;13651:58;13691:17;;13651:39;:58::i;:::-;13638:10;:71;13621:88;;13719:8;;;;;;;;;-1:-1:-1;;;;;13719:8:5;-1:-1:-1;;;;;13719:16:5;;:18;;;;;-1:-1:-1;;;13719:18:5;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13719:18:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;13719:18:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;13719:18:5;:38;;-1:-1:-1;;;;;13719:27:5;;;;:38;;;;;13747:9;;13719:38;;;;13747:9;13719:27;:38;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;13768:9:5;:16;;-1:-1:-1;;13768:16:5;;;;;13824:15;;13794:72;;;-1:-1:-1;;;;;13794:72:5;;13855:10;13794:72;;;;;;-1:-1:-1;;;;;13824:15:5;;;;13794:60;;:72;;;;;13768:16;;13794:72;;;;;;;;13768:16;13824:15;13794:72;;;5:2:-1;;;;30:1;27;20:12;5:2;13794:72:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;13957:5:5;;;13976:6;13996;;14016:17;;14047:11;;14072:19;;14105:20;;13881:254;;;13910:10;13881:254;;13934:9;13881:254;;;;-1:-1:-1;;;;;13957:5:5;;;13881:254;;;;13976:6;;;;13881:254;;;;;;;;;;;;;;;;;;;;;;;;;;13957:5;13881:254;;;;;;;-1:-1:-1;13881:254:5;;;;;;;-1:-1:-1;13881:254:5;345:1:0;;;;12683:1459:5;;;;;:::o;7010:178::-;7066:4;7100:5;;-1:-1:-1;;;;;7090:15:5;;;7100:5;;7090:15;:35;;;;;7109:16;:14;:16::i;:::-;7089:92;;;-1:-1:-1;7153:6:5;;-1:-1:-1;;;;;7143:16:5;;;7153:6;;7143:16;:37;;;;;7163:17;:15;:17::i;32317:1029::-;33059:24;33126:14;32370:27;32386:10;32370:15;:27::i;:::-;32399:28;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;32399:28:5;;;;-1:-1:-1;;;;;32399:28:5;;;317:9:0;328:6;309:26;;;;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;;32446:10:5;:8;:10::i;:::-;32458:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;32458:21:5;;;;;309:26:0;;;;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;;32498:21:5;32508:10;32498:9;:21::i;:::-;32530:25;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;32530:25:5;;;;32498:30;;;32530:25;32498:30;309:26:0;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;-1:-1:-1;32588:15:5;;32605:26;;;;;;;;;;;;;;;;;32588:15;;;;-1:-1:-1;;;;;32588:15:5;32574:10;:29;;;32605:26;32574:29;309:26:0;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;;32676:8:5;;;;;;;;;-1:-1:-1;;;;;32676:8:5;-1:-1:-1;;;;;32676:28:5;;:30;;;;;-1:-1:-1;;;32676:30:5;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;32676:30:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;32676:30:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;32676:30:5;32650:8;;:22;;;;;;32667:4;32650:22;;;;;;-1:-1:-1;;;;;32650:56:5;;;;:8;;;;:16;;:22;;;;;32676:30;;32650:22;;;;;;;;:8;:22;;;5:2:-1;;;;30:1;27;20:12;5:2;32650:22:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;32650:22:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;32650:22:5;32708:29;;;;;;;;;;;;;32650:22;32708:29;;;-1:-1:-1;;;;;32650:56:5;;;;;;;;;32708:29;32650:56;309:26:0;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;-1:-1:-1;32805:15:5;;;;;-1:-1:-1;;;;;32805:15:5;:22;32801:101;;;32843:15;:28;;-1:-1:-1;;32843:28:5;32861:10;32843:28;;;;;32885:7;;32801:101;33031:11;:18;;-1:-1:-1;;33031:18:5;;;;;33086:8;;:30;;;;;;;;-1:-1:-1;;;;;33086:8:5;;;;:28;;:30;;;;;;;;;;;;;;;:8;:30;;;5:2:-1;;;;30:1;27;20:12;5:2;33086:30:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;33086:30:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;33086:30:5;33143:106;;;;;;;;33086:30;;-1:-1:-1;;;;;;33143:75:5;;;;;33233:4;33225:21;;33143:106;;;;;33086:30;;33143:106;;;;;;;33225:21;33143:75;:106;;;5:2:-1;;;;30:1;27;20:12;5:2;33143:106:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;33143:106:5;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;33143:106:5;33259:11;:19;;-1:-1:-1;;33288:13:5;;;;;33317:22;;;-1:-1:-1;;;;;33317:22:5;;;;;;33143:106;;-1:-1:-1;33317:22:5;;;;;;33143:106;33317:22;;;345:1:0;;;;;;;;;32317:1029:5;;;;:::o;4494:60::-;4545:9;4494:60;:::o;5367:31::-;;;;:::o;22346:251::-;22402:10;:8;:10::i;:::-;22414:21;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;22414:21:5;;;;;309:26:0;;;;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;;22454:21:5;22464:10;22454:9;:21::i;:::-;22477;;;;;;;;;;;;;;;;;;309:26:0;;;;;;;-1:-1:-1;;;;;309:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;309:26:0;-1:-1:-1;22538:5:5;;22514:30;;-1:-1:-1;;;;;22538:5:5;22524:10;:19;22514:9;:30::i;:::-;22559:31;;;22579:10;22559:31;;;;;;;;;;;;;345:1:0;;22346:251:5;;:::o;39253:332::-;39410:11;39446:132;39500:12;39526:13;39553:15;39446:40;:132::i;5435:25::-;;;;;;;;;:::o;34352:204::-;34498:9;;34514:6;;34492:29;;;;;;;;;;;;;;;34422:10;;;;-1:-1:-1;;;;;34498:9:5;;;;34492:21;;:29;;;;;;;;;;34498:9;34492:29;;;5:2:-1;;;;30:1;27;20:12;5:2;34492:29:5;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;34492:29:5;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;34492:29:5;;34352:204;-1:-1:-1;;34352:204:5:o;6403:1083:7:-;6599:10;6686:24;6819:22;6952:15;6714:17;6713:96;;1165:24;6713:96;;;1085:25;6713:96;6686:123;-1:-1:-1;386:8:7;6845:34;;;6844:50;6819:75;;386:8;7033:18;386:8;7003:12;:26;6984:15;:46;:67;;;;;;;;6970:105;;;;;;;;6952:123;;7227:17;:51;;;;;7261:17;7248:10;:30;7227:51;7223:77;;;7299:1;7292:8;;;;7223:77;7371:17;7370:109;;7469:10;7449:17;:30;7370:109;;;7424:10;7404:17;:30;7370:109;7362:117;;6403:1083;;;;;;;;;;:::o;4515:972::-;4740:15;386:8;5075:33;;;;5131:12;;5166;;5201:15;;4740;;;;386:8;5131:12;5266:6;;;5265:21;;5264:28;;;;;;;;5259:1;:34;:47;;;;;;;;5245:84;;;;;;;;5228:101;;5359:8;:42;;5391:10;5387:1;:14;5359:42;;;5374:10;5370:1;:14;5359:42;5339:62;-1:-1:-1;5436:1:7;5419:18;;;5412:26;;;;5466:13;4515:972;-1:-1:-1;;;;;;;;;;;4515:972:7:o;5493:327::-;5625:12;5675:54;5685:15;547:2;5675:9;:54::i;:::-;5664:7;:65;;5663:150;;;;;5758:54;5768:15;622:3;5758:9;:54::i;:::-;5747:7;:65;;5653:160;5493:327;-1:-1:-1;;;5493:327:7:o;2091:365::-;2261:16;386:8;2321:102;2392:15;2356:32;:15;386:8;2356:32;:19;:32;:::i;:::-;:52;;;;;;;2321:12;;2356:52;;2321:102;:16;:102;:::i;:::-;2307:142;;;;;;;;;2091:365;-1:-1:-1;;;;2091:365:7:o;1260:120::-;1319:8;1371:2;1345:23;1355:9;1366:1;1345:9;:23::i;:::-;:28;;;;;;;;;1260:120;-1:-1:-1;;1260:120:7:o;1238:128:9:-;1319:7;;;1339;;;;1332:15;;;40622:220:5;40758:14;40814:3;40801:10;:16;40800:35;;40834:1;40800:35;;;-1:-1:-1;40821:10:5;40622:220::o;1468:119:7:-;1526:8;1578:2;1552:23;1562:9;1573:1;1552:9;:23::i;1060:116:9:-;1120:7;1142:8;;;;1135:16;;;;-1:-1:-1;1164:7:9;;;1060:116::o;3763:168:7:-;3921:3;3899:18;;3898:26;;3763:168::o;3228:354::-;3327:12;3398:16;3455:14;3369:9;3359:6;:19;3355:33;;;3387:1;3380:8;;;;3355:33;3438:6;3421:9;3417:28;3398:47;;3499:6;3473:12;3488:3;3473:18;3472:34;;;;;;;;3455:51;;3545:1;3532:10;:14;3531:43;;3564:10;3563:11;;3531:43;;;3550:10;3531:43;3516:59;;3228:354;;;;;;;:::o;26030:889:5:-;26181:27;26317:245;26385:11;;26410:14;26438:17;;26469:12;:57;;26506:20;;26469:57;;;26484:19;;26469:57;26540:12;26317:54;:245::i;:::-;26617:41;;26292:270;;-1:-1:-1;;;;;;26617:17:5;;;:41;;;;;26292:270;;26617:41;;;;26292:270;26617:17;:41;;;;;;;26616:42;26612:301;;;-1:-1:-1;;;;;26674:26:5;;;;;;:12;:26;;;;;;;;;:51;;;26744:65;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;26744:65:5;;;;;;;;;26612:301;;;26845:57;;;-1:-1:-1;;;;;26845:57:5;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;26845:57:5;;;;;;;;;;26030:889;;;;;:::o;40901:333::-;40964:15;40960:268;;;41018:1;40995:20;:24;;;41033:18;:22;41069:12;:20;;-1:-1:-1;;41069:20:5;;;40960:268;;;41144:1;41120:21;:25;;;41159:19;:23;41196:13;:21;;-1:-1:-1;;41196:21:5;;;40960:268;40901:333;:::o;2605:316:7:-;2764:11;2791:18;2812:42;2826:12;2840:13;2812;:42::i;:::-;2791:63;;2873:41;2883:15;2900:13;2873:9;:41::i;203:380:9:-;263:9;489:7;;485:36;;;-1:-1:-1;513:1:9;506:8;;485:36;-1:-1:-1;531:7:9;;;536:2;531;:7;551:6;;;;;;;;:12;544:20;;",
  "source": "pragma solidity ^0.4.23;\npragma experimental \"v0.5.0\";\n\nimport \"openzeppelin-solidity/contracts/math/SafeMath.sol\";\nimport \"../DBC.sol\";\nimport \"../Feeds.sol\";\nimport \"../Registry.sol\";\nimport \"./ContractForDifferenceFactory.sol\";\nimport \"./ContractForDifferenceRegistry.sol\";\nimport \"./ContractForDifferenceLibrary.sol\";\n\n\n/*\n * SOLIUM DISABLE: \n *\n *   error-reason - as if we use reasons in all revert/require's \n *      then the contract create tx will exceed the current main net block gas \n *      limit. For now we put reasons in a select few places. In the future the\n *      contract could be broken down into multiple contracts\n *\n *   security/no-send - using send instead of transfer as we'd like to log an \n *      event on failure. See each send() below.\n *\n *   security/no-block-members - we need to use 'now' in order to set a time \n *       limit.\n */\n\n /* solium-disable error-reason */\n /* solium-disable security/no-block-members */\n /* solium-disable security/no-send */\n\n/**\n * @title Contract for difference\n *\n * Contract for difference for a given market between a\n * \"buyer\" (long position) and \"seller\" (short position).\n */\ncontract ContractForDifference is DBC {\n    using SafeMath for uint;\n\n    /*\n     * Events\n     */\n\n    event LogCFDCreated(\n        address creator,\n        bytes32 market,\n        uint notionalAmountWei,\n        uint deposit\n    );\n    event LogCFDInitiated(\n        address joiner,\n        uint amountSent,\n        address buyer,\n        address seller,\n        bytes32 market,\n        uint notionalAmountWei,\n        uint strikePrice,\n        uint buyerDepositBalance,\n        uint sellerDepositBalance\n    );\n    event LogCFDTransferPosition(address oldOwner, address newOwner);\n    event LogCFDCanceledNew(address party, uint amount, bytes32 market);\n    event LogCFDStrikePriceUpdated(address party, uint newStrikePrice);\n\n    event LogCFDSale(\n        address party,\n        uint saleStrikePrice,\n        uint timeLimit\n    );\n    event LogCFDSaleCancelled(address party);\n    event LogCFDSaleUpdated(address party, uint newPrice);\n    event LogCFDSold(address to, address by, uint newNotional, uint sellerAmount, uint buyerDeposit, bytes32 market);\n\n    event LogCFDSendCollateralFailure(address receiver, uint amount);\n    event LogCFDWithrewUnsent(address withdrawer);\n\n    event LogCFDPartyBalanceUpdate(address party, uint amount, bool isWithdraw, uint newBalance, bytes32 market);\n    event LogCFDTransferFunds(address receiver, uint amount);\n\n    event LogCFDClosed(address winner, uint buyerCollateral, uint sellerCollateral, bytes32 market);\n    event LogCFDForceTerminated(address terminator, uint terminatorAmount, address otherParty, uint otherPartyAmount, bytes32 market);\n    event LogCFDUpgraded(address newCFD);\n    event LogCFDRemainingBalanceUnexpected(uint remainder);\n\n    enum Status {\n        CREATED,\n        INITIATED,\n        SALE,\n        CLOSED\n    }\n\n    /*\n     * Constants\n     */\n\n    string constant REASON_NOTIONAL_TOO_LOW = \"Notional below minimum\";\n    string constant REASON_FEES_NOT_ENOUGH = \"Not enough sent to cover fees\";\n    string constant REASON_COLLATERAL_RANGE_FAILED = \"collateralInRange false\";\n    string constant REASON_MUST_NOT_BE_INITIATED = \"Must not be initiated\";\n    string constant REASON_MUST_NOT_BE_CLOSED = \"Must not be closed\";\n    string constant REASON_MUST_NOT_BE_PARTY = \"Contract party can't call this\";\n    string constant REASON_MUST_BE_INITIATED = \"Must be initiated\";\n    string constant REASON_MUST_BE_SELLER = \"msg.sender must be seller\";\n    string constant REASON_MUST_NOT_BE_SELLER = \"msg.sender must not be seller\";\n    string constant REASON_MUST_BE_ON_SALE = \"Must be on sale\";\n    string constant REASON_MUST_BE_POSITIVE_PRICE = \"Price must be > 0\";\n    string constant REASON_ONLY_CONTRACT_PARTIES = \"Only contract parties can do this\";\n    string constant REASON_MUST_BE_ACTIVE = \"Must be active\";\n    string constant REASON_MARKET_PRICE_RANGE_FAILED = \"collateralInRange false\";\n    string constant REASON_WITHDRAW_NOT_ENOUGH = \"Can't withdraw more then available\";\n    string constant REASON_AMOUNT_NOT_ENOUGH = \"Amount not enough\";\n    string constant REASON_UPGRADE_ALREADY_SET = \"msg.sender already called\";\n    string constant REASON_UPGRADE_ALREADY_LATEST = \"Already at latest version\";\n    string constant REASON_TRANSFER_TO_EXISTING_PARTY = \"Can't transfer to existing party\";\n\n    uint public constant FORCE_TERMINATE_PENALTY_PERCENT = 5;\n    uint public constant MINIMUM_NOTIONAL_AMOUNT_WEI = 10 finney;\n\n\n    /*\n     * State variables\n     */\n\n    address public buyer;                           // long\n    address public seller;                          // short\n    bytes32 public market;\n\n    uint public notionalAmountWei;\n    uint public buyerInitialNotional;\n    uint public sellerInitialNotional;\n\n    // format of strike prices as in Feeds contract - see Feeds.decimals()\n    uint public strikePrice;\n    uint public buyerInitialStrikePrice;\n    uint public sellerInitialStrikePrice;\n\n    // balances of amounts actually deposited/withdrawn from the contract\n    uint public buyerDepositBalance;\n    uint public sellerDepositBalance;\n\n    mapping (address => uint) public withdrawable;\n\n    uint public buyerSaleStrikePrice;\n    uint public buyerSaleTimeLimit;\n\n    uint public sellerSaleStrikePrice;\n    uint public sellerSaleTimeLimit;\n\n    bool public buyerSelling;\n    bool public sellerSelling;\n\n    bool public initiated = false;\n    bool public closed = false;\n    bool public terminated;\n\n    // set to true for a short period of time - when second party has called\n    // upgrade and upgrade has called the new factory to do the work\n    bool public upgradeable = false;\n\n    // set to first party that calls upgrade\n    // enables identification of who called and that it has been called once\n    address public upgradeCalledBy = 0x0;\n\n    address public cfdRegistryAddr;\n    address public feedsAddr;\n\n    Registry public registry;\n\n    /*\n     * Functions\n     */\n\n    constructor() public {}\n\n    /**\n     * @dev Contract has been initiated (has 2 parties) and not yet terminated.\n     * @return true if contract is active\n     */\n    function isActive() public view returns (bool) {\n        return initiated == true && closed == false;\n    }\n\n    /**\n     * @dev Is buyer / long party selling.\n     * @return true if buyer has side up for sale\n     */\n    function isBuyerSelling() public view returns (bool) {\n        return buyerSelling &&\n            (buyerSaleTimeLimit == 0 || now < buyerSaleTimeLimit);\n    }\n\n    /**\n     * @dev Is seller / short party selling.\n     * @return true if seller has side up for sale\n     */\n    function isSellerSelling() public view returns (bool) {\n        return sellerSelling &&\n            (sellerSaleTimeLimit == 0 || now < sellerSaleTimeLimit);\n    }\n\n    /**\n     * @dev If the given party is selling one side of the contract.\n     * @return true if the given party is selling\n     */\n    function isSelling(address _party) public view returns (bool) {\n        return (_party == buyer && isBuyerSelling()) ||\n            (_party == seller && isSellerSelling());\n    }\n\n    /**\n     * @dev Check if the given address is one of the 2 parties of the contract.\n     * @param _party Address to check\n     * @return true if _party is either the buyer or seller.\n     */\n    function isContractParty(address _party) public view returns (bool) {\n        return _party == buyer || _party == seller;\n    }\n\n    /**\n     * @dev Create a new CFDinstance specifying the terms of the contract.\n     *\n     * Fee of 0.3% of the notional is taken.\n     *\n     * Therefore the intial deposit is msg.value minus these fees.\n     *\n     * @param _registryAddr Registry contract address\n     * @param _cfdRegistryAddr CFD Registry contract address\n     * @param _feedsAddr Feeds address\n     * @param _partyAddr Address of the party creating the contract\n     * @param _marketId Contract is for prices on this market\n     * @param _strikePrice Agreed initial price for the contract (compatible\n                with Feeds stored price - see Feeds.decimals() adjustment)\n     * @param _notionalAmountWei Contract amount\n     * @param _isBuyer Flag indicating if the contract creator wants to take the\n     *            buyer (true) or the seller side (false).\n     */\n    function create(\n        address _registryAddr,\n        address _cfdRegistryAddr,\n        address _feedsAddr,\n        address _partyAddr, // msg.sender calling the Factory\n        bytes32 _marketId,\n        uint _strikePrice,\n        uint _notionalAmountWei,\n        bool _isBuyer\n    )\n        public\n        payable\n        pre_cond(_notionalAmountWei >= MINIMUM_NOTIONAL_AMOUNT_WEI, REASON_NOTIONAL_TOO_LOW)\n    {\n        uint fees = ContractForDifferenceLibrary.creatorFee(_notionalAmountWei);\n        if (msg.value <= fees)\n            revert(REASON_FEES_NOT_ENOUGH);\n\n        uint collateralSent = msg.value - fees;\n        if (!ContractForDifferenceLibrary.collateralInRange(_notionalAmountWei, collateralSent))\n            revert(REASON_COLLATERAL_RANGE_FAILED);\n\n        if (_isBuyer) {\n            buyer = _partyAddr;\n            buyerDepositBalance = collateralSent;\n        } else {\n            seller = _partyAddr;\n            sellerDepositBalance = collateralSent;\n        }\n\n        market = _marketId;\n        notionalAmountWei = _notionalAmountWei;\n        buyerInitialNotional = _notionalAmountWei;\n        sellerInitialNotional = _notionalAmountWei;\n\n        strikePrice = _strikePrice;\n        buyerInitialStrikePrice = _strikePrice;\n        sellerInitialStrikePrice = _strikePrice;\n\n        cfdRegistryAddr = _cfdRegistryAddr;\n        feedsAddr = _feedsAddr;\n        registry = Registry(_registryAddr);\n\n        emit LogCFDCreated(\n            _partyAddr,\n            market,\n            notionalAmountWei,\n            msg.value\n        );\n    }\n\n    /**\n     * @dev Create a new CFDinstance from a previous CFD instance. This is part\n     *      of the upgrade process (see CFD.upgrade()).\n     *\n     * @param _cfdAddr Address of the existing / old CFD\n     */\n    function createByUpgrade(\n        address _cfdAddr,\n        address _registryAddr,\n        address _cfdRegistryAddr,\n        address _feedsAddr\n    )\n        public\n        payable\n    {\n        ContractForDifference oldCfd = ContractForDifference(_cfdAddr);\n\n        market = oldCfd.market();\n        notionalAmountWei = oldCfd.notionalAmountWei();\n        strikePrice = oldCfd.strikePrice();\n        buyer = oldCfd.buyer();\n        seller = oldCfd.seller();\n\n        buyerDepositBalance = oldCfd.buyerDepositBalance();\n        buyerInitialNotional = oldCfd.buyerInitialNotional();\n        buyerInitialStrikePrice = oldCfd.buyerInitialStrikePrice();\n\n        sellerDepositBalance = oldCfd.sellerDepositBalance();\n        sellerInitialNotional = oldCfd.sellerInitialNotional();\n        sellerInitialStrikePrice = oldCfd.sellerInitialStrikePrice();\n\n        cfdRegistryAddr = _cfdRegistryAddr;\n        registry = Registry(_registryAddr);\n        feedsAddr = _feedsAddr;\n\n        initiated = true;\n\n        ContractForDifferenceRegistry(cfdRegistryAddr).registerParty(seller);\n    }\n\n    /**\n     * Returns an array with all the attributes of the contract\n     * (Had to split in 3 functions because of the stack limit)\n     * Max number of return values == 8\n     */\n    function getCfdAttributes()\n        public\n        view\n        returns (address, address, bytes32, uint, uint, bool, bool, Status)\n    {\n        return (\n            buyer,\n            seller,\n            market,\n            strikePrice,\n            notionalAmountWei,\n            buyerSelling,\n            sellerSelling,\n            status()\n        );\n    }\n    function getCfdAttributes2()\n        public\n        view\n        returns (uint, uint, uint, uint, uint, uint, uint, uint)\n    {\n        return (\n            buyerInitialNotional,\n            sellerInitialNotional,\n            buyerDepositBalance,\n            sellerDepositBalance,\n            buyerSaleStrikePrice,\n            sellerSaleStrikePrice,\n            buyerInitialStrikePrice,\n            sellerInitialStrikePrice\n        );\n    }\n    function getCfdAttributes3()\n        public\n        view\n        returns (bool, address)\n    {\n        return (\n            terminated,\n            upgradeCalledBy\n        );\n    }\n\n    /**\n     * @dev Counterparty deposits their funds into the contract thereby joining\n     * and initiating the contract.\n     *\n     * Fee of 0.5% of the notional is taken.\n     *\n     * Therefore the intial deposit is msg.value minus these fees.\n     */\n    function deposit()\n        external\n        payable\n        pre_cond(initiated == false, REASON_MUST_NOT_BE_INITIATED)\n        pre_cond(closed == false, REASON_MUST_NOT_BE_CLOSED) // cancelNew has not been called\n        pre_cond(isContractParty(msg.sender) == false, REASON_MUST_NOT_BE_PARTY) // reject contract creator depositing\n    {\n        uint joinerFees = ContractForDifferenceLibrary.joinerFee(notionalAmountWei);\n        if (msg.value <= joinerFees)\n            revert(REASON_FEES_NOT_ENOUGH);\n\n        uint collateralSent = msg.value - joinerFees;\n        if (!ContractForDifferenceLibrary.collateralInRange(notionalAmountWei, collateralSent))\n            revert(REASON_COLLATERAL_RANGE_FAILED);\n\n        if (buyer == 0x0) {\n            buyer = msg.sender;\n            buyerDepositBalance = collateralSent;\n        } else {\n            seller = msg.sender;\n            sellerDepositBalance = collateralSent;\n        }\n\n        uint feeAmount = joinerFees + ContractForDifferenceLibrary.creatorFee(notionalAmountWei);\n        registry.getFees().transfer(feeAmount);\n\n        initiated = true;\n        ContractForDifferenceRegistry(cfdRegistryAddr).registerParty(msg.sender);\n        emit LogCFDInitiated(\n            msg.sender,\n            msg.value,\n            buyer,\n            seller,\n            market,\n            notionalAmountWei,\n            strikePrice,\n            buyerDepositBalance,\n            sellerDepositBalance\n        );\n    }\n\n    /**\n     * @dev Cancels a newly created contract refunding the balance to the party\n     *      that created the contract. This can only be called before a contract\n     *      is initiated. ie. between the create() and deposit() calls.\n     */\n    function cancelNew()\n        external\n        pre_cond(initiated == false, REASON_MUST_NOT_BE_INITIATED)\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\n    {\n        uint amountSent = address(this).balance;\n        if (!msg.sender.send(amountSent)) {\n            withdrawable[msg.sender] = amountSent;\n            emit LogCFDSendCollateralFailure(msg.sender, amountSent);\n        } else {\n            emit LogCFDTransferFunds(msg.sender, amountSent);\n        }\n        closed = true;\n        emit LogCFDCanceledNew(msg.sender, amountSent, market);\n    }\n\n    /**\n     * @dev Party adds more funds to the contract thereby increasing their\n     *      deposit balance.\n     */\n    function topup()\n        external\n        payable\n        pre_cond(msg.value >= 1, REASON_AMOUNT_NOT_ENOUGH)\n        pre_cond(initiated == true, REASON_MUST_BE_INITIATED)\n        pre_cond(closed == false, REASON_MUST_NOT_BE_CLOSED)\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\n        pre_cond(isSelling(msg.sender) == false, REASON_MUST_NOT_BE_SELLER)\n    {\n        bool isBuyer = msg.sender == buyer;\n        uint newDepositBalance = (isBuyer ? \n            buyerDepositBalance : \n            sellerDepositBalance\n        ).add(msg.value);\n\n        // check topup doesn't make collateral exceed the maximum\n        if (!ContractForDifferenceLibrary.collateralInRange(notionalAmountWei, newDepositBalance))\n            revert(REASON_COLLATERAL_RANGE_FAILED);\n\n        if (isBuyer) {\n            buyerDepositBalance = newDepositBalance;\n        } else {\n            sellerDepositBalance = newDepositBalance;\n        }\n\n        emit LogCFDPartyBalanceUpdate(msg.sender, msg.value, false, newDepositBalance, market);\n    }\n\n    /**\n     * @dev Party withdraws funds from the contract.\n     *      They can only withdraw down to an amount that leaves the collateral\n     *      to notional difference at 20% or more.\n     * @param _withdrawAmount Amount to withdraw from the deposits balance.\n     */\n    function withdraw(uint _withdrawAmount)\n        external\n        assertWithdrawPreCond(_withdrawAmount)\n    {\n        bool isBuyer = msg.sender == buyer;\n        uint currentDepositBal = isBuyer ? buyerDepositBalance : sellerDepositBalance;\n\n        // first simple check that can't withdraw more then deposited\n        if (_withdrawAmount > currentDepositBal)\n            revert(REASON_WITHDRAW_NOT_ENOUGH);\n\n        // second a more precise check that the collateral at new balance will remain above the min\n        uint newDepositBal = currentDepositBal - _withdrawAmount;\n        uint marketPrice = latestPrice();\n        if (!marketPriceInRange(\n            marketPrice,\n            isBuyer ? newDepositBal : buyerDepositBalance,\n            isBuyer ? sellerDepositBalance : newDepositBal,\n            strikePrice // unchanged on withdraw\n        )) {\n            revert(REASON_MARKET_PRICE_RANGE_FAILED);\n        }\n\n        uint collateral = ContractForDifferenceLibrary.calculateCollateralAmount(\n            strikePrice,\n            marketPrice,\n            notionalAmountWei,\n            newDepositBal,\n            isBuyer\n        );\n\n        if (!ContractForDifferenceLibrary.collateralInRange(notionalAmountWei, collateral)) {\n            revert(REASON_COLLATERAL_RANGE_FAILED);\n        }\n\n        if (!msg.sender.send(_withdrawAmount)) {\n            withdrawable[msg.sender] = _withdrawAmount;\n            emit LogCFDSendCollateralFailure(msg.sender, _withdrawAmount);\n        } else {\n            emit LogCFDTransferFunds(msg.sender, _withdrawAmount);\n        }\n\n        if (isBuyer) {\n            buyerDepositBalance = newDepositBal;\n        } else {\n            sellerDepositBalance = newDepositBal;\n        }\n\n        emit LogCFDPartyBalanceUpdate(msg.sender, _withdrawAmount, true, newDepositBal, market);\n    }\n\n    /* NOTE: Split off into modifier to work around 'stack too deep' error */\n    modifier assertWithdrawPreCond(uint _withdrawAmount) \n    {\n        require(_withdrawAmount >= 1);\n        require(initiated == true);\n        require(closed == false);\n        require(isContractParty(msg.sender));\n        require(isSelling(msg.sender) == false);\n        _;\n    }\n\n    /**\n     * @dev Parties can transfer contract ownership to another address by\n     *      calling this function.\n     * @param _newAddress Addreess of the new party to swap in.\n     */\n    function transferPosition(address _newAddress)\n        external\n        pre_cond(closed == false, REASON_MUST_NOT_BE_CLOSED)\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\n        pre_cond(isContractParty(_newAddress) == false, REASON_MUST_NOT_BE_PARTY)\n        pre_cond(isSelling(msg.sender) == false, REASON_MUST_NOT_BE_SELLER)\n    {\n        if (msg.sender == buyer) buyer = _newAddress;\n        if (msg.sender == seller) seller = _newAddress;\n        if (msg.sender == upgradeCalledBy) upgradeCalledBy = 0x0;\n        ContractForDifferenceRegistry(cfdRegistryAddr).registerParty(_newAddress);\n        emit LogCFDTransferPosition(msg.sender, _newAddress);\n    }\n\n    /**\n     * @dev Position in a contract can be sold to another party. This function\n     *      makes the callers side available for sale. A party can buy the side\n     *      with the buy function.\n     * @param _desiredStrikePrice Sellers desired sell strike price\n     * @param _timeLimit Sale available until this time in UNIX epoch seconds\n     *                  (< now for no limit)\n     */\n    function sellPrepare(uint _desiredStrikePrice, uint _timeLimit)\n        external\n        payable\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\n        // reject already marked selling by the caller\n        pre_cond(isSelling(msg.sender) == false, REASON_MUST_NOT_BE_SELLER)\n        pre_cond(_desiredStrikePrice > 0, REASON_MUST_BE_POSITIVE_PRICE)\n    {\n        // mark side on sale\n        uint timeLimit = timeLimitFutureOrZero(_timeLimit);\n        if (msg.sender == buyer) {\n            buyerSelling = true;\n            buyerSaleStrikePrice = _desiredStrikePrice;\n            buyerSaleTimeLimit = timeLimit;\n        } else if (msg.sender == seller) {\n            sellerSelling = true;\n            sellerSaleStrikePrice = _desiredStrikePrice;\n            sellerSaleTimeLimit = timeLimit;\n        }\n\n        ContractForDifferenceRegistry(cfdRegistryAddr).registerSale(msg.sender);\n        emit LogCFDSale(\n            msg.sender,\n            _desiredStrikePrice,\n            timeLimit\n        );\n    }\n\n    /**\n     * @dev Seller can update the price on the sale.\n     */\n    function sellUpdate(\n        uint _newPrice\n    )\n        external\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\n        pre_cond(isSelling(msg.sender), REASON_MUST_BE_SELLER)\n        pre_cond(_newPrice > 0, REASON_MUST_BE_POSITIVE_PRICE)\n    {\n        if (msg.sender == buyer) {\n            buyerSaleStrikePrice = _newPrice;\n        } else if (msg.sender == seller) {\n            sellerSaleStrikePrice = _newPrice;\n        }\n        emit LogCFDSaleUpdated(msg.sender, _newPrice);\n    }\n\n    /**\n     * @dev Party can update the strike price of an non-initialized contract\n     */\n    function changeStrikePrice(\n        uint _newStrikePrice\n    )\n        external\n        payable\n        pre_cond(initiated == false, REASON_MUST_NOT_BE_INITIATED)\n        pre_cond(closed == false, REASON_MUST_NOT_BE_CLOSED)\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\n        pre_cond(_newStrikePrice > 0, REASON_MUST_BE_POSITIVE_PRICE)\n    {\n        strikePrice = _newStrikePrice;\n        buyerInitialStrikePrice = _newStrikePrice;\n        sellerInitialStrikePrice = _newStrikePrice;\n        emit LogCFDStrikePriceUpdated(msg.sender, _newStrikePrice);\n    }\n\n    /**\n     * @dev Cancel the for sale status setup by sellPrepare()\n     */\n    function sellCancel()\n        external\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\n        pre_cond(isSelling(msg.sender), REASON_MUST_BE_SELLER)\n    {\n        clearSale(msg.sender == buyer);\n        emit LogCFDSaleCancelled(msg.sender);\n    }\n\n    /**\n     * @dev Buy the side in the contract that is for sale.\n     *\n     * Fee of 0.5% of the notional is taken.\n     *\n     * @param _buyBuyerSide Buying the buyer side or the seller side?\n     */\n    function buy(bool _buyBuyerSide)\n        external\n        payable\n        assertBuyPreCond(_buyBuyerSide)\n    {\n        uint fees = ContractForDifferenceLibrary.joinerFee(notionalAmountWei);\n        if (msg.value <= fees)\n            revert(REASON_FEES_NOT_ENOUGH);\n\n        registry.getFees().transfer(fees);\n\n        // check sent collateral falls in the allowable range\n        uint collateralSent = msg.value.sub(fees);\n        if (!ContractForDifferenceLibrary.collateralInRange(notionalAmountWei, collateralSent))\n            revert(REASON_COLLATERAL_RANGE_FAILED);\n\n        uint marketPrice = latestPrice();\n        uint newStrikePrice = _buyBuyerSide ?\n            buyerSaleStrikePrice :\n            sellerSaleStrikePrice;\n\n        // check new parameters fall in the allowable range\n        if (!marketPriceInRange(\n            marketPrice,\n            _buyBuyerSide ? collateralSent : buyerDepositBalance,\n            _buyBuyerSide ? sellerDepositBalance : collateralSent,\n            newStrikePrice // buying at this strike price\n        )) {\n            revert(REASON_MARKET_PRICE_RANGE_FAILED);\n        }\n\n        // transfer to selling party and to fees address\n        address sellingParty = _buyBuyerSide ? buyer : seller;\n        uint sellingPartyCollateral = buyTransferFunds(\n            _buyBuyerSide,\n            newStrikePrice,\n            sellingParty\n        );\n\n        // set new party and balances\n        uint remainingPartyDeposits = address(this).balance.sub(collateralSent);\n\n        // new notional amount value\n        uint newNotional = ContractForDifferenceLibrary.calculateNewNotional(\n            notionalAmountWei,\n            strikePrice,\n            newStrikePrice\n        );\n\n        if (_buyBuyerSide) {\n            buyer = msg.sender;\n            buyerDepositBalance = collateralSent;\n            buyerInitialStrikePrice = newStrikePrice;\n            buyerInitialNotional = newNotional;\n            sellerDepositBalance = remainingPartyDeposits;\n        } else {\n            seller = msg.sender;\n            sellerDepositBalance = collateralSent;\n            sellerInitialStrikePrice = newStrikePrice;\n            sellerInitialNotional = newNotional;\n            buyerDepositBalance = remainingPartyDeposits;\n        }\n\n        strikePrice = newStrikePrice;\n        notionalAmountWei = newNotional;\n\n        clearSale(_buyBuyerSide);\n\n        // clean up upgradeCalledBy if the departing party had set that\n        if (upgradeCalledBy == sellingParty) {\n            upgradeCalledBy = 0x0;\n        }\n\n        ContractForDifferenceRegistry(cfdRegistryAddr).registerParty(msg.sender);\n        emit LogCFDSold(msg.sender, sellingParty, newNotional, sellingPartyCollateral, msg.value, market);\n    }\n\n    /* NOTE: Split off into modifier to work around 'stack too deep' error */\n    modifier assertBuyPreCond(bool _buyBuyerSide) \n    {\n        require(isActive());\n        require(isSelling(_buyBuyerSide ? buyer : seller));\n        require(isContractParty(msg.sender) == false);\n        _;\n    }\n\n    /**\n     * Does all transfers of funds related to the buy().\n     *\n     * Transfer logic split off in seperate function ONLY to workaround\n     * 'Stack too deep' limit.\n     */\n    function buyTransferFunds(\n        bool buyBuyerSide,\n        uint newStrikePrice,\n        address sellingParty\n    )\n        private\n        returns (uint sellingPartyCollateral)\n    {\n        // determine collateral amount to send to the selling party\n        sellingPartyCollateral = ContractForDifferenceLibrary.calculateCollateralAmount(\n            strikePrice,\n            newStrikePrice,\n            notionalAmountWei,\n            buyBuyerSide ? buyerDepositBalance : sellerDepositBalance,\n            buyBuyerSide\n        );\n\n        // send money to selling party\n        if (!sellingParty.send(sellingPartyCollateral)) {\n            withdrawable[sellingParty] = sellingPartyCollateral;\n            emit LogCFDSendCollateralFailure(sellingParty, sellingPartyCollateral);\n        } else {\n            emit LogCFDTransferFunds(sellingParty, sellingPartyCollateral);\n        }\n    }\n\n    /**\n     * @dev Daemons will call this routine when the market price has moved\n     *      enough that the closeRatio for this contract has been reached.\n     *      It can actually be called by anyone who is willing to pay the gas\n     *      for the liquidate. But if the market has moved past the liquidate\n     *      threshold the call will be rejected.\n     *\n     * This will disolve the contract and return each parties balance of\n     * collateral.\n     */\n    function liquidate()\n        external\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\n    {\n        uint marketPrice = latestPrice();\n\n        // #11 double check the 5% threshold was crossed, if not then REJECT\n        // (can only liquidate if out of range)\n        require(\n            !marketPriceInRange(\n                marketPrice,\n                buyerDepositBalance,\n                sellerDepositBalance,\n                strikePrice\n            ), \n            \"Liquidate threshold not yet reached\"\n        );\n\n        // fetch one of the cutoffs to determine which is the winner\n        uint buyerCutOff = ContractForDifferenceLibrary.cutOffPrice(\n            notionalAmountWei,\n            buyerDepositBalance,\n            strikePrice,\n            true\n        );\n\n        // if buyer cutoff still in range then buyer wins, otherwise seller\n        bool winnerIsBuyer = marketPrice > buyerCutOff;\n        address winner = winnerIsBuyer ? buyer : seller;\n\n        // winner takes all\n        uint remaining = address(this).balance;\n        if (!winner.send(remaining)) {\n            withdrawable[winner] = remaining;\n            emit LogCFDSendCollateralFailure(winner, remaining);\n        } else {\n            emit LogCFDTransferFunds(winner, remaining);\n        }\n\n        closed = true;\n\n        emit LogCFDClosed(\n            winner,\n            winnerIsBuyer ? remaining : 0,\n            winnerIsBuyer ? 0 : remaining,\n            market\n        );\n    }\n\n    /**\n     * Force terminate executed by one party who will penalised 5% of their\n     * collateral. Then penalty will be sent to the counterparty.\n     */\n    function forceTerminate()\n        external\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\n    {\n        uint marketPrice = latestPrice();\n        bool forcingPartyIsBuyer = msg.sender == buyer;\n\n        uint buyerCollateral = ContractForDifferenceLibrary.calculateCollateralAmount(\n            strikePrice,\n            marketPrice,\n            notionalAmountWei,\n            buyerDepositBalance,\n            true\n        );\n        uint sellerCollateral = ContractForDifferenceLibrary.calculateCollateralAmount(\n            strikePrice,\n            marketPrice,\n            notionalAmountWei,\n            sellerDepositBalance,\n            false\n        );\n\n        //\n        // calculate and check the remainder - it should be equal to zero\n        //\n        // if not expected log the event and transfer the remainder to fees - it\n        //     will be sorted out manually\n        //\n        uint balanceRemainder = address(this).balance.sub(buyerCollateral).sub(sellerCollateral);\n        if (balanceRemainder != 0) {\n            emit LogCFDRemainingBalanceUnexpected(balanceRemainder);\n        }\n        registry.getFees().transfer(balanceRemainder);\n\n        // penalise the force terminator 5% and give it to the counterparty\n        uint penalty = ContractForDifferenceLibrary.percentOf(\n            forcingPartyIsBuyer ? buyerCollateral : sellerCollateral,\n            FORCE_TERMINATE_PENALTY_PERCENT\n        );\n        if (forcingPartyIsBuyer) {\n            buyerCollateral = buyerCollateral.sub(penalty);\n            sellerCollateral = sellerCollateral.add(penalty);\n        } else {\n            buyerCollateral = buyerCollateral.add(penalty);\n            sellerCollateral = sellerCollateral.sub(penalty);\n        }\n\n        // Send collateral amounts back each party.\n        //\n        // If a send fails then log the failure and make the amount available\n        // for withdrawal.\n        //\n        // NOTE: send here gets only 2100 gas so these calls are not at risk of\n        // reentrancy\n        if (!buyer.send(buyerCollateral)) {\n            withdrawable[buyer] = buyerCollateral;\n            emit LogCFDSendCollateralFailure(buyer, buyerCollateral);\n        } else {\n            emit LogCFDTransferFunds(buyer, buyerCollateral);\n        }\n\n        if (!seller.send(sellerCollateral)) {\n            withdrawable[seller] = sellerCollateral;\n            emit LogCFDSendCollateralFailure(seller, sellerCollateral);\n        } else {\n            emit LogCFDTransferFunds(seller, sellerCollateral);\n        }\n\n        terminated = true;\n        closed = true;\n\n        if (forcingPartyIsBuyer)\n            emit LogCFDForceTerminated(buyer, buyerCollateral, seller, sellerCollateral, market);\n        else\n            emit LogCFDForceTerminated(seller, sellerCollateral, buyer, buyerCollateral, market);\n    }\n\n    /**\n     * @dev Upgrade contract to a new version. This involves creating a new CFD\n     *      at the latest contract set - transferring over all properties and\n     *      value from this one to the new one.\n     *      An upgrade requires a call to this function from both parties. Then\n     *      upgrade will happen when the second party makes the call.\n     */\n    function upgrade()\n        external\n        pre_cond(isContractParty(msg.sender), REASON_ONLY_CONTRACT_PARTIES)\n        pre_cond(isActive(), REASON_MUST_BE_ACTIVE)\n        pre_cond(isSelling(msg.sender) == false, REASON_MUST_NOT_BE_SELLER)\n        pre_cond(msg.sender != upgradeCalledBy, REASON_UPGRADE_ALREADY_SET)\n        pre_cond(registry.allCFDs(this) != registry.getCFDFactoryLatest(), REASON_UPGRADE_ALREADY_LATEST)\n    {\n        // 1st call to initiate upgrade process\n        if (upgradeCalledBy == 0x0) {\n            upgradeCalledBy = msg.sender;\n            return;\n        }\n\n        // if here then then this is the 2nd call, invoked by the opposite, so\n        // kick off the upgrade process\n        upgradeable = true;\n        address cfdFactoryLatest = registry.getCFDFactoryLatest();\n        address newCfd = ContractForDifferenceFactory(cfdFactoryLatest).\n            createByUpgrade.value(address(this).balance)();\n        upgradeable = false;\n        closed = true;\n\n        emit LogCFDUpgraded(newCfd);\n    }\n\n    /**\n     * @dev Derive status from the state variables.\n     * @return Status reflecting the current state.\n     */\n    function status()\n        public\n        view\n        returns (Status)\n    {\n        if (closed == true)\n            return Status.CLOSED;\n        else if (initiated == false)\n            return Status.CREATED;\n        else if (isBuyerSelling() || isSellerSelling())\n            return Status.SALE;\n        else\n            return Status.INITIATED;\n    }\n\n    /**\n     * @dev Withdraw funds that failed to send in a previous a transaction.\n     *\n     * See event LogCFDSendCollateralFailure.\n     */\n    function withdrawUnsent()\n        external\n        pre_cond(withdrawable[msg.sender] > 0, REASON_WITHDRAW_NOT_ENOUGH)\n    {\n        uint amount = withdrawable[msg.sender];\n        withdrawable[msg.sender] = 0;\n        msg.sender.transfer(amount);\n        emit LogCFDWithrewUnsent(msg.sender);\n    }\n\n    /**\n     * Get the latest read for the market of this CFD.\n     */\n    function latestPrice()\n        internal\n        view\n        returns (uint price)\n    {\n        uint marketPrice;\n        (marketPrice, ) = Feeds(feedsAddr).read(market);\n        return marketPrice;\n    }\n\n    /**\n     * @dev Checks if given parameters and given market price result in a price\n     *      inside an allowable range. This range is defined by the ContractForDifferenceLibrary.cutOffPrice\n     *      function formulas. The idea is that as parameters change - leverage,\n     *      market price etc., we must check the change doesn't result in a\n     *      liquidation event due to too little collateral.\n     *\n     * @param _marketPrice Current market price\n     * @return true if in range; false if not\n     */\n\n    function marketPriceInRange(\n        uint _marketPrice,\n        uint _buyerDepositBalance,\n        uint _sellerDepositBalance,\n        uint _strikePrice\n    )\n        public\n        view\n        returns (bool inRange)\n    {\n        uint buyerCutOff = ContractForDifferenceLibrary.cutOffPrice(\n            notionalAmountWei,\n            _buyerDepositBalance,\n            _strikePrice,\n            true\n        );\n        uint sellerCutOff = ContractForDifferenceLibrary.cutOffPrice(\n            notionalAmountWei,\n            _sellerDepositBalance,\n            _strikePrice,\n            false\n        );\n        inRange = _marketPrice > buyerCutOff && _marketPrice < sellerCutOff;\n    }\n\n   /**\n     * @dev Calculate new notional amount after a side has been sold at a new\n     *      strike price.\n     *\n     * Formula is:\n     *  N2 = N1 * S2 / S1\n     * Where:\n     *  N1 = previous notional\n     *  S1 = previous strike price\n     *  S2 = sale strike price\n     *\n     * @param _oldNotional Existing notional.\n     * @param _oldStrikePrice Existing strike price.\n     * @param _newStrikePrice New / Sale strike price.\n     * @return newNotional Result of the calculation.\n     */\n    function calculateNewNotional(\n        uint _oldNotional,\n        uint _oldStrikePrice,\n        uint _newStrikePrice\n    )\n        public\n        pure\n        returns (uint newNotional)\n    {\n        newNotional = ContractForDifferenceLibrary.calculateNewNotional(\n            _oldNotional,\n            _oldStrikePrice,\n            _newStrikePrice\n        );\n    }\n\n    /**\n     * @dev Calculate the collateral amount for one party given the current\n     *      market price and original strike price, notional amount and the\n     *      amount the party has deposited into the contract.\n     *\n     * @param _marketPrice Current market price\n     * @param _strikePrice CFD strike price\n     * @param _notionalAmount CFD notional amount\n     * @param _depositBalance Balances of deposits into the contract\n     * @param _isBuyer Buyer or Seller / Long or short party?\n     *\n     * @return collateral Amount of collateral for the party\n     */\n    function calculateCollateralAmount(\n        uint _strikePrice,\n        uint _marketPrice,\n        uint _notionalAmount,\n        uint _depositBalance,\n        bool _isBuyer\n    )\n        public\n        pure\n        returns (uint collateral)\n    {\n        collateral = ContractForDifferenceLibrary.calculateCollateralAmount(\n            _strikePrice,\n            _marketPrice,\n            _notionalAmount,\n            _depositBalance,\n            _isBuyer\n        );\n    }\n\n    /**\n     * @dev Calculate the cut off price for buyer or seller.\n     *\n     * This is the price that if passed would raise a liquidation event.\n     *\n     * Base Formulas are:\n     *     Buyer:  1.05 * S - depositBalanceLong  * S / N\n     *     Seller: 0.95 * S + depositBalanceShort * S / N\n     *\n     * However for Solidity we need to adjust parts by FACTOR_UINT to ensure\n     * no fractions.\n     *\n     * @param _notionalAmountWei Contract notional amount\n     * @param _depositBalance Balance of deposits for one party\n     *\n     * @return cut off price\n     */\n    function cutOffPrice(\n        uint _notionalAmountWei,\n        uint _depositBalance,\n        uint _strikePrice,\n        bool _calcForBuyerSide\n    )\n        public\n        pure\n        returns (uint price)\n    {\n        price = ContractForDifferenceLibrary.cutOffPrice(\n            _notionalAmountWei,\n            _depositBalance,\n            _strikePrice,\n            _calcForBuyerSide\n        );\n    }\n\n    /**\n     * Creator fee - 0.3% of notional.\n     */\n    function creatorFee(uint _notional) public pure returns (uint fee) {\n        fee = ContractForDifferenceLibrary.creatorFee(_notional);\n    }\n\n    /**\n     * Joiner (deposit or buy) percentage fee - 0.5% of notional.\n     */\n    function joinerFee(uint _notional) public pure returns (uint fee) {\n        fee = ContractForDifferenceLibrary.joinerFee(_notional);\n    }\n\n    /**\n     * @dev Calculate the change in contract value based on the price change.\n     * @param _currentPrice Current market price\n     */\n    function changeInWei(\n        uint _strikePrice,\n        uint _currentPrice,\n        uint _notionalAmount\n    )\n        public\n        pure\n        returns (uint change)\n    {\n        change = ContractForDifferenceLibrary.changeInWei(\n            _strikePrice,\n            _currentPrice,\n            _notionalAmount\n        );\n    }\n\n    /**\n     * @dev Return a percentage change comparing a value with a new value.\n     * @param _value The existing value to compare against\n     * @param _newValue The new value to compare the change against\n     * @return Percentage change (eg. _value = 100, _newValue = 90 then return 10)\n     */\n    function percentChange(uint _value, uint _newValue)\n        public\n        pure\n        returns (uint percent)\n    {\n        percent = ContractForDifferenceLibrary.percentChange(_value, _newValue);\n    }\n\n    /**\n     * @dev Return a percentage of a given amount.\n     * @param _amount Amount to calculate the percentage of\n     * @param _percent Percent amount (1 - 100)\n     */\n    function percentOf(uint _amount, uint _percent)\n        public\n        pure\n        returns (uint adjusted)\n    {\n        adjusted = ContractForDifferenceLibrary.percentOf(_amount, _percent);\n    }\n\n    /**\n     * Utility that given a time limit will preverve it if in the future OR\n     * set it to 0 if it's in the present or past.\n     */\n    function timeLimitFutureOrZero(\n        uint _timeLimit\n    )\n        private\n        view // not pure because of 'now'\n        returns(uint timeLimit)\n    {\n        timeLimit = (_timeLimit > now) ? _timeLimit : 0;\n    }\n\n    /**\n     * Clear all sale related state.\n     */\n    function clearSale(bool _clearBuyerSide) private {\n        if (_clearBuyerSide) {\n            buyerSaleStrikePrice = 0;\n            buyerSaleTimeLimit = 0;\n            buyerSelling = false;\n        } else {\n            sellerSaleStrikePrice = 0;\n            sellerSaleTimeLimit = 0;\n            sellerSelling = false;\n        }\n    }\n}\n",
  "sourcePath": "/home/julien/0xFutures/protocol/contracts/cfd/ContractForDifference.sol",
  "compiler": {
    "name": "solc",
    "version": "0.4.24+commit.e67f0147.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "2.0.1",
  "updatedAt": "2018-12-11T15:08:43.917Z"
}