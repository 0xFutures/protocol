{
  "contractName": "PriceFeedsInternal",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "daemonAccount",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "marketNames",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "fallback"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "bytesId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "strId",
          "type": "string"
        }
      ],
      "name": "LogPriceFeedsInternalMarketAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "marketId",
          "type": "bytes32"
        }
      ],
      "name": "LogPriceFeedsInternalMarketRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "marketId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "LogPriceFeedsInternalPush",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_marketId",
          "type": "bytes32"
        }
      ],
      "name": "isMarketActive",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isDaemon",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_daemon",
          "type": "address"
        }
      ],
      "name": "setDaemonAccount",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_marketId",
          "type": "bytes32"
        },
        {
          "name": "_value",
          "type": "uint256"
        },
        {
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "push",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_marketId",
          "type": "bytes32"
        }
      ],
      "name": "read",
      "outputs": [
        {
          "name": "value",
          "type": "uint256"
        },
        {
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_marketStrId",
          "type": "string"
        }
      ],
      "name": "addMarket",
      "outputs": [
        {
          "name": "marketId",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_marketId",
          "type": "bytes32"
        }
      ],
      "name": "removeMarket",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.6+commit.b259423e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"daemonAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"marketNames\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_marketStrId\",\"type\":\"string\"}],\"name\":\"addMarket\",\"outputs\":[{\"name\":\"marketId\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_marketId\",\"type\":\"bytes32\"}],\"name\":\"removeMarket\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_marketId\",\"type\":\"bytes32\"}],\"name\":\"read\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"timestamp\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"markets\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isDaemon\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_marketId\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"push\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_daemon\",\"type\":\"address\"}],\"name\":\"setDaemonAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_marketId\",\"type\":\"bytes32\"}],\"name\":\"isMarketActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"bytesId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"strId\",\"type\":\"string\"}],\"name\":\"LogPriceFeedsInternalMarketAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"marketId\",\"type\":\"bytes32\"}],\"name\":\"LogPriceFeedsInternalMarketRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"marketId\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogPriceFeedsInternalPush\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"addMarket(string)\":{\"params\":{\"_marketStrId\":\"String id of market something like \\\"Poloniex_BTC_ETH\\\"\"},\"return\":\"marketId bytes32 keccak256 of the _marketStrId\"},\"isOwner()\":{\"return\":\"true if `msg.sender` is the owner of the contract.\"},\"owner()\":{\"return\":\"the address of the owner.\"},\"push(bytes32,uint256,uint256)\":{\"params\":{\"_timestamp\":\"UNIX milliseconds timestamp of the read\",\"_value\":\"Read value * (10^decimals). See decimal description above.\"}},\"renounceOwnership()\":{\"details\":\"Allows the current owner to relinquish control of the contract.\"},\"transferOwnership(address)\":{\"details\":\"Allows the current owner to transfer control of the contract to a newOwner.\",\"params\":{\"newOwner\":\"The address to transfer ownership to.\"}}}},\"userdoc\":{\"methods\":{\"addMarket(string)\":{\"notice\":\"Add a new market\"},\"push(bytes32,uint256,uint256)\":{\"notice\":\"Push value and timestamp of read into the contract.\"},\"read(bytes32)\":{\"notice\":\"Read the latest value and timestamp from the contract.\"},\"removeMarket(bytes32)\":{\"notice\":\"Removes a market.\"},\"renounceOwnership()\":{\"notice\":\"Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore.\"}},\"notice\":\"Market prices feeds coming from 0xfutures managed price feeds. These are centralised feeds pushed on to the blockchain. Example: Coinbase BTCUSD price feed\"}},\"settings\":{\"compilationTarget\":{\"/home/julien/0xFutures/protocol/contracts/feeds/PriceFeedsInternal.sol\":\"PriceFeedsInternal\"},\"evmVersion\":\"constantinople\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/home/julien/0xFutures/protocol/contracts/DBC.sol\":{\"keccak256\":\"0xc9c8bf071e0f5bff796bfde919237f33136d8c18a89dec61a52a0391fc76c256\",\"urls\":[\"bzzr://b44dfa0ecd91495eb61d07322588ebc1ea50fadd8bc22464e94c3d070a6b6ea1\"]},\"/home/julien/0xFutures/protocol/contracts/feeds/PriceFeedsInternal.sol\":{\"keccak256\":\"0x73a923b47d0ef1f81948e6e24b94ca6b27a5b704c5aa3bd79559697cc8c3e11e\",\"urls\":[\"bzzr://6772987070a1b03eafefba2b04ffa09acbbd7f144edb2aac5b75bc5785e9ecbe\"]},\"openzeppelin-solidity/contracts/ownership/Ownable.sol\":{\"keccak256\":\"0x980de387a1a020a498f53d00f89fecebb12c949a17e8f160093c0303ede2b786\",\"urls\":[\"bzzr://08894efa2a557982070beda6a81a032407e70532d24bdafe80d39660c74904d9\"]}},\"version\":1}",
  "bytecode": "0x608060408190526012600155600080546001600160a01b03191633178082556001600160a01b0316917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3610b1f8061005c6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80637564912b1161009757806392f4b0b31161006657806392f4b0b314610398578063e649d78c146103c1578063f2fde38b146103e7578063f4463db51461040d576100f5565b80637564912b1461034f57806380957015146103805780638da5cb5b146103885780638f32d59b14610390576100f5565b806342fe6695116100d357806342fe6695146102825780635c5212dd146102f257806361da143914610311578063715018a614610347576100f5565b80630baeb69a146101b2578063313ce567146101d657806341955214146101f0575b6040518060400160405280601c81526020017f43616e27742063616c6c2066616c6c6261636b2066756e6374696f6e00000000815250604051600160e51b62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561017757818101518382015260200161015f565b50505050905090810190601f1680156101a45780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6101ba61042a565b604080516001600160a01b039092168252519081900360200190f35b6101de610439565b60408051918252519081900360200190f35b61020d6004803603602081101561020657600080fd5b503561043f565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561024757818101518382015260200161022f565b50505050905090810190601f1680156102745780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101de6004803603602081101561029857600080fd5b8101906020810181356401000000008111156102b357600080fd5b8201836020820111156102c557600080fd5b803590602001918460018302840111640100000000831117156102e757600080fd5b5090925090506104da565b61030f6004803603602081101561030857600080fd5b50356105b6565b005b61032e6004803603602081101561032757600080fd5b50356106a9565b6040805192835260208301919091528051918290030190f35b61030f610733565b61036c6004803603602081101561036557600080fd5b503561078e565b604080519115158252519081900360200190f35b61036c6107a3565b6101ba6107b5565b61036c6107c4565b61030f600480360360608110156103ae57600080fd5b50803590602081013590604001356107d5565b61030f600480360360208110156103d757600080fd5b50356001600160a01b0316610925565b61030f600480360360208110156103fd57600080fd5b50356001600160a01b0316610958565b61036c6004803603602081101561042357600080fd5b5035610975565b6004546001600160a01b031681565b60015481565b60036020908152600091825260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290918301828280156104d25780601f106104a7576101008083540402835291602001916104d2565b820191906000526020600020905b8154815290600101906020018083116104b557829003601f168201915b505050505081565b60006104e46107c4565b6104ed57600080fd5b8282604051602001808383808284376040805191909301818103601f19018252835280516020918201206000818152600283528481208054600160ff19909116179055600390925292902091955061054e9450909250869150859050610a12565b50807f841e82cad4a100e3997b0c3d76c329c2cee8720bf04af5e890bb904c1fa90e88848460405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a292915050565b6105be6107c4565b6105c757600080fd5b6105d081610975565b604051806060016040528060258152602001610aab60259139808261063957604051600160e51b62461bcd02815260206004820181815283516024840152835190928392604490910191908501908083836000831561017757818101518382015260200161015f565b506000838152600260209081526040808320805460ff19169055805180820182528381528083018481528785526005909352818420905181559151600192909201919091555184917f4b9ff7c6404c1f870ba7a00b727dcfd9ae5af0299f39d19dc2e4b60622f04b3d91a2505050565b6000806106b583610975565b604051806060016040528060258152602001610aab60259139808261071e57604051600160e51b62461bcd02815260206004820181815283516024840152835190928392604490910191908501908083836000831561017757818101518382015260200161015f565b506107288561098a565b935093505050915091565b61073b6107c4565b61074457600080fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60026020526000908152604090205460ff1681565b6004546001600160a01b031633145b90565b6000546001600160a01b031690565b6000546001600160a01b0316331490565b6107dd6107a3565b604051806060016040528060248152602001610ad060249139808261084657604051600160e51b62461bcd02815260206004820181815283516024840152835190928392604490910191908501908083836000831561017757818101518382015260200161015f565b5061085085610975565b604051806060016040528060258152602001610aab6025913980826108b957604051600160e51b62461bcd02815260206004820181815283516024840152835190928392604490910191908501908083836000831561017757818101518382015260200161015f565b50604080518082018252878152602080820188815260008b81526005835284902092518355516001909201919091558151888152915187928a927fa9c24b8fa6727fcb2af1b00f75ac512750449a799a5725ec59c20cbcc9944d5092918290030190a350505050505050565b61092d6107c4565b61093657600080fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6109606107c4565b61096957600080fd5b610972816109a4565b50565b60009081526002602052604090205460ff1690565b600090815260056020526040902080546001909101549091565b6001600160a01b0381166109b757600080fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610a535782800160ff19823516178555610a80565b82800160010185558215610a80579182015b82811115610a80578235825591602001919060010190610a65565b50610a8c929150610a90565b5090565b6107b291905b80821115610a8c5760008155600101610a9656fe4d61726b6574206d7573742062652061637469766520746f207075736820612076616c756543616c6c6572206d757374206265207468652072656769737465726564204461656d6f6ea165627a7a723058209474b1b9cebcf15f218a777cea789bf833f6738fb173c55d2e025864bedbd2ca0029",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c80637564912b1161009757806392f4b0b31161006657806392f4b0b314610398578063e649d78c146103c1578063f2fde38b146103e7578063f4463db51461040d576100f5565b80637564912b1461034f57806380957015146103805780638da5cb5b146103885780638f32d59b14610390576100f5565b806342fe6695116100d357806342fe6695146102825780635c5212dd146102f257806361da143914610311578063715018a614610347576100f5565b80630baeb69a146101b2578063313ce567146101d657806341955214146101f0575b6040518060400160405280601c81526020017f43616e27742063616c6c2066616c6c6261636b2066756e6374696f6e00000000815250604051600160e51b62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561017757818101518382015260200161015f565b50505050905090810190601f1680156101a45780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6101ba61042a565b604080516001600160a01b039092168252519081900360200190f35b6101de610439565b60408051918252519081900360200190f35b61020d6004803603602081101561020657600080fd5b503561043f565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561024757818101518382015260200161022f565b50505050905090810190601f1680156102745780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101de6004803603602081101561029857600080fd5b8101906020810181356401000000008111156102b357600080fd5b8201836020820111156102c557600080fd5b803590602001918460018302840111640100000000831117156102e757600080fd5b5090925090506104da565b61030f6004803603602081101561030857600080fd5b50356105b6565b005b61032e6004803603602081101561032757600080fd5b50356106a9565b6040805192835260208301919091528051918290030190f35b61030f610733565b61036c6004803603602081101561036557600080fd5b503561078e565b604080519115158252519081900360200190f35b61036c6107a3565b6101ba6107b5565b61036c6107c4565b61030f600480360360608110156103ae57600080fd5b50803590602081013590604001356107d5565b61030f600480360360208110156103d757600080fd5b50356001600160a01b0316610925565b61030f600480360360208110156103fd57600080fd5b50356001600160a01b0316610958565b61036c6004803603602081101561042357600080fd5b5035610975565b6004546001600160a01b031681565b60015481565b60036020908152600091825260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845290918301828280156104d25780601f106104a7576101008083540402835291602001916104d2565b820191906000526020600020905b8154815290600101906020018083116104b557829003601f168201915b505050505081565b60006104e46107c4565b6104ed57600080fd5b8282604051602001808383808284376040805191909301818103601f19018252835280516020918201206000818152600283528481208054600160ff19909116179055600390925292902091955061054e9450909250869150859050610a12565b50807f841e82cad4a100e3997b0c3d76c329c2cee8720bf04af5e890bb904c1fa90e88848460405180806020018281038252848482818152602001925080828437600083820152604051601f909101601f19169092018290039550909350505050a292915050565b6105be6107c4565b6105c757600080fd5b6105d081610975565b604051806060016040528060258152602001610aab60259139808261063957604051600160e51b62461bcd02815260206004820181815283516024840152835190928392604490910191908501908083836000831561017757818101518382015260200161015f565b506000838152600260209081526040808320805460ff19169055805180820182528381528083018481528785526005909352818420905181559151600192909201919091555184917f4b9ff7c6404c1f870ba7a00b727dcfd9ae5af0299f39d19dc2e4b60622f04b3d91a2505050565b6000806106b583610975565b604051806060016040528060258152602001610aab60259139808261071e57604051600160e51b62461bcd02815260206004820181815283516024840152835190928392604490910191908501908083836000831561017757818101518382015260200161015f565b506107288561098a565b935093505050915091565b61073b6107c4565b61074457600080fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60026020526000908152604090205460ff1681565b6004546001600160a01b031633145b90565b6000546001600160a01b031690565b6000546001600160a01b0316331490565b6107dd6107a3565b604051806060016040528060248152602001610ad060249139808261084657604051600160e51b62461bcd02815260206004820181815283516024840152835190928392604490910191908501908083836000831561017757818101518382015260200161015f565b5061085085610975565b604051806060016040528060258152602001610aab6025913980826108b957604051600160e51b62461bcd02815260206004820181815283516024840152835190928392604490910191908501908083836000831561017757818101518382015260200161015f565b50604080518082018252878152602080820188815260008b81526005835284902092518355516001909201919091558151888152915187928a927fa9c24b8fa6727fcb2af1b00f75ac512750449a799a5725ec59c20cbcc9944d5092918290030190a350505050505050565b61092d6107c4565b61093657600080fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6109606107c4565b61096957600080fd5b610972816109a4565b50565b60009081526002602052604090205460ff1690565b600090815260056020526040902080546001909101549091565b6001600160a01b0381166109b757600080fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610a535782800160ff19823516178555610a80565b82800160010185558215610a80579182015b82811115610a80578235825591602001919060010190610a65565b50610a8c929150610a90565b5090565b6107b291905b80821115610a8c5760008155600101610a9656fe4d61726b6574206d7573742062652061637469766520746f207075736820612076616c756543616c6c6572206d757374206265207468652072656769737465726564204461656d6f6ea165627a7a723058209474b1b9cebcf15f218a777cea789bf833f6738fb173c55d2e025864bedbd2ca0029",
  "sourceMap": "285:3879:12:-;;;;;1018:2;995:25;;515:6:17;:19;;-1:-1:-1;;;;;;515:19:17;524:10;515:19;;;;-1:-1:-1;;;;;582:6:17;;549:40;;515:6;;549:40;285:3879:12;;;;;;",
  "deployedSourceMap": "285:3879:12:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;285:3879:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4138:15;;;;;;;;;;;;;;;;;4131:23;;-1:-1:-1;;;;;4131:23:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;4131:23:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1496:28;;;:::i;:::-;;;;-1:-1:-1;;;;;1496:28:12;;;;;;;;;;;;;;995:25;;;:::i;:::-;;;;;;;;;;;;;;;;1369:45;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1369:45:12;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;1369:45:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3316:343;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3316:343:12;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;3316:343:12;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;3316:343:12;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;-1:-1;3316:343:12;;-1:-1:-1;3316:343:12;-1:-1:-1;3316:343:12;:::i;3706:360::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3706:360:12;;:::i;:::-;;2662:233;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2662:233:12;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1347:137:17;;;:::i;1112:39:12:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1112:39:12;;:::i;:::-;;;;;;;;;;;;;;;;;;1531:98;;;:::i;659:77:17:-;;;:::i;979:90::-;;;:::i;2192:386:12:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2192:386:12;;;;;;;;;;;;:::i;1635:100::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1635:100:12;-1:-1:-1;;;;;1635:100:12;;:::i;1655:107:17:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1655:107:17;-1:-1:-1;;;;;1655:107:17;;:::i;1158:112:12:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1158:112:12;;:::i;1496:28::-;;;-1:-1:-1;;;;;1496:28:12;;:::o;995:25::-;;;;:::o;1369:45::-;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1369:45:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;3316:343::-;3417:16;863:9:17;:7;:9::i;:::-;855:18;;;;;;3487:12:12;;3470:30;;;;;;;30:3:-1;22:6;14;1:33;3470:30:12;;;45:16:-1;;;;26:21;;;-1:-1;;22:32;6:49;;3470:30:12;;3460:41;;49:4:-1;3460:41:12;;;;3511:17;;;;:7;:17;;;;;:24;;3531:4;-1:-1:-1;;3511:24:12;;;;;;3545:11;:21;;;;;;3460:41;;-1:-1:-1;3545:36:12;;-1:-1:-1;3545:21:12;;-1:-1:-1;3569:12:12;;-1:-1:-1;3569:12:12;;-1:-1:-1;3545:36:12;:::i;:::-;;3629:8;3596:56;3639:12;;3596:56;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;;74:27;3596:56:12;;137:4:-1;117:14;;;-1:-1;;113:30;157:16;;;3596:56:12;;;;-1:-1:-1;3596:56:12;;-1:-1:-1;;;;3596:56:12;3316:343;;;;:::o;3706:360::-;863:9:17;:7;:9::i;:::-;855:18;;;;;;3799:25:12;3814:9;3799:14;:25::i;:::-;3826:28;;;;;;;;;;;;;;;;;304:6:0;293:9;285:26;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;3891:5:12;3870:18;;;:7;:18;;;;;;;;:26;;-1:-1:-1;;3870:26:12;;;3930:15;;;;;;;;;;;;;;;;3906:21;;;:10;:21;;;;;;:39;;;;;;3870:26;3906:39;;;;;;;;3960:45;3878:9;;3960:45;;;883:1:17;;3706:360:12;:::o;2662:233::-;2816:10;2828:14;2742:25;2757:9;2742:14;:25::i;:::-;2769:28;;;;;;;;;;;;;;;;;304:6:0;293:9;285:26;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;2865:23:12;2878:9;2865:12;:23::i;:::-;2858:30;;;;2662:233;;;;;:::o;1347:137:17:-;863:9;:7;:9::i;:::-;855:18;;;;;;1445:1;1429:6;;1408:40;;-1:-1:-1;;;;;1429:6:17;;;;1408:40;;1445:1;;1408:40;1475:1;1458:19;;-1:-1:-1;;;;;;1458:19:17;;;1347:137::o;1112:39:12:-;;;;;;;;;;;;;;;:::o;1531:98::-;1609:13;;-1:-1:-1;;;;;1609:13:12;1595:10;:27;1531:98;;:::o;659:77:17:-;697:7;723:6;-1:-1:-1;;;;;723:6:17;659:77;:::o;979:90::-;1019:4;1056:6;-1:-1:-1;;;;;1056:6:17;1042:10;:20;;979:90::o;2192:386:12:-;2319:10;:8;:10::i;:::-;2331:26;;;;;;;;;;;;;;;;;304:6:0;293:9;285:26;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;;2376:25:12;2391:9;2376:14;:25::i;:::-;2403:28;;;;;;;;;;;;;;;;;304:6:0;293:9;285:26;;;;-1:-1:-1;;;;;285:26:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;285:26:0;-1:-1:-1;2471:29:12;;;;;;;;;;;;;;;;;;-1:-1:-1;2447:21:12;;;:10;:21;;;;;:53;;;;;;;;;;;;;2515:56;;;;;;;2489:10;;2458:9;;2515:56;;;;;;;;;321:1:0;;2192:386:12;;;;;:::o;1635:100::-;863:9:17;:7;:9::i;:::-;855:18;;;;;;1705:13:12;:23;;-1:-1:-1;;;;;;1705:23:12;-1:-1:-1;;;;;1705:23:12;;;;;;;;;;1635:100::o;1655:107:17:-;863:9;:7;:9::i;:::-;855:18;;;;;;1727:28;1746:8;1727:18;:28::i;:::-;1655:107;:::o;1158:112:12:-;1222:4;1245:18;;;:7;:18;;;;;;;;;1158:112::o;2901:225::-;2989:10;3039:21;;;:10;:21;;;;;:27;;3088:31;;;;;3039:27;;2901:225::o;1906:183:17:-;-1:-1:-1;;;;;1979:22:17;;1971:31;;;;;;2038:6;;;2017:38;;-1:-1:-1;;;;;2017:38:17;;;;2038:6;;;2017:38;;;2065:6;:17;;-1:-1:-1;;;;;;2065:17:17;-1:-1:-1;;;;;2065:17:17;;;;;;;;;;1906:183::o;285:3879:12:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;285:3879:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;285:3879:12;;;-1:-1:-1;285:3879:12;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;",
  "source": "pragma solidity ^0.5.0;\n\nimport \"openzeppelin-solidity/contracts/ownership/Ownable.sol\";\nimport \"../DBC.sol\";\n\n/**\n * Market prices feeds coming from 0xfutures managed price feeds.\n * These are centralised feeds pushed on to the blockchain.\n * Example: Coinbase BTCUSD price feed\n */\n\ncontract PriceFeedsInternal is DBC, Ownable {\n\n    event LogPriceFeedsInternalMarketAdded(bytes32 indexed bytesId, string strId);\n    event LogPriceFeedsInternalMarketRemoved(bytes32 indexed marketId);\n    event LogPriceFeedsInternalPush(bytes32 indexed marketId, uint indexed timestamp, uint value);\n\n    string constant REASON_MUST_BE_FROM_DAEMON = \"Caller must be the registered Daemon\";\n    string constant REASON_MUST_BE_ACTIVE_MARKET = \"Market must be active to push a value\";\n    string constant REASON_FALLBACK = \"Can't call fallback function\";\n\n    /**\n     * Prices are stored as uint shifted for 18 decimals places.\n     *\n     * For example 1.23456789 is stored as 1234567890000000000.\n     */\n    uint public decimals = 18;\n\n\n    /**\n     * Active markets - market active if markets[market_id] is true\n     */\n    mapping(bytes32 => bool) public markets;\n\n    function isMarketActive(bytes32 _marketId) public view returns (bool) {\n        return markets[_marketId];\n    }\n\n    /**\n     * Mapping from the market id to the string form. eg. \"Poloniex_BTC_ETH\"\n     */\n    mapping(bytes32 => string) public marketNames;\n\n\n    /**\n     * Daemon - account that pushes new price feed values\n     */\n    address public daemonAccount;\n\n    function isDaemon() public view returns (bool) {\n        return msg.sender == daemonAccount;\n    }\n\n    function setDaemonAccount(address _daemon) public onlyOwner {\n        daemonAccount = _daemon;\n    }\n\n\n    /**\n     * Feed data - by market\n     */\n    struct DataPoint {\n        uint value;       // original value * (10**decimals)\n        uint timestamp;   // UNIX milliseconds\n    }\n    mapping(bytes32 => DataPoint) latestData;\n\n\n    /**\n     * Push value and timestamp of read into the contract.\n     * @param _value Read value * (10^decimals). See decimal description above.\n     * @param _timestamp UNIX milliseconds timestamp of the read\n     */\n    function push(\n        bytes32 _marketId,\n        uint _value,\n        uint _timestamp\n    )\n        external\n        pre_cond(isDaemon(), REASON_MUST_BE_FROM_DAEMON)\n        pre_cond(isMarketActive(_marketId), REASON_MUST_BE_ACTIVE_MARKET)\n    {\n        latestData[_marketId] = DataPoint(_value, _timestamp);\n        emit LogPriceFeedsInternalPush(_marketId, _timestamp, _value);\n    }\n\n    /**\n     * Read the latest value and timestamp from the contract.\n     */\n    function read(bytes32 _marketId)\n        external\n        view\n        pre_cond(isMarketActive(_marketId), REASON_MUST_BE_ACTIVE_MARKET)\n        returns (uint value, uint timestamp)\n    {\n        return readInternal(_marketId);\n    }\n\n    function readInternal(bytes32 _marketId)\n        internal\n        view\n        returns (uint value, uint timestamp)\n    {\n        value = latestData[_marketId].value;\n        timestamp = latestData[_marketId].timestamp;\n    }\n\n\n    /**\n     * Add a new market\n     * @param _marketStrId String id of market something like \"Poloniex_BTC_ETH\"\n     * @return marketId bytes32 keccak256 of the _marketStrId\n     */\n    function addMarket(string calldata _marketStrId)\n        external\n        onlyOwner\n        returns (bytes32 marketId)\n    {\n        marketId = keccak256(abi.encodePacked(_marketStrId));\n        markets[marketId] = true;\n        marketNames[marketId] = _marketStrId;\n        emit LogPriceFeedsInternalMarketAdded(marketId, _marketStrId);\n    }\n\n    /**\n     * Removes a market.\n     */\n    function removeMarket(bytes32 _marketId)\n        external\n        onlyOwner\n        pre_cond(isMarketActive(_marketId), REASON_MUST_BE_ACTIVE_MARKET)\n    {\n        markets[_marketId] = false;\n        latestData[_marketId] = DataPoint(0, 0);\n        emit LogPriceFeedsInternalMarketRemoved(_marketId);\n        // TODO: provide a withdraw and mark balances\n    }\n\n    // Disable the fallback\n    function () external {\n        revert(REASON_FALLBACK);\n    }\n\n}",
  "sourcePath": "/home/julien/0xFutures/protocol/contracts/feeds/PriceFeedsInternal.sol",
  "compiler": {
    "name": "solc",
    "version": "0.5.6+commit.b259423e.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.8",
  "updatedAt": "2019-07-03T10:16:59.774Z",
  "devdoc": {
    "methods": {
      "addMarket(string)": {
        "params": {
          "_marketStrId": "String id of market something like \"Poloniex_BTC_ETH\""
        },
        "return": "marketId bytes32 keccak256 of the _marketStrId"
      },
      "isOwner()": {
        "return": "true if `msg.sender` is the owner of the contract."
      },
      "owner()": {
        "return": "the address of the owner."
      },
      "push(bytes32,uint256,uint256)": {
        "params": {
          "_timestamp": "UNIX milliseconds timestamp of the read",
          "_value": "Read value * (10^decimals). See decimal description above."
        }
      },
      "renounceOwnership()": {
        "details": "Allows the current owner to relinquish control of the contract."
      },
      "transferOwnership(address)": {
        "details": "Allows the current owner to transfer control of the contract to a newOwner.",
        "params": {
          "newOwner": "The address to transfer ownership to."
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "addMarket(string)": {
        "notice": "Add a new market"
      },
      "push(bytes32,uint256,uint256)": {
        "notice": "Push value and timestamp of read into the contract."
      },
      "read(bytes32)": {
        "notice": "Read the latest value and timestamp from the contract."
      },
      "removeMarket(bytes32)": {
        "notice": "Removes a market."
      },
      "renounceOwnership()": {
        "notice": "Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore."
      }
    },
    "notice": "Market prices feeds coming from 0xfutures managed price feeds. These are centralised feeds pushed on to the blockchain. Example: Coinbase BTCUSD price feed"
  }
}